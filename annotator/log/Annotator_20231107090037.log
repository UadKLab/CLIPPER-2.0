2023-11-07 09:00:37,033 [INFO] 
2023-11-07 09:00:37,033 [INFO] Annotator started at 2023-11-07 09:00:37.
2023-11-07 09:00:37,033 [DEBUG] Arguments: {'infile': '../tests/tests for paper/MMP9_dimethyl_peptide_groups.xlsx', 'infile_type': 'infer', 'preannotated': False, 'conditionfile': '../tests/tests for paper/cond_MMP9.txt', 'alpha': 0.05, 'software': 'infer', 'level': 'all', 'dropna': False, 'fillna': None, 'sleeptime': 0.2, 'noexo': False, 'nomerops': False, 'calcstructure': None, 'threadingcores': 8, 'stat': True, 'stat_pairwise': True, 'significance': 'all', 'multipletesting': False, 'multipletestingmethod': 'fdr_bh', 'visualize': True, 'logo': None, 'logo_fc': 3, 'cleavagesitesize': 4, 'volcano_foldchange': 1.5, 'pseudocounts': True, 'cleavagevis': None, 'enrichment': True, 'pathway': True, 'proteasefile': None, 'output_name': 'MMP9', 'output_filetype': 'xlsx', 'separate': False, 'pymol_verbose': False}
2023-11-07 09:00:37,033 [INFO] Startup complete!

2023-11-07 09:00:37,033 [INFO] Reading file...
2023-11-07 09:00:37,033 [INFO] Input is excel
2023-11-07 09:00:39,218 [INFO] Read dataframe.
2023-11-07 09:00:39,219 [INFO] Read input with 17536 peptides.
2023-11-07 09:00:39,219 [INFO] Input software is pd
2023-11-07 09:00:39,230 [DEBUG] Converted values in Abundances (Grouped): Ctrl to numeric type
2023-11-07 09:00:39,241 [DEBUG] Converted values in Abundances (Grouped): MMP9 to numeric type
2023-11-07 09:00:39,241 [INFO] Finished converting quantification values to floats.
2023-11-07 09:00:39,250 [DEBUG] Patterns are: {'acc': 'Master Protein Accessions', 'mod': 'Modifications', 'nterm': '\\[N-Term\\]', 'seq': 'Annotated Sequence', 'amino': '\\.[A-Z]*(B|J|O|U|X|Z)[A-Z]*\\.', 'quant': 'Abundances \\(Grouped\\):.*', 'label': 'Dimethyl', 'nterm_label': 'Dimethyl \\[N-Term\\]', 'lysine_label': 'Dimethyl \\[K'}
2023-11-07 09:00:39,250 [INFO] Successfully generated indexing patterns for pd input. See logfile for the found patterns.
2023-11-07 09:00:39,250 [INFO] Format check complete.

2023-11-07 09:00:39,251 [INFO] Initialization complete!

2023-11-07 09:00:39,251 [INFO] Filtering and sanitizing input...
2023-11-07 09:00:39,255 [WARNING] There were rows with no accession numbers in the loaded file, please check the log file for further information
2023-11-07 09:00:39,256 [DEBUG] Empty accession rows: 8762
2023-11-07 09:00:39,256 [DEBUG] Empty accession rows: 14402
2023-11-07 09:00:39,256 [DEBUG] Empty accession rows: 16132
2023-11-07 09:00:39,265 [DEBUG] Starting annotation of peptides...
2023-11-07 09:00:39,269 [INFO] Initialized annotation dataframe.

2023-11-07 09:00:39,269 [INFO] Reading MEROPS data..
2023-11-07 09:00:39,810 [INFO] Read MEROPS data
2023-11-07 09:00:39,810 [INFO] Previous annotation of peptides detected, and annotation will be loaded from file.

2023-11-07 09:00:41,825 [INFO] Loaded annotation from file.

2023-11-07 09:00:41,825 [INFO] Starting annotation of Protein Atlas data...
2023-11-07 09:00:41,825 [INFO] Reading Protein Atlas data..
2023-11-07 09:00:42,063 [INFO] Read Protein Atlas data.
2023-11-07 09:00:42,065 [WARNING] Duplicates found in 'Uniprot' column of 'protein_atlas_sub'. Dropping duplicates.
2023-11-07 09:00:42,076 [INFO] Finished annotation of Protein Atlas data.

2023-11-07 09:00:42,076 [INFO] Starting proteoform check...
2023-11-07 09:00:42,080 [INFO] Finished proteoform check.
2023-11-07 09:00:42,080 [INFO] Starting exopeptidase activity check...
2023-11-07 09:00:42,222 [DEBUG] 1 HSQEQGHPQTGCECEDGPDGQEMDPPNPEEVKTPEEGEKQSQC SQEQGHPQTGCECEDGPDGQEMDPPNPEEVKTPEEGEKQSQC
2023-11-07 09:00:42,373 [DEBUG] 1 CLEHGIQPDGQMPSDKTIGGGDDSFNTFFSETGAGKHVPR LEHGIQPDGQMPSDKTIGGGDDSFNTFFSETGAGKHVPR
2023-11-07 09:00:42,690 [DEBUG] 1 YVALDFEQEMATAASSSSLEKSYELPDGQVITIGNER VALDFEQEMATAASSSSLEKSYELPDGQVITIGNER
2023-11-07 09:00:42,760 [DEBUG] 2 TRAEGSDVANAVLDGADCIMLSGETAKGDYPLEAVR AEGSDVANAVLDGADCIMLSGETAKGDYPLEAVR
2023-11-07 09:00:42,764 [DEBUG] 1 TRAEGSDVANAVLDGADCIMLSGETAKGDYPLEAVR EGSDVANAVLDGADCIMLSGETAKGDYPLEAVR
2023-11-07 09:00:42,987 [DEBUG] 1 ASTGAPQSSAVAAAAATTTATTTTTSSGGHPLEFLR STGAPQSSAVAAAAATTTATTTTTSSGGHPLEFLR
2023-11-07 09:00:43,002 [DEBUG] 1 KQSLGELIGTLNAAKVPADTEVVCAPPTAYIDFAR QSLGELIGTLNAAKVPADTEVVCAPPTAYIDFAR
2023-11-07 09:00:43,010 [DEBUG] 2 IKGLTEGLHGFHVHEFGDNTAGCTSAGPHFNPLSR GLTEGLHGFHVHEFGDNTAGCTSAGPHFNPLSR
2023-11-07 09:00:43,030 [DEBUG] 1 KEAESCDCLQGFQLTHSLGGGTGSGMGTLLLSKIR EAESCDCLQGFQLTHSLGGGTGSGMGTLLLSKIR
2023-11-07 09:00:43,090 [DEBUG] 2 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,091 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EGGEEEEEEEEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,091 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR GGEEEEEEEEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,092 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR GEEEEEEEEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,092 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EEEEEEEEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,093 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EEEEEEEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,094 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EEEEEEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,094 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EEEEEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,095 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EEEEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,095 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EEEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,096 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EEGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,096 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EGDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,097 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR GDGEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,097 [DEBUG] 2 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR GEEEDGDEDEEAESATGKR
2023-11-07 09:00:43,098 [DEBUG] 2 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EEDGDEDEEAESATGKR
2023-11-07 09:00:43,099 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR EDGDEDEEAESATGKR
2023-11-07 09:00:43,099 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR DGDEDEEAESATGKR
2023-11-07 09:00:43,100 [DEBUG] 1 EEEEGGEEEEEEEEGDGEEEDGDEDEEAESATGKR GDEDEEAESATGKR
2023-11-07 09:00:43,157 [DEBUG] 1 RYVQPPEMIGPMRPEQFSDEVEPATPEEGEPATQR YVQPPEMIGPMRPEQFSDEVEPATPEEGEPATQR
2023-11-07 09:00:43,179 [DEBUG] 1 RYVEPPEMIGPMRPEQFSDEVEPATPEEGEPATQR YVEPPEMIGPMRPEQFSDEVEPATPEEGEPATQR
2023-11-07 09:00:43,237 [DEBUG] 1 LGLGIDEDEVAAEEPNAAVPDEIPPLEGDEDASR GLGIDEDEVAAEEPNAAVPDEIPPLEGDEDASR
2023-11-07 09:00:43,269 [DEBUG] 2 GNQIGAKFWEVISDEHGIDPTGTYHGDSDLQLDR QIGAKFWEVISDEHGIDPTGTYHGDSDLQLDR
2023-11-07 09:00:43,277 [DEBUG] 2 GNQIGAKFWEVISDEHGIDPTGTYHGDSDLQLER QIGAKFWEVISDEHGIDPTGTYHGDSDLQLER
2023-11-07 09:00:43,690 [DEBUG] 1 ASAKVSDSISAQYPVVDHEFDAVVVGAGGAGLR SAKVSDSISAQYPVVDHEFDAVVVGAGGAGLR
2023-11-07 09:00:43,869 [DEBUG] 1 GSYGDLGGPIITTQVTIPKDLAGSIIGKGGQR SYGDLGGPIITTQVTIPKDLAGSIIGKGGQR
2023-11-07 09:00:43,964 [DEBUG] 1 EIAENITKHLPDNECIEKVEIAGPGFINVHLR IAENITKHLPDNECIEKVEIAGPGFINVHLR
2023-11-07 09:00:43,968 [DEBUG] 1 CEFQDAYVLLSEKKISSIQSIVPALEIANAHR EFQDAYVLLSEKKISSIQSIVPALEIANAHR
2023-11-07 09:00:44,021 [DEBUG] 2 YKNIGAKLVQDVANNTNEEAGDGTTTATVLAR NIGAKLVQDVANNTNEEAGDGTTTATVLAR
2023-11-07 09:00:44,022 [DEBUG] 1 YKNIGAKLVQDVANNTNEEAGDGTTTATVLAR IGAKLVQDVANNTNEEAGDGTTTATVLAR
2023-11-07 09:00:44,048 [DEBUG] 1 FVFGQSGAGNNWAKGHYTEGAELVDSVLDVVR VFGQSGAGNNWAKGHYTEGAELVDSVLDVVR
2023-11-07 09:00:44,184 [DEBUG] 1 KELASQPDVDGFLVGGASLKPEFVDIINAKQ ELASQPDVDGFLVGGASLKPEFVDIINAKQ
2023-11-07 09:00:44,334 [DEBUG] 1 YSYRPGPGAGPGPAAGAALPDQSFLWNVFQR SYRPGPGAGPGPAAGAALPDQSFLWNVFQR
2023-11-07 09:00:44,335 [DEBUG] 1 YSYRPGPGAGPGPAAGAALPDQSFLWNVFQR YRPGPGAGPGPAAGAALPDQSFLWNVFQR
2023-11-07 09:00:44,335 [DEBUG] 2 YSYRPGPGAGPGPAAGAALPDQSFLWNVFQR PGPGAGPGPAAGAALPDQSFLWNVFQR
2023-11-07 09:00:44,370 [DEBUG] 1 CEKGTTAVLTEKITPLEIEVLEETVQTMDTS EKGTTAVLTEKITPLEIEVLEETVQTMDTS
2023-11-07 09:00:44,520 [DEBUG] 1 NMSVIAHVDHGKSTLTDSLVCKAGIIASAR MSVIAHVDHGKSTLTDSLVCKAGIIASAR
2023-11-07 09:00:44,536 [DEBUG] 1 RENIQKSLAGSSGPGASSGTSGDHGELVVR ENIQKSLAGSSGPGASSGTSGDHGELVVR
2023-11-07 09:00:44,538 [DEBUG] 2 RENIQKSLAGSSGPGASSGTSGDHGELVVR IQKSLAGSSGPGASSGTSGDHGELVVR
2023-11-07 09:00:44,545 [DEBUG] 1 REPTSSEQGGLEGSGSAAGEGKPALSEEER EPTSSEQGGLEGSGSAAGEGKPALSEEER
2023-11-07 09:00:44,918 [DEBUG] 1 TLVAQKIDLPEYQGEPDEISIQKCQEAVR LVAQKIDLPEYQGEPDEISIQKCQEAVR
2023-11-07 09:00:44,955 [DEBUG] 1 KDGNASGTTLLEALDCILPPTRPTDKPLR DGNASGTTLLEALDCILPPTRPTDKPLR
2023-11-07 09:00:45,026 [DEBUG] 1 NYQQNYQNSESGEKNEGSESAPEGQAQQR YQQNYQNSESGEKNEGSESAPEGQAQQR
2023-11-07 09:00:45,378 [DEBUG] 1 SISSSSFGAEPSAPGGGGSPGACPALGTK ISSSSFGAEPSAPGGGGSPGACPALGTK
2023-11-07 09:00:45,432 [DEBUG] 2 IKVDKGVVPLAGTDGETTTQGLDGLSER VDKGVVPLAGTDGETTTQGLDGLSER
2023-11-07 09:00:45,445 [DEBUG] 2 IKVDKGVVPLAGTNGETTTQGLDGLSER VDKGVVPLAGTNGETTTQGLDGLSER
2023-11-07 09:00:45,568 [DEBUG] 1 QSGAGNNWAKGHYTEGAELVDSVLDVVR SGAGNNWAKGHYTEGAELVDSVLDVVR
2023-11-07 09:00:45,575 [DEBUG] 1 RGPPQEEEEEEDEEEEATKEDAEAPGIR GPPQEEEEEEDEEEEATKEDAEAPGIR
2023-11-07 09:00:45,663 [DEBUG] 2 MKGNDISSGTVLSDYVGSGPPKGTGLHR GNDISSGTVLSDYVGSGPPKGTGLHR
2023-11-07 09:00:45,905 [DEBUG] 1 QIAAKIGGDAATTVNNSTPDFGFGGQKR IAAKIGGDAATTVNNSTPDFGFGGQKR
2023-11-07 09:00:46,046 [DEBUG] 1 QQVAPTDDETGKELVLALYDYQEKSPR QVAPTDDETGKELVLALYDYQEKSPR
2023-11-07 09:00:46,131 [DEBUG] 1 LTGSSAQEEASGVALGEAPDHSYESLR TGSSAQEEASGVALGEAPDHSYESLR
2023-11-07 09:00:46,132 [DEBUG] 1 LTGSSAQEEASGVALGEAPDHSYESLR GSSAQEEASGVALGEAPDHSYESLR
2023-11-07 09:00:46,296 [DEBUG] 1 YHVQESLQDEGAEPTGYSAELSSEGIR HVQESLQDEGAEPTGYSAELSSEGIR
2023-11-07 09:00:46,427 [DEBUG] 2 MLNKPIEEIIVQNGKVIGVKSEGEIAR NKPIEEIIVQNGKVIGVKSEGEIAR
2023-11-07 09:00:46,753 [DEBUG] 1 AQEAPGQAEPPAAAEVQGAGNENEPR QEAPGQAEPPAAAEVQGAGNENEPR
2023-11-07 09:00:46,876 [DEBUG] 1 AVLDGADCIMLSGETAKGDYPLEAVR VLDGADCIMLSGETAKGDYPLEAVR
2023-11-07 09:00:46,956 [DEBUG] 1 EEEEEEEEEEEEDEEEEEGLSQSISR EEEEEEEEEEEDEEEEEGLSQSISR
2023-11-07 09:00:46,975 [DEBUG] 1 KLVQDVANNTNEEAGDGTTTATVLAR LVQDVANNTNEEAGDGTTTATVLAR
2023-11-07 09:00:47,247 [DEBUG] 2 QKAMQDAEVSKSDIGEVILVGGMTR AMQDAEVSKSDIGEVILVGGMTR
2023-11-07 09:00:47,271 [DEBUG] 2 TFVNHPQVSALLGEEDEEALHYLTR VNHPQVSALLGEEDEEALHYLTR
2023-11-07 09:00:47,451 [DEBUG] 2 ETKNVASGGGGVGDGVQEPTTGNWR KNVASGGGGVGDGVQEPTTGNWR
2023-11-07 09:00:47,483 [DEBUG] 1 YSLPPHQKVPLPSLSPTMQAGTIAR SLPPHQKVPLPSLSPTMQAGTIAR
2023-11-07 09:00:47,500 [DEBUG] 1 RVYFQSPPGAAGEGPGGADDEGPVR VYFQSPPGAAGEGPGGADDEGPVR
2023-11-07 09:00:47,501 [DEBUG] 1 RVYFQSPPGAAGEGPGGADDEGPVR YFQSPPGAAGEGPGGADDEGPVR
2023-11-07 09:00:47,502 [DEBUG] 1 RVYFQSPPGAAGEGPGGADDEGPVR FQSPPGAAGEGPGGADDEGPVR
2023-11-07 09:00:47,824 [DEBUG] 2 GKGISCMNTTLSESPFKCDPDAAR GISCMNTTLSESPFKCDPDAAR
2023-11-07 09:00:47,871 [DEBUG] 2 GCGPEKDHVYLQLHHLPPEQLATR GPEKDHVYLQLHHLPPEQLATR
2023-11-07 09:00:47,936 [DEBUG] 1 SLAGSSGPGASSGTSGDHGELVVR LAGSSGPGASSGTSGDHGELVVR
2023-11-07 09:00:47,937 [DEBUG] 1 SLAGSSGPGASSGTSGDHGELVVR AGSSGPGASSGTSGDHGELVVR
2023-11-07 09:00:47,938 [DEBUG] 2 SLAGSSGPGASSGTSGDHGELVVR SSGPGASSGTSGDHGELVVR
2023-11-07 09:00:47,960 [DEBUG] 2 MMCGAPSATQPATAETQHIADQVR CGAPSATQPATAETQHIADQVR
2023-11-07 09:00:47,961 [DEBUG] 1 MMCGAPSATQPATAETQHIADQVR GAPSATQPATAETQHIADQVR
2023-11-07 09:00:47,978 [DEBUG] 1 RFDDAVVQSDMKHWPFMVVNDAGR FDDAVVQSDMKHWPFMVVNDAGR
2023-11-07 09:00:48,041 [DEBUG] 1 ISSSKGSLGGGFSSGGFSGGSFSR SSSKGSLGGGFSSGGFSGGSFSR
2023-11-07 09:00:48,090 [DEBUG] 1 ELRVAPEEHPTLLTEAPLNPKANR LRVAPEEHPTLLTEAPLNPKANR
2023-11-07 09:00:48,091 [DEBUG] 1 ELRVAPEEHPTLLTEAPLNPKANR RVAPEEHPTLLTEAPLNPKANR
2023-11-07 09:00:48,243 [DEBUG] 1 AFGESSTESDEEEEEGCGHTHCVR FGESSTESDEEEEEGCGHTHCVR
2023-11-07 09:00:48,280 [DEBUG] 2 ANQASETAVAKNQALKEAGVFVPR QASETAVAKNQALKEAGVFVPR
2023-11-07 09:00:48,343 [DEBUG] 1 GVMGGQSAGPQHTEAETIQKLCDR VMGGQSAGPQHTEAETIQKLCDR
2023-11-07 09:00:48,365 [DEBUG] 2 IRKDLYANNVLSGGTTMYPGIADR KDLYANNVLSGGTTMYPGIADR
2023-11-07 09:00:48,507 [DEBUG] 1 MHSSAIPLDFDVSSPLTYGTPSSR HSSAIPLDFDVSSPLTYGTPSSR
2023-11-07 09:00:48,507 [DEBUG] 1 MHSSAIPLDFDVSSPLTYGTPSSR SSAIPLDFDVSSPLTYGTPSSR
2023-11-07 09:00:48,752 [DEBUG] 1 HQGVMVGMGQKDSYVGDEAQSKR QGVMVGMGQKDSYVGDEAQSKR
2023-11-07 09:00:48,755 [DEBUG] 1 HQGVMVGMGQKDSYVGDEAQSKR GVMVGMGQKDSYVGDEAQSKR
2023-11-07 09:00:48,756 [DEBUG] 1 HQGVMVGMGQKDSYVGDEAQSKR VMVGMGQKDSYVGDEAQSKR
2023-11-07 09:00:48,757 [DEBUG] 2 HQGVMVGMGQKDSYVGDEAQSKR VGMGQKDSYVGDEAQSKR
2023-11-07 09:00:48,758 [DEBUG] 1 HQGVMVGMGQKDSYVGDEAQSKR GMGQKDSYVGDEAQSKR
2023-11-07 09:00:48,759 [DEBUG] 1 HQGVMVGMGQKDSYVGDEAQSKR MGQKDSYVGDEAQSKR
2023-11-07 09:00:48,759 [DEBUG] 1 HQGVMVGMGQKDSYVGDEAQSKR GQKDSYVGDEAQSKR
2023-11-07 09:00:48,862 [DEBUG] 2 QQNGIVPIVEPEILPDGDHDLKR NGIVPIVEPEILPDGDHDLKR
2023-11-07 09:00:48,863 [DEBUG] 1 QQNGIVPIVEPEILPDGDHDLKR GIVPIVEPEILPDGDHDLKR
2023-11-07 09:00:49,030 [DEBUG] 1 SSSSLEKSYELPDGQVITIGNER SSSLEKSYELPDGQVITIGNER
2023-11-07 09:00:49,203 [DEBUG] 1 CLSAPKTDMDNQIVVSDYAQMDR LSAPKTDMDNQIVVSDYAQMDR
2023-11-07 09:00:49,305 [DEBUG] 1 FKVGINYQPPTVVPGGDLAKVQR KVGINYQPPTVVPGGDLAKVQR
2023-11-07 09:00:49,307 [DEBUG] 1 FKVGINYQPPTVVPGGDLAKVQR VGINYQPPTVVPGGDLAKVQR
2023-11-07 09:00:49,381 [DEBUG] 1 AILGVSLAVCKAGAVEKGVPLYR ILGVSLAVCKAGAVEKGVPLYR
2023-11-07 09:00:49,413 [DEBUG] 1 ALMLQGVDLLADAVAVTMGPKGR LMLQGVDLLADAVAVTMGPKGR
2023-11-07 09:00:49,415 [DEBUG] 2 ALMLQGVDLLADAVAVTMGPKGR LQGVDLLADAVAVTMGPKGR
2023-11-07 09:00:49,531 [DEBUG] 1 CQEVISWLDANTLAEKDEFEHKR QEVISWLDANTLAEKDEFEHKR
2023-11-07 09:00:49,610 [DEBUG] 1 HQGVMVGMGQKDCYVGDEAQSKR QGVMVGMGQKDCYVGDEAQSKR
2023-11-07 09:00:49,620 [DEBUG] 1 MVGVKPVGSDPDFQPELSGAGSR VGVKPVGSDPDFQPELSGAGSR
2023-11-07 09:00:49,683 [DEBUG] 2 AYSIQGQHTISPLDLAKLNQVAR SIQGQHTISPLDLAKLNQVAR
2023-11-07 09:00:49,779 [DEBUG] 2 LAASAAAVDAGMAMAGQSPVLR ASAAAVDAGMAMAGQSPVLR
2023-11-07 09:00:49,931 [DEBUG] 1 GIFPVLCKDPVQEAWAEDVDLR IFPVLCKDPVQEAWAEDVDLR
2023-11-07 09:00:50,073 [DEBUG] 1 GQKVLDSGAPIKIPVGPETLGR QKVLDSGAPIKIPVGPETLGR
2023-11-07 09:00:50,073 [DEBUG] 2 GQKVLDSGAPIKIPVGPETLGR VLDSGAPIKIPVGPETLGR
2023-11-07 09:00:50,124 [DEBUG] 2 SHELSDFGLESTAGEIPVVAIR ELSDFGLESTAGEIPVVAIR
2023-11-07 09:00:50,182 [DEBUG] 1 RVAPEEHPVLLTEAPLNPKANR VAPEEHPVLLTEAPLNPKANR
2023-11-07 09:00:50,185 [DEBUG] 1 RVAPEEHPVLLTEAPLNPKANR APEEHPVLLTEAPLNPKANR
2023-11-07 09:00:50,186 [DEBUG] 1 RVAPEEHPVLLTEAPLNPKANR PEEHPVLLTEAPLNPKANR
2023-11-07 09:00:50,218 [DEBUG] 2 QKAQQVSQGLDVLTAKVENAAR AQQVSQGLDVLTAKVENAAR
2023-11-07 09:00:50,520 [DEBUG] 1 EVKSTNGDTFLGGEDFDQALLR VKSTNGDTFLGGEDFDQALLR
2023-11-07 09:00:50,521 [DEBUG] 2 EVKSTNGDTFLGGEDFDQALLR STNGDTFLGGEDFDQALLR
2023-11-07 09:00:50,636 [DEBUG] 1 DFVAPHLAQPTGSQSPPPGSKR FVAPHLAQPTGSQSPPPGSKR
2023-11-07 09:00:50,649 [DEBUG] 1 RQLFHPEQLITGKEDAANNYAR QLFHPEQLITGKEDAANNYAR
2023-11-07 09:00:50,717 [DEBUG] 1 YLGKTVTNAVVTVPAYFNDSQR LGKTVTNAVVTVPAYFNDSQR
2023-11-07 09:00:50,941 [DEBUG] 1 MAPGQLALFSVSDKTGLVEFAR APGQLALFSVSDKTGLVEFAR
2023-11-07 09:00:50,976 [DEBUG] 1 CGVSIGEDGPSQMALEDLAMFR GVSIGEDGPSQMALEDLAMFR
2023-11-07 09:00:51,059 [DEBUG] 1 GYMAAKKHLEINPDHSIIETLR YMAAKKHLEINPDHSIIETLR
2023-11-07 09:00:51,061 [DEBUG] 1 GYMAAKKHLEINPDHSIIETLR MAAKKHLEINPDHSIIETLR
2023-11-07 09:00:51,062 [DEBUG] 1 GYMAAKKHLEINPDHSIIETLR AAKKHLEINPDHSIIETLR
2023-11-07 09:00:51,063 [DEBUG] 2 GYMAAKKHLEINPDHSIIETLR KKHLEINPDHSIIETLR
2023-11-07 09:00:51,064 [DEBUG] 1 GYMAAKKHLEINPDHSIIETLR KHLEINPDHSIIETLR
2023-11-07 09:00:51,065 [DEBUG] 1 GYMAAKKHLEINPDHSIIETLR HLEINPDHSIIETLR
2023-11-07 09:00:51,076 [DEBUG] 2 VRLGEHNIEVLEGNEQFINAAK LGEHNIEVLEGNEQFINAAK
2023-11-07 09:00:51,100 [DEBUG] 2 TREEECHFYAGGQVYPGEASR EEECHFYAGGQVYPGEASR
2023-11-07 09:00:51,128 [DEBUG] 1 KKILATPPQEDAPSVDIANIR KILATPPQEDAPSVDIANIR
2023-11-07 09:00:51,130 [DEBUG] 1 KKILATPPQEDAPSVDIANIR ILATPPQEDAPSVDIANIR
2023-11-07 09:00:51,131 [DEBUG] 2 KKILATPPQEDAPSVDIANIR ATPPQEDAPSVDIANIR
2023-11-07 09:00:51,146 [DEBUG] 2 LHTDGDKAFVDFLSDEIKEER TDGDKAFVDFLSDEIKEER
2023-11-07 09:00:51,194 [DEBUG] 2 IFTTYSDNQPGVLIQVYEGER TTYSDNQPGVLIQVYEGER
2023-11-07 09:00:51,404 [DEBUG] 1 NVLVALEQQSPDIAQGVHLDR VLVALEQQSPDIAQGVHLDR
2023-11-07 09:00:51,560 [DEBUG] 2 TFTTYSDNQPGVLIQVYEGER TTYSDNQPGVLIQVYEGER
2023-11-07 09:00:51,758 [DEBUG] 2 VSQGSKDPAEGDGAQPEETPR QGSKDPAEGDGAQPEETPR
2023-11-07 09:00:51,803 [DEBUG] 2 VRPLPPAAIESPAVAAPAYSR PLPPAAIESPAVAAPAYSR
2023-11-07 09:00:51,930 [DEBUG] 1 ALQSGQCAGAALDVFTEEPPR LQSGQCAGAALDVFTEEPPR
2023-11-07 09:00:51,946 [DEBUG] 1 AAKSADGSAPAGEGEGVTLQR AKSADGSAPAGEGEGVTLQR
2023-11-07 09:00:51,947 [DEBUG] 2 AAKSADGSAPAGEGEGVTLQR SADGSAPAGEGEGVTLQR
2023-11-07 09:00:52,047 [DEBUG] 1 FTASAGIQVVGDDLTVTNPKR TASAGIQVVGDDLTVTNPKR
2023-11-07 09:00:52,048 [DEBUG] 2 FTASAGIQVVGDDLTVTNPKR SAGIQVVGDDLTVTNPKR
2023-11-07 09:00:52,050 [DEBUG] 1 FTASAGIQVVGDDLTVTNPKR AGIQVVGDDLTVTNPKR
2023-11-07 09:00:52,077 [DEBUG] 1 LVKFIQQTYPSGGEEQAQYCR VKFIQQTYPSGGEEQAQYCR
2023-11-07 09:00:52,303 [DEBUG] 1 MVEKEEAGGGISEEEAAQYDR VEKEEAGGGISEEEAAQYDR
2023-11-07 09:00:52,331 [DEBUG] 1 PYQYPALTPEQKKELSDIAHR YQYPALTPEQKKELSDIAHR
2023-11-07 09:00:52,378 [DEBUG] 1 YMMAKKHLEINPDHPIVETLR MMAKKHLEINPDHPIVETLR
2023-11-07 09:00:52,381 [DEBUG] 1 YMMAKKHLEINPDHPIVETLR MAKKHLEINPDHPIVETLR
2023-11-07 09:00:52,383 [DEBUG] 1 YMMAKKHLEINPDHPIVETLR AKKHLEINPDHPIVETLR
2023-11-07 09:00:52,384 [DEBUG] 1 YMMAKKHLEINPDHPIVETLR KKHLEINPDHPIVETLR
2023-11-07 09:00:52,385 [DEBUG] 1 YMMAKKHLEINPDHPIVETLR KHLEINPDHPIVETLR
2023-11-07 09:00:52,386 [DEBUG] 1 YMMAKKHLEINPDHPIVETLR HLEINPDHPIVETLR
2023-11-07 09:00:52,391 [DEBUG] 2 AKAKEALELTDTGLLSGSEER AKEALELTDTGLLSGSEER
2023-11-07 09:00:52,407 [DEBUG] 1 AMVSMVTKDNPGVVTCLDEAR MVSMVTKDNPGVVTCLDEAR
2023-11-07 09:00:52,408 [DEBUG] 1 AMVSMVTKDNPGVVTCLDEAR VSMVTKDNPGVVTCLDEAR
2023-11-07 09:00:52,409 [DEBUG] 2 AMVSMVTKDNPGVVTCLDEAR MVTKDNPGVVTCLDEAR
2023-11-07 09:00:52,521 [DEBUG] 1 KVVDYSQFQESDDADEDYGR VVDYSQFQESDDADEDYGR
2023-11-07 09:00:52,665 [DEBUG] 1 GDQPAASGDSDDDEPPPLPR DQPAASGDSDDDEPPPLPR
2023-11-07 09:00:52,810 [DEBUG] 1 QYTSPEEIDAQLQAEKQKAR YTSPEEIDAQLQAEKQKAR
2023-11-07 09:00:52,889 [DEBUG] 1 SVNAVMKVIDPATATSVDLR VNAVMKVIDPATATSVDLR
2023-11-07 09:00:52,890 [DEBUG] 2 SVNAVMKVIDPATATSVDLR AVMKVIDPATATSVDLR
2023-11-07 09:00:52,928 [DEBUG] 2 IYYITGETKDQVANSAFVER YITGETKDQVANSAFVER
2023-11-07 09:00:52,929 [DEBUG] 1 IYYITGETKDQVANSAFVER ITGETKDQVANSAFVER
2023-11-07 09:00:53,182 [DEBUG] 2 YLNFVKGVVDSDDLPLNVSR NFVKGVVDSDDLPLNVSR
2023-11-07 09:00:53,182 [DEBUG] 2 YLNFVKGVVDSDDLPLNVSR VKGVVDSDDLPLNVSR
2023-11-07 09:00:53,184 [DEBUG] 2 YLNFVKGVVDSDDLPLNVSR GVVDSDDLPLNVSR
2023-11-07 09:00:53,248 [DEBUG] 2 ACTQKFSHEEIAMATVTALR TQKFSHEEIAMATVTALR
2023-11-07 09:00:53,358 [DEBUG] 1 YSKGFLNSSELSGLPAGPDR SKGFLNSSELSGLPAGPDR
2023-11-07 09:00:53,508 [DEBUG] 1 AEPAVYFKEQFLDGDGWTSR EPAVYFKEQFLDGDGWTSR
2023-11-07 09:00:53,509 [DEBUG] 2 AEPAVYFKEQFLDGDGWTSR AVYFKEQFLDGDGWTSR
2023-11-07 09:00:53,723 [DEBUG] 1 CVGVFQHGKVEIIANDQGNR VGVFQHGKVEIIANDQGNR
2023-11-07 09:00:53,724 [DEBUG] 2 CVGVFQHGKVEIIANDQGNR VFQHGKVEIIANDQGNR
2023-11-07 09:00:53,725 [DEBUG] 2 CVGVFQHGKVEIIANDQGNR QHGKVEIIANDQGNR
2023-11-07 09:00:53,726 [DEBUG] 2 CVGVFQHGKVEIIANDQGNR GKVEIIANDQGNR
2023-11-07 09:00:53,728 [DEBUG] 2 CVGVFQHGKVEIIANDQGNR VEIIANDQGNR
2023-11-07 09:00:53,757 [DEBUG] 1 RIQEQESSGEEDSDLSPEER IQEQESSGEEDSDLSPEER
2023-11-07 09:00:53,840 [DEBUG] 1 KISSIQSIVPALEIANAHR ISSIQSIVPALEIANAHR
2023-11-07 09:00:53,841 [DEBUG] 2 KISSIQSIVPALEIANAHR SIQSIVPALEIANAHR
2023-11-07 09:00:53,843 [DEBUG] 1 KISSIQSIVPALEIANAHR IQSIVPALEIANAHR
2023-11-07 09:00:53,843 [DEBUG] 2 KISSIQSIVPALEIANAHR SIVPALEIANAHR
2023-11-07 09:00:53,844 [DEBUG] 1 KISSIQSIVPALEIANAHR IVPALEIANAHR
2023-11-07 09:00:53,902 [DEBUG] 2 IHVSDQELQSANASVDDSR VSDQELQSANASVDDSR
2023-11-07 09:00:53,924 [DEBUG] 2 LKVGLQVVAVKAPGFGDNR VGLQVVAVKAPGFGDNR
2023-11-07 09:00:53,979 [DEBUG] 1 GLAGAGNSVLLVSNLNPER LAGAGNSVLLVSNLNPER
2023-11-07 09:00:53,994 [DEBUG] 1 GMKGLVYETSVLDPDEGIR MKGLVYETSVLDPDEGIR
2023-11-07 09:00:54,075 [DEBUG] 2 VKCAQIEAKFYEEVHDLER CAQIEAKFYEEVHDLER
2023-11-07 09:00:54,076 [DEBUG] 1 VKCAQIEAKFYEEVHDLER AQIEAKFYEEVHDLER
2023-11-07 09:00:54,194 [DEBUG] 2 SKFGEVVDCTLKLDPITGR FGEVVDCTLKLDPITGR
2023-11-07 09:00:54,259 [DEBUG] 1 MVNPTVFFDIAVDGEPLGR VNPTVFFDIAVDGEPLGR
2023-11-07 09:00:54,282 [DEBUG] 2 MREDYDSVEQDGDEPGPQR EDYDSVEQDGDEPGPQR
2023-11-07 09:00:54,307 [DEBUG] 1 QLTVQMMQNPQILAALQER LTVQMMQNPQILAALQER
2023-11-07 09:00:54,379 [DEBUG] 2 QKALDLDSSCKEAADGYQR ALDLDSSCKEAADGYQR
2023-11-07 09:00:54,383 [DEBUG] 2 QKSDAEEDGGTVSQEEEDR SDAEEDGGTVSQEEEDR
2023-11-07 09:00:54,388 [DEBUG] 2 LPLQDVYKIGGIGTVPVGR LQDVYKIGGIGTVPVGR
2023-11-07 09:00:54,433 [DEBUG] 2 LRTDYNASVSVPDSSGPER TDYNASVSVPDSSGPER
2023-11-07 09:00:54,804 [DEBUG] 1 ALAEGLGVIACIGEKLDER LAEGLGVIACIGEKLDER
2023-11-07 09:00:54,840 [DEBUG] 1 YQAEWDDYVPKLYEQLSGK QAEWDDYVPKLYEQLSGK
2023-11-07 09:00:54,893 [DEBUG] 1 YHTSQSGDEMTSLSEYVSR HTSQSGDEMTSLSEYVSR
2023-11-07 09:00:54,925 [DEBUG] 2 ALKGAGTNEKVLTEIIASR KGAGTNEKVLTEIIASR
2023-11-07 09:00:54,940 [DEBUG] 1 ALQATVGNSYKCNAEEHVR LQATVGNSYKCNAEEHVR
2023-11-07 09:00:55,199 [DEBUG] 1 FSDEVEPATPEEGEPATQR SDEVEPATPEEGEPATQR
2023-11-07 09:00:55,200 [DEBUG] 1 FSDEVEPATPEEGEPATQR DEVEPATPEEGEPATQR
2023-11-07 09:00:55,200 [DEBUG] 1 FSDEVEPATPEEGEPATQR EVEPATPEEGEPATQR
2023-11-07 09:00:55,219 [DEBUG] 2 LRLENYPIPEPGPNEVLLR LENYPIPEPGPNEVLLR
2023-11-07 09:00:55,271 [DEBUG] 2 EKYGKDATNVGDEGGFAPN YGKDATNVGDEGGFAPN
2023-11-07 09:00:55,449 [DEBUG] 2 DLEGDVSTTWHSNDDDVYR EGDVSTTWHSNDDDVYR
2023-11-07 09:00:55,490 [DEBUG] 1 ADDEVDVDGTVEEDLGKSR DDEVDVDGTVEEDLGKSR
2023-11-07 09:00:55,550 [DEBUG] 1 CMNTTLSESPFKCDPDAAR MNTTLSESPFKCDPDAAR
2023-11-07 09:00:55,551 [DEBUG] 2 CMNTTLSESPFKCDPDAAR TTLSESPFKCDPDAAR
2023-11-07 09:00:55,608 [DEBUG] 2 KKVWLDPNETNEIANANSR VWLDPNETNEIANANSR
2023-11-07 09:00:55,701 [DEBUG] 1 TVVSGLVQFVPKEELQDR VVSGLVQFVPKEELQDR
2023-11-07 09:00:55,774 [DEBUG] 1 THADFADECPKPELLAIR HADFADECPKPELLAIR
2023-11-07 09:00:55,775 [DEBUG] 1 THADFADECPKPELLAIR ADFADECPKPELLAIR
2023-11-07 09:00:55,859 [DEBUG] 2 GHYTEGAELVDSVLDVVR YTEGAELVDSVLDVVR
2023-11-07 09:00:55,917 [DEBUG] 2 VKAFGPGLQGGSAGSPAR AFGPGLQGGSAGSPAR
2023-11-07 09:00:55,944 [DEBUG] 1 KATENDIYNFFSPLNPVR ATENDIYNFFSPLNPVR
2023-11-07 09:00:55,989 [DEBUG] 1 KEGGLGPLNIPLLADVTR EGGLGPLNIPLLADVTR
2023-11-07 09:00:56,116 [DEBUG] 1 NKLTEDKADVQSIIGLQR KLTEDKADVQSIIGLQR
2023-11-07 09:00:56,161 [DEBUG] 1 RAEDGSVIDYELIDQDAR AEDGSVIDYELIDQDAR
2023-11-07 09:00:56,206 [DEBUG] 2 QKSIQEIQELDKDDESLR SIQEIQELDKDDESLR
2023-11-07 09:00:56,286 [DEBUG] 2 TFVNITPAEVGVLVGKDR VNITPAEVGVLVGKDR
2023-11-07 09:00:56,287 [DEBUG] 2 TFVNITPAEVGVLVGKDR ITPAEVGVLVGKDR
2023-11-07 09:00:56,304 [DEBUG] 2 IMLSGETAKGDYPLEAVR LSGETAKGDYPLEAVR
2023-11-07 09:00:56,305 [DEBUG] 1 IMLSGETAKGDYPLEAVR SGETAKGDYPLEAVR
2023-11-07 09:00:56,416 [DEBUG] 2 EKYIDQEELNKTKPIWTR YIDQEELNKTKPIWTR
2023-11-07 09:00:56,455 [DEBUG] 2 ANTVLSGGTTMYPGIADR TVLSGGTTMYPGIADR
2023-11-07 09:00:56,607 [DEBUG] 2 VSALLGEEDEEALHYLTR ALLGEEDEEALHYLTR
2023-11-07 09:00:56,607 [DEBUG] 1 VSALLGEEDEEALHYLTR LLGEEDEEALHYLTR
2023-11-07 09:00:56,654 [DEBUG] 1 YITGESKEQVANSAFVER ITGESKEQVANSAFVER
2023-11-07 09:00:56,724 [DEBUG] 1 YKTDLEKDIISDTSGDFR KTDLEKDIISDTSGDFR
2023-11-07 09:00:56,749 [DEBUG] 1 AITATQKTVDGPSGKLWR ITATQKTVDGPSGKLWR
2023-11-07 09:00:56,749 [DEBUG] 2 AITATQKTVDGPSGKLWR ATQKTVDGPSGKLWR
2023-11-07 09:00:56,750 [DEBUG] 1 AITATQKTVDGPSGKLWR TQKTVDGPSGKLWR
2023-11-07 09:00:56,750 [DEBUG] 2 AITATQKTVDGPSGKLWR KTVDGPSGKLWR
2023-11-07 09:00:56,751 [DEBUG] 1 AITATQKTVDGPSGKLWR TVDGPSGKLWR
2023-11-07 09:00:56,850 [DEBUG] 1 SRSGGGGGGGLGSGGSIR RSGGGGGGGLGSGGSIR
2023-11-07 09:00:56,850 [DEBUG] 1 SRSGGGGGGGLGSGGSIR SGGGGGGGLGSGGSIR
2023-11-07 09:00:56,908 [DEBUG] 2 AGTNGETTTQGLDGLSER TNGETTTQGLDGLSER
2023-11-07 09:00:56,912 [DEBUG] 1 LSGPGQFAENETNEVNFR SGPGQFAENETNEVNFR
2023-11-07 09:00:57,008 [DEBUG] 2 KHSQFIGYPITLFVEKER SQFIGYPITLFVEKER
2023-11-07 09:00:57,009 [DEBUG] 2 KHSQFIGYPITLFVEKER FIGYPITLFVEKER
2023-11-07 09:00:57,010 [DEBUG] 1 KHSQFIGYPITLFVEKER IGYPITLFVEKER
2023-11-07 09:00:57,012 [DEBUG] 2 KHSQFIGYPITLFVEKER YPITLFVEKER
2023-11-07 09:00:57,014 [DEBUG] 2 KHSQFIGYPITLFVEKER ITLFVEKER
2023-11-07 09:00:57,139 [DEBUG] 1 KQGGLGPMNIPLVSDPKR QGGLGPMNIPLVSDPKR
2023-11-07 09:00:57,442 [DEBUG] 1 KLAMQEFMILPVGAANFR LAMQEFMILPVGAANFR
2023-11-07 09:00:57,591 [DEBUG] 2 KKSLGDDISSETSGDFR SLGDDISSETSGDFR
2023-11-07 09:00:57,598 [DEBUG] 1 KLFIGGLSFETTDESLR LFIGGLSFETTDESLR
2023-11-07 09:00:57,599 [DEBUG] 2 KLFIGGLSFETTDESLR IGGLSFETTDESLR
2023-11-07 09:00:57,601 [DEBUG] 2 KLFIGGLSFETTDESLR GLSFETTDESLR
2023-11-07 09:00:57,601 [DEBUG] 2 KLFIGGLSFETTDESLR SFETTDESLR
2023-11-07 09:00:57,607 [DEBUG] 1 KLFIGGLSFETTEESLR LFIGGLSFETTEESLR
2023-11-07 09:00:57,607 [DEBUG] 2 KLFIGGLSFETTEESLR IGGLSFETTEESLR
2023-11-07 09:00:57,618 [DEBUG] 1 KLFVGGIKEDTEEHHLR LFVGGIKEDTEEHHLR
2023-11-07 09:00:57,619 [DEBUG] 2 KLFVGGIKEDTEEHHLR VGGIKEDTEEHHLR
2023-11-07 09:00:57,631 [DEBUG] 2 KREDCSPADKPYIDEAR EDCSPADKPYIDEAR
2023-11-07 09:00:57,815 [DEBUG] 2 VKLAAVDATVNQVLASR LAAVDATVNQVLASR
2023-11-07 09:00:57,861 [DEBUG] 1 KAVEHINKTIAPALVSK AVEHINKTIAPALVSK
2023-11-07 09:00:57,887 [DEBUG] 1 KGLGTDEESILTLLTSR GLGTDEESILTLLTSR
2023-11-07 09:00:57,952 [DEBUG] 1 GVPHNPAPPTSTVIHIR VPHNPAPPTSTVIHIR
2023-11-07 09:00:57,980 [DEBUG] 2 SKLGDVYVNDAFGTAHR LGDVYVNDAFGTAHR
2023-11-07 09:00:58,035 [DEBUG] 2 MNVLADALKSINNAEKR VLADALKSINNAEKR
2023-11-07 09:00:58,064 [DEBUG] 1 RHVFGESDELIGQKVAH HVFGESDELIGQKVAH
2023-11-07 09:00:58,072 [DEBUG] 2 SATFIGNSTAIQELFKR TFIGNSTAIQELFKR
2023-11-07 09:00:58,072 [DEBUG] 2 SATFIGNSTAIQELFKR IGNSTAIQELFKR
2023-11-07 09:00:58,083 [DEBUG] 1 RSTQAATQVVLNVPETR STQAATQVVLNVPETR
2023-11-07 09:00:58,084 [DEBUG] 2 RSTQAATQVVLNVPETR QAATQVVLNVPETR
2023-11-07 09:00:58,197 [DEBUG] 2 LREVIELPLTNPELFQR EVIELPLTNPELFQR
2023-11-07 09:00:58,496 [DEBUG] 1 ASLVSNTSSGEGSQPSR SLVSNTSSGEGSQPSR
2023-11-07 09:00:58,497 [DEBUG] 1 ASLVSNTSSGEGSQPSR LVSNTSSGEGSQPSR
2023-11-07 09:00:58,564 [DEBUG] 2 WCSEDKQILSADDKTVR SEDKQILSADDKTVR
2023-11-07 09:00:58,591 [DEBUG] 1 DGGFCEVCKKLVGYLDR GGFCEVCKKLVGYLDR
2023-11-07 09:00:58,640 [DEBUG] 2 ACANPAAGSVILLENLR ANPAAGSVILLENLR
2023-11-07 09:00:58,964 [DEBUG] 1 KIFVGGIKEDTEEHHLR IFVGGIKEDTEEHHLR
2023-11-07 09:00:58,965 [DEBUG] 2 KIFVGGIKEDTEEHHLR VGGIKEDTEEHHLR
2023-11-07 09:00:58,990 [DEBUG] 2 AHGCYLSAEELNVFHER GCYLSAEELNVFHER
2023-11-07 09:00:58,991 [DEBUG] 2 AHGCYLSAEELNVFHER YLSAEELNVFHER
2023-11-07 09:00:59,029 [DEBUG] 1 MQASIEKGGSLPKVEAK QASIEKGGSLPKVEAK
2023-11-07 09:00:59,108 [DEBUG] 1 LAVCKAGAVEKGVPLYR AVCKAGAVEKGVPLYR
2023-11-07 09:00:59,128 [DEBUG] 1 RFSALQQAVPTESTDNR FSALQQAVPTESTDNR
2023-11-07 09:00:59,142 [DEBUG] 1 FSSPEEATKAVTEMNGR SSPEEATKAVTEMNGR
2023-11-07 09:00:59,228 [DEBUG] 2 LHFHSPNPEIPALLDGR FHSPNPEIPALLDGR
2023-11-07 09:00:59,271 [DEBUG] 2 TNEEAGDGTTTATVLAR EEAGDGTTTATVLAR
2023-11-07 09:00:59,276 [DEBUG] 1 ASIEDQGAAAGGYCGSR SIEDQGAAAGGYCGSR
2023-11-07 09:00:59,505 [DEBUG] 1 AFRVPTANVSVVDLTCR FRVPTANVSVVDLTCR
2023-11-07 09:00:59,506 [DEBUG] 1 AFRVPTANVSVVDLTCR RVPTANVSVVDLTCR
2023-11-07 09:00:59,507 [DEBUG] 1 AFRVPTANVSVVDLTCR VPTANVSVVDLTCR
2023-11-07 09:00:59,509 [DEBUG] 2 AFRVPTANVSVVDLTCR TANVSVVDLTCR
2023-11-07 09:00:59,509 [DEBUG] 2 AFRVPTANVSVVDLTCR NVSVVDLTCR
2023-11-07 09:00:59,510 [DEBUG] 1 AFRVPTANVSVVDLTCR VSVVDLTCR
2023-11-07 09:00:59,570 [DEBUG] 1 RAVESGVPQPPDPPVQR AVESGVPQPPDPPVQR
2023-11-07 09:00:59,598 [DEBUG] 1 FLKDISTTLNADEAVAR LKDISTTLNADEAVAR
2023-11-07 09:00:59,603 [DEBUG] 2 LKEGAKHFSGLEEAVYR EGAKHFSGLEEAVYR
2023-11-07 09:00:59,676 [DEBUG] 1 KIKDPDASKPEDWDER IKDPDASKPEDWDER
2023-11-07 09:00:59,682 [DEBUG] 1 KIAQLEEQLDNETKER IAQLEEQLDNETKER
2023-11-07 09:00:59,704 [DEBUG] 2 TKSQGGEPTYNVAVGR SQGGEPTYNVAVGR
2023-11-07 09:00:59,717 [DEBUG] 2 IKDCGATWVVLGHSER DCGATWVVLGHSER
2023-11-07 09:00:59,719 [DEBUG] 2 IKDCGATWVVLGHSER GATWVVLGHSER
2023-11-07 09:00:59,720 [DEBUG] 2 IKDCGATWVVLGHSER TWVVLGHSER
2023-11-07 09:00:59,720 [DEBUG] 2 IKDCGATWVVLGHSER VVLGHSER
2023-11-07 09:00:59,785 [DEBUG] 2 IFVGGLSPDTPEEKIR VGGLSPDTPEEKIR
2023-11-07 09:00:59,810 [DEBUG] 2 GKLVINGNPITIFQER LVINGNPITIFQER
2023-11-07 09:00:59,815 [DEBUG] 2 GHYTIGKEIIDLVLDR YTIGKEIIDLVLDR
2023-11-07 09:00:59,816 [DEBUG] 1 GHYTIGKEIIDLVLDR TIGKEIIDLVLDR
2023-11-07 09:00:59,827 [DEBUG] 1 GHYKGQQIGKVVQVYR HYKGQQIGKVVQVYR
2023-11-07 09:00:59,865 [DEBUG] 1 GIYAYGFEKPSAIQQR IYAYGFEKPSAIQQR
2023-11-07 09:00:59,866 [DEBUG] 2 GIYAYGFEKPSAIQQR AYGFEKPSAIQQR
2023-11-07 09:00:59,866 [DEBUG] 2 GIYAYGFEKPSAIQQR GFEKPSAIQQR
2023-11-07 09:00:59,882 [DEBUG] 1 GLGDCLVKITKSDGIR LGDCLVKITKSDGIR
2023-11-07 09:00:59,891 [DEBUG] 1 GLLYDSDEEDEERPAR LLYDSDEEDEERPAR
2023-11-07 09:00:59,907 [DEBUG] 2 VKGVDEATIIDILTKR GVDEATIIDILTKR
2023-11-07 09:00:59,931 [DEBUG] 1 KEAESCDCLQGFQLTH EAESCDCLQGFQLTH
2023-11-07 09:01:00,017 [DEBUG] 2 VCTLAIIDPGDSDIIR TLAIIDPGDSDIIR
2023-11-07 09:01:00,073 [DEBUG] 1 NQVALNPQNTVFDAKR QVALNPQNTVFDAKR
2023-11-07 09:01:00,095 [DEBUG] 1 NIQELEEQLEEEESAR IQELEEQLEEEESAR
2023-11-07 09:01:00,112 [DEBUG] 1 NQVAMNPTNTVFDAKR QVAMNPTNTVFDAKR
2023-11-07 09:01:00,146 [DEBUG] 1 NSYVAGQYDDAASYQR SYVAGQYDDAASYQR
2023-11-07 09:01:00,289 [DEBUG] 1 RKPDTIEVQQMKAQAR KPDTIEVQQMKAQAR
2023-11-07 09:01:00,295 [DEBUG] 1 RFDEILEASDGIMVAR FDEILEASDGIMVAR
2023-11-07 09:01:00,301 [DEBUG] 1 RADLNQGIGEPQSPSR ADLNQGIGEPQSPSR
2023-11-07 09:01:00,302 [DEBUG] 1 RADLNQGIGEPQSPSR DLNQGIGEPQSPSR
2023-11-07 09:01:00,415 [DEBUG] 2 SYELPDGQVITIGNER ELPDGQVITIGNER
2023-11-07 09:01:00,533 [DEBUG] 2 LLSGDTQTDATSFYDR SGDTQTDATSFYDR
2023-11-07 09:01:00,600 [DEBUG] 2 MKSVTEQGAELSNEER SVTEQGAELSNEER
2023-11-07 09:01:00,650 [DEBUG] 1 MKAVTEQGAELSNEER KAVTEQGAELSNEER
2023-11-07 09:01:00,652 [DEBUG] 1 MKAVTEQGAELSNEER AVTEQGAELSNEER
2023-11-07 09:01:00,688 [DEBUG] 1 STAGDTHLGGEDFDNR TAGDTHLGGEDFDNR
2023-11-07 09:01:00,710 [DEBUG] 1 SQFIGYPITLYLEKER QFIGYPITLYLEKER
2023-11-07 09:01:00,710 [DEBUG] 1 SQFIGYPITLYLEKER FIGYPITLYLEKER
2023-11-07 09:01:00,711 [DEBUG] 1 SQFIGYPITLYLEKER IGYPITLYLEKER
2023-11-07 09:01:00,713 [DEBUG] 2 SQFIGYPITLYLEKER YPITLYLEKER
2023-11-07 09:01:00,757 [DEBUG] 2 WYVGEGMEEGEFSEAR VGEGMEEGEFSEAR
2023-11-07 09:01:00,805 [DEBUG] 2 APSVPAAEPEYPKGIR SVPAAEPEYPKGIR
2023-11-07 09:01:01,022 [DEBUG] 1 AASIFGGAKPVDTAAR ASIFGGAKPVDTAAR
2023-11-07 09:01:01,023 [DEBUG] 1 AASIFGGAKPVDTAAR SIFGGAKPVDTAAR
2023-11-07 09:01:01,023 [DEBUG] 1 AASIFGGAKPVDTAAR IFGGAKPVDTAAR
2023-11-07 09:01:01,071 [DEBUG] 1 FANDATFEIKKCDLHR ANDATFEIKKCDLHR
2023-11-07 09:01:01,199 [DEBUG] 1 FLLNASGSTSTPAPSR LLNASGSTSTPAPSR
2023-11-07 09:01:01,233 [DEBUG] 2 SCTLGEKFEETTADGR TLGEKFEETTADGR
2023-11-07 09:01:01,241 [DEBUG] 1 YVNGLTLGGQKCSVIR VNGLTLGGQKCSVIR
2023-11-07 09:01:01,242 [DEBUG] 2 YVNGLTLGGQKCSVIR GLTLGGQKCSVIR
2023-11-07 09:01:01,243 [DEBUG] 2 YVNGLTLGGQKCSVIR TLGGQKCSVIR
2023-11-07 09:01:01,261 [DEBUG] 2 TKGVDEVTIVNILTNR GVDEVTIVNILTNR
2023-11-07 09:01:01,274 [DEBUG] 1 ATAGDTHLGGEDFDNR TAGDTHLGGEDFDNR
2023-11-07 09:01:01,400 [DEBUG] 2 KNLKWIGLDLSNGKPR LKWIGLDLSNGKPR
2023-11-07 09:01:01,401 [DEBUG] 2 KNLKWIGLDLSNGKPR WIGLDLSNGKPR
2023-11-07 09:01:01,546 [DEBUG] 2 VKLISWYDNEFGYSNR LISWYDNEFGYSNR
2023-11-07 09:01:01,547 [DEBUG] 1 VKLISWYDNEFGYSNR ISWYDNEFGYSNR
2023-11-07 09:01:01,565 [DEBUG] 1 RFDDAVVQSDMKHWPF FDDAVVQSDMKHWPF
2023-11-07 09:01:01,833 [DEBUG] 2 IFVGGIKEDTEEYNLR VGGIKEDTEEYNLR
2023-11-07 09:01:01,903 [DEBUG] 1 RQAVTNPNNTFYATKR QAVTNPNNTFYATKR
2023-11-07 09:01:01,998 [DEBUG] 2 SYGGYKEPAAPVSIQR GGYKEPAAPVSIQR
2023-11-07 09:01:02,036 [DEBUG] 2 MNYIQVTPQEKEAIER YIQVTPQEKEAIER
2023-11-07 09:01:02,164 [DEBUG] 1 KIQALQQQADEAEDR IQALQQQADEAEDR
2023-11-07 09:01:02,188 [DEBUG] 1 KLAQANGWGVMVSHR LAQANGWGVMVSHR
2023-11-07 09:01:02,205 [DEBUG] 1 KVPQVSTPTLVEVSR VPQVSTPTLVEVSR
2023-11-07 09:01:02,294 [DEBUG] 1 THYSNIEANESEEVR HYSNIEANESEEVR
2023-11-07 09:01:02,364 [DEBUG] 2 GKVKEGMNIVEAMER VKEGMNIVEAMER
2023-11-07 09:01:02,368 [DEBUG] 2 GKVKEGMNIVEAMER EGMNIVEAMER
2023-11-07 09:01:02,369 [DEBUG] 2 GKVKEGMNIVEAMER MNIVEAMER
2023-11-07 09:01:02,370 [DEBUG] 1 GKVKEGMNIVEAMER NIVEAMER
2023-11-07 09:01:02,453 [DEBUG] 1 KDPVQEAWAEDVDLR DPVQEAWAEDVDLR
2023-11-07 09:01:02,519 [DEBUG] 1 KELQAAGKSPEDLER ELQAAGKSPEDLER
2023-11-07 09:01:02,583 [DEBUG] 2 SKNLKLGIHEDSTNR NLKLGIHEDSTNR
2023-11-07 09:01:02,584 [DEBUG] 1 SKNLKLGIHEDSTNR LKLGIHEDSTNR
2023-11-07 09:01:02,585 [DEBUG] 2 SKNLKLGIHEDSTNR LGIHEDSTNR
2023-11-07 09:01:02,652 [DEBUG] 2 MNIALLSDLTKQISR IALLSDLTKQISR
2023-11-07 09:01:02,678 [DEBUG] 2 NKDQGTYEDYVEGLR DQGTYEDYVEGLR
2023-11-07 09:01:02,706 [DEBUG] 1 NAVVTVPAYFNDSQR AVVTVPAYFNDSQR
2023-11-07 09:01:02,708 [DEBUG] 1 NAVVTVPAYFNDSQR VVTVPAYFNDSQR
2023-11-07 09:01:02,794 [DEBUG] 1 RALAAPAAEEKEEAR ALAAPAAEEKEEAR
2023-11-07 09:01:02,796 [DEBUG] 1 RALAAPAAEEKEEAR LAAPAAEEKEEAR
2023-11-07 09:01:02,796 [DEBUG] 1 RALAAPAAEEKEEAR AAPAAEEKEEAR
2023-11-07 09:01:02,858 [DEBUG] 2 QKTGTAEMSSILEER TGTAEMSSILEER
2023-11-07 09:01:03,100 [DEBUG] 1 AVFVDLEPTVIDEVR VFVDLEPTVIDEVR
2023-11-07 09:01:03,109 [DEBUG] 1 AVFVDLEPTVIDEIR VFVDLEPTVIDEIR
2023-11-07 09:01:03,126 [DEBUG] 1 AVLVDLEPGTMDSVR VLVDLEPGTMDSVR
2023-11-07 09:01:03,137 [DEBUG] 1 CIVTSTYGWTANMER IVTSTYGWTANMER
2023-11-07 09:01:03,152 [DEBUG] 1 CLTEPSSGSDAASIR LTEPSSGSDAASIR
2023-11-07 09:01:03,274 [DEBUG] 1 DVTKLKSDTAAAAVR VTKLKSDTAAAAVR
2023-11-07 09:01:03,415 [DEBUG] 2 FKVDNDENEHQLSLR VDNDENEHQLSLR
2023-11-07 09:01:03,472 [DEBUG] 2 AHIAQLCEKAGLLQR IAQLCEKAGLLQR
2023-11-07 09:01:03,508 [DEBUG] 1 VLSAPPHFHFGQTNR LSAPPHFHFGQTNR
2023-11-07 09:01:03,522 [DEBUG] 1 ALVASQYGWSGNMER LVASQYGWSGNMER
2023-11-07 09:01:03,523 [DEBUG] 1 ALVASQYGWSGNMER VASQYGWSGNMER
2023-11-07 09:01:03,569 [DEBUG] 2 YRVPDVLVADPPIAR VPDVLVADPPIAR
2023-11-07 09:01:03,588 [DEBUG] 1 AILVDLEPGTMDSVR ILVDLEPGTMDSVR
2023-11-07 09:01:03,608 [DEBUG] 2 AAIESPAVAAPAYSR IESPAVAAPAYSR
2023-11-07 09:01:03,609 [DEBUG] 2 AAIESPAVAAPAYSR SPAVAAPAYSR
2023-11-07 09:01:03,823 [DEBUG] 1 KAVTEQGHELSNEER AVTEQGHELSNEER
2023-11-07 09:01:04,000 [DEBUG] 2 GMAYTGKYFDKASYR AYTGKYFDKASYR
2023-11-07 09:01:04,001 [DEBUG] 2 GMAYTGKYFDKASYR TGKYFDKASYR
2023-11-07 09:01:04,078 [DEBUG] 2 VRYSLDPENPTKSCK YSLDPENPTKSCK
2023-11-07 09:01:04,112 [DEBUG] 2 IFQKGESPVDYDGGR QKGESPVDYDGGR
2023-11-07 09:01:04,153 [DEBUG] 1 SYTAYKNYDYSEPGR YTAYKNYDYSEPGR
2023-11-07 09:01:04,271 [DEBUG] 1 ALTPTHYLTKHDVER LTPTHYLTKHDVER
2023-11-07 09:01:04,297 [DEBUG] 1 NAVITVPAYFNDSQR AVITVPAYFNDSQR
2023-11-07 09:01:04,354 [DEBUG] 1 RFELYFQGPSSNKPR FELYFQGPSSNKPR
2023-11-07 09:01:04,444 [DEBUG] 2 LHAAMADTFLEHMCR AAMADTFLEHMCR
2023-11-07 09:01:04,447 [DEBUG] 2 LHAAMADTFLEHMCR MADTFLEHMCR
2023-11-07 09:01:04,528 [DEBUG] 1 NIKIISKIENHEGVR IKIISKIENHEGVR
2023-11-07 09:01:04,531 [DEBUG] 2 NIKIISKIENHEGVR IISKIENHEGVR
2023-11-07 09:01:04,606 [DEBUG] 1 KSDIDEIVLVGGSTR SDIDEIVLVGGSTR
2023-11-07 09:01:04,733 [DEBUG] 1 NIKNDFTEEEEAQVR IKNDFTEEEEAQVR
2023-11-07 09:01:04,824 [DEBUG] 1 RGEAHLAVNDFELAR GEAHLAVNDFELAR
2023-11-07 09:01:04,958 [DEBUG] 1 KLLPQLTYLDGYDR LLPQLTYLDGYDR
2023-11-07 09:01:04,972 [DEBUG] 1 KLDPGSEETQTLVR LDPGSEETQTLVR
2023-11-07 09:01:05,143 [DEBUG] 2 GKKGAVAEDGDELR KGAVAEDGDELR
2023-11-07 09:01:05,144 [DEBUG] 1 GKKGAVAEDGDELR GAVAEDGDELR
2023-11-07 09:01:05,177 [DEBUG] 1 GNLGAGNGNLQGPR NLGAGNGNLQGPR
2023-11-07 09:01:05,306 [DEBUG] 1 GVVDSEDIPLNLSR VVDSEDIPLNLSR
2023-11-07 09:01:05,342 [DEBUG] 1 NLLSVAYKNVVGGR LLSVAYKNVVGGR
2023-11-07 09:01:05,391 [DEBUG] 1 PVAVALDTKGPEIR VAVALDTKGPEIR
2023-11-07 09:01:05,392 [DEBUG] 1 PVAVALDTKGPEIR AVALDTKGPEIR
2023-11-07 09:01:05,392 [DEBUG] 1 PVAVALDTKGPEIR VALDTKGPEIR
2023-11-07 09:01:05,393 [DEBUG] 2 PVAVALDTKGPEIR LDTKGPEIR
2023-11-07 09:01:05,397 [DEBUG] 2 PMLQYVCDNSPEVR LQYVCDNSPEVR
2023-11-07 09:01:05,461 [DEBUG] 1 MMQNPQILAALQER MQNPQILAALQER
2023-11-07 09:01:05,462 [DEBUG] 1 MMQNPQILAALQER QNPQILAALQER
2023-11-07 09:01:05,554 [DEBUG] 1 RLQSIGTENTEENR LQSIGTENTEENR
2023-11-07 09:01:05,799 [DEBUG] 2 LYTLVLTDPDAPSR TLVLTDPDAPSR
2023-11-07 09:01:05,836 [DEBUG] 2 MLSNTTAIAEAWAR SNTTAIAEAWAR
2023-11-07 09:01:05,837 [DEBUG] 2 MLSNTTAIAEAWAR TTAIAEAWAR
2023-11-07 09:01:05,990 [DEBUG] 1 CCSGAIIVLTKSGR CSGAIIVLTKSGR
2023-11-07 09:01:05,991 [DEBUG] 1 CCSGAIIVLTKSGR SGAIIVLTKSGR
2023-11-07 09:01:06,001 [DEBUG] 1 CKQDPSVLHTEEMR KQDPSVLHTEEMR
2023-11-07 09:01:06,076 [DEBUG] 1 ELISNSSDALDKIR LISNSSDALDKIR
2023-11-07 09:01:06,091 [DEBUG] 1 ELISNASDALDKIR LISNASDALDKIR
2023-11-07 09:01:06,267 [DEBUG] 1 ADAPEEEDHVLVLR DAPEEEDHVLVLR
2023-11-07 09:01:06,282 [DEBUG] 2 ACQSIYPLHDVFVR QSIYPLHDVFVR
2023-11-07 09:01:06,282 [DEBUG] 1 ACQSIYPLHDVFVR SIYPLHDVFVR
2023-11-07 09:01:06,294 [DEBUG] 2 YKSYSPYDMLESIR SYSPYDMLESIR
2023-11-07 09:01:06,509 [DEBUG] 1 QEFMILPVGAANFR EFMILPVGAANFR
2023-11-07 09:01:06,511 [DEBUG] 2 QEFMILPVGAANFR MILPVGAANFR
2023-11-07 09:01:06,513 [DEBUG] 1 QEFMILPVGAANFR ILPVGAANFR
2023-11-07 09:01:06,548 [DEBUG] 2 ALAAAPSSNGSPWR AAAPSSNGSPWR
2023-11-07 09:01:06,563 [DEBUG] 1 CGAAIGTHEDDKYR GAAIGTHEDDKYR
2023-11-07 09:01:06,579 [DEBUG] 2 IRVDVADQAQDKDR VDVADQAQDKDR
2023-11-07 09:01:06,602 [DEBUG] 2 TSKKITIADCGQLE KKITIADCGQLE
2023-11-07 09:01:06,609 [DEBUG] 2 VFFDIAVDGEPLGR FDIAVDGEPLGR
2023-11-07 09:01:06,622 [DEBUG] 1 KMLGQMTDQVADLR MLGQMTDQVADLR
2023-11-07 09:01:06,642 [DEBUG] 1 TVTVGQACNPSACR VTVGQACNPSACR
2023-11-07 09:01:06,697 [DEBUG] 2 TNTGYKPLYIPSNR TGYKPLYIPSNR
2023-11-07 09:01:06,736 [DEBUG] 1 KFAAATGATPIAGR FAAATGATPIAGR
2023-11-07 09:01:06,737 [DEBUG] 1 KFAAATGATPIAGR AAATGATPIAGR
2023-11-07 09:01:06,800 [DEBUG] 1 AVKKINPICNDHYR VKKINPICNDHYR
2023-11-07 09:01:06,819 [DEBUG] 2 AKAVANQTSATFLR AVANQTSATFLR
2023-11-07 09:01:06,842 [DEBUG] 2 MFTKEELEEVIKDI TKEELEEVIKDI
2023-11-07 09:01:06,849 [DEBUG] 1 MLVLVLGDLHIPHR LVLVLGDLHIPHR
2023-11-07 09:01:06,888 [DEBUG] 1 GTHEYHAETIKNVR THEYHAETIKNVR
2023-11-07 09:01:06,955 [DEBUG] 2 TRVIGSGCNLDSAR VIGSGCNLDSAR
2023-11-07 09:01:06,977 [DEBUG] 1 EAAAQYNPEPPPPR AAAQYNPEPPPPR
2023-11-07 09:01:06,996 [DEBUG] 2 FKEQFLDGDGWTSR EQFLDGDGWTSR
2023-11-07 09:01:07,048 [DEBUG] 2 QVVAVKAPGFGDNR VAVKAPGFGDNR
2023-11-07 09:01:07,049 [DEBUG] 2 QVVAVKAPGFGDNR VKAPGFGDNR
2023-11-07 09:01:07,242 [DEBUG] 2 LRAPPEQGKIFIAR APPEQGKIFIAR
2023-11-07 09:01:07,354 [DEBUG] 2 TFFSETGAGKHVPR FSETGAGKHVPR
2023-11-07 09:01:07,367 [DEBUG] 1 HQIEYYFGDFNLPR QIEYYFGDFNLPR
2023-11-07 09:01:07,429 [DEBUG] 2 AHITGGGLLENIPR ITGGGLLENIPR
2023-11-07 09:01:07,434 [DEBUG] 1 ASSLGEIDESSELR SSLGEIDESSELR
2023-11-07 09:01:07,496 [DEBUG] 1 AGKAEELHYPLGER GKAEELHYPLGER
2023-11-07 09:01:07,662 [DEBUG] 1 KMINLSVPDTIDER MINLSVPDTIDER
2023-11-07 09:01:07,668 [DEBUG] 2 IFLGGVDKHTQFWR LGGVDKHTQFWR
2023-11-07 09:01:07,934 [DEBUG] 1 KYAVLYQPLFDKR YAVLYQPLFDKR
2023-11-07 09:01:07,998 [DEBUG] 1 KLAAAEGLEPKYR LAAAEGLEPKYR
2023-11-07 09:01:08,031 [DEBUG] 1 KVLISDSLDPCCR VLISDSLDPCCR
2023-11-07 09:01:08,052 [DEBUG] 2 TKTPGPGAQSALR TPGPGAQSALR
2023-11-07 09:01:08,167 [DEBUG] 2 GFSGADLTEICQR SGADLTEICQR
2023-11-07 09:01:08,258 [DEBUG] 1 KAGAVEKGVPLYR AGAVEKGVPLYR
2023-11-07 09:01:08,260 [DEBUG] 1 KAGAVEKGVPLYR GAVEKGVPLYR
2023-11-07 09:01:08,371 [DEBUG] 1 NIQACKELAQTTR IQACKELAQTTR
2023-11-07 09:01:08,381 [DEBUG] 1 QAALLGQALQDSR AALLGQALQDSR
2023-11-07 09:01:08,386 [DEBUG] 1 NTGIICTIGPASR TGIICTIGPASR
2023-11-07 09:01:08,422 [DEBUG] 2 NKSTESLQANVQR STESLQANVQR
2023-11-07 09:01:08,507 [DEBUG] 2 LRAENYDIPSADR AENYDIPSADR
2023-11-07 09:01:08,511 [DEBUG] 2 TFAHLDATTVLSR AHLDATTVLSR
2023-11-07 09:01:08,609 [DEBUG] 2 AYVNFQQPADAER VNFQQPADAER
2023-11-07 09:01:08,614 [DEBUG] 2 EKKEVVEEAENGR KEVVEEAENGR
2023-11-07 09:01:08,615 [DEBUG] 1 EKKEVVEEAENGR EVVEEAENGR
2023-11-07 09:01:08,679 [DEBUG] 2 ELQANCYEEVKDR QANCYEEVKDR
2023-11-07 09:01:08,825 [DEBUG] 1 CVESFSDYPPLGR VESFSDYPPLGR
2023-11-07 09:01:09,009 [DEBUG] 2 ENLKAAQEEYVKR LKAAQEEYVKR
2023-11-07 09:01:09,010 [DEBUG] 2 ENLKAAQEEYVKR AAQEEYVKR
2023-11-07 09:01:09,309 [DEBUG] 1 DVNAAIATIKTKR VNAAIATIKTKR
2023-11-07 09:01:09,310 [DEBUG] 2 DVNAAIATIKTKR AAIATIKTKR
2023-11-07 09:01:09,361 [DEBUG] 1 GKFLEMCNDLLAR KFLEMCNDLLAR
2023-11-07 09:01:09,390 [DEBUG] 2 ELKIDIIPNPQER KIDIIPNPQER
2023-11-07 09:01:09,391 [DEBUG] 1 ELKIDIIPNPQER IDIIPNPQER
2023-11-07 09:01:09,472 [DEBUG] 2 AKLIGIDDVPDAR LIGIDDVPDAR
2023-11-07 09:01:09,530 [DEBUG] 2 AKDPFAHLPKSTF DPFAHLPKSTF
2023-11-07 09:01:09,550 [DEBUG] 1 HLKEDQTEYLEER LKEDQTEYLEER
2023-11-07 09:01:09,552 [DEBUG] 2 HLKEDQTEYLEER EDQTEYLEER
2023-11-07 09:01:09,574 [DEBUG] 1 MFVLDEADEMLSR FVLDEADEMLSR
2023-11-07 09:01:09,575 [DEBUG] 1 MFVLDEADEMLSR VLDEADEMLSR
2023-11-07 09:01:09,777 [DEBUG] 1 WSNIPFITVPLSR SNIPFITVPLSR
2023-11-07 09:01:09,802 [DEBUG] 1 LSAGSGPGQYLQR SAGSGPGQYLQR
2023-11-07 09:01:09,898 [DEBUG] 2 GASTGIYEALELR STGIYEALELR
2023-11-07 09:01:09,898 [DEBUG] 1 GASTGIYEALELR TGIYEALELR
2023-11-07 09:01:10,007 [DEBUG] 2 KREELSNVLAAMR EELSNVLAAMR
2023-11-07 09:01:10,059 [DEBUG] 1 KFVEGLPINDFSR FVEGLPINDFSR
2023-11-07 09:01:10,111 [DEBUG] 1 ALGGLGSGICPNR LGGLGSGICPNR
2023-11-07 09:01:10,491 [DEBUG] 2 IPIKKSDPVVSYR IKKSDPVVSYR
2023-11-07 09:01:10,491 [DEBUG] 2 IPIKKSDPVVSYR KSDPVVSYR
2023-11-07 09:01:10,642 [DEBUG] 1 IASLEVENQSLR ASLEVENQSLR
2023-11-07 09:01:10,669 [DEBUG] 1 KIGGIGTVPVGR IGGIGTVPVGR
2023-11-07 09:01:10,670 [DEBUG] 2 KIGGIGTVPVGR GIGTVPVGR
2023-11-07 09:01:10,704 [DEBUG] 2 LKLEPHEGLLLR LEPHEGLLLR
2023-11-07 09:01:10,710 [DEBUG] 2 IKLGIHEDSQNR LGIHEDSQNR
2023-11-07 09:01:10,766 [DEBUG] 2 LFAVTVAPPGAR AVTVAPPGAR
2023-11-07 09:01:10,767 [DEBUG] 1 LFAVTVAPPGAR VTVAPPGAR
2023-11-07 09:01:10,824 [DEBUG] 2 GKVKVGVNGFGR VKVGVNGFGR
2023-11-07 09:01:10,826 [DEBUG] 2 GKVKVGVNGFGR VGVNGFGR
2023-11-07 09:01:10,881 [DEBUG] 1 GLLSSLDHTSIR LLSSLDHTSIR
2023-11-07 09:01:11,035 [DEBUG] 1 RKEDEVEEWQHR KEDEVEEWQHR
2023-11-07 09:01:11,149 [DEBUG] 2 SNVSDAVAQSTR VSDAVAQSTR
2023-11-07 09:01:11,168 [DEBUG] 2 MEKTLETVPLER KTLETVPLER
2023-11-07 09:01:11,169 [DEBUG] 1 MEKTLETVPLER TLETVPLER
2023-11-07 09:01:11,205 [DEBUG] 1 LTEAPLNPKANR TEAPLNPKANR
2023-11-07 09:01:11,232 [DEBUG] 1 CAADLGLNKGYR AADLGLNKGYR
2023-11-07 09:01:11,263 [DEBUG] 1 CDSSPDSAEDVR DSSPDSAEDVR
2023-11-07 09:01:11,275 [DEBUG] 1 YAKDVKFGADAR AKDVKFGADAR
2023-11-07 09:01:11,284 [DEBUG] 1 CKAGFAGDDAPR KAGFAGDDAPR
2023-11-07 09:01:11,285 [DEBUG] 1 CKAGFAGDDAPR AGFAGDDAPR
2023-11-07 09:01:11,286 [DEBUG] 1 CKAGFAGDDAPR GFAGDDAPR
2023-11-07 09:01:11,306 [DEBUG] 2 ARFEELNADLFR FEELNADLFR
2023-11-07 09:01:11,418 [DEBUG] 1 DSYVGDEAQSKR SYVGDEAQSKR
2023-11-07 09:01:11,431 [DEBUG] 1 WFLTCINQPQFR FLTCINQPQFR
2023-11-07 09:01:11,575 [DEBUG] 2 AKFEELNMDLFR FEELNMDLFR
2023-11-07 09:01:11,596 [DEBUG] 1 ALVADSHPESER LVADSHPESER
2023-11-07 09:01:11,677 [DEBUG] 2 LKALTSELANAR ALTSELANAR
2023-11-07 09:01:11,843 [DEBUG] 1 YAWVLDKLKAER AWVLDKLKAER
2023-11-07 09:01:11,844 [DEBUG] 2 YAWVLDKLKAER VLDKLKAER
2023-11-07 09:01:11,961 [DEBUG] 2 TSTAPAASPNVR TAPAASPNVR
2023-11-07 09:01:12,241 [DEBUG] 2 ARFEELCSDLFR FEELCSDLFR
2023-11-07 09:01:12,250 [DEBUG] 1 SITVLVEGENTR ITVLVEGENTR
2023-11-07 09:01:12,467 [DEBUG] 1 RLDIDSPPITAR LDIDSPPITAR
2023-11-07 09:01:12,531 [DEBUG] 2 VKAEPAKIEAFR AEPAKIEAFR
2023-11-07 09:01:12,601 [DEBUG] 1 YTFIQNVPLEDR TFIQNVPLEDR
2023-11-07 09:01:12,922 [DEBUG] 1 FFGFSEPLAAPR FGFSEPLAAPR
2023-11-07 09:01:12,984 [DEBUG] 2 GKIEVIEIMTDR IEVIEIMTDR
2023-11-07 09:01:12,993 [DEBUG] 1 GLAGLGDVAEVR LAGLGDVAEVR
2023-11-07 09:01:13,075 [DEBUG] 2 LRFPGQLNADLR FPGQLNADLR
2023-11-07 09:01:13,186 [DEBUG] 1 SLTDCIGTVDSR LTDCIGTVDSR
2023-11-07 09:01:13,319 [DEBUG] 1 RLEVLDSTKSSR LEVLDSTKSSR
2023-11-07 09:01:13,423 [DEBUG] 1 RLVEEEVNIPNR LVEEEVNIPNR
2023-11-07 09:01:13,473 [DEBUG] 1 AVQGWETEERPR VQGWETEERPR
2023-11-07 09:01:13,574 [DEBUG] 1 KLVIIEGDLER LVIIEGDLER
2023-11-07 09:01:13,579 [DEBUG] 1 KLVILEGELER LVILEGELER
2023-11-07 09:01:13,689 [DEBUG] 1 GTLDPVEKALR TLDPVEKALR
2023-11-07 09:01:13,921 [DEBUG] 1 MKIKIIAPPER KIKIIAPPER
2023-11-07 09:01:13,922 [DEBUG] 1 MKIKIIAPPER IKIIAPPER
2023-11-07 09:01:13,973 [DEBUG] 1 AVFPSIVGRPR VFPSIVGRPR
2023-11-07 09:01:14,014 [DEBUG] 1 AVDGNTVELKR VDGNTVELKR
2023-11-07 09:01:14,095 [DEBUG] 1 FLNAENAQKFK LNAENAQKFK
2023-11-07 09:01:14,152 [DEBUG] 1 TLFGLHLSQKR LFGLHLSQKR
2023-11-07 09:01:14,239 [DEBUG] 2 SKLVIITAGAR LVIITAGAR
2023-11-07 09:01:14,304 [DEBUG] 1 SLYSEKEVFIR LYSEKEVFIR
2023-11-07 09:01:14,372 [DEBUG] 1 CAGNEDIITLR AGNEDIITLR
2023-11-07 09:01:14,440 [DEBUG] 1 FGSDQSENVDR GSDQSENVDR
2023-11-07 09:01:14,468 [DEBUG] 1 HSVSLNDTETR SVSLNDTETR
2023-11-07 09:01:14,507 [DEBUG] 1 KLAVNMVPFPR LAVNMVPFPR
2023-11-07 09:01:14,649 [DEBUG] 2 VEILANDQGNR ILANDQGNR
2023-11-07 09:01:14,946 [DEBUG] 2 LCFVYPLDFAR FVYPLDFAR
2023-11-07 09:01:15,176 [DEBUG] 2 YRDPTTVTTLR DPTTVTTLR
2023-11-07 09:01:15,319 [DEBUG] 1 RQLSSGVSEIR QLSSGVSEIR
2023-11-07 09:01:15,320 [DEBUG] 1 RQLSSGVSEIR LSSGVSEIR
2023-11-07 09:01:15,580 [DEBUG] 2 IQNKPLYFADR NKPLYFADR
2023-11-07 09:01:15,620 [DEBUG] 2 EKVLTEIIASR VLTEIIASR
2023-11-07 09:01:15,805 [DEBUG] 2 THLGGEDFDNR LGGEDFDNR
2023-11-07 09:01:15,878 [DEBUG] 2 ANGWGVMVSHR GWGVMVSHR
2023-11-07 09:01:15,912 [DEBUG] 2 KFMLGKQEVIR MLGKQEVIR
2023-11-07 09:01:15,990 [DEBUG] 1 NSIMKCDVDIR SIMKCDVDIR
2023-11-07 09:01:16,115 [DEBUG] 1 RIQLVEEELDR IQLVEEELDR
2023-11-07 09:01:16,204 [DEBUG] 1 CLGKFIEIAAR LGKFIEIAAR
2023-11-07 09:01:16,386 [DEBUG] 1 AADCISEPVNR ADCISEPVNR
2023-11-07 09:01:16,617 [DEBUG] 1 KITITNDKGR ITITNDKGR
2023-11-07 09:01:16,633 [DEBUG] 2 LKKLELSENR KLELSENR
2023-11-07 09:01:16,663 [DEBUG] 1 KDGADFAKWR DGADFAKWR
2023-11-07 09:01:16,676 [DEBUG] 1 KAAALEFLNR AAALEFLNR
2023-11-07 09:01:16,730 [DEBUG] 1 MAPEVLPKPR APEVLPKPR
2023-11-07 09:01:16,746 [DEBUG] 1 STFVLDEFKR TFVLDEFKR
2023-11-07 09:01:16,747 [DEBUG] 2 STFVLDEFKR VLDEFKR
2023-11-07 09:01:16,774 [DEBUG] 1 CVTDISHLVR VTDISHLVR
2023-11-07 09:01:16,817 [DEBUG] 1 RAPFDLFENR APFDLFENR
2023-11-07 09:01:16,852 [DEBUG] 1 AILSPAFKVR ILSPAFKVR
2023-11-07 09:01:16,926 [DEBUG] 2 QFLGDEETVR LGDEETVR
2023-11-07 09:01:17,280 [DEBUG] 1 GYSFTTTAER YSFTTTAER
2023-11-07 09:01:17,280 [DEBUG] 1 GYSFTTTAER SFTTTAER
2023-11-07 09:01:17,458 [DEBUG] 2 SCVGVFKNGR VGVFKNGR
2023-11-07 09:01:17,488 [DEBUG] 1 DVSVVDLTCR VSVVDLTCR
2023-11-07 09:01:17,580 [DEBUG] 1 RGDLPFVVPR GDLPFVVPR
2023-11-07 09:01:17,828 [DEBUG] 2 INLIPNKQDR LIPNKQDR
2023-11-07 09:01:17,839 [DEBUG] 2 SFDLDYDFQR DLDYDFQR
2023-11-07 09:01:17,854 [DEBUG] 1 KYEDICPSTH YEDICPSTH
2023-11-07 09:01:18,110 [DEBUG] 1 YVSIHSSGFR VSIHSSGFR
2023-11-07 09:01:18,122 [DEBUG] 2 GNFGIPCELR FGIPCELR
2023-11-07 09:01:18,133 [DEBUG] 1 DLYDDKDGLR LYDDKDGLR
2023-11-07 09:01:18,182 [DEBUG] 2 TCYLDAGLAR YLDAGLAR
2023-11-07 09:01:18,220 [DEBUG] 1 CLGLTEAQTR LGLTEAQTR
2023-11-07 09:01:18,429 [DEBUG] 2 AMSSYTVAGR SSYTVAGR
2023-11-07 09:01:18,487 [DEBUG] 1 MVNFTVDQIR VNFTVDQIR
2023-11-07 09:01:18,651 [DEBUG] 1 YVMTTTTLER VMTTTTLER
2023-11-07 09:01:18,705 [DEBUG] 1 TTMYPGIADR TMYPGIADR
2023-11-07 09:01:18,849 [DEBUG] 1 CNKEVYFAER NKEVYFAER
2023-11-07 09:01:18,961 [DEBUG] 1 KLLQDFFNGR LLQDFFNGR
2023-11-07 09:01:19,084 [DEBUG] 2 AKEMVLELIR EMVLELIR
2023-11-07 09:01:19,102 [DEBUG] 2 AQSAATLPAR SAATLPAR
2023-11-07 09:01:19,290 [DEBUG] 1 LSVPDTIDER SVPDTIDER
2023-11-07 09:01:19,508 [DEBUG] 1 ELTAVVQKR LTAVVQKR
2023-11-07 09:01:19,563 [DEBUG] 1 NCSSFLIKR CSSFLIKR
2023-11-07 09:01:19,724 [DEBUG] 1 ALGGVKVER LGGVKVER
2023-11-07 09:01:19,743 [DEBUG] 1 ELISDNQYR LISDNQYR
2023-11-07 09:01:19,967 [DEBUG] 1 KVFIEDVSR VFIEDVSR
2023-11-07 09:01:20,060 [DEBUG] 1 HLQLFEELR LQLFEELR
2023-11-07 09:01:20,446 [DEBUG] 1 YYVSNEELR YVSNEELR
2023-11-07 09:01:20,505 [DEBUG] 2 AKALEIIPR ALEIIPR
2023-11-07 09:01:20,680 [DEBUG] 1 TIAPALVSK IAPALVSK
2023-11-07 09:01:20,828 [DEBUG] 1 GVNVSALSR VNVSALSR
2023-11-07 09:01:20,889 [DEBUG] 1 MCQGGDFTR CQGGDFTR
2023-11-07 09:01:21,119 [DEBUG] 1 KVALLDVFR VALLDVFR
2023-11-07 09:01:21,234 [DEBUG] 1 QIKVIAPWR IKVIAPWR
2023-11-07 09:01:21,303 [DEBUG] 1 RGPAYGLSR GPAYGLSR
2023-11-07 09:01:21,708 [DEBUG] 1 RLYWDDLKR LYWDDLKR
2023-11-07 09:01:21,721 [DEBUG] 1 LTEAPLNPK TEAPLNPK
2023-11-07 09:01:23,110 [DEBUG] 1 SKILKVIR KILKVIR
2023-11-07 09:01:23,261 [DEBUG] 1 HTFYNELR TFYNELR
2023-11-07 09:01:23,984 [INFO] Exopeptidase activity check took 00:00:41 hh:mm:ss
2023-11-07 09:01:23,984 [INFO] Exopeptidase activity was found, check logfile or output for more details on exact peptide sequences
2023-11-07 09:01:23,984 [INFO] Finished exopeptidase activity check.
2023-11-07 09:01:23,985 [INFO] Parsed condition file
2023-11-07 09:01:23,985 [INFO] Performing general condition statistics annotation...
2023-11-07 09:01:24,000 [INFO] Finished general condition statistics annotation.
2023-11-07 09:01:24,000 [INFO] Performing statistical testing...
2023-11-07 09:01:24,001 [INFO] Finished statistical testing.
2023-11-07 09:01:24,001 [INFO] No multiple testing correction performed
2023-11-07 09:01:24,001 [INFO] Checking fold distribution...
2023-11-07 09:01:24,489 [INFO] Finished fold distribution check.

2023-11-07 09:01:24,489 [INFO] Generating figures...
2023-11-07 09:01:24,559 [DEBUG] Loaded backend macosx version unknown.
2023-11-07 09:01:24,640 [DEBUG] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-11-07 09:01:24,641 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,641 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,641 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX1_.TTF', name='ESSTIXOne', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX13.TTF', name='ESSTIXThirteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,642 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 0.25
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX4_.TTF', name='ESSTIXFour', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX3_.TTF', name='ESSTIXThree', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/COBO____.ttf', name='Courant', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THB_____.ttf', name='Thames', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='condensed', size='scalable')) = 1.25
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,643 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/COB_____.ttf', name='Courant', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX8_.TTF', name='ESSTIXEight', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX7_.TTF', name='ESSTIXSeven', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,644 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 0.5349999999999999
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THR_____.ttf', name='Thames', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/CON_____.ttf', name='Courant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX9_.TTF', name='ESSTIXNine', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/MP______.ttf', name='MaplePi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,645 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEBO____.ttf', name='Helonia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX6_.TTF', name='ESSTIXSix', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEO_____.ttf', name='Helonia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='condensed', size='scalable')) = 1.535
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/SYP_____.ttf', name='SymbolPi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX17.TTF', name='ESSTIXSeventeen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX12.TTF', name='ESSTIXTwelve', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX10.TTF', name='ESSTIXTen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX11.TTF', name='ESSTIXEleven', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,646 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX2_.TTF', name='ESSTIXTwo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEN_____.ttf', name='Helonia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-ExtraLight.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 0.24
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/MaplePi.ttf', name='MaplePi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEB_____.ttf', name='Helonia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THBI____.ttf', name='Thames', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX16.TTF', name='ESSTIXSixteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,647 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX15.TTF', name='ESSTIXFifteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX14.TTF', name='ESSTIXFourteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/COO_____.ttf', name='Courant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX5_.TTF', name='ESSTIXFive', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THI_____.ttf', name='Thames', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-11-07 09:01:24,648 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-11-07 09:01:24,648 [DEBUG] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-11-07 09:01:24,711 [WARNING] No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.
2023-11-07 09:01:24,890 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=22)
           2	RESUME(arg=0, lineno=22)
           4	LOAD_CONST(arg=1, lineno=29)
           6	STORE_FAST(arg=2, lineno=29)
           8	LOAD_GLOBAL(arg=1, lineno=30)
          20	LOAD_FAST(arg=0, lineno=30)
          22	LOAD_ATTR(arg=1, lineno=30)
          32	LOAD_CONST(arg=2, lineno=30)
          34	BINARY_SUBSCR(arg=None, lineno=30)
          44	PRECALL(arg=1, lineno=30)
          48	CALL(arg=1, lineno=30)
          58	GET_ITER(arg=None, lineno=30)
>         60	FOR_ITER(arg=25, lineno=30)
          62	STORE_FAST(arg=3, lineno=30)
          64	LOAD_FAST(arg=2, lineno=31)
          66	LOAD_FAST(arg=0, lineno=31)
          68	LOAD_FAST(arg=3, lineno=31)
          70	BINARY_SUBSCR(arg=None, lineno=31)
          80	LOAD_FAST(arg=1, lineno=31)
          82	LOAD_FAST(arg=3, lineno=31)
          84	BINARY_SUBSCR(arg=None, lineno=31)
          94	BINARY_OP(arg=10, lineno=31)
          98	LOAD_CONST(arg=3, lineno=31)
         100	BINARY_OP(arg=8, lineno=31)
         104	BINARY_OP(arg=13, lineno=31)
         108	STORE_FAST(arg=2, lineno=31)
         110	JUMP_BACKWARD(arg=26, lineno=31)
>        112	LOAD_GLOBAL(arg=5, lineno=32)
         124	LOAD_ATTR(arg=3, lineno=32)
         134	LOAD_FAST(arg=2, lineno=32)
         136	PRECALL(arg=1, lineno=32)
         140	CALL(arg=1, lineno=32)
         150	RETURN_VALUE(arg=None, lineno=32)
2023-11-07 09:01:24,890 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:24,890 [DEBUG] stack: []
2023-11-07 09:01:24,890 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:24,890 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=22)
2023-11-07 09:01:24,891 [DEBUG] stack []
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=22)
2023-11-07 09:01:24,891 [DEBUG] stack []
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=29)
2023-11-07 09:01:24,891 [DEBUG] stack []
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=6, inst=STORE_FAST(arg=2, lineno=29)
2023-11-07 09:01:24,891 [DEBUG] stack ['$const4.0']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=30)
2023-11-07 09:01:24,891 [DEBUG] stack []
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=30)
2023-11-07 09:01:24,891 [DEBUG] stack ['$null$8.2', '$8load_global.1']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=22, inst=LOAD_ATTR(arg=1, lineno=30)
2023-11-07 09:01:24,891 [DEBUG] stack ['$null$8.2', '$8load_global.1', '$x20.3']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=30)
2023-11-07 09:01:24,891 [DEBUG] stack ['$null$8.2', '$8load_global.1', '$22load_attr.4']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=30)
2023-11-07 09:01:24,891 [DEBUG] stack ['$null$8.2', '$8load_global.1', '$22load_attr.4', '$const32.5']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=44, inst=PRECALL(arg=1, lineno=30)
2023-11-07 09:01:24,891 [DEBUG] stack ['$null$8.2', '$8load_global.1', '$34binary_subscr.6']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=48, inst=CALL(arg=1, lineno=30)
2023-11-07 09:01:24,891 [DEBUG] stack ['$null$8.2', '$8load_global.1', '$34binary_subscr.6']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=58, inst=GET_ITER(arg=None, lineno=30)
2023-11-07 09:01:24,891 [DEBUG] stack ['$48call.7']
2023-11-07 09:01:24,891 [DEBUG] end state. edges=[Edge(pc=60, stack=('$58get_iter.8',), blockstack=(), npush=0)]
2023-11-07 09:01:24,891 [DEBUG] pending: deque([State(pc_initial=60 nstack_initial=1)])
2023-11-07 09:01:24,891 [DEBUG] stack: ['$phi60.0']
2023-11-07 09:01:24,891 [DEBUG] state.pc_initial: State(pc_initial=60 nstack_initial=1)
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=60, inst=FOR_ITER(arg=25, lineno=30)
2023-11-07 09:01:24,891 [DEBUG] stack ['$phi60.0']
2023-11-07 09:01:24,891 [DEBUG] end state. edges=[Edge(pc=112, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:24,891 [DEBUG] pending: deque([State(pc_initial=112 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
2023-11-07 09:01:24,891 [DEBUG] stack: []
2023-11-07 09:01:24,891 [DEBUG] state.pc_initial: State(pc_initial=112 nstack_initial=0)
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=112, inst=LOAD_GLOBAL(arg=5, lineno=32)
2023-11-07 09:01:24,891 [DEBUG] stack []
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=124, inst=LOAD_ATTR(arg=3, lineno=32)
2023-11-07 09:01:24,891 [DEBUG] stack ['$null$112.1', '$112load_global.0']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=134, inst=LOAD_FAST(arg=2, lineno=32)
2023-11-07 09:01:24,891 [DEBUG] stack ['$null$112.1', '$124load_attr.2']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=136, inst=PRECALL(arg=1, lineno=32)
2023-11-07 09:01:24,891 [DEBUG] stack ['$null$112.1', '$124load_attr.2', '$result134.3']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=140, inst=CALL(arg=1, lineno=32)
2023-11-07 09:01:24,891 [DEBUG] stack ['$null$112.1', '$124load_attr.2', '$result134.3']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=150, inst=RETURN_VALUE(arg=None, lineno=32)
2023-11-07 09:01:24,891 [DEBUG] stack ['$140call.4']
2023-11-07 09:01:24,891 [DEBUG] end state. edges=[]
2023-11-07 09:01:24,891 [DEBUG] pending: deque([State(pc_initial=62 nstack_initial=2)])
2023-11-07 09:01:24,891 [DEBUG] stack: ['$phi62.0', '$phi62.1']
2023-11-07 09:01:24,891 [DEBUG] state.pc_initial: State(pc_initial=62 nstack_initial=2)
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=62, inst=STORE_FAST(arg=3, lineno=30)
2023-11-07 09:01:24,891 [DEBUG] stack ['$phi62.0', '$phi62.1']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=31)
2023-11-07 09:01:24,891 [DEBUG] stack ['$phi62.0']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=31)
2023-11-07 09:01:24,891 [DEBUG] stack ['$phi62.0', '$result64.2']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=31)
2023-11-07 09:01:24,891 [DEBUG] stack ['$phi62.0', '$result64.2', '$x66.3']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=31)
2023-11-07 09:01:24,891 [DEBUG] stack ['$phi62.0', '$result64.2', '$x66.3', '$i68.4']
2023-11-07 09:01:24,891 [DEBUG] dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=31)
2023-11-07 09:01:24,891 [DEBUG] stack ['$phi62.0', '$result64.2', '$70binary_subscr.5']
2023-11-07 09:01:24,892 [DEBUG] dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=31)
2023-11-07 09:01:24,892 [DEBUG] stack ['$phi62.0', '$result64.2', '$70binary_subscr.5', '$y80.6']
2023-11-07 09:01:24,892 [DEBUG] dispatch pc=84, inst=BINARY_SUBSCR(arg=None, lineno=31)
2023-11-07 09:01:24,892 [DEBUG] stack ['$phi62.0', '$result64.2', '$70binary_subscr.5', '$y80.6', '$i82.7']
2023-11-07 09:01:24,892 [DEBUG] dispatch pc=94, inst=BINARY_OP(arg=10, lineno=31)
2023-11-07 09:01:24,892 [DEBUG] stack ['$phi62.0', '$result64.2', '$70binary_subscr.5', '$84binary_subscr.8']
2023-11-07 09:01:24,892 [DEBUG] dispatch pc=98, inst=LOAD_CONST(arg=3, lineno=31)
2023-11-07 09:01:24,892 [DEBUG] stack ['$phi62.0', '$result64.2', '$binop_sub94.9']
2023-11-07 09:01:24,892 [DEBUG] dispatch pc=100, inst=BINARY_OP(arg=8, lineno=31)
2023-11-07 09:01:24,892 [DEBUG] stack ['$phi62.0', '$result64.2', '$binop_sub94.9', '$const98.10']
2023-11-07 09:01:24,892 [DEBUG] dispatch pc=104, inst=BINARY_OP(arg=13, lineno=31)
2023-11-07 09:01:24,892 [DEBUG] stack ['$phi62.0', '$result64.2', '$binop_pow100.11']
2023-11-07 09:01:24,892 [DEBUG] dispatch pc=108, inst=STORE_FAST(arg=2, lineno=31)
2023-11-07 09:01:24,892 [DEBUG] stack ['$phi62.0', '$binop_iadd104.12']
2023-11-07 09:01:24,892 [DEBUG] dispatch pc=110, inst=JUMP_BACKWARD(arg=26, lineno=31)
2023-11-07 09:01:24,892 [DEBUG] stack ['$phi62.0']
2023-11-07 09:01:24,892 [DEBUG] end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
2023-11-07 09:01:24,892 [DEBUG] pending: deque([State(pc_initial=60 nstack_initial=1)])
2023-11-07 09:01:24,892 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:24,892 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=112 nstack_initial=0): set()})
2023-11-07 09:01:24,892 [DEBUG] defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
2023-11-07 09:01:24,892 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
2023-11-07 09:01:24,892 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
2023-11-07 09:01:24,892 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
2023-11-07 09:01:24,892 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
2023-11-07 09:01:24,892 [DEBUG] keep phismap: {'$phi60.0': {('$58get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
2023-11-07 09:01:24,892 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.8'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
2023-11-07 09:01:24,892 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:24,892 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$const4.0'}), (6, {'value': '$const4.0'}), (8, {'idx': 0, 'res': '$8load_global.1'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {'res': '$x20.3'}), (22, {'item': '$x20.3', 'res': '$22load_attr.4'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$const32.5'}), (34, {'index': '$const32.5', 'target': '$22load_attr.4', 'res': '$34binary_subscr.6'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'func': '$8load_global.1', 'args': ['$34binary_subscr.6'], 'kw_names': None, 'res': '$48call.7'}), (50, {}), (52, {}), (54, {}), (56, {}), (58, {'value': '$48call.7', 'res': '$58get_iter.8'})), outgoing_phis={'$phi60.0': '$58get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.8',)})
2023-11-07 09:01:24,892 [DEBUG] block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={112: (), 62: ('$phi60.0', '$60for_iter.2')})
2023-11-07 09:01:24,892 [DEBUG] block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$result64.2'}), (66, {'res': '$x66.3'}), (68, {'res': '$i68.4'}), (70, {'index': '$i68.4', 'target': '$x66.3', 'res': '$70binary_subscr.5'}), (72, {}), (74, {}), (76, {}), (78, {}), (80, {'res': '$y80.6'}), (82, {'res': '$i82.7'}), (84, {'index': '$i82.7', 'target': '$y80.6', 'res': '$84binary_subscr.8'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'op': '-', 'lhs': '$70binary_subscr.5', 'rhs': '$84binary_subscr.8', 'res': '$binop_sub94.9'}), (96, {}), (98, {'res': '$const98.10'}), (100, {'op': '**', 'lhs': '$binop_sub94.9', 'rhs': '$const98.10', 'res': '$binop_pow100.11'}), (102, {}), (104, {'op': '+=', 'lhs': '$result64.2', 'rhs': '$binop_pow100.11', 'res': '$binop_iadd104.12'}), (106, {}), (108, {'value': '$binop_iadd104.12'}), (110, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
2023-11-07 09:01:24,892 [DEBUG] block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'idx': 2, 'res': '$112load_global.0'}), (114, {}), (116, {}), (118, {}), (120, {}), (122, {}), (124, {'item': '$112load_global.0', 'res': '$124load_attr.2'}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'res': '$result134.3'}), (136, {}), (138, {}), (140, {'func': '$124load_attr.2', 'args': ['$result134.3'], 'kw_names': None, 'res': '$140call.4'}), (142, {}), (144, {}), (146, {}), (148, {}), (150, {'retval': '$140call.4', 'castval': '$150return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:24,893 [DEBUG] label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    result = const(float, 0.0)               ['result']
    $8load_global.1 = global(range: <class 'range'>) ['$8load_global.1']
    $22load_attr.4 = getattr(value=x, attr=shape) ['$22load_attr.4', 'x']
    $const32.5 = const(int, 0)               ['$const32.5']
    $34binary_subscr.6 = getitem(value=$22load_attr.4, index=$const32.5, fn=<built-in function getitem>) ['$22load_attr.4', '$34binary_subscr.6', '$const32.5']
    $48call.7 = call $8load_global.1($34binary_subscr.6, func=$8load_global.1, args=[Var($34binary_subscr.6, distances.py:30)], kws=(), vararg=None, varkwarg=None, target=None) ['$34binary_subscr.6', '$48call.7', '$8load_global.1']
    $58get_iter.8 = getiter(value=$48call.7) ['$48call.7', '$58get_iter.8']
    $phi60.0 = $58get_iter.8                 ['$58get_iter.8', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 112            ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $70binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>) ['$70binary_subscr.5', 'i', 'x']
    $84binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>) ['$84binary_subscr.8', 'i', 'y']
    $binop_sub94.9 = $70binary_subscr.5 - $84binary_subscr.8 ['$70binary_subscr.5', '$84binary_subscr.8', '$binop_sub94.9']
    $const98.10 = const(int, 2)              ['$const98.10']
    $binop_pow100.11 = $binop_sub94.9 ** $const98.10 ['$binop_pow100.11', '$binop_sub94.9', '$const98.10']
    $binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd104.12', '$binop_pow100.11', 'result']
    result = $binop_iadd104.12               ['$binop_iadd104.12', 'result']
    jump 60                                  []
label 112:
    $112load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$112load_global.0']
    $124load_attr.2 = getattr(value=$112load_global.0, attr=sqrt) ['$112load_global.0', '$124load_attr.2']
    $140call.4 = call $124load_attr.2(result, func=$124load_attr.2, args=[Var(result, distances.py:29)], kws=(), vararg=None, varkwarg=None, target=None) ['$124load_attr.2', '$140call.4', 'result']
    $150return_value.5 = cast(value=$140call.4) ['$140call.4', '$150return_value.5']
    return $150return_value.5                ['$150return_value.5']

2023-11-07 09:01:24,896 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:24,896 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f03f110>
2023-11-07 09:01:24,897 [DEBUG] on stmt: x = arg(0, name=x)
2023-11-07 09:01:24,897 [DEBUG] on stmt: y = arg(1, name=y)
2023-11-07 09:01:24,897 [DEBUG] on stmt: result = const(float, 0.0)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $8load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $22load_attr.4 = getattr(value=x, attr=shape)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $const32.5 = const(int, 0)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $34binary_subscr.6 = static_getitem(value=$22load_attr.4, index=0, index_var=$const32.5, fn=<built-in function getitem>)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $48call.7 = call $8load_global.1($34binary_subscr.6, func=$8load_global.1, args=[Var($34binary_subscr.6, distances.py:30)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $58get_iter.8 = getiter(value=$48call.7)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $phi60.0 = $58get_iter.8
2023-11-07 09:01:24,897 [DEBUG] on stmt: jump 60
2023-11-07 09:01:24,897 [DEBUG] ==== SSA block analysis pass on 60
2023-11-07 09:01:24,897 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f03f110>
2023-11-07 09:01:24,897 [DEBUG] on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $phi62.1 = $60for_iter.2
2023-11-07 09:01:24,897 [DEBUG] on stmt: branch $60for_iter.3, 62, 112
2023-11-07 09:01:24,897 [DEBUG] ==== SSA block analysis pass on 62
2023-11-07 09:01:24,897 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f03f110>
2023-11-07 09:01:24,897 [DEBUG] on stmt: i = $phi62.1
2023-11-07 09:01:24,897 [DEBUG] on stmt: $70binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $84binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $binop_sub94.9 = $70binary_subscr.5 - $84binary_subscr.8
2023-11-07 09:01:24,897 [DEBUG] on stmt: $const98.10 = const(int, 2)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $binop_pow100.11 = $binop_sub94.9 ** $const98.10
2023-11-07 09:01:24,897 [DEBUG] on stmt: $binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,897 [DEBUG] on stmt: result = $binop_iadd104.12
2023-11-07 09:01:24,897 [DEBUG] on stmt: jump 60
2023-11-07 09:01:24,897 [DEBUG] ==== SSA block analysis pass on 112
2023-11-07 09:01:24,897 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f03f110>
2023-11-07 09:01:24,897 [DEBUG] on stmt: $112load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $124load_attr.2 = getattr(value=$112load_global.0, attr=sqrt)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $140call.4 = call $124load_attr.2(result, func=$124load_attr.2, args=[Var(result, distances.py:29)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,897 [DEBUG] on stmt: $150return_value.5 = cast(value=$140call.4)
2023-11-07 09:01:24,897 [DEBUG] on stmt: return $150return_value.5
2023-11-07 09:01:24,897 [DEBUG] defs defaultdict(<class 'list'>,
            {'$112load_global.0': [<numba.core.ir.Assign object at 0x280268110>],
             '$124load_attr.2': [<numba.core.ir.Assign object at 0x280269d50>],
             '$140call.4': [<numba.core.ir.Assign object at 0x28026ad90>],
             '$150return_value.5': [<numba.core.ir.Assign object at 0x28026a690>],
             '$22load_attr.4': [<numba.core.ir.Assign object at 0x28025d210>],
             '$34binary_subscr.6': [<numba.core.ir.Assign object at 0x280143790>],
             '$48call.7': [<numba.core.ir.Assign object at 0x28025ee50>],
             '$58get_iter.8': [<numba.core.ir.Assign object at 0x28025df90>],
             '$60for_iter.1': [<numba.core.ir.Assign object at 0x28025e6d0>],
             '$60for_iter.2': [<numba.core.ir.Assign object at 0x28025ff50>],
             '$60for_iter.3': [<numba.core.ir.Assign object at 0x28025d290>],
             '$70binary_subscr.5': [<numba.core.ir.Assign object at 0x28025c450>],
             '$84binary_subscr.8': [<numba.core.ir.Assign object at 0x28025f8d0>],
             '$8load_global.1': [<numba.core.ir.Assign object at 0x28025dd50>],
             '$binop_iadd104.12': [<numba.core.ir.Assign object at 0x280269310>],
             '$binop_pow100.11': [<numba.core.ir.Assign object at 0x28026a410>],
             '$binop_sub94.9': [<numba.core.ir.Assign object at 0x280268ed0>],
             '$const32.5': [<numba.core.ir.Assign object at 0x28025cb90>],
             '$const98.10': [<numba.core.ir.Assign object at 0x280269c90>],
             '$phi60.0': [<numba.core.ir.Assign object at 0x17f45d310>],
             '$phi62.1': [<numba.core.ir.Assign object at 0x28025c5d0>],
             'i': [<numba.core.ir.Assign object at 0x28025f4d0>],
             'result': [<numba.core.ir.Assign object at 0x280280650>,
                        <numba.core.ir.Assign object at 0x28026a490>],
             'x': [<numba.core.ir.Assign object at 0x17efa82d0>],
             'y': [<numba.core.ir.Assign object at 0x28020d050>]})
2023-11-07 09:01:24,897 [DEBUG] SSA violators {'result'}
2023-11-07 09:01:24,897 [DEBUG] Fix SSA violator on var result
2023-11-07 09:01:24,897 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,897 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f46d790>
2023-11-07 09:01:24,897 [DEBUG] on stmt: x = arg(0, name=x)
2023-11-07 09:01:24,897 [DEBUG] on stmt: y = arg(1, name=y)
2023-11-07 09:01:24,897 [DEBUG] on stmt: result = const(float, 0.0)
2023-11-07 09:01:24,897 [DEBUG] first assign: result
2023-11-07 09:01:24,897 [DEBUG] replaced with: result = const(float, 0.0)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $8load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $22load_attr.4 = getattr(value=x, attr=shape)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $const32.5 = const(int, 0)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $34binary_subscr.6 = static_getitem(value=$22load_attr.4, index=0, index_var=$const32.5, fn=<built-in function getitem>)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $48call.7 = call $8load_global.1($34binary_subscr.6, func=$8load_global.1, args=[Var($34binary_subscr.6, distances.py:30)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $58get_iter.8 = getiter(value=$48call.7)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $phi60.0 = $58get_iter.8
2023-11-07 09:01:24,898 [DEBUG] on stmt: jump 60
2023-11-07 09:01:24,898 [DEBUG] ==== SSA block rewrite pass on 60
2023-11-07 09:01:24,898 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f46d790>
2023-11-07 09:01:24,898 [DEBUG] on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $phi62.1 = $60for_iter.2
2023-11-07 09:01:24,898 [DEBUG] on stmt: branch $60for_iter.3, 62, 112
2023-11-07 09:01:24,898 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,898 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f46d790>
2023-11-07 09:01:24,898 [DEBUG] on stmt: i = $phi62.1
2023-11-07 09:01:24,898 [DEBUG] on stmt: $70binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $84binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $binop_sub94.9 = $70binary_subscr.5 - $84binary_subscr.8
2023-11-07 09:01:24,898 [DEBUG] on stmt: $const98.10 = const(int, 2)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $binop_pow100.11 = $binop_sub94.9 ** $const98.10
2023-11-07 09:01:24,898 [DEBUG] on stmt: $binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,898 [DEBUG] on stmt: result = $binop_iadd104.12
2023-11-07 09:01:24,898 [DEBUG] replaced with: result.1 = $binop_iadd104.12
2023-11-07 09:01:24,898 [DEBUG] on stmt: jump 60
2023-11-07 09:01:24,898 [DEBUG] ==== SSA block rewrite pass on 112
2023-11-07 09:01:24,898 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f46d790>
2023-11-07 09:01:24,898 [DEBUG] on stmt: $112load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $124load_attr.2 = getattr(value=$112load_global.0, attr=sqrt)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $140call.4 = call $124load_attr.2(result, func=$124load_attr.2, args=[Var(result, distances.py:29)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $150return_value.5 = cast(value=$140call.4)
2023-11-07 09:01:24,898 [DEBUG] on stmt: return $150return_value.5
2023-11-07 09:01:24,898 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x2801c7d50>],
             62: [<numba.core.ir.Assign object at 0x2802a4550>]})
2023-11-07 09:01:24,898 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,898 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28020f010>
2023-11-07 09:01:24,898 [DEBUG] on stmt: x = arg(0, name=x)
2023-11-07 09:01:24,898 [DEBUG] on stmt: y = arg(1, name=y)
2023-11-07 09:01:24,898 [DEBUG] on stmt: result = const(float, 0.0)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $8load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $22load_attr.4 = getattr(value=x, attr=shape)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $const32.5 = const(int, 0)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $34binary_subscr.6 = static_getitem(value=$22load_attr.4, index=0, index_var=$const32.5, fn=<built-in function getitem>)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $48call.7 = call $8load_global.1($34binary_subscr.6, func=$8load_global.1, args=[Var($34binary_subscr.6, distances.py:30)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $58get_iter.8 = getiter(value=$48call.7)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $phi60.0 = $58get_iter.8
2023-11-07 09:01:24,898 [DEBUG] on stmt: jump 60
2023-11-07 09:01:24,898 [DEBUG] ==== SSA block rewrite pass on 60
2023-11-07 09:01:24,898 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28020f010>
2023-11-07 09:01:24,898 [DEBUG] on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $phi62.1 = $60for_iter.2
2023-11-07 09:01:24,898 [DEBUG] on stmt: branch $60for_iter.3, 62, 112
2023-11-07 09:01:24,898 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,898 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28020f010>
2023-11-07 09:01:24,898 [DEBUG] on stmt: i = $phi62.1
2023-11-07 09:01:24,898 [DEBUG] on stmt: $70binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $84binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $binop_sub94.9 = $70binary_subscr.5 - $84binary_subscr.8
2023-11-07 09:01:24,898 [DEBUG] on stmt: $const98.10 = const(int, 2)
2023-11-07 09:01:24,898 [DEBUG] on stmt: $binop_pow100.11 = $binop_sub94.9 ** $const98.10
2023-11-07 09:01:24,898 [DEBUG] on stmt: $binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,898 [DEBUG] find_def var='result' stmt=$binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,898 [DEBUG] find_def_from_top label 62
2023-11-07 09:01:24,898 [DEBUG] idom 60 from label 62
2023-11-07 09:01:24,898 [DEBUG] find_def_from_bottom label 60
2023-11-07 09:01:24,898 [DEBUG] find_def_from_top label 60
2023-11-07 09:01:24,898 [DEBUG] insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
2023-11-07 09:01:24,898 [DEBUG] find_def_from_bottom label 0
2023-11-07 09:01:24,898 [DEBUG] incoming_def result = const(float, 0.0)
2023-11-07 09:01:24,898 [DEBUG] find_def_from_bottom label 62
2023-11-07 09:01:24,898 [DEBUG] incoming_def result.1 = $binop_iadd104.12
2023-11-07 09:01:24,898 [DEBUG] replaced with: $binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,899 [DEBUG] on stmt: result.1 = $binop_iadd104.12
2023-11-07 09:01:24,899 [DEBUG] on stmt: jump 60
2023-11-07 09:01:24,899 [DEBUG] ==== SSA block rewrite pass on 112
2023-11-07 09:01:24,899 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28020f010>
2023-11-07 09:01:24,899 [DEBUG] on stmt: $112load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:24,899 [DEBUG] on stmt: $124load_attr.2 = getattr(value=$112load_global.0, attr=sqrt)
2023-11-07 09:01:24,899 [DEBUG] on stmt: $140call.4 = call $124load_attr.2(result, func=$124load_attr.2, args=[Var(result, distances.py:29)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,899 [DEBUG] find_def var='result' stmt=$140call.4 = call $124load_attr.2(result, func=$124load_attr.2, args=[Var(result, distances.py:29)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,899 [DEBUG] find_def_from_top label 112
2023-11-07 09:01:24,899 [DEBUG] idom 60 from label 112
2023-11-07 09:01:24,899 [DEBUG] find_def_from_bottom label 60
2023-11-07 09:01:24,899 [DEBUG] replaced with: $140call.4 = call $124load_attr.2(result.2, func=$124load_attr.2, args=[Var(result.2, distances.py:30)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,899 [DEBUG] on stmt: $150return_value.5 = cast(value=$140call.4)
2023-11-07 09:01:24,899 [DEBUG] on stmt: return $150return_value.5
2023-11-07 09:01:24,908 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	COPY_FREE_VARS(arg=3, lineno=214)
           4	RESUME(arg=0, lineno=214)
           6	PUSH_NULL(arg=None, lineno=216)
           8	LOAD_DEREF(arg=6, lineno=216)
          10	LOAD_CONST(arg=1, lineno=216)
          12	PRECALL(arg=1, lineno=216)
          16	CALL(arg=1, lineno=216)
          26	STORE_FAST(arg=2, lineno=216)
          28	PUSH_NULL(arg=None, lineno=217)
          30	LOAD_DEREF(arg=6, lineno=217)
          32	LOAD_FAST(arg=0, lineno=217)
          34	PRECALL(arg=1, lineno=217)
          38	CALL(arg=1, lineno=217)
          48	STORE_FAST(arg=0, lineno=217)
          50	LOAD_FAST(arg=1, lineno=218)
          52	LOAD_CONST(arg=2, lineno=218)
          54	COMPARE_OP(arg=0, lineno=218)
          60	POP_JUMP_FORWARD_IF_FALSE(arg=60, lineno=218)
          62	LOAD_CONST(arg=3, lineno=219)
          64	STORE_FAST(arg=3, lineno=219)
          66	LOAD_FAST(arg=1, lineno=220)
          68	UNARY_NEGATIVE(arg=None, lineno=220)
          70	STORE_FAST(arg=4, lineno=220)
          72	LOAD_FAST(arg=4, lineno=221)
          74	LOAD_CONST(arg=2, lineno=221)
          76	COMPARE_OP(arg=0, lineno=221)
          82	POP_JUMP_FORWARD_IF_FALSE(arg=7, lineno=221)
          84	LOAD_GLOBAL(arg=0, lineno=222)
          96	RAISE_VARARGS(arg=1, lineno=222)
>         98	LOAD_DEREF(arg=5, lineno=223)
         100	POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=223)
         102	LOAD_FAST(arg=0, lineno=224)
         104	LOAD_CONST(arg=2, lineno=224)
         106	COMPARE_OP(arg=2, lineno=224)
         112	POP_JUMP_FORWARD_IF_FALSE(arg=19, lineno=224)
         114	LOAD_DEREF(arg=7, lineno=225)
         116	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=225)
         118	LOAD_DEREF(arg=7, lineno=226)
         120	RETURN_VALUE(arg=None, lineno=226)
>        122	LOAD_GLOBAL(arg=3, lineno=228)
         134	LOAD_CONST(arg=4, lineno=228)
         136	PRECALL(arg=1, lineno=228)
         140	CALL(arg=1, lineno=228)
         150	RAISE_VARARGS(arg=1, lineno=228)
>        152	LOAD_FAST(arg=0, lineno=229)
         154	LOAD_CONST(arg=1, lineno=229)
         156	COMPARE_OP(arg=3, lineno=229)
         162	POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=229)
         164	LOAD_FAST(arg=0, lineno=229)
         166	LOAD_CONST(arg=5, lineno=229)
         168	COMPARE_OP(arg=3, lineno=229)
         174	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=229)
         176	LOAD_CONST(arg=2, lineno=230)
         178	RETURN_VALUE(arg=None, lineno=230)
>        180	JUMP_FORWARD(arg=4, lineno=230)
>        182	LOAD_CONST(arg=6, lineno=232)
         184	STORE_FAST(arg=3, lineno=232)
         186	LOAD_FAST(arg=1, lineno=233)
         188	STORE_FAST(arg=4, lineno=233)
>        190	LOAD_FAST(arg=4, lineno=234)
         192	LOAD_CONST(arg=7, lineno=234)
         194	COMPARE_OP(arg=4, lineno=234)
         200	POP_JUMP_FORWARD_IF_FALSE(arg=34, lineno=234)
         202	LOAD_GLOBAL(arg=5, lineno=236)
         214	LOAD_ATTR(arg=3, lineno=236)
         224	LOAD_FAST(arg=0, lineno=236)
         226	LOAD_GLOBAL(arg=9, lineno=236)
         238	LOAD_FAST(arg=1, lineno=236)
         240	PRECALL(arg=1, lineno=236)
         244	CALL(arg=1, lineno=236)
         254	PRECALL(arg=2, lineno=236)
         258	CALL(arg=2, lineno=236)
         268	RETURN_VALUE(arg=None, lineno=236)
>        270	LOAD_FAST(arg=4, lineno=237)
         272	LOAD_CONST(arg=2, lineno=237)
         274	COMPARE_OP(arg=3, lineno=237)
         280	POP_JUMP_FORWARD_IF_FALSE(arg=26, lineno=237)
>        282	LOAD_FAST(arg=4, lineno=238)
         284	LOAD_CONST(arg=1, lineno=238)
         286	BINARY_OP(arg=1, lineno=238)
         290	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=238)
         292	LOAD_FAST(arg=2, lineno=239)
         294	LOAD_FAST(arg=0, lineno=239)
         296	BINARY_OP(arg=18, lineno=239)
         300	STORE_FAST(arg=2, lineno=239)
>        302	LOAD_FAST(arg=4, lineno=240)
         304	LOAD_CONST(arg=1, lineno=240)
         306	BINARY_OP(arg=22, lineno=240)
         310	STORE_FAST(arg=4, lineno=240)
         312	LOAD_FAST(arg=0, lineno=241)
         314	LOAD_FAST(arg=0, lineno=241)
         316	BINARY_OP(arg=18, lineno=241)
         320	STORE_FAST(arg=0, lineno=241)
         322	LOAD_FAST(arg=4, lineno=237)
         324	LOAD_CONST(arg=2, lineno=237)
         326	COMPARE_OP(arg=3, lineno=237)
         332	POP_JUMP_BACKWARD_IF_TRUE(arg=26, lineno=237)
>        334	LOAD_FAST(arg=3, lineno=243)
         336	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=243)
         338	LOAD_CONST(arg=8, lineno=243)
         340	LOAD_FAST(arg=2, lineno=243)
         342	BINARY_OP(arg=11, lineno=243)
         346	JUMP_FORWARD(arg=1, lineno=243)
>        348	LOAD_FAST(arg=2, lineno=243)
>        350	RETURN_VALUE(arg=None, lineno=243)
2023-11-07 09:01:24,908 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:24,908 [DEBUG] stack: []
2023-11-07 09:01:24,908 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:24,908 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=214)
2023-11-07 09:01:24,908 [DEBUG] stack []
2023-11-07 09:01:24,908 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=3, lineno=214)
2023-11-07 09:01:24,908 [DEBUG] stack []
2023-11-07 09:01:24,908 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=214)
2023-11-07 09:01:24,908 [DEBUG] stack []
2023-11-07 09:01:24,908 [DEBUG] dispatch pc=6, inst=PUSH_NULL(arg=None, lineno=216)
2023-11-07 09:01:24,908 [DEBUG] stack []
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=8, inst=LOAD_DEREF(arg=6, lineno=216)
2023-11-07 09:01:24,909 [DEBUG] stack ['$null$6.0']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=216)
2023-11-07 09:01:24,909 [DEBUG] stack ['$null$6.0', '$8load_deref.1']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=12, inst=PRECALL(arg=1, lineno=216)
2023-11-07 09:01:24,909 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$const10.2']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=16, inst=CALL(arg=1, lineno=216)
2023-11-07 09:01:24,909 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$const10.2']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=26, inst=STORE_FAST(arg=2, lineno=216)
2023-11-07 09:01:24,909 [DEBUG] stack ['$16call.3']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=28, inst=PUSH_NULL(arg=None, lineno=217)
2023-11-07 09:01:24,909 [DEBUG] stack []
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=30, inst=LOAD_DEREF(arg=6, lineno=217)
2023-11-07 09:01:24,909 [DEBUG] stack ['$null$28.4']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=217)
2023-11-07 09:01:24,909 [DEBUG] stack ['$null$28.4', '$30load_deref.5']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=34, inst=PRECALL(arg=1, lineno=217)
2023-11-07 09:01:24,909 [DEBUG] stack ['$null$28.4', '$30load_deref.5', '$a32.6']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=38, inst=CALL(arg=1, lineno=217)
2023-11-07 09:01:24,909 [DEBUG] stack ['$null$28.4', '$30load_deref.5', '$a32.6']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=48, inst=STORE_FAST(arg=0, lineno=217)
2023-11-07 09:01:24,909 [DEBUG] stack ['$38call.7']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=218)
2023-11-07 09:01:24,909 [DEBUG] stack []
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=218)
2023-11-07 09:01:24,909 [DEBUG] stack ['$b50.8']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=54, inst=COMPARE_OP(arg=0, lineno=218)
2023-11-07 09:01:24,909 [DEBUG] stack ['$b50.8', '$const52.9']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=60, inst=POP_JUMP_FORWARD_IF_FALSE(arg=60, lineno=218)
2023-11-07 09:01:24,909 [DEBUG] stack ['$54compare_op.10']
2023-11-07 09:01:24,909 [DEBUG] end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,909 [DEBUG] pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=182 nstack_initial=0)])
2023-11-07 09:01:24,909 [DEBUG] stack: []
2023-11-07 09:01:24,909 [DEBUG] state.pc_initial: State(pc_initial=62 nstack_initial=0)
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=62, inst=LOAD_CONST(arg=3, lineno=219)
2023-11-07 09:01:24,909 [DEBUG] stack []
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=64, inst=STORE_FAST(arg=3, lineno=219)
2023-11-07 09:01:24,909 [DEBUG] stack ['$const62.0']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=220)
2023-11-07 09:01:24,909 [DEBUG] stack []
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=68, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2023-11-07 09:01:24,909 [DEBUG] stack ['$b66.1']
2023-11-07 09:01:24,909 [DEBUG] dispatch pc=70, inst=STORE_FAST(arg=4, lineno=220)
2023-11-07 09:01:24,909 [DEBUG] stack ['$68unary_negative.2']
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=221)
2023-11-07 09:01:24,910 [DEBUG] stack []
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=221)
2023-11-07 09:01:24,910 [DEBUG] stack ['$exp72.3']
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=76, inst=COMPARE_OP(arg=0, lineno=221)
2023-11-07 09:01:24,910 [DEBUG] stack ['$exp72.3', '$const74.4']
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=82, inst=POP_JUMP_FORWARD_IF_FALSE(arg=7, lineno=221)
2023-11-07 09:01:24,910 [DEBUG] stack ['$76compare_op.5']
2023-11-07 09:01:24,910 [DEBUG] end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,910 [DEBUG] pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2023-11-07 09:01:24,910 [DEBUG] stack: []
2023-11-07 09:01:24,910 [DEBUG] state.pc_initial: State(pc_initial=182 nstack_initial=0)
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=182, inst=LOAD_CONST(arg=6, lineno=232)
2023-11-07 09:01:24,910 [DEBUG] stack []
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=184, inst=STORE_FAST(arg=3, lineno=232)
2023-11-07 09:01:24,910 [DEBUG] stack ['$const182.0']
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=186, inst=LOAD_FAST(arg=1, lineno=233)
2023-11-07 09:01:24,910 [DEBUG] stack []
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=188, inst=STORE_FAST(arg=4, lineno=233)
2023-11-07 09:01:24,910 [DEBUG] stack ['$b186.1']
2023-11-07 09:01:24,910 [DEBUG] end state. edges=[Edge(pc=190, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,910 [DEBUG] pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=98 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-11-07 09:01:24,910 [DEBUG] stack: []
2023-11-07 09:01:24,910 [DEBUG] state.pc_initial: State(pc_initial=84 nstack_initial=0)
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=84, inst=LOAD_GLOBAL(arg=0, lineno=222)
2023-11-07 09:01:24,910 [DEBUG] stack []
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=96, inst=RAISE_VARARGS(arg=1, lineno=222)
2023-11-07 09:01:24,910 [DEBUG] stack ['$84load_global.0']
2023-11-07 09:01:24,910 [DEBUG] end state. edges=[]
2023-11-07 09:01:24,910 [DEBUG] pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-11-07 09:01:24,910 [DEBUG] stack: []
2023-11-07 09:01:24,910 [DEBUG] state.pc_initial: State(pc_initial=98 nstack_initial=0)
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=98, inst=LOAD_DEREF(arg=5, lineno=223)
2023-11-07 09:01:24,910 [DEBUG] stack []
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=100, inst=POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=223)
2023-11-07 09:01:24,910 [DEBUG] stack ['$98load_deref.0']
2023-11-07 09:01:24,910 [DEBUG] end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,910 [DEBUG] pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-11-07 09:01:24,910 [DEBUG] stack: []
2023-11-07 09:01:24,910 [DEBUG] state.pc_initial: State(pc_initial=190 nstack_initial=0)
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=190, inst=LOAD_FAST(arg=4, lineno=234)
2023-11-07 09:01:24,910 [DEBUG] stack []
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=192, inst=LOAD_CONST(arg=7, lineno=234)
2023-11-07 09:01:24,910 [DEBUG] stack ['$exp190.0']
2023-11-07 09:01:24,910 [DEBUG] dispatch pc=194, inst=COMPARE_OP(arg=4, lineno=234)
2023-11-07 09:01:24,910 [DEBUG] stack ['$exp190.0', '$const192.1']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=200, inst=POP_JUMP_FORWARD_IF_FALSE(arg=34, lineno=234)
2023-11-07 09:01:24,911 [DEBUG] stack ['$194compare_op.2']
2023-11-07 09:01:24,911 [DEBUG] end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=270, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,911 [DEBUG] pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0)])
2023-11-07 09:01:24,911 [DEBUG] stack: []
2023-11-07 09:01:24,911 [DEBUG] state.pc_initial: State(pc_initial=102 nstack_initial=0)
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=102, inst=LOAD_FAST(arg=0, lineno=224)
2023-11-07 09:01:24,911 [DEBUG] stack []
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=224)
2023-11-07 09:01:24,911 [DEBUG] stack ['$a102.0']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=106, inst=COMPARE_OP(arg=2, lineno=224)
2023-11-07 09:01:24,911 [DEBUG] stack ['$a102.0', '$const104.1']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=112, inst=POP_JUMP_FORWARD_IF_FALSE(arg=19, lineno=224)
2023-11-07 09:01:24,911 [DEBUG] stack ['$106compare_op.2']
2023-11-07 09:01:24,911 [DEBUG] end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=152, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,911 [DEBUG] pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0)])
2023-11-07 09:01:24,911 [DEBUG] stack: []
2023-11-07 09:01:24,911 [DEBUG] state.pc_initial: State(pc_initial=180 nstack_initial=0)
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=180, inst=JUMP_FORWARD(arg=4, lineno=230)
2023-11-07 09:01:24,911 [DEBUG] stack []
2023-11-07 09:01:24,911 [DEBUG] end state. edges=[Edge(pc=190, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,911 [DEBUG] pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-11-07 09:01:24,911 [DEBUG] stack: []
2023-11-07 09:01:24,911 [DEBUG] state.pc_initial: State(pc_initial=202 nstack_initial=0)
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=202, inst=LOAD_GLOBAL(arg=5, lineno=236)
2023-11-07 09:01:24,911 [DEBUG] stack []
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=214, inst=LOAD_ATTR(arg=3, lineno=236)
2023-11-07 09:01:24,911 [DEBUG] stack ['$null$202.1', '$202load_global.0']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=224, inst=LOAD_FAST(arg=0, lineno=236)
2023-11-07 09:01:24,911 [DEBUG] stack ['$null$202.1', '$214load_attr.2']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=226, inst=LOAD_GLOBAL(arg=9, lineno=236)
2023-11-07 09:01:24,911 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=238, inst=LOAD_FAST(arg=1, lineno=236)
2023-11-07 09:01:24,911 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=240, inst=PRECALL(arg=1, lineno=236)
2023-11-07 09:01:24,911 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4', '$b238.6']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=244, inst=CALL(arg=1, lineno=236)
2023-11-07 09:01:24,911 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4', '$b238.6']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=254, inst=PRECALL(arg=2, lineno=236)
2023-11-07 09:01:24,911 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$244call.7']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=258, inst=CALL(arg=2, lineno=236)
2023-11-07 09:01:24,911 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$244call.7']
2023-11-07 09:01:24,911 [DEBUG] dispatch pc=268, inst=RETURN_VALUE(arg=None, lineno=236)
2023-11-07 09:01:24,911 [DEBUG] stack ['$258call.8']
2023-11-07 09:01:24,911 [DEBUG] end state. edges=[]
2023-11-07 09:01:24,912 [DEBUG] pending: deque([State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-11-07 09:01:24,912 [DEBUG] stack: []
2023-11-07 09:01:24,912 [DEBUG] state.pc_initial: State(pc_initial=270 nstack_initial=0)
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=270, inst=LOAD_FAST(arg=4, lineno=237)
2023-11-07 09:01:24,912 [DEBUG] stack []
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=272, inst=LOAD_CONST(arg=2, lineno=237)
2023-11-07 09:01:24,912 [DEBUG] stack ['$exp270.0']
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=274, inst=COMPARE_OP(arg=3, lineno=237)
2023-11-07 09:01:24,912 [DEBUG] stack ['$exp270.0', '$const272.1']
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=280, inst=POP_JUMP_FORWARD_IF_FALSE(arg=26, lineno=237)
2023-11-07 09:01:24,912 [DEBUG] stack ['$274compare_op.2']
2023-11-07 09:01:24,912 [DEBUG] end state. edges=[Edge(pc=282, stack=(), blockstack=(), npush=0), Edge(pc=334, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,912 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0)])
2023-11-07 09:01:24,912 [DEBUG] stack: []
2023-11-07 09:01:24,912 [DEBUG] state.pc_initial: State(pc_initial=114 nstack_initial=0)
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=114, inst=LOAD_DEREF(arg=7, lineno=225)
2023-11-07 09:01:24,912 [DEBUG] stack []
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=116, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=225)
2023-11-07 09:01:24,912 [DEBUG] stack ['$114load_deref.0']
2023-11-07 09:01:24,912 [DEBUG] end state. edges=[Edge(pc=118, stack=(), blockstack=(), npush=0), Edge(pc=122, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,912 [DEBUG] pending: deque([State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
2023-11-07 09:01:24,912 [DEBUG] stack: []
2023-11-07 09:01:24,912 [DEBUG] state.pc_initial: State(pc_initial=152 nstack_initial=0)
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=152, inst=LOAD_FAST(arg=0, lineno=229)
2023-11-07 09:01:24,912 [DEBUG] stack []
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=154, inst=LOAD_CONST(arg=1, lineno=229)
2023-11-07 09:01:24,912 [DEBUG] stack ['$a152.0']
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=156, inst=COMPARE_OP(arg=3, lineno=229)
2023-11-07 09:01:24,912 [DEBUG] stack ['$a152.0', '$const154.1']
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=162, inst=POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=229)
2023-11-07 09:01:24,912 [DEBUG] stack ['$156compare_op.2']
2023-11-07 09:01:24,912 [DEBUG] end state. edges=[Edge(pc=164, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,912 [DEBUG] pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-11-07 09:01:24,912 [DEBUG] pending: deque([State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-11-07 09:01:24,912 [DEBUG] stack: []
2023-11-07 09:01:24,912 [DEBUG] state.pc_initial: State(pc_initial=282 nstack_initial=0)
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=282, inst=LOAD_FAST(arg=4, lineno=238)
2023-11-07 09:01:24,912 [DEBUG] stack []
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=284, inst=LOAD_CONST(arg=1, lineno=238)
2023-11-07 09:01:24,912 [DEBUG] stack ['$exp282.0']
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=286, inst=BINARY_OP(arg=1, lineno=238)
2023-11-07 09:01:24,912 [DEBUG] stack ['$exp282.0', '$const284.1']
2023-11-07 09:01:24,912 [DEBUG] dispatch pc=290, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=238)
2023-11-07 09:01:24,912 [DEBUG] stack ['$binop_and_286.2']
2023-11-07 09:01:24,912 [DEBUG] end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,912 [DEBUG] pending: deque([State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2023-11-07 09:01:24,913 [DEBUG] stack: []
2023-11-07 09:01:24,913 [DEBUG] state.pc_initial: State(pc_initial=334 nstack_initial=0)
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=334, inst=LOAD_FAST(arg=3, lineno=243)
2023-11-07 09:01:24,913 [DEBUG] stack []
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=336, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=243)
2023-11-07 09:01:24,913 [DEBUG] stack ['$invert334.0']
2023-11-07 09:01:24,913 [DEBUG] end state. edges=[Edge(pc=338, stack=(), blockstack=(), npush=0), Edge(pc=348, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,913 [DEBUG] pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-11-07 09:01:24,913 [DEBUG] stack: []
2023-11-07 09:01:24,913 [DEBUG] state.pc_initial: State(pc_initial=118 nstack_initial=0)
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=118, inst=LOAD_DEREF(arg=7, lineno=226)
2023-11-07 09:01:24,913 [DEBUG] stack []
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=226)
2023-11-07 09:01:24,913 [DEBUG] stack ['$118load_deref.0']
2023-11-07 09:01:24,913 [DEBUG] end state. edges=[]
2023-11-07 09:01:24,913 [DEBUG] pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-11-07 09:01:24,913 [DEBUG] stack: []
2023-11-07 09:01:24,913 [DEBUG] state.pc_initial: State(pc_initial=122 nstack_initial=0)
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=122, inst=LOAD_GLOBAL(arg=3, lineno=228)
2023-11-07 09:01:24,913 [DEBUG] stack []
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=134, inst=LOAD_CONST(arg=4, lineno=228)
2023-11-07 09:01:24,913 [DEBUG] stack ['$null$122.1', '$122load_global.0']
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=136, inst=PRECALL(arg=1, lineno=228)
2023-11-07 09:01:24,913 [DEBUG] stack ['$null$122.1', '$122load_global.0', '$const134.2']
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=140, inst=CALL(arg=1, lineno=228)
2023-11-07 09:01:24,913 [DEBUG] stack ['$null$122.1', '$122load_global.0', '$const134.2']
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=150, inst=RAISE_VARARGS(arg=1, lineno=228)
2023-11-07 09:01:24,913 [DEBUG] stack ['$140call.3']
2023-11-07 09:01:24,913 [DEBUG] end state. edges=[]
2023-11-07 09:01:24,913 [DEBUG] pending: deque([State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-11-07 09:01:24,913 [DEBUG] stack: []
2023-11-07 09:01:24,913 [DEBUG] state.pc_initial: State(pc_initial=164 nstack_initial=0)
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=229)
2023-11-07 09:01:24,913 [DEBUG] stack []
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=166, inst=LOAD_CONST(arg=5, lineno=229)
2023-11-07 09:01:24,913 [DEBUG] stack ['$a164.0']
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=168, inst=COMPARE_OP(arg=3, lineno=229)
2023-11-07 09:01:24,913 [DEBUG] stack ['$a164.0', '$const166.1']
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=174, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=229)
2023-11-07 09:01:24,913 [DEBUG] stack ['$168compare_op.2']
2023-11-07 09:01:24,913 [DEBUG] end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,913 [DEBUG] pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-11-07 09:01:24,913 [DEBUG] pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-11-07 09:01:24,913 [DEBUG] stack: []
2023-11-07 09:01:24,913 [DEBUG] state.pc_initial: State(pc_initial=292 nstack_initial=0)
2023-11-07 09:01:24,913 [DEBUG] dispatch pc=292, inst=LOAD_FAST(arg=2, lineno=239)
2023-11-07 09:01:24,913 [DEBUG] stack []
2023-11-07 09:01:24,914 [DEBUG] dispatch pc=294, inst=LOAD_FAST(arg=0, lineno=239)
2023-11-07 09:01:24,914 [DEBUG] stack ['$r292.0']
2023-11-07 09:01:24,914 [DEBUG] dispatch pc=296, inst=BINARY_OP(arg=18, lineno=239)
2023-11-07 09:01:24,914 [DEBUG] stack ['$r292.0', '$a294.1']
2023-11-07 09:01:24,914 [DEBUG] dispatch pc=300, inst=STORE_FAST(arg=2, lineno=239)
2023-11-07 09:01:24,914 [DEBUG] stack ['$binop_imul296.2']
2023-11-07 09:01:24,914 [DEBUG] end state. edges=[Edge(pc=302, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,914 [DEBUG] pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2023-11-07 09:01:24,914 [DEBUG] stack: []
2023-11-07 09:01:24,914 [DEBUG] state.pc_initial: State(pc_initial=302 nstack_initial=0)
2023-11-07 09:01:24,914 [DEBUG] dispatch pc=302, inst=LOAD_FAST(arg=4, lineno=240)
2023-11-07 09:01:24,914 [DEBUG] stack []
2023-11-07 09:01:24,914 [DEBUG] dispatch pc=304, inst=LOAD_CONST(arg=1, lineno=240)
2023-11-07 09:01:24,914 [DEBUG] stack ['$exp302.0']
2023-11-07 09:01:24,914 [DEBUG] dispatch pc=306, inst=BINARY_OP(arg=22, lineno=240)
2023-11-07 09:01:24,914 [DEBUG] stack ['$exp302.0', '$const304.1']
2023-11-07 09:01:24,914 [DEBUG] dispatch pc=310, inst=STORE_FAST(arg=4, lineno=240)
2023-11-07 09:01:24,914 [DEBUG] stack ['$binop_irshift306.2']
2023-11-07 09:01:24,914 [DEBUG] dispatch pc=312, inst=LOAD_FAST(arg=0, lineno=241)
2023-11-07 09:01:24,914 [DEBUG] stack []
2023-11-07 09:01:24,914 [DEBUG] dispatch pc=314, inst=LOAD_FAST(arg=0, lineno=241)
2023-11-07 09:01:24,915 [DEBUG] stack ['$a312.3']
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=316, inst=BINARY_OP(arg=18, lineno=241)
2023-11-07 09:01:24,915 [DEBUG] stack ['$a312.3', '$a314.4']
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=320, inst=STORE_FAST(arg=0, lineno=241)
2023-11-07 09:01:24,915 [DEBUG] stack ['$binop_imul316.5']
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=322, inst=LOAD_FAST(arg=4, lineno=237)
2023-11-07 09:01:24,915 [DEBUG] stack []
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=324, inst=LOAD_CONST(arg=2, lineno=237)
2023-11-07 09:01:24,915 [DEBUG] stack ['$exp322.6']
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=326, inst=COMPARE_OP(arg=3, lineno=237)
2023-11-07 09:01:24,915 [DEBUG] stack ['$exp322.6', '$const324.7']
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=332, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=26, lineno=237)
2023-11-07 09:01:24,915 [DEBUG] stack ['$326compare_op.8']
2023-11-07 09:01:24,915 [DEBUG] end state. edges=[Edge(pc=334, stack=(), blockstack=(), npush=0), Edge(pc=282, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:24,915 [DEBUG] pending: deque([State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0)])
2023-11-07 09:01:24,915 [DEBUG] stack: []
2023-11-07 09:01:24,915 [DEBUG] state.pc_initial: State(pc_initial=338 nstack_initial=0)
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=338, inst=LOAD_CONST(arg=8, lineno=243)
2023-11-07 09:01:24,915 [DEBUG] stack []
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=340, inst=LOAD_FAST(arg=2, lineno=243)
2023-11-07 09:01:24,915 [DEBUG] stack ['$const338.0']
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=342, inst=BINARY_OP(arg=11, lineno=243)
2023-11-07 09:01:24,915 [DEBUG] stack ['$const338.0', '$r340.1']
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=346, inst=JUMP_FORWARD(arg=1, lineno=243)
2023-11-07 09:01:24,915 [DEBUG] stack ['$binop_truediv342.2']
2023-11-07 09:01:24,915 [DEBUG] end state. edges=[Edge(pc=350, stack=('$binop_truediv342.2',), blockstack=(), npush=0)]
2023-11-07 09:01:24,915 [DEBUG] pending: deque([State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1)])
2023-11-07 09:01:24,915 [DEBUG] stack: []
2023-11-07 09:01:24,915 [DEBUG] state.pc_initial: State(pc_initial=348 nstack_initial=0)
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=348, inst=LOAD_FAST(arg=2, lineno=243)
2023-11-07 09:01:24,915 [DEBUG] stack []
2023-11-07 09:01:24,915 [DEBUG] end state. edges=[Edge(pc=350, stack=('$r348.0',), blockstack=(), npush=0)]
2023-11-07 09:01:24,915 [DEBUG] pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-11-07 09:01:24,915 [DEBUG] stack: []
2023-11-07 09:01:24,915 [DEBUG] state.pc_initial: State(pc_initial=176 nstack_initial=0)
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=176, inst=LOAD_CONST(arg=2, lineno=230)
2023-11-07 09:01:24,915 [DEBUG] stack []
2023-11-07 09:01:24,915 [DEBUG] dispatch pc=178, inst=RETURN_VALUE(arg=None, lineno=230)
2023-11-07 09:01:24,915 [DEBUG] stack ['$const176.0']
2023-11-07 09:01:24,915 [DEBUG] end state. edges=[]
2023-11-07 09:01:24,915 [DEBUG] pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-11-07 09:01:24,915 [DEBUG] pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-11-07 09:01:24,915 [DEBUG] pending: deque([State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-11-07 09:01:24,915 [DEBUG] pending: deque([State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-11-07 09:01:24,915 [DEBUG] pending: deque([State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-11-07 09:01:24,915 [DEBUG] stack: ['$phi350.0']
2023-11-07 09:01:24,916 [DEBUG] state.pc_initial: State(pc_initial=350 nstack_initial=1)
2023-11-07 09:01:24,916 [DEBUG] dispatch pc=350, inst=RETURN_VALUE(arg=None, lineno=243)
2023-11-07 09:01:24,916 [DEBUG] stack ['$phi350.0']
2023-11-07 09:01:24,916 [DEBUG] end state. edges=[]
2023-11-07 09:01:24,916 [DEBUG] pending: deque([State(pc_initial=350 nstack_initial=1)])
2023-11-07 09:01:24,916 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:24,916 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=152 nstack_initial=0): set(),
             State(pc_initial=164 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=180 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=190 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=270 nstack_initial=0): set(),
             State(pc_initial=282 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=334 nstack_initial=0): set(),
             State(pc_initial=338 nstack_initial=0): set(),
             State(pc_initial=348 nstack_initial=0): set(),
             State(pc_initial=350 nstack_initial=1): {'$phi350.0'}})
2023-11-07 09:01:24,916 [DEBUG] defmap: {'$phi350.0': State(pc_initial=348 nstack_initial=0)}
2023-11-07 09:01:24,916 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi350.0': {('$binop_truediv342.2',
                            State(pc_initial=338 nstack_initial=0)),
                           ('$r348.0',
                            State(pc_initial=348 nstack_initial=0))}})
2023-11-07 09:01:24,916 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi350.0': {('$binop_truediv342.2',
                            State(pc_initial=338 nstack_initial=0)),
                           ('$r348.0',
                            State(pc_initial=348 nstack_initial=0))}})
2023-11-07 09:01:24,916 [DEBUG] keep phismap: {'$phi350.0': {('$binop_truediv342.2', State(pc_initial=338 nstack_initial=0)),
               ('$r348.0', State(pc_initial=348 nstack_initial=0))}}
2023-11-07 09:01:24,916 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=338 nstack_initial=0): {'$phi350.0': '$binop_truediv342.2'},
             State(pc_initial=348 nstack_initial=0): {'$phi350.0': '$r348.0'}})
2023-11-07 09:01:24,916 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {}), (8, {'res': '$8load_deref.1'}), (10, {'res': '$const10.2'}), (12, {}), (14, {}), (16, {'func': '$8load_deref.1', 'args': ['$const10.2'], 'kw_names': None, 'res': '$16call.3'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'value': '$16call.3'}), (28, {}), (30, {'res': '$30load_deref.5'}), (32, {'res': '$a32.6'}), (34, {}), (36, {}), (38, {'func': '$30load_deref.5', 'args': ['$a32.6'], 'kw_names': None, 'res': '$38call.7'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'value': '$38call.7'}), (50, {'res': '$b50.8'}), (52, {'res': '$const52.9'}), (54, {'lhs': '$b50.8', 'rhs': '$const52.9', 'res': '$54compare_op.10'}), (56, {}), (58, {}), (60, {'pred': '$54compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 182: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$const62.0'}), (64, {'value': '$const62.0'}), (66, {'res': '$b66.1'}), (68, {'value': '$b66.1', 'res': '$68unary_negative.2'}), (70, {'value': '$68unary_negative.2'}), (72, {'res': '$exp72.3'}), (74, {'res': '$const74.4'}), (76, {'lhs': '$exp72.3', 'rhs': '$const74.4', 'res': '$76compare_op.5'}), (78, {}), (80, {}), (82, {'pred': '$76compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 98: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'idx': 0, 'res': '$84load_global.0'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {}), (96, {'exc': '$84load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$98load_deref.0'}), (100, {'pred': '$98load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 180: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$a102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$a102.0', 'rhs': '$const104.1', 'res': '$106compare_op.2'}), (108, {}), (110, {}), (112, {'pred': '$106compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 152: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_deref.0'}), (116, {'pred': '$114load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={118: (), 122: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$118load_deref.0'}), (120, {'retval': '$118load_deref.0', 'castval': '$120return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=((122, {'idx': 1, 'res': '$122load_global.0'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'res': '$const134.2'}), (136, {}), (138, {}), (140, {'func': '$122load_global.0', 'args': ['$const134.2'], 'kw_names': None, 'res': '$140call.3'}), (142, {}), (144, {}), (146, {}), (148, {}), (150, {'exc': '$140call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=152 nstack_initial=0):
AdaptBlockInfo(insts=((152, {'res': '$a152.0'}), (154, {'res': '$const154.1'}), (156, {'lhs': '$a152.0', 'rhs': '$const154.1', 'res': '$156compare_op.2'}), (158, {}), (160, {}), (162, {'pred': '$156compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={164: (), 180: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=164 nstack_initial=0):
AdaptBlockInfo(insts=((164, {'res': '$a164.0'}), (166, {'res': '$const166.1'}), (168, {'lhs': '$a164.0', 'rhs': '$const166.1', 'res': '$168compare_op.2'}), (170, {}), (172, {}), (174, {'pred': '$168compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 180: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'retval': '$const176.0', 'castval': '$178return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=180 nstack_initial=0):
AdaptBlockInfo(insts=((180, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={190: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$const182.0'}), (184, {'value': '$const182.0'}), (186, {'res': '$b186.1'}), (188, {'value': '$b186.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={190: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=190 nstack_initial=0):
AdaptBlockInfo(insts=((190, {'res': '$exp190.0'}), (192, {'res': '$const192.1'}), (194, {'lhs': '$exp190.0', 'rhs': '$const192.1', 'res': '$194compare_op.2'}), (196, {}), (198, {}), (200, {'pred': '$194compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 270: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'idx': 2, 'res': '$202load_global.0'}), (204, {}), (206, {}), (208, {}), (210, {}), (212, {}), (214, {'item': '$202load_global.0', 'res': '$214load_attr.2'}), (216, {}), (218, {}), (220, {}), (222, {}), (224, {'res': '$a224.3'}), (226, {'idx': 4, 'res': '$226load_global.4'}), (228, {}), (230, {}), (232, {}), (234, {}), (236, {}), (238, {'res': '$b238.6'}), (240, {}), (242, {}), (244, {'func': '$226load_global.4', 'args': ['$b238.6'], 'kw_names': None, 'res': '$244call.7'}), (246, {}), (248, {}), (250, {}), (252, {}), (254, {}), (256, {}), (258, {'func': '$214load_attr.2', 'args': ['$a224.3', '$244call.7'], 'kw_names': None, 'res': '$258call.8'}), (260, {}), (262, {}), (264, {}), (266, {}), (268, {'retval': '$258call.8', 'castval': '$268return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=270 nstack_initial=0):
AdaptBlockInfo(insts=((270, {'res': '$exp270.0'}), (272, {'res': '$const272.1'}), (274, {'lhs': '$exp270.0', 'rhs': '$const272.1', 'res': '$274compare_op.2'}), (276, {}), (278, {}), (280, {'pred': '$274compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: (), 334: ()})
2023-11-07 09:01:24,916 [DEBUG] block_infos State(pc_initial=282 nstack_initial=0):
AdaptBlockInfo(insts=((282, {'res': '$exp282.0'}), (284, {'res': '$const284.1'}), (286, {'op': '&', 'lhs': '$exp282.0', 'rhs': '$const284.1', 'res': '$binop_and_286.2'}), (288, {}), (290, {'pred': '$binop_and_286.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2023-11-07 09:01:24,917 [DEBUG] block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$r292.0'}), (294, {'res': '$a294.1'}), (296, {'op': '*=', 'lhs': '$r292.0', 'rhs': '$a294.1', 'res': '$binop_imul296.2'}), (298, {}), (300, {'value': '$binop_imul296.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: ()})
2023-11-07 09:01:24,917 [DEBUG] block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$exp302.0'}), (304, {'res': '$const304.1'}), (306, {'op': '>>=', 'lhs': '$exp302.0', 'rhs': '$const304.1', 'res': '$binop_irshift306.2'}), (308, {}), (310, {'value': '$binop_irshift306.2'}), (312, {'res': '$a312.3'}), (314, {'res': '$a314.4'}), (316, {'op': '*=', 'lhs': '$a312.3', 'rhs': '$a314.4', 'res': '$binop_imul316.5'}), (318, {}), (320, {'value': '$binop_imul316.5'}), (322, {'res': '$exp322.6'}), (324, {'res': '$const324.7'}), (326, {'lhs': '$exp322.6', 'rhs': '$const324.7', 'res': '$326compare_op.8'}), (328, {}), (330, {}), (332, {'pred': '$326compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={334: (), 282: ()})
2023-11-07 09:01:24,917 [DEBUG] block_infos State(pc_initial=334 nstack_initial=0):
AdaptBlockInfo(insts=((334, {'res': '$invert334.0'}), (336, {'pred': '$invert334.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={338: (), 348: ()})
2023-11-07 09:01:24,917 [DEBUG] block_infos State(pc_initial=338 nstack_initial=0):
AdaptBlockInfo(insts=((338, {'res': '$const338.0'}), (340, {'res': '$r340.1'}), (342, {'op': '/', 'lhs': '$const338.0', 'rhs': '$r340.1', 'res': '$binop_truediv342.2'}), (344, {}), (346, {})), outgoing_phis={'$phi350.0': '$binop_truediv342.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={350: ('$binop_truediv342.2',)})
2023-11-07 09:01:24,917 [DEBUG] block_infos State(pc_initial=348 nstack_initial=0):
AdaptBlockInfo(insts=((348, {'res': '$r348.0'}),), outgoing_phis={'$phi350.0': '$r348.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={350: ('$r348.0',)})
2023-11-07 09:01:24,917 [DEBUG] block_infos State(pc_initial=350 nstack_initial=1):
AdaptBlockInfo(insts=((350, {'retval': '$phi350.0', 'castval': '$350return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:24,918 [DEBUG] label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $8load_deref.1 = freevar(tp: float32)    ['$8load_deref.1']
    $const10.2 = const(int, 1)               ['$const10.2']
    r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$8load_deref.1', '$const10.2', 'r']
    $30load_deref.5 = freevar(tp: float32)   ['$30load_deref.5']
    a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_deref.5', 'a', 'a.1']
    $const52.9 = const(int, 0)               ['$const52.9']
    $54compare_op.10 = b < $const52.9        ['$54compare_op.10', '$const52.9', 'b']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.10', '$60pred', 'bool60']
    branch $60pred, 62, 182                  ['$60pred']
label 62:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const74.4 = const(int, 0)               ['$const74.4']
    $76compare_op.5 = exp < $const74.4       ['$76compare_op.5', '$const74.4', 'exp']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$76compare_op.5', '$82pred', 'bool82']
    branch $82pred, 84, 98                   ['$82pred']
label 84:
    $84load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$84load_global.0']
    raise $84load_global.0                   ['$84load_global.0']
label 98:
    $98load_deref.0 = freevar(is_integer: False) ['$98load_deref.0']
    bool100 = global(bool: <class 'bool'>)   ['bool100']
    $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$100pred', '$98load_deref.0', 'bool100']
    branch $100pred, 102, 180                ['$100pred']
label 102:
    $const104.1 = const(int, 0)              ['$const104.1']
    $106compare_op.2 = a.1 == $const104.1    ['$106compare_op.2', '$const104.1', 'a.1']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($106compare_op.2, func=bool112, args=(Var($106compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$106compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 152                ['$112pred']
label 114:
    $114load_deref.0 = freevar(zerodiv_return: False) ['$114load_deref.0']
    bool116 = global(bool: <class 'bool'>)   ['bool116']
    $116pred = call bool116($114load_deref.0, func=bool116, args=(Var($114load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$114load_deref.0', '$116pred', 'bool116']
    branch $116pred, 118, 122                ['$116pred']
label 118:
    $118load_deref.0 = freevar(zerodiv_return: False) ['$118load_deref.0']
    $120return_value.1 = cast(value=$118load_deref.0) ['$118load_deref.0', '$120return_value.1']
    return $120return_value.1                ['$120return_value.1']
label 122:
    $122load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$122load_global.0']
    $const134.2 = const(str, 0 cannot be raised to a negative power) ['$const134.2']
    $140call.3 = call $122load_global.0($const134.2, func=$122load_global.0, args=[Var($const134.2, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.0', '$140call.3', '$const134.2']
    raise $140call.3                         ['$140call.3']
label 152:
    $const154.1 = const(int, 1)              ['$const154.1']
    $156compare_op.2 = a.1 != $const154.1    ['$156compare_op.2', '$const154.1', 'a.1']
    bool162 = global(bool: <class 'bool'>)   ['bool162']
    $162pred = call bool162($156compare_op.2, func=bool162, args=(Var($156compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$156compare_op.2', '$162pred', 'bool162']
    branch $162pred, 164, 180                ['$162pred']
label 164:
    $const166.1 = const(int, -1)             ['$const166.1']
    $168compare_op.2 = a.1 != $const166.1    ['$168compare_op.2', '$const166.1', 'a.1']
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174($168compare_op.2, func=bool174, args=(Var($168compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$168compare_op.2', '$174pred', 'bool174']
    branch $174pred, 176, 180                ['$174pred']
label 176:
    $const176.0 = const(int, 0)              ['$const176.0']
    $178return_value.1 = cast(value=$const176.0) ['$178return_value.1', '$const176.0']
    return $178return_value.1                ['$178return_value.1']
label 180:
    jump 190                                 []
label 182:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 190                                 []
label 190:
    $const192.1 = const(int, 65536)          ['$const192.1']
    $194compare_op.2 = exp > $const192.1     ['$194compare_op.2', '$const192.1', 'exp']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$194compare_op.2', '$200pred', 'bool200']
    branch $200pred, 202, 270                ['$200pred']
label 202:
    $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>) ['$202load_global.0']
    $214load_attr.2 = getattr(value=$202load_global.0, attr=pow) ['$202load_global.0', '$214load_attr.2']
    $226load_global.4 = global(float: <class 'float'>) ['$226load_global.4']
    $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$226load_global.4', '$244call.7', 'b']
    $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_attr.2', '$244call.7', '$258call.8', 'a.1']
    $268return_value.9 = cast(value=$258call.8) ['$258call.8', '$268return_value.9']
    return $268return_value.9                ['$268return_value.9']
label 270:
    $const272.1 = const(int, 0)              ['$const272.1']
    $274compare_op.2 = exp != $const272.1    ['$274compare_op.2', '$const272.1', 'exp']
    bool280 = global(bool: <class 'bool'>)   ['bool280']
    $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$274compare_op.2', '$280pred', 'bool280']
    branch $280pred, 282, 334                ['$280pred']
label 282:
    $const284.1 = const(int, 1)              ['$const284.1']
    $binop_and_286.2 = exp & $const284.1     ['$binop_and_286.2', '$const284.1', 'exp']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$290pred', '$binop_and_286.2', 'bool290']
    branch $290pred, 292, 302                ['$290pred']
label 292:
    $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul296.2', 'a.1', 'r']
    r = $binop_imul296.2                     ['$binop_imul296.2', 'r']
    jump 302                                 []
label 302:
    $const304.1 = const(int, 1)              ['$const304.1']
    $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_irshift306.2', '$const304.1', 'exp']
    exp = $binop_irshift306.2                ['$binop_irshift306.2', 'exp']
    $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul316.5', 'a.1', 'a.1']
    a.1 = $binop_imul316.5                   ['$binop_imul316.5', 'a.1']
    $const324.7 = const(int, 0)              ['$const324.7']
    $326compare_op.8 = exp != $const324.7    ['$326compare_op.8', '$const324.7', 'exp']
    bool332 = global(bool: <class 'bool'>)   ['bool332']
    $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$326compare_op.8', '$332pred', 'bool332']
    branch $332pred, 282, 334                ['$332pred']
label 334:
    bool336 = global(bool: <class 'bool'>)   ['bool336']
    $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$336pred', 'bool336', 'invert']
    branch $336pred, 338, 348                ['$336pred']
label 338:
    $const338.0 = const(float, 1.0)          ['$const338.0']
    $binop_truediv342.2 = $const338.0 / r    ['$binop_truediv342.2', '$const338.0', 'r']
    $phi350.0 = $binop_truediv342.2          ['$binop_truediv342.2', '$phi350.0']
    jump 350                                 []
label 348:
    $phi350.0 = r                            ['$phi350.0', 'r']
    jump 350                                 []
label 350:
    $350return_value.1 = cast(value=$phi350.0) ['$350return_value.1', '$phi350.0']
    return $350return_value.1                ['$350return_value.1']

2023-11-07 09:01:24,925 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:24,925 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,925 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,925 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,925 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,925 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,925 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,925 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,925 [DEBUG] ==== SSA block analysis pass on 62
2023-11-07 09:01:24,925 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,925 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,925 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,925 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,925 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,925 [DEBUG] ==== SSA block analysis pass on 84
2023-11-07 09:01:24,925 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,925 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,925 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,925 [DEBUG] ==== SSA block analysis pass on 98
2023-11-07 09:01:24,925 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,925 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,925 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,925 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,925 [DEBUG] ==== SSA block analysis pass on 180
2023-11-07 09:01:24,925 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,925 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,925 [DEBUG] ==== SSA block analysis pass on 182
2023-11-07 09:01:24,925 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,925 [DEBUG] on stmt: invert = const(bool, False)
2023-11-07 09:01:24,925 [DEBUG] on stmt: exp = b
2023-11-07 09:01:24,925 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,925 [DEBUG] ==== SSA block analysis pass on 190
2023-11-07 09:01:24,925 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,925 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-11-07 09:01:24,925 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,925 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,925 [DEBUG] ==== SSA block analysis pass on 202
2023-11-07 09:01:24,925 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,925 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,925 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,926 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,926 [DEBUG] ==== SSA block analysis pass on 270
2023-11-07 09:01:24,926 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,926 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-11-07 09:01:24,926 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,926 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,926 [DEBUG] ==== SSA block analysis pass on 282
2023-11-07 09:01:24,926 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,926 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-11-07 09:01:24,926 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,926 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,926 [DEBUG] ==== SSA block analysis pass on 292
2023-11-07 09:01:24,926 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,926 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,926 [DEBUG] on stmt: r = $binop_imul296.2
2023-11-07 09:01:24,926 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,926 [DEBUG] ==== SSA block analysis pass on 302
2023-11-07 09:01:24,926 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,926 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,926 [DEBUG] on stmt: exp = $binop_irshift306.2
2023-11-07 09:01:24,926 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,926 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-11-07 09:01:24,926 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-11-07 09:01:24,926 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,926 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,926 [DEBUG] ==== SSA block analysis pass on 334
2023-11-07 09:01:24,926 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,926 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,926 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,926 [DEBUG] ==== SSA block analysis pass on 338
2023-11-07 09:01:24,926 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,926 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r
2023-11-07 09:01:24,926 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,926 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,926 [DEBUG] ==== SSA block analysis pass on 348
2023-11-07 09:01:24,926 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,926 [DEBUG] on stmt: $phi350.0 = r
2023-11-07 09:01:24,926 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,926 [DEBUG] ==== SSA block analysis pass on 350
2023-11-07 09:01:24,926 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2804eaa90>
2023-11-07 09:01:24,926 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-11-07 09:01:24,926 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,926 [DEBUG] defs defaultdict(<class 'list'>,
            {'$100pred': [<numba.core.ir.Assign object at 0x2804bf690>],
             '$194compare_op.2': [<numba.core.ir.Assign object at 0x280503b50>],
             '$200pred': [<numba.core.ir.Assign object at 0x280500310>],
             '$202load_global.0': [<numba.core.ir.Assign object at 0x280502390>],
             '$214load_attr.2': [<numba.core.ir.Assign object at 0x280500590>],
             '$226load_global.4': [<numba.core.ir.Assign object at 0x280501c50>],
             '$244call.7': [<numba.core.ir.Assign object at 0x280501e50>],
             '$258call.8': [<numba.core.ir.Assign object at 0x280502c10>],
             '$268return_value.9': [<numba.core.ir.Assign object at 0x280501510>],
             '$274compare_op.2': [<numba.core.ir.Assign object at 0x2804ae590>],
             '$280pred': [<numba.core.ir.Assign object at 0x2804acdd0>],
             '$290pred': [<numba.core.ir.Assign object at 0x2804af890>],
             '$30load_deref.5': [<numba.core.ir.Assign object at 0x280477fd0>],
             '$326compare_op.8': [<numba.core.ir.Assign object at 0x280530a90>],
             '$332pred': [<numba.core.ir.Assign object at 0x2805327d0>],
             '$336pred': [<numba.core.ir.Assign object at 0x280533790>],
             '$350return_value.1': [<numba.core.ir.Assign object at 0x280533550>],
             '$54compare_op.10': [<numba.core.ir.Assign object at 0x2804bf850>],
             '$60pred': [<numba.core.ir.Assign object at 0x2804bff10>],
             '$76compare_op.5': [<numba.core.ir.Assign object at 0x2804bf750>],
             '$82pred': [<numba.core.ir.Assign object at 0x2804bc990>],
             '$84load_global.0': [<numba.core.ir.Assign object at 0x2804befd0>],
             '$8load_deref.1': [<numba.core.ir.Assign object at 0x2804eaad0>],
             '$98load_deref.0': [<numba.core.ir.Assign object at 0x2804bfd90>],
             '$binop_and_286.2': [<numba.core.ir.Assign object at 0x2804af710>],
             '$binop_imul296.2': [<numba.core.ir.Assign object at 0x2804aff10>],
             '$binop_imul316.5': [<numba.core.ir.Assign object at 0x2804ae4d0>],
             '$binop_irshift306.2': [<numba.core.ir.Assign object at 0x2804ae2d0>],
             '$binop_truediv342.2': [<numba.core.ir.Assign object at 0x280530510>],
             '$const10.2': [<numba.core.ir.Assign object at 0x28046aad0>],
             '$const192.1': [<numba.core.ir.Assign object at 0x280503a10>],
             '$const272.1': [<numba.core.ir.Assign object at 0x2804ae1d0>],
             '$const284.1': [<numba.core.ir.Assign object at 0x2804af4d0>],
             '$const304.1': [<numba.core.ir.Assign object at 0x2804ad8d0>],
             '$const324.7': [<numba.core.ir.Assign object at 0x2804af6d0>],
             '$const338.0': [<numba.core.ir.Assign object at 0x2805326d0>],
             '$const52.9': [<numba.core.ir.Assign object at 0x2804bcc90>],
             '$const74.4': [<numba.core.ir.Assign object at 0x2804be110>],
             '$phi350.0': [<numba.core.ir.Assign object at 0x280531290>,
                           <numba.core.ir.Assign object at 0x280512e50>],
             'a': [<numba.core.ir.Assign object at 0x2804e9810>],
             'a.1': [<numba.core.ir.Assign object at 0x2804d7b10>,
                     <numba.core.ir.Assign object at 0x2804ace50>],
             'b': [<numba.core.ir.Assign object at 0x2804ebb90>],
             'bool100': [<numba.core.ir.Assign object at 0x2804bd490>],
             'bool200': [<numba.core.ir.Assign object at 0x280501090>],
             'bool280': [<numba.core.ir.Assign object at 0x2804ae9d0>],
             'bool290': [<numba.core.ir.Assign object at 0x2804af490>],
             'bool332': [<numba.core.ir.Assign object at 0x280532450>],
             'bool336': [<numba.core.ir.Assign object at 0x280532890>],
             'bool60': [<numba.core.ir.Assign object at 0x2804bf490>],
             'bool82': [<numba.core.ir.Assign object at 0x2804bf950>],
             'exp': [<numba.core.ir.Assign object at 0x2804bca50>,
                     <numba.core.ir.Assign object at 0x280500e10>,
                     <numba.core.ir.Assign object at 0x2804af290>],
             'invert': [<numba.core.ir.Assign object at 0x2804bec50>,
                        <numba.core.ir.Assign object at 0x280501f50>],
             'r': [<numba.core.ir.Assign object at 0x280469490>,
                   <numba.core.ir.Assign object at 0x2804ad350>]})
2023-11-07 09:01:24,926 [DEBUG] SSA violators {'r', 'exp', 'invert', '$phi350.0', 'a.1'}
2023-11-07 09:01:24,926 [DEBUG] Fix SSA violator on var r
2023-11-07 09:01:24,926 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,926 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,926 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,926 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,926 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,926 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,926 [DEBUG] first assign: r
2023-11-07 09:01:24,926 [DEBUG] replaced with: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,927 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,927 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,927 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,927 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 98
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,927 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 180
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 182
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: invert = const(bool, False)
2023-11-07 09:01:24,927 [DEBUG] on stmt: exp = b
2023-11-07 09:01:24,927 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 190
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-11-07 09:01:24,927 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 202
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,927 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-11-07 09:01:24,927 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-11-07 09:01:24,927 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,927 [DEBUG] on stmt: r = $binop_imul296.2
2023-11-07 09:01:24,927 [DEBUG] replaced with: r.1 = $binop_imul296.2
2023-11-07 09:01:24,927 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 302
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,927 [DEBUG] on stmt: exp = $binop_irshift306.2
2023-11-07 09:01:24,927 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,927 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-11-07 09:01:24,927 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-11-07 09:01:24,927 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,927 [DEBUG] ==== SSA block rewrite pass on 334
2023-11-07 09:01:24,927 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,927 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,927 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,927 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 338
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,928 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r
2023-11-07 09:01:24,928 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,928 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 348
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,928 [DEBUG] on stmt: $phi350.0 = r
2023-11-07 09:01:24,928 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 350
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x17f74f810>
2023-11-07 09:01:24,928 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-11-07 09:01:24,928 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,928 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x2801434d0>],
             292: [<numba.core.ir.Assign object at 0x2804e8c90>]})
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,928 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,928 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,928 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,928 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,928 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,928 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,928 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,928 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,928 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,928 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,928 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,928 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 98
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,928 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,928 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,928 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 180
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,928 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 182
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,928 [DEBUG] on stmt: invert = const(bool, False)
2023-11-07 09:01:24,928 [DEBUG] on stmt: exp = b
2023-11-07 09:01:24,928 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 190
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,928 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-11-07 09:01:24,928 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,928 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 202
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,928 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,928 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:24,928 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,928 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-11-07 09:01:24,928 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,928 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,928 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,928 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:24,929 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,929 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,929 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-11-07 09:01:24,929 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,929 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,929 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,929 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:24,929 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,929 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,929 [DEBUG] find_def var='r' stmt=$binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,929 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:24,929 [DEBUG] idom 282 from label 292
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 282
2023-11-07 09:01:24,929 [DEBUG] find_def_from_top label 282
2023-11-07 09:01:24,929 [DEBUG] insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 302
2023-11-07 09:01:24,929 [DEBUG] find_def_from_top label 302
2023-11-07 09:01:24,929 [DEBUG] insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 302
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 282
2023-11-07 09:01:24,929 [DEBUG] incoming_def r.2 = phi(incoming_values=[], incoming_blocks=[])
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:24,929 [DEBUG] incoming_def r.1 = $binop_imul296.2
2023-11-07 09:01:24,929 [DEBUG] incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 270
2023-11-07 09:01:24,929 [DEBUG] find_def_from_top label 270
2023-11-07 09:01:24,929 [DEBUG] idom 190 from label 270
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 190
2023-11-07 09:01:24,929 [DEBUG] find_def_from_top label 190
2023-11-07 09:01:24,929 [DEBUG] idom 0 from label 190
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 0
2023-11-07 09:01:24,929 [DEBUG] incoming_def r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,929 [DEBUG] replaced with: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,929 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-11-07 09:01:24,929 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,929 [DEBUG] ==== SSA block rewrite pass on 302
2023-11-07 09:01:24,929 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,929 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,929 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,929 [DEBUG] on stmt: exp = $binop_irshift306.2
2023-11-07 09:01:24,929 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,929 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-11-07 09:01:24,929 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,929 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-11-07 09:01:24,929 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,929 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,929 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,929 [DEBUG] ==== SSA block rewrite pass on 334
2023-11-07 09:01:24,929 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,929 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,929 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,929 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,929 [DEBUG] ==== SSA block rewrite pass on 338
2023-11-07 09:01:24,929 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,929 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,929 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r
2023-11-07 09:01:24,929 [DEBUG] find_def var='r' stmt=$binop_truediv342.2 = $const338.0 / r
2023-11-07 09:01:24,929 [DEBUG] find_def_from_top label 338
2023-11-07 09:01:24,929 [DEBUG] idom 334 from label 338
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 334
2023-11-07 09:01:24,929 [DEBUG] find_def_from_top label 334
2023-11-07 09:01:24,929 [DEBUG] insert phi node r.4 = phi(incoming_values=[], incoming_blocks=[]) at 334
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 302
2023-11-07 09:01:24,929 [DEBUG] incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 270
2023-11-07 09:01:24,929 [DEBUG] find_def_from_top label 270
2023-11-07 09:01:24,929 [DEBUG] idom 190 from label 270
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 190
2023-11-07 09:01:24,929 [DEBUG] find_def_from_top label 190
2023-11-07 09:01:24,929 [DEBUG] idom 0 from label 190
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 0
2023-11-07 09:01:24,929 [DEBUG] incoming_def r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,929 [DEBUG] replaced with: $binop_truediv342.2 = $const338.0 / r.4
2023-11-07 09:01:24,929 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,929 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,929 [DEBUG] ==== SSA block rewrite pass on 348
2023-11-07 09:01:24,929 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,929 [DEBUG] on stmt: $phi350.0 = r
2023-11-07 09:01:24,929 [DEBUG] find_def var='r' stmt=$phi350.0 = r
2023-11-07 09:01:24,929 [DEBUG] find_def_from_top label 348
2023-11-07 09:01:24,929 [DEBUG] idom 334 from label 348
2023-11-07 09:01:24,929 [DEBUG] find_def_from_bottom label 334
2023-11-07 09:01:24,929 [DEBUG] replaced with: $phi350.0 = r.4
2023-11-07 09:01:24,930 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 350
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802c0150>
2023-11-07 09:01:24,930 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-11-07 09:01:24,930 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,930 [DEBUG] Fix SSA violator on var exp
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,930 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,930 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,930 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,930 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,930 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,930 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,930 [DEBUG] first assign: exp
2023-11-07 09:01:24,930 [DEBUG] replaced with: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,930 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,930 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,930 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 98
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,930 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,930 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 180
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 182
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: invert = const(bool, False)
2023-11-07 09:01:24,930 [DEBUG] on stmt: exp = b
2023-11-07 09:01:24,930 [DEBUG] replaced with: exp.1 = b
2023-11-07 09:01:24,930 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 190
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-11-07 09:01:24,930 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,930 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 202
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,930 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-11-07 09:01:24,930 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,930 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,930 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-11-07 09:01:24,930 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,930 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,930 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,930 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-11-07 09:01:24,930 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,930 [DEBUG] ==== SSA block rewrite pass on 302
2023-11-07 09:01:24,930 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,930 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-11-07 09:01:24,931 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,931 [DEBUG] on stmt: exp = $binop_irshift306.2
2023-11-07 09:01:24,931 [DEBUG] replaced with: exp.2 = $binop_irshift306.2
2023-11-07 09:01:24,931 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,931 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-11-07 09:01:24,931 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-11-07 09:01:24,931 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,931 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 334
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,931 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,931 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,931 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 338
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,931 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-11-07 09:01:24,931 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,931 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 348
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,931 [DEBUG] on stmt: $phi350.0 = r.4
2023-11-07 09:01:24,931 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 350
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804e80d0>
2023-11-07 09:01:24,931 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-11-07 09:01:24,931 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,931 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {62: [<numba.core.ir.Assign object at 0x28046a110>],
             182: [<numba.core.ir.Assign object at 0x28046a7d0>],
             302: [<numba.core.ir.Assign object at 0x2804bdf50>]})
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,931 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,931 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,931 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,931 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,931 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,931 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,931 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,931 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,931 [DEBUG] find_def var='exp' stmt=$76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,931 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,931 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,931 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,931 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 98
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,931 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,931 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,931 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 180
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,931 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 182
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,931 [DEBUG] on stmt: invert = const(bool, False)
2023-11-07 09:01:24,931 [DEBUG] on stmt: exp.1 = b
2023-11-07 09:01:24,931 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,931 [DEBUG] ==== SSA block rewrite pass on 190
2023-11-07 09:01:24,931 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,931 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,931 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-11-07 09:01:24,931 [DEBUG] find_def var='exp' stmt=$194compare_op.2 = exp > $const192.1
2023-11-07 09:01:24,931 [DEBUG] find_def_from_top label 190
2023-11-07 09:01:24,931 [DEBUG] insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 190
2023-11-07 09:01:24,931 [DEBUG] find_def_from_bottom label 180
2023-11-07 09:01:24,931 [DEBUG] find_def_from_top label 180
2023-11-07 09:01:24,931 [DEBUG] idom 98 from label 180
2023-11-07 09:01:24,931 [DEBUG] find_def_from_bottom label 98
2023-11-07 09:01:24,931 [DEBUG] find_def_from_top label 98
2023-11-07 09:01:24,931 [DEBUG] idom 62 from label 98
2023-11-07 09:01:24,931 [DEBUG] find_def_from_bottom label 62
2023-11-07 09:01:24,932 [DEBUG] incoming_def exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,932 [DEBUG] find_def_from_bottom label 182
2023-11-07 09:01:24,932 [DEBUG] incoming_def exp.1 = b
2023-11-07 09:01:24,932 [DEBUG] replaced with: $194compare_op.2 = exp.3 > $const192.1
2023-11-07 09:01:24,932 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,932 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,932 [DEBUG] ==== SSA block rewrite pass on 202
2023-11-07 09:01:24,932 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,932 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,932 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,932 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:24,932 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,932 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-11-07 09:01:24,932 [DEBUG] find_def var='exp' stmt=$274compare_op.2 = exp != $const272.1
2023-11-07 09:01:24,932 [DEBUG] find_def_from_top label 270
2023-11-07 09:01:24,932 [DEBUG] idom 190 from label 270
2023-11-07 09:01:24,932 [DEBUG] find_def_from_bottom label 190
2023-11-07 09:01:24,932 [DEBUG] replaced with: $274compare_op.2 = exp.3 != $const272.1
2023-11-07 09:01:24,932 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,932 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,932 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:24,932 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,932 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,932 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-11-07 09:01:24,932 [DEBUG] find_def var='exp' stmt=$binop_and_286.2 = exp & $const284.1
2023-11-07 09:01:24,932 [DEBUG] find_def_from_top label 282
2023-11-07 09:01:24,932 [DEBUG] insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-11-07 09:01:24,932 [DEBUG] find_def_from_bottom label 302
2023-11-07 09:01:24,932 [DEBUG] incoming_def exp.2 = $binop_irshift306.2
2023-11-07 09:01:24,932 [DEBUG] find_def_from_bottom label 270
2023-11-07 09:01:24,932 [DEBUG] find_def_from_top label 270
2023-11-07 09:01:24,932 [DEBUG] idom 190 from label 270
2023-11-07 09:01:24,932 [DEBUG] find_def_from_bottom label 190
2023-11-07 09:01:24,932 [DEBUG] incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,932 [DEBUG] replaced with: $binop_and_286.2 = exp.4 & $const284.1
2023-11-07 09:01:24,932 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,932 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,932 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:24,932 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,932 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,932 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-11-07 09:01:24,932 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,932 [DEBUG] ==== SSA block rewrite pass on 302
2023-11-07 09:01:24,932 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,932 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-11-07 09:01:24,932 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,932 [DEBUG] find_def var='exp' stmt=$binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,932 [DEBUG] find_def_from_top label 302
2023-11-07 09:01:24,932 [DEBUG] idom 282 from label 302
2023-11-07 09:01:24,932 [DEBUG] find_def_from_bottom label 282
2023-11-07 09:01:24,932 [DEBUG] replaced with: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,932 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-11-07 09:01:24,932 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,932 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-11-07 09:01:24,932 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-11-07 09:01:24,932 [DEBUG] find_def var='exp' stmt=$326compare_op.8 = exp != $const324.7
2023-11-07 09:01:24,932 [DEBUG] replaced with: $326compare_op.8 = exp.2 != $const324.7
2023-11-07 09:01:24,932 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,932 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,932 [DEBUG] ==== SSA block rewrite pass on 334
2023-11-07 09:01:24,932 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,932 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,932 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,932 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,932 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,932 [DEBUG] ==== SSA block rewrite pass on 338
2023-11-07 09:01:24,932 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-11-07 09:01:24,933 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,933 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 348
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: $phi350.0 = r.4
2023-11-07 09:01:24,933 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 350
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2804be850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-11-07 09:01:24,933 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,933 [DEBUG] Fix SSA violator on var invert
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,933 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,933 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,933 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,933 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,933 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,933 [DEBUG] first assign: invert
2023-11-07 09:01:24,933 [DEBUG] replaced with: invert = const(bool, True)
2023-11-07 09:01:24,933 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,933 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,933 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,933 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 98
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,933 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,933 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 180
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 182
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: invert = const(bool, False)
2023-11-07 09:01:24,933 [DEBUG] replaced with: invert.1 = const(bool, False)
2023-11-07 09:01:24,933 [DEBUG] on stmt: exp.1 = b
2023-11-07 09:01:24,933 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 190
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,933 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-11-07 09:01:24,933 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,933 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 202
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,933 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-11-07 09:01:24,933 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,933 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,933 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:24,933 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,933 [DEBUG] on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,933 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,933 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,933 [DEBUG] on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-11-07 09:01:24,933 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,934 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,934 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,934 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-11-07 09:01:24,934 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 302
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,934 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-11-07 09:01:24,934 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,934 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-11-07 09:01:24,934 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,934 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-11-07 09:01:24,934 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-11-07 09:01:24,934 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,934 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 334
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,934 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,934 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,934 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 338
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,934 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-11-07 09:01:24,934 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,934 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 348
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,934 [DEBUG] on stmt: $phi350.0 = r.4
2023-11-07 09:01:24,934 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 350
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2804bd850>
2023-11-07 09:01:24,934 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-11-07 09:01:24,934 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,934 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {62: [<numba.core.ir.Assign object at 0x28040b490>],
             182: [<numba.core.ir.Assign object at 0x2802c21d0>]})
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,934 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,934 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,934 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,934 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,934 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,934 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,934 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,934 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,934 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,934 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,934 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,934 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 98
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,934 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,934 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,934 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,934 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,934 [DEBUG] ==== SSA block rewrite pass on 180
2023-11-07 09:01:24,934 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,935 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,935 [DEBUG] ==== SSA block rewrite pass on 182
2023-11-07 09:01:24,935 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,935 [DEBUG] on stmt: invert.1 = const(bool, False)
2023-11-07 09:01:24,935 [DEBUG] on stmt: exp.1 = b
2023-11-07 09:01:24,935 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,935 [DEBUG] ==== SSA block rewrite pass on 190
2023-11-07 09:01:24,935 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,935 [DEBUG] on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,935 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-11-07 09:01:24,935 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,935 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,935 [DEBUG] ==== SSA block rewrite pass on 202
2023-11-07 09:01:24,935 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,935 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,935 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,935 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:24,935 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,935 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-11-07 09:01:24,935 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,935 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,935 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:24,935 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,935 [DEBUG] on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,935 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,935 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-11-07 09:01:24,935 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,935 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,935 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,935 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:24,935 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,935 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,935 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-11-07 09:01:24,935 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,935 [DEBUG] ==== SSA block rewrite pass on 302
2023-11-07 09:01:24,936 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,936 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-11-07 09:01:24,936 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,936 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,936 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-11-07 09:01:24,936 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,936 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-11-07 09:01:24,936 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,936 [DEBUG] on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-11-07 09:01:24,936 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,936 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,936 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,936 [DEBUG] ==== SSA block rewrite pass on 334
2023-11-07 09:01:24,936 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,936 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,936 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,936 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,936 [DEBUG] find_def var='invert' stmt=$336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,936 [DEBUG] find_def_from_top label 334
2023-11-07 09:01:24,936 [DEBUG] idom 270 from label 334
2023-11-07 09:01:24,936 [DEBUG] find_def_from_bottom label 270
2023-11-07 09:01:24,936 [DEBUG] find_def_from_top label 270
2023-11-07 09:01:24,936 [DEBUG] idom 190 from label 270
2023-11-07 09:01:24,936 [DEBUG] find_def_from_bottom label 190
2023-11-07 09:01:24,936 [DEBUG] find_def_from_top label 190
2023-11-07 09:01:24,936 [DEBUG] insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 190
2023-11-07 09:01:24,936 [DEBUG] find_def_from_bottom label 180
2023-11-07 09:01:24,936 [DEBUG] find_def_from_top label 180
2023-11-07 09:01:24,936 [DEBUG] idom 98 from label 180
2023-11-07 09:01:24,936 [DEBUG] find_def_from_bottom label 98
2023-11-07 09:01:24,936 [DEBUG] find_def_from_top label 98
2023-11-07 09:01:24,936 [DEBUG] idom 62 from label 98
2023-11-07 09:01:24,936 [DEBUG] find_def_from_bottom label 62
2023-11-07 09:01:24,936 [DEBUG] incoming_def invert = const(bool, True)
2023-11-07 09:01:24,936 [DEBUG] find_def_from_bottom label 182
2023-11-07 09:01:24,936 [DEBUG] incoming_def invert.1 = const(bool, False)
2023-11-07 09:01:24,936 [DEBUG] replaced with: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,936 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,936 [DEBUG] ==== SSA block rewrite pass on 338
2023-11-07 09:01:24,936 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,936 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,936 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-11-07 09:01:24,936 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,936 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,936 [DEBUG] ==== SSA block rewrite pass on 348
2023-11-07 09:01:24,936 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,936 [DEBUG] on stmt: $phi350.0 = r.4
2023-11-07 09:01:24,937 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,937 [DEBUG] ==== SSA block rewrite pass on 350
2023-11-07 09:01:24,937 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,937 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-11-07 09:01:24,937 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,937 [DEBUG] Fix SSA violator on var $phi350.0
2023-11-07 09:01:24,937 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,937 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,937 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,937 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,937 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,937 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,937 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,937 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,937 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,937 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,937 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,937 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,937 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,937 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,937 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,937 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,937 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,937 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,937 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,937 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,937 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,937 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,937 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,937 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:24,937 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,937 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,937 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,937 [DEBUG] ==== SSA block rewrite pass on 98
2023-11-07 09:01:24,937 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,937 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,937 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,937 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,937 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,937 [DEBUG] ==== SSA block rewrite pass on 180
2023-11-07 09:01:24,937 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,937 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,937 [DEBUG] ==== SSA block rewrite pass on 182
2023-11-07 09:01:24,937 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,937 [DEBUG] on stmt: invert.1 = const(bool, False)
2023-11-07 09:01:24,937 [DEBUG] on stmt: exp.1 = b
2023-11-07 09:01:24,937 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,937 [DEBUG] ==== SSA block rewrite pass on 190
2023-11-07 09:01:24,937 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,937 [DEBUG] on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,938 [DEBUG] on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,938 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-11-07 09:01:24,938 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,938 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,938 [DEBUG] ==== SSA block rewrite pass on 202
2023-11-07 09:01:24,938 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,938 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,938 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,938 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:24,938 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,938 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-11-07 09:01:24,938 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,938 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,938 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:24,938 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,938 [DEBUG] on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,938 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,938 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-11-07 09:01:24,938 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,938 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,938 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:24,938 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,938 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,938 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-11-07 09:01:24,938 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,938 [DEBUG] ==== SSA block rewrite pass on 302
2023-11-07 09:01:24,938 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,938 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-11-07 09:01:24,938 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,938 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-11-07 09:01:24,938 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,938 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-11-07 09:01:24,938 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-11-07 09:01:24,938 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,938 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,938 [DEBUG] ==== SSA block rewrite pass on 334
2023-11-07 09:01:24,938 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,938 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,938 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,938 [DEBUG] on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,938 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,939 [DEBUG] ==== SSA block rewrite pass on 338
2023-11-07 09:01:24,939 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,939 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,939 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-11-07 09:01:24,939 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,939 [DEBUG] first assign: $phi350.0
2023-11-07 09:01:24,939 [DEBUG] replaced with: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,939 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,939 [DEBUG] ==== SSA block rewrite pass on 348
2023-11-07 09:01:24,939 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,939 [DEBUG] on stmt: $phi350.0 = r.4
2023-11-07 09:01:24,939 [DEBUG] replaced with: $phi350.0.1 = r.4
2023-11-07 09:01:24,939 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,939 [DEBUG] ==== SSA block rewrite pass on 350
2023-11-07 09:01:24,939 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280532550>
2023-11-07 09:01:24,939 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-11-07 09:01:24,939 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,939 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {338: [<numba.core.ir.Assign object at 0x280522590>],
             348: [<numba.core.ir.Assign object at 0x280522fd0>]})
2023-11-07 09:01:24,939 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,939 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,939 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,939 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,939 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,939 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,939 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,939 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,939 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,939 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,939 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,939 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,939 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,939 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,939 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,939 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,939 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,939 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,939 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,939 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,939 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,939 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,939 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,939 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:24,939 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,939 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,939 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,939 [DEBUG] ==== SSA block rewrite pass on 98
2023-11-07 09:01:24,939 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,940 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,940 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,940 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,940 [DEBUG] ==== SSA block rewrite pass on 180
2023-11-07 09:01:24,940 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,940 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,940 [DEBUG] ==== SSA block rewrite pass on 182
2023-11-07 09:01:24,940 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,940 [DEBUG] on stmt: invert.1 = const(bool, False)
2023-11-07 09:01:24,940 [DEBUG] on stmt: exp.1 = b
2023-11-07 09:01:24,940 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,940 [DEBUG] ==== SSA block rewrite pass on 190
2023-11-07 09:01:24,940 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,940 [DEBUG] on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,940 [DEBUG] on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,940 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-11-07 09:01:24,940 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,940 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,940 [DEBUG] ==== SSA block rewrite pass on 202
2023-11-07 09:01:24,940 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,940 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,940 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,940 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:24,940 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,940 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-11-07 09:01:24,940 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,940 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,940 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:24,940 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,940 [DEBUG] on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,940 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,940 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-11-07 09:01:24,940 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,940 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,941 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,941 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:24,941 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,941 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,941 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-11-07 09:01:24,941 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,941 [DEBUG] ==== SSA block rewrite pass on 302
2023-11-07 09:01:24,941 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,941 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-11-07 09:01:24,941 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,941 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,941 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-11-07 09:01:24,941 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,941 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-11-07 09:01:24,941 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,941 [DEBUG] on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-11-07 09:01:24,941 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,941 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,941 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,941 [DEBUG] ==== SSA block rewrite pass on 334
2023-11-07 09:01:24,941 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,941 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,941 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,941 [DEBUG] on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,941 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,941 [DEBUG] ==== SSA block rewrite pass on 338
2023-11-07 09:01:24,941 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,941 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,941 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-11-07 09:01:24,941 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,941 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,941 [DEBUG] ==== SSA block rewrite pass on 348
2023-11-07 09:01:24,941 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,941 [DEBUG] on stmt: $phi350.0.1 = r.4
2023-11-07 09:01:24,941 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,941 [DEBUG] ==== SSA block rewrite pass on 350
2023-11-07 09:01:24,941 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280511090>
2023-11-07 09:01:24,941 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-11-07 09:01:24,941 [DEBUG] find_def var='$phi350.0' stmt=$350return_value.1 = cast(value=$phi350.0)
2023-11-07 09:01:24,941 [DEBUG] find_def_from_top label 350
2023-11-07 09:01:24,941 [DEBUG] insert phi node $phi350.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 350
2023-11-07 09:01:24,941 [DEBUG] find_def_from_bottom label 338
2023-11-07 09:01:24,941 [DEBUG] incoming_def $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,941 [DEBUG] find_def_from_bottom label 348
2023-11-07 09:01:24,941 [DEBUG] incoming_def $phi350.0.1 = r.4
2023-11-07 09:01:24,942 [DEBUG] replaced with: $350return_value.1 = cast(value=$phi350.0.2)
2023-11-07 09:01:24,942 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,942 [DEBUG] Fix SSA violator on var a.1
2023-11-07 09:01:24,942 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,942 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,942 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,942 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,942 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,942 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,942 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,942 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,942 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,942 [DEBUG] first assign: a.1
2023-11-07 09:01:24,942 [DEBUG] replaced with: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,942 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,942 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,942 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,942 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,942 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,942 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,942 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,942 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,942 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,942 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,942 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,942 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,942 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,942 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,942 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:24,942 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,942 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,942 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,942 [DEBUG] ==== SSA block rewrite pass on 98
2023-11-07 09:01:24,942 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,942 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,942 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,942 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,942 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,942 [DEBUG] ==== SSA block rewrite pass on 180
2023-11-07 09:01:24,942 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,942 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,942 [DEBUG] ==== SSA block rewrite pass on 182
2023-11-07 09:01:24,942 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,942 [DEBUG] on stmt: invert.1 = const(bool, False)
2023-11-07 09:01:24,942 [DEBUG] on stmt: exp.1 = b
2023-11-07 09:01:24,942 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,943 [DEBUG] ==== SSA block rewrite pass on 190
2023-11-07 09:01:24,943 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,943 [DEBUG] on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,943 [DEBUG] on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,943 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-11-07 09:01:24,943 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,943 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,943 [DEBUG] ==== SSA block rewrite pass on 202
2023-11-07 09:01:24,943 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,943 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,943 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,943 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:24,943 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,943 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-11-07 09:01:24,943 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,943 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,943 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:24,943 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,943 [DEBUG] on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,943 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,943 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-11-07 09:01:24,943 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,943 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,943 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:24,943 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,943 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,943 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-11-07 09:01:24,943 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,943 [DEBUG] ==== SSA block rewrite pass on 302
2023-11-07 09:01:24,943 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,943 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-11-07 09:01:24,943 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,943 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,943 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-11-07 09:01:24,944 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,944 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-11-07 09:01:24,944 [DEBUG] replaced with: a.1.1 = $binop_imul316.5
2023-11-07 09:01:24,944 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-11-07 09:01:24,944 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,944 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,944 [DEBUG] ==== SSA block rewrite pass on 334
2023-11-07 09:01:24,944 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,944 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,944 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,944 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,944 [DEBUG] ==== SSA block rewrite pass on 338
2023-11-07 09:01:24,944 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,944 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-11-07 09:01:24,944 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,944 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,944 [DEBUG] ==== SSA block rewrite pass on 348
2023-11-07 09:01:24,944 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,944 [DEBUG] on stmt: $phi350.0.1 = r.4
2023-11-07 09:01:24,944 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,944 [DEBUG] ==== SSA block rewrite pass on 350
2023-11-07 09:01:24,944 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280468550>
2023-11-07 09:01:24,944 [DEBUG] on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-11-07 09:01:24,944 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-11-07 09:01:24,944 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,944 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x28046bd90>],
             302: [<numba.core.ir.Assign object at 0x280521590>]})
2023-11-07 09:01:24,944 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:24,944 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,944 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:24,944 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-11-07 09:01:24,944 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-11-07 09:01:24,944 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-11-07 09:01:24,944 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,944 [DEBUG] on stmt: branch $60pred, 62, 182
2023-11-07 09:01:24,944 [DEBUG] ==== SSA block rewrite pass on 62
2023-11-07 09:01:24,944 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,944 [DEBUG] on stmt: invert = const(bool, True)
2023-11-07 09:01:24,944 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-11-07 09:01:24,944 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,944 [DEBUG] on stmt: branch $82pred, 84, 98
2023-11-07 09:01:24,944 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:24,944 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,944 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-11-07 09:01:24,944 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-11-07 09:01:24,944 [DEBUG] ==== SSA block rewrite pass on 98
2023-11-07 09:01:24,944 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,944 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-11-07 09:01:24,944 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,944 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,945 [DEBUG] on stmt: jump 180
2023-11-07 09:01:24,945 [DEBUG] ==== SSA block rewrite pass on 180
2023-11-07 09:01:24,945 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,945 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,945 [DEBUG] ==== SSA block rewrite pass on 182
2023-11-07 09:01:24,945 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,945 [DEBUG] on stmt: invert.1 = const(bool, False)
2023-11-07 09:01:24,945 [DEBUG] on stmt: exp.1 = b
2023-11-07 09:01:24,945 [DEBUG] on stmt: jump 190
2023-11-07 09:01:24,945 [DEBUG] ==== SSA block rewrite pass on 190
2023-11-07 09:01:24,945 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,945 [DEBUG] on stmt: invert.2 = phi(incoming_values=[Var(invert, numbers.py:219), Var(invert.1, numbers.py:232)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,945 [DEBUG] on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-11-07 09:01:24,945 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-11-07 09:01:24,945 [DEBUG] on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-11-07 09:01:24,945 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,945 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,945 [DEBUG] on stmt: branch $200pred, 202, 270
2023-11-07 09:01:24,945 [DEBUG] ==== SSA block rewrite pass on 202
2023-11-07 09:01:24,945 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,945 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:24,945 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-11-07 09:01:24,945 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-11-07 09:01:24,945 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,945 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,945 [DEBUG] find_def var='a.1' stmt=$258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,945 [DEBUG] find_def_from_top label 202
2023-11-07 09:01:24,945 [DEBUG] idom 190 from label 202
2023-11-07 09:01:24,945 [DEBUG] find_def_from_bottom label 190
2023-11-07 09:01:24,945 [DEBUG] find_def_from_top label 190
2023-11-07 09:01:24,945 [DEBUG] idom 0 from label 190
2023-11-07 09:01:24,945 [DEBUG] find_def_from_bottom label 0
2023-11-07 09:01:24,945 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-11-07 09:01:24,945 [DEBUG] on stmt: return $268return_value.9
2023-11-07 09:01:24,945 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:24,945 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,945 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-11-07 09:01:24,945 [DEBUG] on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-11-07 09:01:24,945 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,945 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,945 [DEBUG] on stmt: branch $280pred, 282, 334
2023-11-07 09:01:24,945 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:24,945 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,945 [DEBUG] on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,945 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,945 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-11-07 09:01:24,945 [DEBUG] on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-11-07 09:01:24,945 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,945 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,945 [DEBUG] on stmt: branch $290pred, 292, 302
2023-11-07 09:01:24,945 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:24,945 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,945 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,945 [DEBUG] find_def var='a.1' stmt=$binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,945 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:24,945 [DEBUG] idom 282 from label 292
2023-11-07 09:01:24,945 [DEBUG] find_def_from_bottom label 282
2023-11-07 09:01:24,945 [DEBUG] find_def_from_top label 282
2023-11-07 09:01:24,945 [DEBUG] insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-11-07 09:01:24,945 [DEBUG] find_def_from_bottom label 302
2023-11-07 09:01:24,945 [DEBUG] incoming_def a.1.1 = $binop_imul316.5
2023-11-07 09:01:24,945 [DEBUG] find_def_from_bottom label 270
2023-11-07 09:01:24,945 [DEBUG] find_def_from_top label 270
2023-11-07 09:01:24,945 [DEBUG] idom 190 from label 270
2023-11-07 09:01:24,945 [DEBUG] find_def_from_bottom label 190
2023-11-07 09:01:24,945 [DEBUG] find_def_from_top label 190
2023-11-07 09:01:24,945 [DEBUG] idom 0 from label 190
2023-11-07 09:01:24,945 [DEBUG] find_def_from_bottom label 0
2023-11-07 09:01:24,945 [DEBUG] incoming_def a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,945 [DEBUG] replaced with: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,945 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-11-07 09:01:24,945 [DEBUG] on stmt: jump 302
2023-11-07 09:01:24,945 [DEBUG] ==== SSA block rewrite pass on 302
2023-11-07 09:01:24,945 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,945 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-11-07 09:01:24,945 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-11-07 09:01:24,946 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,946 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-11-07 09:01:24,946 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,946 [DEBUG] find_def var='a.1' stmt=$binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,946 [DEBUG] find_def_from_top label 302
2023-11-07 09:01:24,946 [DEBUG] idom 282 from label 302
2023-11-07 09:01:24,946 [DEBUG] find_def_from_bottom label 282
2023-11-07 09:01:24,946 [DEBUG] replaced with: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:24,946 [DEBUG] on stmt: a.1.1 = $binop_imul316.5
2023-11-07 09:01:24,946 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-11-07 09:01:24,946 [DEBUG] on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-11-07 09:01:24,946 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,946 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,946 [DEBUG] on stmt: branch $332pred, 282, 334
2023-11-07 09:01:24,946 [DEBUG] ==== SSA block rewrite pass on 334
2023-11-07 09:01:24,946 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,946 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-11-07 09:01:24,946 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-11-07 09:01:24,946 [DEBUG] on stmt: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:24,946 [DEBUG] on stmt: branch $336pred, 338, 348
2023-11-07 09:01:24,946 [DEBUG] ==== SSA block rewrite pass on 338
2023-11-07 09:01:24,946 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,946 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-11-07 09:01:24,946 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-11-07 09:01:24,946 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-11-07 09:01:24,946 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,946 [DEBUG] ==== SSA block rewrite pass on 348
2023-11-07 09:01:24,946 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,946 [DEBUG] on stmt: $phi350.0.1 = r.4
2023-11-07 09:01:24,946 [DEBUG] on stmt: jump 350
2023-11-07 09:01:24,946 [DEBUG] ==== SSA block rewrite pass on 350
2023-11-07 09:01:24,946 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280530050>
2023-11-07 09:01:24,946 [DEBUG] on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-11-07 09:01:24,946 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-11-07 09:01:24,946 [DEBUG] on stmt: return $350return_value.1
2023-11-07 09:01:24,993 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=14)
           2	RESUME(arg=0, lineno=14)
           4	LOAD_GLOBAL(arg=1, lineno=31)
          16	LOAD_ATTR(arg=1, lineno=31)
          26	LOAD_FAST(arg=0, lineno=31)
          28	LOAD_ATTR(arg=2, lineno=31)
          38	LOAD_CONST(arg=1, lineno=31)
          40	BINARY_SUBSCR(arg=None, lineno=31)
          50	LOAD_FAST(arg=1, lineno=31)
          52	BUILD_TUPLE(arg=2, lineno=31)
          54	LOAD_GLOBAL(arg=0, lineno=31)
          66	LOAD_ATTR(arg=3, lineno=31)
          76	KW_NAMES(arg=2, lineno=31)
          78	PRECALL(arg=2, lineno=31)
          82	CALL(arg=2, lineno=31)
          92	STORE_FAST(arg=2, lineno=31)
          94	LOAD_GLOBAL(arg=9, lineno=32)
         106	LOAD_ATTR(arg=5, lineno=32)
         116	LOAD_FAST(arg=0, lineno=32)
         118	LOAD_ATTR(arg=2, lineno=32)
         128	LOAD_CONST(arg=1, lineno=32)
         130	BINARY_SUBSCR(arg=None, lineno=32)
         140	PRECALL(arg=1, lineno=32)
         144	CALL(arg=1, lineno=32)
         154	GET_ITER(arg=None, lineno=32)
>        156	FOR_ITER(arg=45, lineno=32)
         158	STORE_FAST(arg=3, lineno=32)
         160	LOAD_FAST(arg=0, lineno=34)
         162	LOAD_FAST(arg=3, lineno=34)
         164	BINARY_SUBSCR(arg=None, lineno=34)
         174	LOAD_METHOD(arg=6, lineno=34)
         196	LOAD_CONST(arg=3, lineno=34)
         198	KW_NAMES(arg=4, lineno=34)
         200	PRECALL(arg=1, lineno=34)
         204	CALL(arg=1, lineno=34)
         214	STORE_FAST(arg=4, lineno=34)
         216	LOAD_FAST(arg=4, lineno=35)
         218	LOAD_CONST(arg=5, lineno=35)
         220	LOAD_FAST(arg=1, lineno=35)
         222	BUILD_SLICE(arg=2, lineno=35)
         224	BINARY_SUBSCR(arg=None, lineno=35)
         234	STORE_FAST(arg=4, lineno=35)
         236	LOAD_FAST(arg=4, lineno=36)
         238	LOAD_FAST(arg=2, lineno=36)
         240	LOAD_FAST(arg=3, lineno=36)
         242	STORE_SUBSCR(arg=None, lineno=36)
         246	JUMP_BACKWARD(arg=46, lineno=36)
>        248	LOAD_FAST(arg=2, lineno=37)
         250	RETURN_VALUE(arg=None, lineno=37)
2023-11-07 09:01:24,993 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:24,993 [DEBUG] stack: []
2023-11-07 09:01:24,993 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:24,993 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=14)
2023-11-07 09:01:24,993 [DEBUG] stack []
2023-11-07 09:01:24,993 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=14)
2023-11-07 09:01:24,994 [DEBUG] stack []
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack []
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=28, inst=LOAD_ATTR(arg=2, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$X26.3']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$28load_attr.4']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$28load_attr.4', '$const38.5']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$40binary_subscr.6']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=52, inst=BUILD_TUPLE(arg=2, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$40binary_subscr.6', '$n_neighbors50.7']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=54, inst=LOAD_GLOBAL(arg=0, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$52build_tuple.8']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$52build_tuple.8', '$54load_global.9']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=76, inst=KW_NAMES(arg=2, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$52build_tuple.8', '$66load_attr.10']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=78, inst=PRECALL(arg=2, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$52build_tuple.8', '$66load_attr.10']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=82, inst=CALL(arg=2, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$52build_tuple.8', '$66load_attr.10']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=92, inst=STORE_FAST(arg=2, lineno=31)
2023-11-07 09:01:24,994 [DEBUG] stack ['$82call.11']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=94, inst=LOAD_GLOBAL(arg=9, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack []
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=106, inst=LOAD_ATTR(arg=5, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$94.13', '$94load_global.12']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$94.13', '$106load_attr.14']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=118, inst=LOAD_ATTR(arg=2, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$94.13', '$106load_attr.14', '$X116.15']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=128, inst=LOAD_CONST(arg=1, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$94.13', '$106load_attr.14', '$118load_attr.16']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$94.13', '$106load_attr.14', '$118load_attr.16', '$const128.17']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=140, inst=PRECALL(arg=1, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$94.13', '$106load_attr.14', '$130binary_subscr.18']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=144, inst=CALL(arg=1, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack ['$null$94.13', '$106load_attr.14', '$130binary_subscr.18']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=154, inst=GET_ITER(arg=None, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack ['$144call.19']
2023-11-07 09:01:24,994 [DEBUG] end state. edges=[Edge(pc=156, stack=('$154get_iter.20',), blockstack=(), npush=0)]
2023-11-07 09:01:24,994 [DEBUG] pending: deque([State(pc_initial=156 nstack_initial=1)])
2023-11-07 09:01:24,994 [DEBUG] stack: ['$phi156.0']
2023-11-07 09:01:24,994 [DEBUG] state.pc_initial: State(pc_initial=156 nstack_initial=1)
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=156, inst=FOR_ITER(arg=45, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack ['$phi156.0']
2023-11-07 09:01:24,994 [DEBUG] end state. edges=[Edge(pc=248, stack=(), blockstack=(), npush=0), Edge(pc=158, stack=('$phi156.0', '$156for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:24,994 [DEBUG] pending: deque([State(pc_initial=248 nstack_initial=0), State(pc_initial=158 nstack_initial=2)])
2023-11-07 09:01:24,994 [DEBUG] stack: []
2023-11-07 09:01:24,994 [DEBUG] state.pc_initial: State(pc_initial=248 nstack_initial=0)
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=248, inst=LOAD_FAST(arg=2, lineno=37)
2023-11-07 09:01:24,994 [DEBUG] stack []
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=250, inst=RETURN_VALUE(arg=None, lineno=37)
2023-11-07 09:01:24,994 [DEBUG] stack ['$knn_indices248.0']
2023-11-07 09:01:24,994 [DEBUG] end state. edges=[]
2023-11-07 09:01:24,994 [DEBUG] pending: deque([State(pc_initial=158 nstack_initial=2)])
2023-11-07 09:01:24,994 [DEBUG] stack: ['$phi158.0', '$phi158.1']
2023-11-07 09:01:24,994 [DEBUG] state.pc_initial: State(pc_initial=158 nstack_initial=2)
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=158, inst=STORE_FAST(arg=3, lineno=32)
2023-11-07 09:01:24,994 [DEBUG] stack ['$phi158.0', '$phi158.1']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=34)
2023-11-07 09:01:24,994 [DEBUG] stack ['$phi158.0']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=162, inst=LOAD_FAST(arg=3, lineno=34)
2023-11-07 09:01:24,994 [DEBUG] stack ['$phi158.0', '$X160.2']
2023-11-07 09:01:24,994 [DEBUG] dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=34)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$X160.2', '$row162.3']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=174, inst=LOAD_METHOD(arg=6, lineno=34)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$164binary_subscr.4']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=196, inst=LOAD_CONST(arg=3, lineno=34)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$null$174.5', '$174load_method.6']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=198, inst=KW_NAMES(arg=4, lineno=34)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$null$174.5', '$174load_method.6', '$const196.7']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=200, inst=PRECALL(arg=1, lineno=34)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$null$174.5', '$174load_method.6', '$const196.7']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=204, inst=CALL(arg=1, lineno=34)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$null$174.5', '$174load_method.6', '$const196.7']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=214, inst=STORE_FAST(arg=4, lineno=34)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$204call.8']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=216, inst=LOAD_FAST(arg=4, lineno=35)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=218, inst=LOAD_CONST(arg=5, lineno=35)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$v216.9']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=220, inst=LOAD_FAST(arg=1, lineno=35)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$v216.9', '$const218.10']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=222, inst=BUILD_SLICE(arg=2, lineno=35)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$v216.9', '$const218.10', '$n_neighbors220.11']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=224, inst=BINARY_SUBSCR(arg=None, lineno=35)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$v216.9', '$222build_slice.13']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=234, inst=STORE_FAST(arg=4, lineno=35)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$224binary_subscr.14']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=236, inst=LOAD_FAST(arg=4, lineno=36)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=238, inst=LOAD_FAST(arg=2, lineno=36)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$v236.15']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=240, inst=LOAD_FAST(arg=3, lineno=36)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$v236.15', '$knn_indices238.16']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=242, inst=STORE_SUBSCR(arg=None, lineno=36)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0', '$v236.15', '$knn_indices238.16', '$row240.17']
2023-11-07 09:01:24,995 [DEBUG] dispatch pc=246, inst=JUMP_BACKWARD(arg=46, lineno=36)
2023-11-07 09:01:24,995 [DEBUG] stack ['$phi158.0']
2023-11-07 09:01:24,995 [DEBUG] end state. edges=[Edge(pc=156, stack=('$phi158.0',), blockstack=(), npush=0)]
2023-11-07 09:01:24,995 [DEBUG] pending: deque([State(pc_initial=156 nstack_initial=1)])
2023-11-07 09:01:24,995 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:24,995 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=156 nstack_initial=1): {'$phi156.0'},
             State(pc_initial=158 nstack_initial=2): {'$phi158.1'},
             State(pc_initial=248 nstack_initial=0): set()})
2023-11-07 09:01:24,995 [DEBUG] defmap: {'$phi156.0': State(pc_initial=0 nstack_initial=0),
 '$phi158.1': State(pc_initial=156 nstack_initial=1)}
2023-11-07 09:01:24,995 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi156.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi158.0',
                            State(pc_initial=158 nstack_initial=2))},
             '$phi158.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi158.1': {('$156for_iter.2',
                            State(pc_initial=156 nstack_initial=1))}})
2023-11-07 09:01:24,995 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi156.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi158.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi158.1': {('$156for_iter.2',
                            State(pc_initial=156 nstack_initial=1))}})
2023-11-07 09:01:24,995 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi156.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi158.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi158.1': {('$156for_iter.2',
                            State(pc_initial=156 nstack_initial=1))}})
2023-11-07 09:01:24,995 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi156.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi158.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi158.1': {('$156for_iter.2',
                            State(pc_initial=156 nstack_initial=1))}})
2023-11-07 09:01:24,995 [DEBUG] keep phismap: {'$phi156.0': {('$154get_iter.20', State(pc_initial=0 nstack_initial=0))},
 '$phi158.1': {('$156for_iter.2', State(pc_initial=156 nstack_initial=1))}}
2023-11-07 09:01:24,995 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi156.0': '$154get_iter.20'},
             State(pc_initial=156 nstack_initial=1): {'$phi158.1': '$156for_iter.2'}})
2023-11-07 09:01:24,995 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:24,995 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$X26.3'}), (28, {'item': '$X26.3', 'res': '$28load_attr.4'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'res': '$const38.5'}), (40, {'index': '$const38.5', 'target': '$28load_attr.4', 'res': '$40binary_subscr.6'}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {'res': '$n_neighbors50.7'}), (52, {'items': ['$40binary_subscr.6', '$n_neighbors50.7'], 'res': '$52build_tuple.8'}), (54, {'idx': 0, 'res': '$54load_global.9'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.9', 'res': '$66load_attr.10'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$16load_attr.2', 'args': ['$52build_tuple.8', '$66load_attr.10'], 'kw_names': 2, 'res': '$82call.11'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.11'}), (94, {'idx': 4, 'res': '$94load_global.12'}), (96, {}), (98, {}), (100, {}), (102, {}), (104, {}), (106, {'item': '$94load_global.12', 'res': '$106load_attr.14'}), (108, {}), (110, {}), (112, {}), (114, {}), (116, {'res': '$X116.15'}), (118, {'item': '$X116.15', 'res': '$118load_attr.16'}), (120, {}), (122, {}), (124, {}), (126, {}), (128, {'res': '$const128.17'}), (130, {'index': '$const128.17', 'target': '$118load_attr.16', 'res': '$130binary_subscr.18'}), (132, {}), (134, {}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {'func': '$106load_attr.14', 'args': ['$130binary_subscr.18'], 'kw_names': None, 'res': '$144call.19'}), (146, {}), (148, {}), (150, {}), (152, {}), (154, {'value': '$144call.19', 'res': '$154get_iter.20'})), outgoing_phis={'$phi156.0': '$154get_iter.20'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$154get_iter.20',)})
2023-11-07 09:01:24,995 [DEBUG] block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'iterator': '$phi156.0', 'pair': '$156for_iter.1', 'indval': '$156for_iter.2', 'pred': '$156for_iter.3'}),), outgoing_phis={'$phi158.1': '$156for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={248: (), 158: ('$phi156.0', '$156for_iter.2')})
2023-11-07 09:01:24,995 [DEBUG] block_infos State(pc_initial=158 nstack_initial=2):
AdaptBlockInfo(insts=((158, {'value': '$phi158.1'}), (160, {'res': '$X160.2'}), (162, {'res': '$row162.3'}), (164, {'index': '$row162.3', 'target': '$X160.2', 'res': '$164binary_subscr.4'}), (166, {}), (168, {}), (170, {}), (172, {}), (174, {'item': '$164binary_subscr.4', 'res': '$174load_method.6'}), (176, {}), (178, {}), (180, {}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {}), (194, {}), (196, {'res': '$const196.7'}), (200, {}), (202, {}), (204, {'func': '$174load_method.6', 'args': ['$const196.7'], 'kw_names': 4, 'res': '$204call.8'}), (206, {}), (208, {}), (210, {}), (212, {}), (214, {'value': '$204call.8'}), (216, {'res': '$v216.9'}), (218, {'res': '$const218.10'}), (220, {'res': '$n_neighbors220.11'}), (222, {'start': '$const218.10', 'stop': '$n_neighbors220.11', 'step': None, 'res': '$222build_slice.13', 'slicevar': '$222build_slice.12'}), (224, {'index': '$222build_slice.13', 'target': '$v216.9', 'res': '$224binary_subscr.14'}), (226, {}), (228, {}), (230, {}), (232, {}), (234, {'value': '$224binary_subscr.14'}), (236, {'res': '$v236.15'}), (238, {'res': '$knn_indices238.16'}), (240, {'res': '$row240.17'}), (242, {'target': '$knn_indices238.16', 'index': '$row240.17', 'value': '$v236.15'}), (244, {}), (246, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$phi158.0',)})
2023-11-07 09:01:24,995 [DEBUG] block_infos State(pc_initial=248 nstack_initial=0):
AdaptBlockInfo(insts=((248, {'res': '$knn_indices248.0'}), (250, {'retval': '$knn_indices248.0', 'castval': '$250return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:24,997 [DEBUG] label 0:
    X = arg(0, name=X)                       ['X']
    n_neighbors = arg(1, name=n_neighbors)   ['n_neighbors']
    $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    $28load_attr.4 = getattr(value=X, attr=shape) ['$28load_attr.4', 'X']
    $const38.5 = const(int, 0)               ['$const38.5']
    $40binary_subscr.6 = getitem(value=$28load_attr.4, index=$const38.5, fn=<built-in function getitem>) ['$28load_attr.4', '$40binary_subscr.6', '$const38.5']
    $52build_tuple.8 = build_tuple(items=[Var($40binary_subscr.6, utils.py:31), Var(n_neighbors, utils.py:14)]) ['$40binary_subscr.6', '$52build_tuple.8', 'n_neighbors']
    $54load_global.9 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$54load_global.9']
    $66load_attr.10 = getattr(value=$54load_global.9, attr=int32) ['$54load_global.9', '$66load_attr.10']
    knn_indices = call $16load_attr.2($52build_tuple.8, func=$16load_attr.2, args=[Var($52build_tuple.8, utils.py:31)], kws=[('dtype', Var($66load_attr.10, utils.py:31))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', '$52build_tuple.8', '$66load_attr.10', 'knn_indices']
    $94load_global.12 = global(numba: <module 'numba' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numba/__init__.py'>) ['$94load_global.12']
    $106load_attr.14 = getattr(value=$94load_global.12, attr=prange) ['$106load_attr.14', '$94load_global.12']
    $118load_attr.16 = getattr(value=X, attr=shape) ['$118load_attr.16', 'X']
    $const128.17 = const(int, 0)             ['$const128.17']
    $130binary_subscr.18 = getitem(value=$118load_attr.16, index=$const128.17, fn=<built-in function getitem>) ['$118load_attr.16', '$130binary_subscr.18', '$const128.17']
    $144call.19 = call $106load_attr.14($130binary_subscr.18, func=$106load_attr.14, args=[Var($130binary_subscr.18, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None) ['$106load_attr.14', '$130binary_subscr.18', '$144call.19']
    $154get_iter.20 = getiter(value=$144call.19) ['$144call.19', '$154get_iter.20']
    $phi156.0 = $154get_iter.20              ['$154get_iter.20', '$phi156.0']
    jump 156                                 []
label 156:
    $156for_iter.1 = iternext(value=$phi156.0) ['$156for_iter.1', '$phi156.0']
    $156for_iter.2 = pair_first(value=$156for_iter.1) ['$156for_iter.1', '$156for_iter.2']
    $156for_iter.3 = pair_second(value=$156for_iter.1) ['$156for_iter.1', '$156for_iter.3']
    $phi158.1 = $156for_iter.2               ['$156for_iter.2', '$phi158.1']
    branch $156for_iter.3, 158, 248          ['$156for_iter.3']
label 158:
    row = $phi158.1                          ['$phi158.1', 'row']
    $164binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>) ['$164binary_subscr.4', 'X', 'row']
    $174load_method.6 = getattr(value=$164binary_subscr.4, attr=argsort) ['$164binary_subscr.4', '$174load_method.6']
    $const196.7 = const(str, quicksort)      ['$const196.7']
    v = call $174load_method.6(func=$174load_method.6, args=[], kws=[('kind', Var($const196.7, utils.py:34))], vararg=None, varkwarg=None, target=None) ['$174load_method.6', '$const196.7', 'v']
    $const218.10 = const(NoneType, None)     ['$const218.10']
    $222build_slice.12 = global(slice: <class 'slice'>) ['$222build_slice.12']
    $222build_slice.13 = call $222build_slice.12($const218.10, n_neighbors, func=$222build_slice.12, args=(Var($const218.10, utils.py:35), Var(n_neighbors, utils.py:14)), kws=(), vararg=None, varkwarg=None, target=None) ['$222build_slice.12', '$222build_slice.13', '$const218.10', 'n_neighbors']
    v = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>) ['$222build_slice.13', 'v', 'v']
    knn_indices[row] = v                     ['knn_indices', 'row', 'v']
    jump 156                                 []
label 248:
    $250return_value.1 = cast(value=knn_indices) ['$250return_value.1', 'knn_indices']
    return $250return_value.1                ['$250return_value.1']

2023-11-07 09:01:25,000 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,000 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280268a50>
2023-11-07 09:01:25,000 [DEBUG] on stmt: X = arg(0, name=X)
2023-11-07 09:01:25,000 [DEBUG] on stmt: n_neighbors = arg(1, name=n_neighbors)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $28load_attr.4 = getattr(value=X, attr=shape)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $const38.5 = const(int, 0)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $40binary_subscr.6 = static_getitem(value=$28load_attr.4, index=0, index_var=$const38.5, fn=<built-in function getitem>)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $52build_tuple.8 = build_tuple(items=[Var($40binary_subscr.6, utils.py:31), Var(n_neighbors, utils.py:14)])
2023-11-07 09:01:25,000 [DEBUG] on stmt: $54load_global.9 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $66load_attr.10 = getattr(value=$54load_global.9, attr=int32)
2023-11-07 09:01:25,000 [DEBUG] on stmt: knn_indices = call $16load_attr.2($52build_tuple.8, func=$16load_attr.2, args=[Var($52build_tuple.8, utils.py:31)], kws=[('dtype', Var($66load_attr.10, utils.py:31))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $94load_global.12 = global(numba: <module 'numba' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numba/__init__.py'>)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $106load_attr.14 = getattr(value=$94load_global.12, attr=prange)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $118load_attr.16 = getattr(value=X, attr=shape)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $const128.17 = const(int, 0)
2023-11-07 09:01:25,000 [DEBUG] on stmt: $130binary_subscr.18 = static_getitem(value=$118load_attr.16, index=0, index_var=$const128.17, fn=<built-in function getitem>)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $144call.19 = call $106load_attr.14($130binary_subscr.18, func=$106load_attr.14, args=[Var($130binary_subscr.18, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $154get_iter.20 = getiter(value=$144call.19)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $phi156.0 = $154get_iter.20
2023-11-07 09:01:25,001 [DEBUG] on stmt: jump 156
2023-11-07 09:01:25,001 [DEBUG] ==== SSA block analysis pass on 156
2023-11-07 09:01:25,001 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280268a50>
2023-11-07 09:01:25,001 [DEBUG] on stmt: $156for_iter.1 = iternext(value=$phi156.0)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $156for_iter.2 = pair_first(value=$156for_iter.1)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $156for_iter.3 = pair_second(value=$156for_iter.1)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $phi158.1 = $156for_iter.2
2023-11-07 09:01:25,001 [DEBUG] on stmt: branch $156for_iter.3, 158, 248
2023-11-07 09:01:25,001 [DEBUG] ==== SSA block analysis pass on 158
2023-11-07 09:01:25,001 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280268a50>
2023-11-07 09:01:25,001 [DEBUG] on stmt: row = $phi158.1
2023-11-07 09:01:25,001 [DEBUG] on stmt: $164binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $174load_method.6 = getattr(value=$164binary_subscr.4, attr=argsort)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $const196.7 = const(str, quicksort)
2023-11-07 09:01:25,001 [DEBUG] on stmt: v = call $174load_method.6(func=$174load_method.6, args=[], kws=[('kind', Var($const196.7, utils.py:34))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $const218.10 = const(NoneType, None)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $222build_slice.12 = global(slice: <class 'slice'>)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $222build_slice.13 = call $222build_slice.12($const218.10, n_neighbors, func=$222build_slice.12, args=(Var($const218.10, utils.py:35), Var(n_neighbors, utils.py:14)), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,001 [DEBUG] on stmt: v = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>)
2023-11-07 09:01:25,001 [DEBUG] on stmt: knn_indices[row] = v
2023-11-07 09:01:25,001 [DEBUG] on stmt: jump 156
2023-11-07 09:01:25,001 [DEBUG] ==== SSA block analysis pass on 248
2023-11-07 09:01:25,001 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280268a50>
2023-11-07 09:01:25,001 [DEBUG] on stmt: $250return_value.1 = cast(value=knn_indices)
2023-11-07 09:01:25,001 [DEBUG] on stmt: return $250return_value.1
2023-11-07 09:01:25,001 [DEBUG] defs defaultdict(<class 'list'>,
            {'$106load_attr.14': [<numba.core.ir.Assign object at 0x280884f90>],
             '$118load_attr.16': [<numba.core.ir.Assign object at 0x280886190>],
             '$130binary_subscr.18': [<numba.core.ir.Assign object at 0x2808a7b90>],
             '$144call.19': [<numba.core.ir.Assign object at 0x280887590>],
             '$154get_iter.20': [<numba.core.ir.Assign object at 0x280884610>],
             '$156for_iter.1': [<numba.core.ir.Assign object at 0x280885790>],
             '$156for_iter.2': [<numba.core.ir.Assign object at 0x280887750>],
             '$156for_iter.3': [<numba.core.ir.Assign object at 0x2808a6710>],
             '$164binary_subscr.4': [<numba.core.ir.Assign object at 0x28087cc90>],
             '$16load_attr.2': [<numba.core.ir.Assign object at 0x2808a7a10>],
             '$174load_method.6': [<numba.core.ir.Assign object at 0x28087cf10>],
             '$222build_slice.12': [<numba.core.ir.Assign object at 0x28087e7d0>],
             '$222build_slice.13': [<numba.core.ir.Assign object at 0x28087e110>],
             '$250return_value.1': [<numba.core.ir.Assign object at 0x28087fdd0>],
             '$28load_attr.4': [<numba.core.ir.Assign object at 0x2808a7390>],
             '$40binary_subscr.6': [<numba.core.ir.Assign object at 0x2808a4c10>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x2808a5710>],
             '$52build_tuple.8': [<numba.core.ir.Assign object at 0x2808a55d0>],
             '$54load_global.9': [<numba.core.ir.Assign object at 0x2808a5890>],
             '$66load_attr.10': [<numba.core.ir.Assign object at 0x2808a73d0>],
             '$94load_global.12': [<numba.core.ir.Assign object at 0x280886150>],
             '$const128.17': [<numba.core.ir.Assign object at 0x2808842d0>],
             '$const196.7': [<numba.core.ir.Assign object at 0x28087d8d0>],
             '$const218.10': [<numba.core.ir.Assign object at 0x28087d610>],
             '$const38.5': [<numba.core.ir.Assign object at 0x2808a7f90>],
             '$phi156.0': [<numba.core.ir.Assign object at 0x2808a5910>],
             '$phi158.1': [<numba.core.ir.Assign object at 0x28087e050>],
             'X': [<numba.core.ir.Assign object at 0x2808a6ed0>],
             'knn_indices': [<numba.core.ir.Assign object at 0x2808a60d0>],
             'n_neighbors': [<numba.core.ir.Assign object at 0x2808a4610>],
             'row': [<numba.core.ir.Assign object at 0x28087d550>],
             'v': [<numba.core.ir.Assign object at 0x28087f590>,
                   <numba.core.ir.Assign object at 0x28087c190>]})
2023-11-07 09:01:25,001 [DEBUG] SSA violators {'v'}
2023-11-07 09:01:25,001 [DEBUG] Fix SSA violator on var v
2023-11-07 09:01:25,001 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,001 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280268a50>
2023-11-07 09:01:25,001 [DEBUG] on stmt: X = arg(0, name=X)
2023-11-07 09:01:25,001 [DEBUG] on stmt: n_neighbors = arg(1, name=n_neighbors)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $28load_attr.4 = getattr(value=X, attr=shape)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $const38.5 = const(int, 0)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $40binary_subscr.6 = static_getitem(value=$28load_attr.4, index=0, index_var=$const38.5, fn=<built-in function getitem>)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $52build_tuple.8 = build_tuple(items=[Var($40binary_subscr.6, utils.py:31), Var(n_neighbors, utils.py:14)])
2023-11-07 09:01:25,001 [DEBUG] on stmt: $54load_global.9 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $66load_attr.10 = getattr(value=$54load_global.9, attr=int32)
2023-11-07 09:01:25,001 [DEBUG] on stmt: knn_indices = call $16load_attr.2($52build_tuple.8, func=$16load_attr.2, args=[Var($52build_tuple.8, utils.py:31)], kws=[('dtype', Var($66load_attr.10, utils.py:31))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $94load_global.12 = global(numba: <module 'numba' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numba/__init__.py'>)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $106load_attr.14 = getattr(value=$94load_global.12, attr=prange)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $118load_attr.16 = getattr(value=X, attr=shape)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $const128.17 = const(int, 0)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $130binary_subscr.18 = static_getitem(value=$118load_attr.16, index=0, index_var=$const128.17, fn=<built-in function getitem>)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $144call.19 = call $106load_attr.14($130binary_subscr.18, func=$106load_attr.14, args=[Var($130binary_subscr.18, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $154get_iter.20 = getiter(value=$144call.19)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $phi156.0 = $154get_iter.20
2023-11-07 09:01:25,001 [DEBUG] on stmt: jump 156
2023-11-07 09:01:25,001 [DEBUG] ==== SSA block rewrite pass on 156
2023-11-07 09:01:25,001 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280268a50>
2023-11-07 09:01:25,001 [DEBUG] on stmt: $156for_iter.1 = iternext(value=$phi156.0)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $156for_iter.2 = pair_first(value=$156for_iter.1)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $156for_iter.3 = pair_second(value=$156for_iter.1)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $phi158.1 = $156for_iter.2
2023-11-07 09:01:25,001 [DEBUG] on stmt: branch $156for_iter.3, 158, 248
2023-11-07 09:01:25,001 [DEBUG] ==== SSA block rewrite pass on 158
2023-11-07 09:01:25,001 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280268a50>
2023-11-07 09:01:25,001 [DEBUG] on stmt: row = $phi158.1
2023-11-07 09:01:25,001 [DEBUG] on stmt: $164binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $174load_method.6 = getattr(value=$164binary_subscr.4, attr=argsort)
2023-11-07 09:01:25,001 [DEBUG] on stmt: $const196.7 = const(str, quicksort)
2023-11-07 09:01:25,002 [DEBUG] on stmt: v = call $174load_method.6(func=$174load_method.6, args=[], kws=[('kind', Var($const196.7, utils.py:34))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,002 [DEBUG] first assign: v
2023-11-07 09:01:25,002 [DEBUG] replaced with: v = call $174load_method.6(func=$174load_method.6, args=[], kws=[('kind', Var($const196.7, utils.py:34))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $const218.10 = const(NoneType, None)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $222build_slice.12 = global(slice: <class 'slice'>)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $222build_slice.13 = call $222build_slice.12($const218.10, n_neighbors, func=$222build_slice.12, args=(Var($const218.10, utils.py:35), Var(n_neighbors, utils.py:14)), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,002 [DEBUG] on stmt: v = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>)
2023-11-07 09:01:25,002 [DEBUG] replaced with: v.1 = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>)
2023-11-07 09:01:25,002 [DEBUG] on stmt: knn_indices[row] = v
2023-11-07 09:01:25,002 [DEBUG] on stmt: jump 156
2023-11-07 09:01:25,002 [DEBUG] ==== SSA block rewrite pass on 248
2023-11-07 09:01:25,002 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280268a50>
2023-11-07 09:01:25,002 [DEBUG] on stmt: $250return_value.1 = cast(value=knn_indices)
2023-11-07 09:01:25,002 [DEBUG] on stmt: return $250return_value.1
2023-11-07 09:01:25,002 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {158: [<numba.core.ir.Assign object at 0x28083eb90>,
                   <numba.core.ir.Assign object at 0x28083dd90>]})
2023-11-07 09:01:25,002 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,002 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28083d610>
2023-11-07 09:01:25,002 [DEBUG] on stmt: X = arg(0, name=X)
2023-11-07 09:01:25,002 [DEBUG] on stmt: n_neighbors = arg(1, name=n_neighbors)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $28load_attr.4 = getattr(value=X, attr=shape)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $const38.5 = const(int, 0)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $40binary_subscr.6 = static_getitem(value=$28load_attr.4, index=0, index_var=$const38.5, fn=<built-in function getitem>)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $52build_tuple.8 = build_tuple(items=[Var($40binary_subscr.6, utils.py:31), Var(n_neighbors, utils.py:14)])
2023-11-07 09:01:25,002 [DEBUG] on stmt: $54load_global.9 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $66load_attr.10 = getattr(value=$54load_global.9, attr=int32)
2023-11-07 09:01:25,002 [DEBUG] on stmt: knn_indices = call $16load_attr.2($52build_tuple.8, func=$16load_attr.2, args=[Var($52build_tuple.8, utils.py:31)], kws=[('dtype', Var($66load_attr.10, utils.py:31))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $94load_global.12 = global(numba: <module 'numba' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numba/__init__.py'>)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $106load_attr.14 = getattr(value=$94load_global.12, attr=prange)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $118load_attr.16 = getattr(value=X, attr=shape)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $const128.17 = const(int, 0)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $130binary_subscr.18 = static_getitem(value=$118load_attr.16, index=0, index_var=$const128.17, fn=<built-in function getitem>)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $144call.19 = call $106load_attr.14($130binary_subscr.18, func=$106load_attr.14, args=[Var($130binary_subscr.18, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $154get_iter.20 = getiter(value=$144call.19)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $phi156.0 = $154get_iter.20
2023-11-07 09:01:25,002 [DEBUG] on stmt: jump 156
2023-11-07 09:01:25,002 [DEBUG] ==== SSA block rewrite pass on 156
2023-11-07 09:01:25,002 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28083d610>
2023-11-07 09:01:25,002 [DEBUG] on stmt: $156for_iter.1 = iternext(value=$phi156.0)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $156for_iter.2 = pair_first(value=$156for_iter.1)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $156for_iter.3 = pair_second(value=$156for_iter.1)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $phi158.1 = $156for_iter.2
2023-11-07 09:01:25,002 [DEBUG] on stmt: branch $156for_iter.3, 158, 248
2023-11-07 09:01:25,002 [DEBUG] ==== SSA block rewrite pass on 158
2023-11-07 09:01:25,002 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28083d610>
2023-11-07 09:01:25,002 [DEBUG] on stmt: row = $phi158.1
2023-11-07 09:01:25,002 [DEBUG] on stmt: $164binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $174load_method.6 = getattr(value=$164binary_subscr.4, attr=argsort)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $const196.7 = const(str, quicksort)
2023-11-07 09:01:25,002 [DEBUG] on stmt: v = call $174load_method.6(func=$174load_method.6, args=[], kws=[('kind', Var($const196.7, utils.py:34))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $const218.10 = const(NoneType, None)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $222build_slice.12 = global(slice: <class 'slice'>)
2023-11-07 09:01:25,002 [DEBUG] on stmt: $222build_slice.13 = call $222build_slice.12($const218.10, n_neighbors, func=$222build_slice.12, args=(Var($const218.10, utils.py:35), Var(n_neighbors, utils.py:14)), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,002 [DEBUG] on stmt: v.1 = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>)
2023-11-07 09:01:25,002 [DEBUG] find_def var='v' stmt=v.1 = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>)
2023-11-07 09:01:25,002 [DEBUG] on stmt: knn_indices[row] = v
2023-11-07 09:01:25,002 [DEBUG] find_def var='v' stmt=knn_indices[row] = v
2023-11-07 09:01:25,002 [DEBUG] replaced with: knn_indices[row] = v.1
2023-11-07 09:01:25,002 [DEBUG] on stmt: jump 156
2023-11-07 09:01:25,002 [DEBUG] ==== SSA block rewrite pass on 248
2023-11-07 09:01:25,002 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28083d610>
2023-11-07 09:01:25,002 [DEBUG] on stmt: $250return_value.1 = cast(value=knn_indices)
2023-11-07 09:01:25,002 [DEBUG] on stmt: return $250return_value.1
2023-11-07 09:01:25,004 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4251)
           2	COPY_FREE_VARS(arg=1, lineno=4251)
           4	RESUME(arg=0, lineno=4251)
           6	LOAD_GLOBAL(arg=1, lineno=4252)
          18	LOAD_FAST(arg=0, lineno=4252)
          20	LOAD_FAST(arg=1, lineno=4252)
          22	LOAD_DEREF(arg=2, lineno=4252)
          24	PRECALL(arg=3, lineno=4252)
          28	CALL(arg=3, lineno=4252)
          38	RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:25,004 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,004 [DEBUG] stack: []
2023-11-07 09:01:25,004 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,004 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4251)
2023-11-07 09:01:25,004 [DEBUG] stack []
2023-11-07 09:01:25,004 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4251)
2023-11-07 09:01:25,004 [DEBUG] stack []
2023-11-07 09:01:25,004 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=4251)
2023-11-07 09:01:25,004 [DEBUG] stack []
2023-11-07 09:01:25,004 [DEBUG] dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4252)
2023-11-07 09:01:25,004 [DEBUG] stack []
2023-11-07 09:01:25,004 [DEBUG] dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4252)
2023-11-07 09:01:25,004 [DEBUG] stack ['$null$6.1', '$6load_global.0']
2023-11-07 09:01:25,004 [DEBUG] dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4252)
2023-11-07 09:01:25,004 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2023-11-07 09:01:25,004 [DEBUG] dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4252)
2023-11-07 09:01:25,004 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2023-11-07 09:01:25,004 [DEBUG] dispatch pc=24, inst=PRECALL(arg=3, lineno=4252)
2023-11-07 09:01:25,004 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:25,004 [DEBUG] dispatch pc=28, inst=CALL(arg=3, lineno=4252)
2023-11-07 09:01:25,004 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:25,004 [DEBUG] dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:25,004 [DEBUG] stack ['$28call.5']
2023-11-07 09:01:25,004 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,004 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,004 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:25,004 [DEBUG] defmap: {}
2023-11-07 09:01:25,004 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,004 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,004 [DEBUG] keep phismap: {}
2023-11-07 09:01:25,004 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:25,004 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,004 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,005 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(int32, 2d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2023-11-07 09:01:25,006 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,006 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280854e10>
2023-11-07 09:01:25,006 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-11-07 09:01:25,006 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-11-07 09:01:25,006 [DEBUG] on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-11-07 09:01:25,006 [DEBUG] on stmt: $22load_deref.4 = freevar(retty: array(int32, 2d, C))
2023-11-07 09:01:25,006 [DEBUG] on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,006 [DEBUG] on stmt: $38return_value.6 = cast(value=$28call.5)
2023-11-07 09:01:25,006 [DEBUG] on stmt: return $38return_value.6
2023-11-07 09:01:25,006 [DEBUG] defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x2806f0cd0>],
             '$28call.5': [<numba.core.ir.Assign object at 0x2806f0810>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x280856050>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x2806f3a50>],
             'dtype': [<numba.core.ir.Assign object at 0x2806f2910>],
             'shape': [<numba.core.ir.Assign object at 0x2806f1a50>]})
2023-11-07 09:01:25,006 [DEBUG] SSA violators set()
2023-11-07 09:01:25,042 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_GLOBAL(arg=1, lineno=2)
          16	LOAD_FAST(arg=0, lineno=2)
          18	LOAD_CONST(arg=1, lineno=2)
          20	BINARY_SUBSCR(arg=None, lineno=2)
          30	LOAD_FAST(arg=0, lineno=2)
          32	LOAD_CONST(arg=2, lineno=2)
          34	BINARY_SUBSCR(arg=None, lineno=2)
          44	LOAD_GLOBAL(arg=2, lineno=2)
          56	LOAD_METHOD(arg=2, lineno=2)
          78	LOAD_CONST(arg=2, lineno=2)
          80	PRECALL(arg=1, lineno=2)
          84	CALL(arg=1, lineno=2)
          94	BINARY_OP(arg=0, lineno=2)
          98	PRECALL(arg=2, lineno=2)
         102	CALL(arg=2, lineno=2)
         112	GET_ITER(arg=None, lineno=2)
>        114	FOR_ITER(arg=4, lineno=2)
         116	STORE_FAST(arg=4, lineno=2)
         118	LOAD_CONST(arg=1, lineno=3)
         120	STORE_FAST(arg=5, lineno=3)
         122	JUMP_BACKWARD(arg=5, lineno=3)
>        124	LOAD_CONST(arg=0, lineno=4)
         126	RETURN_VALUE(arg=None, lineno=4)
2023-11-07 09:01:25,042 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,042 [DEBUG] stack: []
2023-11-07 09:01:25,042 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,042 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-11-07 09:01:25,042 [DEBUG] stack []
2023-11-07 09:01:25,042 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-11-07 09:01:25,042 [DEBUG] stack []
2023-11-07 09:01:25,042 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=2)
2023-11-07 09:01:25,042 [DEBUG] stack []
2023-11-07 09:01:25,042 [DEBUG] dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2)
2023-11-07 09:01:25,042 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:25,042 [DEBUG] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=2)
2023-11-07 09:01:25,042 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2', '$const18.3']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5', '$const32.6']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=44, inst=LOAD_GLOBAL(arg=2, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=56, inst=LOAD_METHOD(arg=2, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$44load_global.8']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=80, inst=PRECALL(arg=1, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=84, inst=CALL(arg=1, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=94, inst=BINARY_OP(arg=0, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$84call.12']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=98, inst=PRECALL(arg=2, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=102, inst=CALL(arg=2, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=112, inst=GET_ITER(arg=None, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$102call.14']
2023-11-07 09:01:25,043 [DEBUG] end state. edges=[Edge(pc=114, stack=('$112get_iter.15',), blockstack=(), npush=0)]
2023-11-07 09:01:25,043 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-11-07 09:01:25,043 [DEBUG] stack: ['$phi114.0']
2023-11-07 09:01:25,043 [DEBUG] state.pc_initial: State(pc_initial=114 nstack_initial=1)
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=114, inst=FOR_ITER(arg=4, lineno=2)
2023-11-07 09:01:25,043 [DEBUG] stack ['$phi114.0']
2023-11-07 09:01:25,043 [DEBUG] end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=('$phi114.0', '$114for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:25,043 [DEBUG] pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=116 nstack_initial=2)])
2023-11-07 09:01:25,043 [DEBUG] stack: []
2023-11-07 09:01:25,043 [DEBUG] state.pc_initial: State(pc_initial=124 nstack_initial=0)
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=124, inst=LOAD_CONST(arg=0, lineno=4)
2023-11-07 09:01:25,043 [DEBUG] stack []
2023-11-07 09:01:25,043 [DEBUG] dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=4)
2023-11-07 09:01:25,044 [DEBUG] stack ['$const124.0']
2023-11-07 09:01:25,044 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,044 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=2)])
2023-11-07 09:01:25,044 [DEBUG] stack: ['$phi116.0', '$phi116.1']
2023-11-07 09:01:25,044 [DEBUG] state.pc_initial: State(pc_initial=116 nstack_initial=2)
2023-11-07 09:01:25,044 [DEBUG] dispatch pc=116, inst=STORE_FAST(arg=4, lineno=2)
2023-11-07 09:01:25,044 [DEBUG] stack ['$phi116.0', '$phi116.1']
2023-11-07 09:01:25,044 [DEBUG] dispatch pc=118, inst=LOAD_CONST(arg=1, lineno=3)
2023-11-07 09:01:25,044 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:25,044 [DEBUG] dispatch pc=120, inst=STORE_FAST(arg=5, lineno=3)
2023-11-07 09:01:25,044 [DEBUG] stack ['$phi116.0', '$const118.2']
2023-11-07 09:01:25,044 [DEBUG] dispatch pc=122, inst=JUMP_BACKWARD(arg=5, lineno=3)
2023-11-07 09:01:25,044 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:25,044 [DEBUG] end state. edges=[Edge(pc=114, stack=('$phi116.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,044 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-11-07 09:01:25,044 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,044 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=1): {'$phi114.0'},
             State(pc_initial=116 nstack_initial=2): {'$phi116.1'},
             State(pc_initial=124 nstack_initial=0): set()})
2023-11-07 09:01:25,044 [DEBUG] defmap: {'$phi114.0': State(pc_initial=0 nstack_initial=0),
 '$phi116.1': State(pc_initial=114 nstack_initial=1)}
2023-11-07 09:01:25,044 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi116.0',
                            State(pc_initial=116 nstack_initial=2))},
             '$phi116.0': {('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:25,044 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:25,044 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:25,044 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:25,044 [DEBUG] keep phismap: {'$phi114.0': {('$112get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi116.1': {('$114for_iter.2', State(pc_initial=114 nstack_initial=1))}}
2023-11-07 09:01:25,044 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi114.0': '$112get_iter.15'},
             State(pc_initial=114 nstack_initial=1): {'$phi116.1': '$114for_iter.2'}})
2023-11-07 09:01:25,044 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,044 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$sched16.2'}), (18, {'res': '$const18.3'}), (20, {'index': '$const18.3', 'target': '$sched16.2', 'res': '$20binary_subscr.4'}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'res': '$sched30.5'}), (32, {'res': '$const32.6'}), (34, {'index': '$const32.6', 'target': '$sched30.5', 'res': '$34binary_subscr.7'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {'idx': 1, 'res': '$44load_global.8'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'item': '$44load_global.8', 'res': '$56load_method.10'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'res': '$const78.11'}), (80, {}), (82, {}), (84, {'func': '$56load_method.10', 'args': ['$const78.11'], 'kw_names': None, 'res': '$84call.12'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'op': '+', 'lhs': '$34binary_subscr.7', 'rhs': '$84call.12', 'res': '$binop_add94.13'}), (96, {}), (98, {}), (100, {}), (102, {'func': '$4load_global.0', 'args': ['$20binary_subscr.4', '$binop_add94.13'], 'kw_names': None, 'res': '$102call.14'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {'value': '$102call.14', 'res': '$112get_iter.15'})), outgoing_phis={'$phi114.0': '$112get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$112get_iter.15',)})
2023-11-07 09:01:25,044 [DEBUG] block_infos State(pc_initial=114 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'iterator': '$phi114.0', 'pair': '$114for_iter.1', 'indval': '$114for_iter.2', 'pred': '$114for_iter.3'}),), outgoing_phis={'$phi116.1': '$114for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 116: ('$phi114.0', '$114for_iter.2')})
2023-11-07 09:01:25,044 [DEBUG] block_infos State(pc_initial=116 nstack_initial=2):
AdaptBlockInfo(insts=((116, {'value': '$phi116.1'}), (118, {'res': '$const118.2'}), (120, {'value': '$const118.2'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$phi116.0',)})
2023-11-07 09:01:25,044 [DEBUG] block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$const124.0'}), (126, {'retval': '$const124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,045 [DEBUG] label 0:
    sched = arg(0, name=sched)               ['sched']
    X = arg(1, name=X)                       ['X']
    n__neighbors = arg(2, name=n__neighbors) ['n__neighbors']
    knn__indices = arg(3, name=knn__indices) ['knn__indices']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const18.3 = const(int, 0)               ['$const18.3']
    $20binary_subscr.4 = getitem(value=sched, index=$const18.3, fn=<built-in function getitem>) ['$20binary_subscr.4', '$const18.3', 'sched']
    $const32.6 = const(int, 1)               ['$const32.6']
    $34binary_subscr.7 = getitem(value=sched, index=$const32.6, fn=<built-in function getitem>) ['$34binary_subscr.7', '$const32.6', 'sched']
    $44load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$44load_global.8']
    $56load_method.10 = getattr(value=$44load_global.8, attr=uint8) ['$44load_global.8', '$56load_method.10']
    $const78.11 = const(int, 1)              ['$const78.11']
    $84call.12 = call $56load_method.10($const78.11, func=$56load_method.10, args=[Var($const78.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_method.10', '$84call.12', '$const78.11']
    $binop_add94.13 = $34binary_subscr.7 + $84call.12 ['$34binary_subscr.7', '$84call.12', '$binop_add94.13']
    $102call.14 = call $4load_global.0($20binary_subscr.4, $binop_add94.13, func=$4load_global.0, args=[Var($20binary_subscr.4, <string>:2), Var($binop_add94.13, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call.14', '$20binary_subscr.4', '$4load_global.0', '$binop_add94.13']
    $112get_iter.15 = getiter(value=$102call.14) ['$102call.14', '$112get_iter.15']
    $phi114.0 = $112get_iter.15              ['$112get_iter.15', '$phi114.0']
    jump 114                                 []
label 114:
    $114for_iter.1 = iternext(value=$phi114.0) ['$114for_iter.1', '$phi114.0']
    $114for_iter.2 = pair_first(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.2']
    $114for_iter.3 = pair_second(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.3']
    $phi116.1 = $114for_iter.2               ['$114for_iter.2', '$phi116.1']
    branch $114for_iter.3, 116, 124          ['$114for_iter.3']
label 116:
    parfor__index_18 = $phi116.1             ['$phi116.1', 'parfor__index_18']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 114                                 []
label 124:
    $const124.0 = const(NoneType, None)      ['$const124.0']
    $126return_value.1 = cast(value=$const124.0) ['$126return_value.1', '$const124.0']
    return $126return_value.1                ['$126return_value.1']

2023-11-07 09:01:25,056 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=6176)
           2	COPY_FREE_VARS(arg=1, lineno=6176)
           4	RESUME(arg=0, lineno=6176)
           6	PUSH_NULL(arg=None, lineno=6177)
           8	LOAD_DEREF(arg=1, lineno=6177)
          10	LOAD_FAST(arg=0, lineno=6177)
          12	PRECALL(arg=1, lineno=6177)
          16	CALL(arg=1, lineno=6177)
          26	RETURN_VALUE(arg=None, lineno=6177)
2023-11-07 09:01:25,056 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,056 [DEBUG] stack: []
2023-11-07 09:01:25,056 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,056 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=6176)
2023-11-07 09:01:25,056 [DEBUG] stack []
2023-11-07 09:01:25,056 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=6176)
2023-11-07 09:01:25,056 [DEBUG] stack []
2023-11-07 09:01:25,056 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=6176)
2023-11-07 09:01:25,056 [DEBUG] stack []
2023-11-07 09:01:25,056 [DEBUG] dispatch pc=6, inst=PUSH_NULL(arg=None, lineno=6177)
2023-11-07 09:01:25,056 [DEBUG] stack []
2023-11-07 09:01:25,056 [DEBUG] dispatch pc=8, inst=LOAD_DEREF(arg=1, lineno=6177)
2023-11-07 09:01:25,056 [DEBUG] stack ['$null$6.0']
2023-11-07 09:01:25,056 [DEBUG] dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=6177)
2023-11-07 09:01:25,056 [DEBUG] stack ['$null$6.0', '$8load_deref.1']
2023-11-07 09:01:25,056 [DEBUG] dispatch pc=12, inst=PRECALL(arg=1, lineno=6177)
2023-11-07 09:01:25,056 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$arr10.2']
2023-11-07 09:01:25,056 [DEBUG] dispatch pc=16, inst=CALL(arg=1, lineno=6177)
2023-11-07 09:01:25,056 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$arr10.2']
2023-11-07 09:01:25,057 [DEBUG] dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=6177)
2023-11-07 09:01:25,057 [DEBUG] stack ['$16call.3']
2023-11-07 09:01:25,057 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,057 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,057 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:25,057 [DEBUG] defmap: {}
2023-11-07 09:01:25,057 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,057 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,057 [DEBUG] keep phismap: {}
2023-11-07 09:01:25,057 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:25,057 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,057 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {}), (8, {'res': '$8load_deref.1'}), (10, {'res': '$arr10.2'}), (12, {}), (14, {}), (16, {'func': '$8load_deref.1', 'args': ['$arr10.2'], 'kw_names': None, 'res': '$16call.3'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'retval': '$16call.3', 'castval': '$26return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,057 [DEBUG] label 0:
    arr = arg(0, name=arr)                   ['arr']
    $8load_deref.1 = freevar(sort_func: <function make_quicksort_impl.<locals>.run_quicksort at 0x282a0f420>) ['$8load_deref.1']
    $16call.3 = call $8load_deref.1(arr, func=$8load_deref.1, args=[Var(arr, arrayobj.py:6176)], kws=(), vararg=None, varkwarg=None, target=None) ['$16call.3', '$8load_deref.1', 'arr']
    $26return_value.4 = cast(value=$16call.3) ['$16call.3', '$26return_value.4']
    return $26return_value.4                 ['$26return_value.4']

2023-11-07 09:01:25,059 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,059 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2808d0310>
2023-11-07 09:01:25,059 [DEBUG] on stmt: arr = arg(0, name=arr)
2023-11-07 09:01:25,059 [DEBUG] on stmt: $8load_deref.1 = freevar(sort_func: <function make_quicksort_impl.<locals>.run_quicksort at 0x282a0f420>)
2023-11-07 09:01:25,059 [DEBUG] on stmt: $16call.3 = call $8load_deref.1(arr, func=$8load_deref.1, args=[Var(arr, arrayobj.py:6176)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,059 [DEBUG] on stmt: $26return_value.4 = cast(value=$16call.3)
2023-11-07 09:01:25,059 [DEBUG] on stmt: return $26return_value.4
2023-11-07 09:01:25,059 [DEBUG] defs defaultdict(<class 'list'>,
            {'$16call.3': [<numba.core.ir.Assign object at 0x28091a990>],
             '$26return_value.4': [<numba.core.ir.Assign object at 0x28091ac50>],
             '$8load_deref.1': [<numba.core.ir.Assign object at 0x2809197d0>],
             'arr': [<numba.core.ir.Assign object at 0x280918450>]})
2023-11-07 09:01:25,059 [DEBUG] SSA violators set()
2023-11-07 09:01:25,060 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=200)
           2	COPY_FREE_VARS(arg=1, lineno=200)
           4	RESUME(arg=0, lineno=200)
           6	LOAD_FAST(arg=0, lineno=202)
           8	LOAD_ATTR(arg=0, lineno=202)
          18	LOAD_CONST(arg=1, lineno=202)
          20	COMPARE_OP(arg=2, lineno=202)
          26	POP_JUMP_FORWARD_IF_FALSE(arg=11, lineno=202)
          28	PUSH_NULL(arg=None, lineno=203)
          30	LOAD_DEREF(arg=2, lineno=203)
          32	LOAD_FAST(arg=0, lineno=203)
          34	PRECALL(arg=1, lineno=203)
          38	CALL(arg=1, lineno=203)
          48	RETURN_VALUE(arg=None, lineno=203)
>         50	LOAD_GLOBAL(arg=3, lineno=205)
          62	LOAD_ATTR(arg=2, lineno=205)
          72	LOAD_FAST(arg=0, lineno=205)
          74	LOAD_ATTR(arg=3, lineno=205)
          84	LOAD_CONST(arg=0, lineno=205)
          86	LOAD_CONST(arg=2, lineno=205)
          88	BUILD_SLICE(arg=2, lineno=205)
          90	BINARY_SUBSCR(arg=None, lineno=205)
         100	PRECALL(arg=1, lineno=205)
         104	CALL(arg=1, lineno=205)
         114	GET_ITER(arg=None, lineno=205)
>        116	FOR_ITER(arg=19, lineno=205)
         118	STORE_FAST(arg=1, lineno=205)
         120	PUSH_NULL(arg=None, lineno=206)
         122	LOAD_DEREF(arg=2, lineno=206)
         124	LOAD_FAST(arg=0, lineno=206)
         126	LOAD_FAST(arg=1, lineno=206)
         128	BINARY_SUBSCR(arg=None, lineno=206)
         138	PRECALL(arg=1, lineno=206)
         142	CALL(arg=1, lineno=206)
         152	POP_TOP(arg=None, lineno=206)
         154	JUMP_BACKWARD(arg=20, lineno=206)
>        156	LOAD_FAST(arg=0, lineno=207)
         158	RETURN_VALUE(arg=None, lineno=207)
2023-11-07 09:01:25,060 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,060 [DEBUG] stack: []
2023-11-07 09:01:25,060 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=200)
2023-11-07 09:01:25,060 [DEBUG] stack []
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=200)
2023-11-07 09:01:25,060 [DEBUG] stack []
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=200)
2023-11-07 09:01:25,060 [DEBUG] stack []
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=202)
2023-11-07 09:01:25,060 [DEBUG] stack []
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=8, inst=LOAD_ATTR(arg=0, lineno=202)
2023-11-07 09:01:25,060 [DEBUG] stack ['$A6.0']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=202)
2023-11-07 09:01:25,060 [DEBUG] stack ['$8load_attr.1']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=20, inst=COMPARE_OP(arg=2, lineno=202)
2023-11-07 09:01:25,060 [DEBUG] stack ['$8load_attr.1', '$const18.2']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=26, inst=POP_JUMP_FORWARD_IF_FALSE(arg=11, lineno=202)
2023-11-07 09:01:25,060 [DEBUG] stack ['$20compare_op.3']
2023-11-07 09:01:25,060 [DEBUG] end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,060 [DEBUG] pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-11-07 09:01:25,060 [DEBUG] stack: []
2023-11-07 09:01:25,060 [DEBUG] state.pc_initial: State(pc_initial=28 nstack_initial=0)
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=28, inst=PUSH_NULL(arg=None, lineno=203)
2023-11-07 09:01:25,060 [DEBUG] stack []
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=30, inst=LOAD_DEREF(arg=2, lineno=203)
2023-11-07 09:01:25,060 [DEBUG] stack ['$null$28.0']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=203)
2023-11-07 09:01:25,060 [DEBUG] stack ['$null$28.0', '$30load_deref.1']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=34, inst=PRECALL(arg=1, lineno=203)
2023-11-07 09:01:25,060 [DEBUG] stack ['$null$28.0', '$30load_deref.1', '$A32.2']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=38, inst=CALL(arg=1, lineno=203)
2023-11-07 09:01:25,060 [DEBUG] stack ['$null$28.0', '$30load_deref.1', '$A32.2']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=203)
2023-11-07 09:01:25,060 [DEBUG] stack ['$38call.3']
2023-11-07 09:01:25,060 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,060 [DEBUG] pending: deque([State(pc_initial=50 nstack_initial=0)])
2023-11-07 09:01:25,060 [DEBUG] stack: []
2023-11-07 09:01:25,060 [DEBUG] state.pc_initial: State(pc_initial=50 nstack_initial=0)
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=50, inst=LOAD_GLOBAL(arg=3, lineno=205)
2023-11-07 09:01:25,060 [DEBUG] stack []
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=62, inst=LOAD_ATTR(arg=2, lineno=205)
2023-11-07 09:01:25,060 [DEBUG] stack ['$null$50.1', '$50load_global.0']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=205)
2023-11-07 09:01:25,060 [DEBUG] stack ['$null$50.1', '$62load_attr.2']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=74, inst=LOAD_ATTR(arg=3, lineno=205)
2023-11-07 09:01:25,060 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$A72.3']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=84, inst=LOAD_CONST(arg=0, lineno=205)
2023-11-07 09:01:25,060 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$74load_attr.4']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=86, inst=LOAD_CONST(arg=2, lineno=205)
2023-11-07 09:01:25,060 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$74load_attr.4', '$const84.5']
2023-11-07 09:01:25,060 [DEBUG] dispatch pc=88, inst=BUILD_SLICE(arg=2, lineno=205)
2023-11-07 09:01:25,060 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$74load_attr.4', '$const84.5', '$const86.6']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=205)
2023-11-07 09:01:25,061 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$74load_attr.4', '$88build_slice.8']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=100, inst=PRECALL(arg=1, lineno=205)
2023-11-07 09:01:25,061 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$90binary_subscr.9']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=104, inst=CALL(arg=1, lineno=205)
2023-11-07 09:01:25,061 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$90binary_subscr.9']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=114, inst=GET_ITER(arg=None, lineno=205)
2023-11-07 09:01:25,061 [DEBUG] stack ['$104call.10']
2023-11-07 09:01:25,061 [DEBUG] end state. edges=[Edge(pc=116, stack=('$114get_iter.11',), blockstack=(), npush=0)]
2023-11-07 09:01:25,061 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=1)])
2023-11-07 09:01:25,061 [DEBUG] stack: ['$phi116.0']
2023-11-07 09:01:25,061 [DEBUG] state.pc_initial: State(pc_initial=116 nstack_initial=1)
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=116, inst=FOR_ITER(arg=19, lineno=205)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:25,061 [DEBUG] end state. edges=[Edge(pc=156, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=('$phi116.0', '$116for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:25,061 [DEBUG] pending: deque([State(pc_initial=156 nstack_initial=0), State(pc_initial=118 nstack_initial=2)])
2023-11-07 09:01:25,061 [DEBUG] stack: []
2023-11-07 09:01:25,061 [DEBUG] state.pc_initial: State(pc_initial=156 nstack_initial=0)
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=156, inst=LOAD_FAST(arg=0, lineno=207)
2023-11-07 09:01:25,061 [DEBUG] stack []
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=158, inst=RETURN_VALUE(arg=None, lineno=207)
2023-11-07 09:01:25,061 [DEBUG] stack ['$A156.0']
2023-11-07 09:01:25,061 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,061 [DEBUG] pending: deque([State(pc_initial=118 nstack_initial=2)])
2023-11-07 09:01:25,061 [DEBUG] stack: ['$phi118.0', '$phi118.1']
2023-11-07 09:01:25,061 [DEBUG] state.pc_initial: State(pc_initial=118 nstack_initial=2)
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=118, inst=STORE_FAST(arg=1, lineno=205)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi118.0', '$phi118.1']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=120, inst=PUSH_NULL(arg=None, lineno=206)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi118.0']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=122, inst=LOAD_DEREF(arg=2, lineno=206)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi118.0', '$null$120.2']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=206)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi118.0', '$null$120.2', '$122load_deref.3']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=126, inst=LOAD_FAST(arg=1, lineno=206)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi118.0', '$null$120.2', '$122load_deref.3', '$A124.4']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=206)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi118.0', '$null$120.2', '$122load_deref.3', '$A124.4', '$idx126.5']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=138, inst=PRECALL(arg=1, lineno=206)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi118.0', '$null$120.2', '$122load_deref.3', '$128binary_subscr.6']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=142, inst=CALL(arg=1, lineno=206)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi118.0', '$null$120.2', '$122load_deref.3', '$128binary_subscr.6']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=152, inst=POP_TOP(arg=None, lineno=206)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi118.0', '$142call.7']
2023-11-07 09:01:25,061 [DEBUG] dispatch pc=154, inst=JUMP_BACKWARD(arg=20, lineno=206)
2023-11-07 09:01:25,061 [DEBUG] stack ['$phi118.0']
2023-11-07 09:01:25,061 [DEBUG] end state. edges=[Edge(pc=116, stack=('$phi118.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,061 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=1)])
2023-11-07 09:01:25,061 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,061 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=1): {'$phi116.0'},
             State(pc_initial=118 nstack_initial=2): {'$phi118.1'},
             State(pc_initial=156 nstack_initial=0): set()})
2023-11-07 09:01:25,061 [DEBUG] defmap: {'$phi116.0': State(pc_initial=50 nstack_initial=0),
 '$phi118.1': State(pc_initial=116 nstack_initial=1)}
2023-11-07 09:01:25,061 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi116.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0)),
                           ('$phi118.0',
                            State(pc_initial=118 nstack_initial=2))},
             '$phi118.0': {('$phi116.0',
                            State(pc_initial=116 nstack_initial=1))},
             '$phi118.1': {('$116for_iter.2',
                            State(pc_initial=116 nstack_initial=1))}})
2023-11-07 09:01:25,061 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi116.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0)),
                           ('$phi116.0',
                            State(pc_initial=116 nstack_initial=1))},
             '$phi118.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi118.1': {('$116for_iter.2',
                            State(pc_initial=116 nstack_initial=1))}})
2023-11-07 09:01:25,061 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi116.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi118.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi118.1': {('$116for_iter.2',
                            State(pc_initial=116 nstack_initial=1))}})
2023-11-07 09:01:25,061 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi116.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi118.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi118.1': {('$116for_iter.2',
                            State(pc_initial=116 nstack_initial=1))}})
2023-11-07 09:01:25,061 [DEBUG] keep phismap: {'$phi116.0': {('$114get_iter.11', State(pc_initial=50 nstack_initial=0))},
 '$phi118.1': {('$116for_iter.2', State(pc_initial=116 nstack_initial=1))}}
2023-11-07 09:01:25,061 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=50 nstack_initial=0): {'$phi116.0': '$114get_iter.11'},
             State(pc_initial=116 nstack_initial=1): {'$phi118.1': '$116for_iter.2'}})
2023-11-07 09:01:25,061 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,061 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$A6.0'}), (8, {'item': '$A6.0', 'res': '$8load_attr.1'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$const18.2'}), (20, {'lhs': '$8load_attr.1', 'rhs': '$const18.2', 'res': '$20compare_op.3'}), (22, {}), (24, {}), (26, {'pred': '$20compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 50: ()})
2023-11-07 09:01:25,062 [DEBUG] block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {}), (30, {'res': '$30load_deref.1'}), (32, {'res': '$A32.2'}), (34, {}), (36, {}), (38, {'func': '$30load_deref.1', 'args': ['$A32.2'], 'kw_names': None, 'res': '$38call.3'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'retval': '$38call.3', 'castval': '$48return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,062 [DEBUG] block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'idx': 1, 'res': '$50load_global.0'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {'item': '$50load_global.0', 'res': '$62load_attr.2'}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {'res': '$A72.3'}), (74, {'item': '$A72.3', 'res': '$74load_attr.4'}), (76, {}), (78, {}), (80, {}), (82, {}), (84, {'res': '$const84.5'}), (86, {'res': '$const86.6'}), (88, {'start': '$const84.5', 'stop': '$const86.6', 'step': None, 'res': '$88build_slice.8', 'slicevar': '$88build_slice.7'}), (90, {'index': '$88build_slice.8', 'target': '$74load_attr.4', 'res': '$90binary_subscr.9'}), (92, {}), (94, {}), (96, {}), (98, {}), (100, {}), (102, {}), (104, {'func': '$62load_attr.2', 'args': ['$90binary_subscr.9'], 'kw_names': None, 'res': '$104call.10'}), (106, {}), (108, {}), (110, {}), (112, {}), (114, {'value': '$104call.10', 'res': '$114get_iter.11'})), outgoing_phis={'$phi116.0': '$114get_iter.11'}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: ('$114get_iter.11',)})
2023-11-07 09:01:25,062 [DEBUG] block_infos State(pc_initial=116 nstack_initial=1):
AdaptBlockInfo(insts=((116, {'iterator': '$phi116.0', 'pair': '$116for_iter.1', 'indval': '$116for_iter.2', 'pred': '$116for_iter.3'}),), outgoing_phis={'$phi118.1': '$116for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: (), 118: ('$phi116.0', '$116for_iter.2')})
2023-11-07 09:01:25,062 [DEBUG] block_infos State(pc_initial=118 nstack_initial=2):
AdaptBlockInfo(insts=((118, {'value': '$phi118.1'}), (120, {}), (122, {'res': '$122load_deref.3'}), (124, {'res': '$A124.4'}), (126, {'res': '$idx126.5'}), (128, {'index': '$idx126.5', 'target': '$A124.4', 'res': '$128binary_subscr.6'}), (130, {}), (132, {}), (134, {}), (136, {}), (138, {}), (140, {}), (142, {'func': '$122load_deref.3', 'args': ['$128binary_subscr.6'], 'kw_names': None, 'res': '$142call.7'}), (144, {}), (146, {}), (148, {}), (150, {}), (154, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: ('$phi118.0',)})
2023-11-07 09:01:25,062 [DEBUG] block_infos State(pc_initial=156 nstack_initial=0):
AdaptBlockInfo(insts=((156, {'res': '$A156.0'}), (158, {'retval': '$A156.0', 'castval': '$158return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,062 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    $8load_attr.1 = getattr(value=A, attr=ndim) ['$8load_attr.1', 'A']
    $const18.2 = const(int, 1)               ['$const18.2']
    $20compare_op.3 = $8load_attr.1 == $const18.2 ['$20compare_op.3', '$8load_attr.1', '$const18.2']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($20compare_op.3, func=bool26, args=(Var($20compare_op.3, quicksort.py:202),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.3', '$26pred', 'bool26']
    branch $26pred, 28, 50                   ['$26pred']
label 28:
    $30load_deref.1 = freevar(run_quicksort1: <function make_quicksort_impl.<locals>.run_quicksort1 at 0x282a0ccc0>) ['$30load_deref.1']
    $38call.3 = call $30load_deref.1(A, func=$30load_deref.1, args=[Var(A, quicksort.py:200)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_deref.1', '$38call.3', 'A']
    $48return_value.4 = cast(value=$38call.3) ['$38call.3', '$48return_value.4']
    return $48return_value.4                 ['$48return_value.4']
label 50:
    $50load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$50load_global.0']
    $62load_attr.2 = getattr(value=$50load_global.0, attr=ndindex) ['$50load_global.0', '$62load_attr.2']
    $74load_attr.4 = getattr(value=A, attr=shape) ['$74load_attr.4', 'A']
    $const84.5 = const(NoneType, None)       ['$const84.5']
    $const86.6 = const(int, -1)              ['$const86.6']
    $88build_slice.7 = global(slice: <class 'slice'>) ['$88build_slice.7']
    $88build_slice.8 = call $88build_slice.7($const84.5, $const86.6, func=$88build_slice.7, args=(Var($const84.5, quicksort.py:205), Var($const86.6, quicksort.py:205)), kws=(), vararg=None, varkwarg=None, target=None) ['$88build_slice.7', '$88build_slice.8', '$const84.5', '$const86.6']
    $90binary_subscr.9 = getitem(value=$74load_attr.4, index=$88build_slice.8, fn=<built-in function getitem>) ['$74load_attr.4', '$88build_slice.8', '$90binary_subscr.9']
    $104call.10 = call $62load_attr.2($90binary_subscr.9, func=$62load_attr.2, args=[Var($90binary_subscr.9, quicksort.py:205)], kws=(), vararg=None, varkwarg=None, target=None) ['$104call.10', '$62load_attr.2', '$90binary_subscr.9']
    $114get_iter.11 = getiter(value=$104call.10) ['$104call.10', '$114get_iter.11']
    $phi116.0 = $114get_iter.11              ['$114get_iter.11', '$phi116.0']
    jump 116                                 []
label 116:
    $116for_iter.1 = iternext(value=$phi116.0) ['$116for_iter.1', '$phi116.0']
    $116for_iter.2 = pair_first(value=$116for_iter.1) ['$116for_iter.1', '$116for_iter.2']
    $116for_iter.3 = pair_second(value=$116for_iter.1) ['$116for_iter.1', '$116for_iter.3']
    $phi118.1 = $116for_iter.2               ['$116for_iter.2', '$phi118.1']
    branch $116for_iter.3, 118, 156          ['$116for_iter.3']
label 118:
    idx = $phi118.1                          ['$phi118.1', 'idx']
    $122load_deref.3 = freevar(run_quicksort1: <function make_quicksort_impl.<locals>.run_quicksort1 at 0x282a0ccc0>) ['$122load_deref.3']
    $128binary_subscr.6 = getitem(value=A, index=idx, fn=<built-in function getitem>) ['$128binary_subscr.6', 'A', 'idx']
    $142call.7 = call $122load_deref.3($128binary_subscr.6, func=$122load_deref.3, args=[Var($128binary_subscr.6, quicksort.py:206)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_deref.3', '$128binary_subscr.6', '$142call.7']
    jump 116                                 []
label 156:
    $158return_value.1 = cast(value=A)       ['$158return_value.1', 'A']
    return $158return_value.1                ['$158return_value.1']

2023-11-07 09:01:25,065 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,065 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280901f10>
2023-11-07 09:01:25,065 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,065 [DEBUG] on stmt: $8load_attr.1 = const(int, 1)
2023-11-07 09:01:25,065 [DEBUG] on stmt: $const18.2 = const(int, 1)
2023-11-07 09:01:25,065 [DEBUG] on stmt: $20compare_op.3 = const(int, 1)
2023-11-07 09:01:25,065 [DEBUG] on stmt: bool26 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,065 [DEBUG] on stmt: $26pred = call bool26($20compare_op.3, func=bool26, args=(Var($20compare_op.3, quicksort.py:202),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,065 [DEBUG] on stmt: jump 28
2023-11-07 09:01:25,065 [DEBUG] ==== SSA block analysis pass on 28
2023-11-07 09:01:25,065 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280901f10>
2023-11-07 09:01:25,065 [DEBUG] on stmt: $30load_deref.1 = freevar(run_quicksort1: <function make_quicksort_impl.<locals>.run_quicksort1 at 0x282a0ccc0>)
2023-11-07 09:01:25,065 [DEBUG] on stmt: $38call.3 = call $30load_deref.1(A, func=$30load_deref.1, args=[Var(A, quicksort.py:200)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,065 [DEBUG] on stmt: $48return_value.4 = cast(value=$38call.3)
2023-11-07 09:01:25,065 [DEBUG] on stmt: return $48return_value.4
2023-11-07 09:01:25,065 [DEBUG] defs defaultdict(<class 'list'>,
            {'$20compare_op.3': [<numba.core.ir.Assign object at 0x280900450>],
             '$26pred': [<numba.core.ir.Assign object at 0x280903590>],
             '$30load_deref.1': [<numba.core.ir.Assign object at 0x280904390>],
             '$38call.3': [<numba.core.ir.Assign object at 0x280905790>],
             '$48return_value.4': [<numba.core.ir.Assign object at 0x2809064d0>],
             '$8load_attr.1': [<numba.core.ir.Assign object at 0x2809012d0>],
             '$const18.2': [<numba.core.ir.Assign object at 0x280901e50>],
             'A': [<numba.core.ir.Assign object at 0x280903350>],
             'bool26': [<numba.core.ir.Assign object at 0x280903710>]})
2023-11-07 09:01:25,065 [DEBUG] SSA violators set()
2023-11-07 09:01:25,066 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=164)
           2	COPY_FREE_VARS(arg=4, lineno=164)
           4	RESUME(arg=0, lineno=164)
           6	PUSH_NULL(arg=None, lineno=166)
           8	LOAD_DEREF(arg=8, lineno=166)
          10	LOAD_FAST(arg=0, lineno=166)
          12	PRECALL(arg=1, lineno=166)
          16	CALL(arg=1, lineno=166)
          26	STORE_FAST(arg=1, lineno=166)
          28	LOAD_GLOBAL(arg=1, lineno=168)
          40	LOAD_FAST(arg=0, lineno=168)
          42	PRECALL(arg=1, lineno=168)
          46	CALL(arg=1, lineno=168)
          56	LOAD_CONST(arg=1, lineno=168)
          58	COMPARE_OP(arg=0, lineno=168)
          64	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=168)
          66	LOAD_FAST(arg=1, lineno=169)
          68	RETURN_VALUE(arg=None, lineno=169)
>         70	LOAD_GLOBAL(arg=3, lineno=171)
          82	LOAD_DEREF(arg=10, lineno=171)
          84	LOAD_DEREF(arg=10, lineno=171)
          86	PRECALL(arg=2, lineno=171)
          90	CALL(arg=2, lineno=171)
         100	BUILD_LIST(arg=1, lineno=171)
         102	LOAD_GLOBAL(arg=4, lineno=171)
         114	BINARY_OP(arg=5, lineno=171)
         118	STORE_FAST(arg=2, lineno=171)
         120	LOAD_GLOBAL(arg=3, lineno=172)
         132	LOAD_DEREF(arg=10, lineno=172)
         134	LOAD_GLOBAL(arg=1, lineno=172)
         146	LOAD_FAST(arg=0, lineno=172)
         148	PRECALL(arg=1, lineno=172)
         152	CALL(arg=1, lineno=172)
         162	LOAD_CONST(arg=2, lineno=172)
         164	BINARY_OP(arg=10, lineno=172)
         168	PRECALL(arg=2, lineno=172)
         172	CALL(arg=2, lineno=172)
         182	LOAD_FAST(arg=2, lineno=172)
         184	LOAD_CONST(arg=3, lineno=172)
         186	STORE_SUBSCR(arg=None, lineno=172)
         190	LOAD_CONST(arg=2, lineno=173)
         192	STORE_FAST(arg=3, lineno=173)
         194	LOAD_FAST(arg=3, lineno=175)
         196	LOAD_CONST(arg=3, lineno=175)
         198	COMPARE_OP(arg=4, lineno=175)
         204	POP_JUMP_FORWARD_IF_FALSE(arg=180, lineno=175)
>        206	LOAD_FAST(arg=3, lineno=176)
         208	LOAD_CONST(arg=2, lineno=176)
         210	BINARY_OP(arg=23, lineno=176)
         214	STORE_FAST(arg=3, lineno=176)
         216	LOAD_FAST(arg=2, lineno=177)
         218	LOAD_FAST(arg=3, lineno=177)
         220	BINARY_SUBSCR(arg=None, lineno=177)
         230	UNPACK_SEQUENCE(arg=2, lineno=177)
         234	STORE_FAST(arg=4, lineno=177)
         236	STORE_FAST(arg=5, lineno=177)
         238	LOAD_FAST(arg=5, lineno=179)
         240	LOAD_FAST(arg=4, lineno=179)
         242	BINARY_OP(arg=10, lineno=179)
         246	LOAD_GLOBAL(arg=6, lineno=179)
         258	COMPARE_OP(arg=5, lineno=179)
         264	POP_JUMP_FORWARD_IF_FALSE(arg=130, lineno=179)
>        266	LOAD_FAST(arg=3, lineno=180)
         268	LOAD_GLOBAL(arg=4, lineno=180)
         280	COMPARE_OP(arg=0, lineno=180)
         286	POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=180)
         288	LOAD_ASSERTION_ERROR(arg=None, lineno=180)
         290	RAISE_VARARGS(arg=1, lineno=180)
>        292	PUSH_NULL(arg=None, lineno=181)
         294	LOAD_DEREF(arg=9, lineno=181)
         296	LOAD_FAST(arg=0, lineno=181)
         298	LOAD_FAST(arg=1, lineno=181)
         300	LOAD_FAST(arg=4, lineno=181)
         302	LOAD_FAST(arg=5, lineno=181)
         304	PRECALL(arg=4, lineno=181)
         308	CALL(arg=4, lineno=181)
         318	STORE_FAST(arg=6, lineno=181)
         320	LOAD_FAST(arg=5, lineno=183)
         322	LOAD_FAST(arg=6, lineno=183)
         324	BINARY_OP(arg=10, lineno=183)
         328	LOAD_FAST(arg=6, lineno=183)
         330	LOAD_FAST(arg=4, lineno=183)
         332	BINARY_OP(arg=10, lineno=183)
         336	COMPARE_OP(arg=4, lineno=183)
         342	POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=183)
         344	LOAD_FAST(arg=5, lineno=185)
         346	LOAD_FAST(arg=6, lineno=185)
         348	COMPARE_OP(arg=4, lineno=185)
         354	POP_JUMP_FORWARD_IF_FALSE(arg=27, lineno=185)
         356	LOAD_GLOBAL(arg=3, lineno=186)
         368	LOAD_FAST(arg=6, lineno=186)
         370	LOAD_CONST(arg=2, lineno=186)
         372	BINARY_OP(arg=0, lineno=186)
         376	LOAD_FAST(arg=5, lineno=186)
         378	PRECALL(arg=2, lineno=186)
         382	CALL(arg=2, lineno=186)
         392	LOAD_FAST(arg=2, lineno=186)
         394	LOAD_FAST(arg=3, lineno=186)
         396	STORE_SUBSCR(arg=None, lineno=186)
         400	LOAD_FAST(arg=3, lineno=187)
         402	LOAD_CONST(arg=2, lineno=187)
         404	BINARY_OP(arg=13, lineno=187)
         408	STORE_FAST(arg=3, lineno=187)
>        410	LOAD_FAST(arg=6, lineno=188)
         412	LOAD_CONST(arg=2, lineno=188)
         414	BINARY_OP(arg=10, lineno=188)
         418	STORE_FAST(arg=5, lineno=188)
         420	JUMP_FORWARD(arg=38, lineno=188)
>        422	LOAD_FAST(arg=6, lineno=190)
         424	LOAD_FAST(arg=4, lineno=190)
         426	COMPARE_OP(arg=4, lineno=190)
         432	POP_JUMP_FORWARD_IF_FALSE(arg=27, lineno=190)
         434	LOAD_GLOBAL(arg=3, lineno=191)
         446	LOAD_FAST(arg=4, lineno=191)
         448	LOAD_FAST(arg=6, lineno=191)
         450	LOAD_CONST(arg=2, lineno=191)
         452	BINARY_OP(arg=10, lineno=191)
         456	PRECALL(arg=2, lineno=191)
         460	CALL(arg=2, lineno=191)
         470	LOAD_FAST(arg=2, lineno=191)
         472	LOAD_FAST(arg=3, lineno=191)
         474	STORE_SUBSCR(arg=None, lineno=191)
         478	LOAD_FAST(arg=3, lineno=192)
         480	LOAD_CONST(arg=2, lineno=192)
         482	BINARY_OP(arg=13, lineno=192)
         486	STORE_FAST(arg=3, lineno=192)
>        488	LOAD_FAST(arg=6, lineno=193)
         490	LOAD_CONST(arg=2, lineno=193)
         492	BINARY_OP(arg=0, lineno=193)
         496	STORE_FAST(arg=4, lineno=193)
>        498	LOAD_FAST(arg=5, lineno=179)
         500	LOAD_FAST(arg=4, lineno=179)
         502	BINARY_OP(arg=10, lineno=179)
         506	LOAD_GLOBAL(arg=6, lineno=179)
         518	COMPARE_OP(arg=5, lineno=179)
         524	POP_JUMP_BACKWARD_IF_TRUE(arg=130, lineno=179)
>        526	PUSH_NULL(arg=None, lineno=195)
         528	LOAD_DEREF(arg=7, lineno=195)
         530	LOAD_FAST(arg=0, lineno=195)
         532	LOAD_FAST(arg=1, lineno=195)
         534	LOAD_FAST(arg=4, lineno=195)
         536	LOAD_FAST(arg=5, lineno=195)
         538	PRECALL(arg=4, lineno=195)
         542	CALL(arg=4, lineno=195)
         552	POP_TOP(arg=None, lineno=195)
         554	LOAD_FAST(arg=3, lineno=175)
         556	LOAD_CONST(arg=3, lineno=175)
         558	COMPARE_OP(arg=4, lineno=175)
         564	POP_JUMP_BACKWARD_IF_TRUE(arg=180, lineno=175)
>        566	LOAD_FAST(arg=1, lineno=197)
         568	RETURN_VALUE(arg=None, lineno=197)
2023-11-07 09:01:25,066 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,066 [DEBUG] stack: []
2023-11-07 09:01:25,066 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,066 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=164)
2023-11-07 09:01:25,066 [DEBUG] stack []
2023-11-07 09:01:25,066 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=4, lineno=164)
2023-11-07 09:01:25,066 [DEBUG] stack []
2023-11-07 09:01:25,066 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=164)
2023-11-07 09:01:25,067 [DEBUG] stack []
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=6, inst=PUSH_NULL(arg=None, lineno=166)
2023-11-07 09:01:25,067 [DEBUG] stack []
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=8, inst=LOAD_DEREF(arg=8, lineno=166)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$6.0']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=166)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$6.0', '$8load_deref.1']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=12, inst=PRECALL(arg=1, lineno=166)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$A10.2']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=16, inst=CALL(arg=1, lineno=166)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$A10.2']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=26, inst=STORE_FAST(arg=1, lineno=166)
2023-11-07 09:01:25,067 [DEBUG] stack ['$16call.3']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=168)
2023-11-07 09:01:25,067 [DEBUG] stack []
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=168)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$28.5', '$28load_global.4']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=42, inst=PRECALL(arg=1, lineno=168)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$28.5', '$28load_global.4', '$A40.6']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=46, inst=CALL(arg=1, lineno=168)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$28.5', '$28load_global.4', '$A40.6']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=56, inst=LOAD_CONST(arg=1, lineno=168)
2023-11-07 09:01:25,067 [DEBUG] stack ['$46call.7']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=58, inst=COMPARE_OP(arg=0, lineno=168)
2023-11-07 09:01:25,067 [DEBUG] stack ['$46call.7', '$const56.8']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=64, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=168)
2023-11-07 09:01:25,067 [DEBUG] stack ['$58compare_op.9']
2023-11-07 09:01:25,067 [DEBUG] end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,067 [DEBUG] pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
2023-11-07 09:01:25,067 [DEBUG] stack: []
2023-11-07 09:01:25,067 [DEBUG] state.pc_initial: State(pc_initial=66 nstack_initial=0)
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=169)
2023-11-07 09:01:25,067 [DEBUG] stack []
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=68, inst=RETURN_VALUE(arg=None, lineno=169)
2023-11-07 09:01:25,067 [DEBUG] stack ['$R66.0']
2023-11-07 09:01:25,067 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,067 [DEBUG] pending: deque([State(pc_initial=70 nstack_initial=0)])
2023-11-07 09:01:25,067 [DEBUG] stack: []
2023-11-07 09:01:25,067 [DEBUG] state.pc_initial: State(pc_initial=70 nstack_initial=0)
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=70, inst=LOAD_GLOBAL(arg=3, lineno=171)
2023-11-07 09:01:25,067 [DEBUG] stack []
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=82, inst=LOAD_DEREF(arg=10, lineno=171)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$70.1', '$70load_global.0']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=84, inst=LOAD_DEREF(arg=10, lineno=171)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$70.1', '$70load_global.0', '$82load_deref.2']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=86, inst=PRECALL(arg=2, lineno=171)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$70.1', '$70load_global.0', '$82load_deref.2', '$84load_deref.3']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=90, inst=CALL(arg=2, lineno=171)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$70.1', '$70load_global.0', '$82load_deref.2', '$84load_deref.3']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=100, inst=BUILD_LIST(arg=1, lineno=171)
2023-11-07 09:01:25,067 [DEBUG] stack ['$90call.4']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=102, inst=LOAD_GLOBAL(arg=4, lineno=171)
2023-11-07 09:01:25,067 [DEBUG] stack ['$100build_list.5']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=114, inst=BINARY_OP(arg=5, lineno=171)
2023-11-07 09:01:25,067 [DEBUG] stack ['$100build_list.5', '$102load_global.6']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=118, inst=STORE_FAST(arg=2, lineno=171)
2023-11-07 09:01:25,067 [DEBUG] stack ['$binop_mul114.7']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=120, inst=LOAD_GLOBAL(arg=3, lineno=172)
2023-11-07 09:01:25,067 [DEBUG] stack []
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=132, inst=LOAD_DEREF(arg=10, lineno=172)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$120.9', '$120load_global.8']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=134, inst=LOAD_GLOBAL(arg=1, lineno=172)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=146, inst=LOAD_FAST(arg=0, lineno=172)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$null$134.12', '$134load_global.11']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=148, inst=PRECALL(arg=1, lineno=172)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$null$134.12', '$134load_global.11', '$A146.13']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=152, inst=CALL(arg=1, lineno=172)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$null$134.12', '$134load_global.11', '$A146.13']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=162, inst=LOAD_CONST(arg=2, lineno=172)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$152call.14']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=164, inst=BINARY_OP(arg=10, lineno=172)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$152call.14', '$const162.15']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=168, inst=PRECALL(arg=2, lineno=172)
2023-11-07 09:01:25,067 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$binop_sub164.16']
2023-11-07 09:01:25,067 [DEBUG] dispatch pc=172, inst=CALL(arg=2, lineno=172)
2023-11-07 09:01:25,068 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$binop_sub164.16']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=182, inst=LOAD_FAST(arg=2, lineno=172)
2023-11-07 09:01:25,068 [DEBUG] stack ['$172call.17']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=184, inst=LOAD_CONST(arg=3, lineno=172)
2023-11-07 09:01:25,068 [DEBUG] stack ['$172call.17', '$stack182.18']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=186, inst=STORE_SUBSCR(arg=None, lineno=172)
2023-11-07 09:01:25,068 [DEBUG] stack ['$172call.17', '$stack182.18', '$const184.19']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=190, inst=LOAD_CONST(arg=2, lineno=173)
2023-11-07 09:01:25,068 [DEBUG] stack []
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=192, inst=STORE_FAST(arg=3, lineno=173)
2023-11-07 09:01:25,068 [DEBUG] stack ['$const190.20']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=194, inst=LOAD_FAST(arg=3, lineno=175)
2023-11-07 09:01:25,068 [DEBUG] stack []
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=196, inst=LOAD_CONST(arg=3, lineno=175)
2023-11-07 09:01:25,068 [DEBUG] stack ['$n194.21']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=198, inst=COMPARE_OP(arg=4, lineno=175)
2023-11-07 09:01:25,068 [DEBUG] stack ['$n194.21', '$const196.22']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=204, inst=POP_JUMP_FORWARD_IF_FALSE(arg=180, lineno=175)
2023-11-07 09:01:25,068 [DEBUG] stack ['$198compare_op.23']
2023-11-07 09:01:25,068 [DEBUG] end state. edges=[Edge(pc=206, stack=(), blockstack=(), npush=0), Edge(pc=566, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,068 [DEBUG] pending: deque([State(pc_initial=206 nstack_initial=0), State(pc_initial=566 nstack_initial=0)])
2023-11-07 09:01:25,068 [DEBUG] stack: []
2023-11-07 09:01:25,068 [DEBUG] state.pc_initial: State(pc_initial=206 nstack_initial=0)
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=206, inst=LOAD_FAST(arg=3, lineno=176)
2023-11-07 09:01:25,068 [DEBUG] stack []
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=208, inst=LOAD_CONST(arg=2, lineno=176)
2023-11-07 09:01:25,068 [DEBUG] stack ['$n206.0']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=210, inst=BINARY_OP(arg=23, lineno=176)
2023-11-07 09:01:25,068 [DEBUG] stack ['$n206.0', '$const208.1']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=214, inst=STORE_FAST(arg=3, lineno=176)
2023-11-07 09:01:25,068 [DEBUG] stack ['$binop_isub210.2']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=216, inst=LOAD_FAST(arg=2, lineno=177)
2023-11-07 09:01:25,068 [DEBUG] stack []
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=218, inst=LOAD_FAST(arg=3, lineno=177)
2023-11-07 09:01:25,068 [DEBUG] stack ['$stack216.3']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=177)
2023-11-07 09:01:25,068 [DEBUG] stack ['$stack216.3', '$n218.4']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=230, inst=UNPACK_SEQUENCE(arg=2, lineno=177)
2023-11-07 09:01:25,068 [DEBUG] stack ['$220binary_subscr.5']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=234, inst=STORE_FAST(arg=4, lineno=177)
2023-11-07 09:01:25,068 [DEBUG] stack ['$230unpack_sequence.7', '$230unpack_sequence.6']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=236, inst=STORE_FAST(arg=5, lineno=177)
2023-11-07 09:01:25,068 [DEBUG] stack ['$230unpack_sequence.7']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=179)
2023-11-07 09:01:25,068 [DEBUG] stack []
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=240, inst=LOAD_FAST(arg=4, lineno=179)
2023-11-07 09:01:25,068 [DEBUG] stack ['$high238.9']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=242, inst=BINARY_OP(arg=10, lineno=179)
2023-11-07 09:01:25,068 [DEBUG] stack ['$high238.9', '$low240.10']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=246, inst=LOAD_GLOBAL(arg=6, lineno=179)
2023-11-07 09:01:25,068 [DEBUG] stack ['$binop_sub242.11']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=258, inst=COMPARE_OP(arg=5, lineno=179)
2023-11-07 09:01:25,068 [DEBUG] stack ['$binop_sub242.11', '$246load_global.12']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=264, inst=POP_JUMP_FORWARD_IF_FALSE(arg=130, lineno=179)
2023-11-07 09:01:25,068 [DEBUG] stack ['$258compare_op.13']
2023-11-07 09:01:25,068 [DEBUG] end state. edges=[Edge(pc=266, stack=(), blockstack=(), npush=0), Edge(pc=526, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,068 [DEBUG] pending: deque([State(pc_initial=566 nstack_initial=0), State(pc_initial=266 nstack_initial=0), State(pc_initial=526 nstack_initial=0)])
2023-11-07 09:01:25,068 [DEBUG] stack: []
2023-11-07 09:01:25,068 [DEBUG] state.pc_initial: State(pc_initial=566 nstack_initial=0)
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=566, inst=LOAD_FAST(arg=1, lineno=197)
2023-11-07 09:01:25,068 [DEBUG] stack []
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=568, inst=RETURN_VALUE(arg=None, lineno=197)
2023-11-07 09:01:25,068 [DEBUG] stack ['$R566.0']
2023-11-07 09:01:25,068 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,068 [DEBUG] pending: deque([State(pc_initial=266 nstack_initial=0), State(pc_initial=526 nstack_initial=0)])
2023-11-07 09:01:25,068 [DEBUG] stack: []
2023-11-07 09:01:25,068 [DEBUG] state.pc_initial: State(pc_initial=266 nstack_initial=0)
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=266, inst=LOAD_FAST(arg=3, lineno=180)
2023-11-07 09:01:25,068 [DEBUG] stack []
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=268, inst=LOAD_GLOBAL(arg=4, lineno=180)
2023-11-07 09:01:25,068 [DEBUG] stack ['$n266.0']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=280, inst=COMPARE_OP(arg=0, lineno=180)
2023-11-07 09:01:25,068 [DEBUG] stack ['$n266.0', '$268load_global.1']
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=286, inst=POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=180)
2023-11-07 09:01:25,068 [DEBUG] stack ['$280compare_op.2']
2023-11-07 09:01:25,068 [DEBUG] end state. edges=[Edge(pc=288, stack=(), blockstack=(), npush=0), Edge(pc=292, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,068 [DEBUG] pending: deque([State(pc_initial=526 nstack_initial=0), State(pc_initial=288 nstack_initial=0), State(pc_initial=292 nstack_initial=0)])
2023-11-07 09:01:25,068 [DEBUG] stack: []
2023-11-07 09:01:25,068 [DEBUG] state.pc_initial: State(pc_initial=526 nstack_initial=0)
2023-11-07 09:01:25,068 [DEBUG] dispatch pc=526, inst=PUSH_NULL(arg=None, lineno=195)
2023-11-07 09:01:25,069 [DEBUG] stack []
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=528, inst=LOAD_DEREF(arg=7, lineno=195)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$526.0']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=530, inst=LOAD_FAST(arg=0, lineno=195)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$526.0', '$528load_deref.1']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=532, inst=LOAD_FAST(arg=1, lineno=195)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$526.0', '$528load_deref.1', '$A530.2']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=534, inst=LOAD_FAST(arg=4, lineno=195)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$526.0', '$528load_deref.1', '$A530.2', '$R532.3']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=536, inst=LOAD_FAST(arg=5, lineno=195)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$526.0', '$528load_deref.1', '$A530.2', '$R532.3', '$low534.4']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=538, inst=PRECALL(arg=4, lineno=195)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$526.0', '$528load_deref.1', '$A530.2', '$R532.3', '$low534.4', '$high536.5']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=542, inst=CALL(arg=4, lineno=195)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$526.0', '$528load_deref.1', '$A530.2', '$R532.3', '$low534.4', '$high536.5']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=552, inst=POP_TOP(arg=None, lineno=195)
2023-11-07 09:01:25,069 [DEBUG] stack ['$542call.6']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=554, inst=LOAD_FAST(arg=3, lineno=175)
2023-11-07 09:01:25,069 [DEBUG] stack []
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=556, inst=LOAD_CONST(arg=3, lineno=175)
2023-11-07 09:01:25,069 [DEBUG] stack ['$n554.7']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=558, inst=COMPARE_OP(arg=4, lineno=175)
2023-11-07 09:01:25,069 [DEBUG] stack ['$n554.7', '$const556.8']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=564, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=180, lineno=175)
2023-11-07 09:01:25,069 [DEBUG] stack ['$558compare_op.9']
2023-11-07 09:01:25,069 [DEBUG] end state. edges=[Edge(pc=566, stack=(), blockstack=(), npush=0), Edge(pc=206, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,069 [DEBUG] pending: deque([State(pc_initial=288 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=566 nstack_initial=0), State(pc_initial=206 nstack_initial=0)])
2023-11-07 09:01:25,069 [DEBUG] stack: []
2023-11-07 09:01:25,069 [DEBUG] state.pc_initial: State(pc_initial=288 nstack_initial=0)
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=288, inst=LOAD_ASSERTION_ERROR(arg=None, lineno=180)
2023-11-07 09:01:25,069 [DEBUG] stack []
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=290, inst=RAISE_VARARGS(arg=1, lineno=180)
2023-11-07 09:01:25,069 [DEBUG] stack ['$assertion_error288.0']
2023-11-07 09:01:25,069 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,069 [DEBUG] pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=566 nstack_initial=0), State(pc_initial=206 nstack_initial=0)])
2023-11-07 09:01:25,069 [DEBUG] stack: []
2023-11-07 09:01:25,069 [DEBUG] state.pc_initial: State(pc_initial=292 nstack_initial=0)
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=292, inst=PUSH_NULL(arg=None, lineno=181)
2023-11-07 09:01:25,069 [DEBUG] stack []
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=294, inst=LOAD_DEREF(arg=9, lineno=181)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$292.0']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=296, inst=LOAD_FAST(arg=0, lineno=181)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$292.0', '$294load_deref.1']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=298, inst=LOAD_FAST(arg=1, lineno=181)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$292.0', '$294load_deref.1', '$A296.2']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=300, inst=LOAD_FAST(arg=4, lineno=181)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$292.0', '$294load_deref.1', '$A296.2', '$R298.3']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=302, inst=LOAD_FAST(arg=5, lineno=181)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$292.0', '$294load_deref.1', '$A296.2', '$R298.3', '$low300.4']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=304, inst=PRECALL(arg=4, lineno=181)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$292.0', '$294load_deref.1', '$A296.2', '$R298.3', '$low300.4', '$high302.5']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=308, inst=CALL(arg=4, lineno=181)
2023-11-07 09:01:25,069 [DEBUG] stack ['$null$292.0', '$294load_deref.1', '$A296.2', '$R298.3', '$low300.4', '$high302.5']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=318, inst=STORE_FAST(arg=6, lineno=181)
2023-11-07 09:01:25,069 [DEBUG] stack ['$308call.6']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=320, inst=LOAD_FAST(arg=5, lineno=183)
2023-11-07 09:01:25,069 [DEBUG] stack []
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=322, inst=LOAD_FAST(arg=6, lineno=183)
2023-11-07 09:01:25,069 [DEBUG] stack ['$high320.7']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=324, inst=BINARY_OP(arg=10, lineno=183)
2023-11-07 09:01:25,069 [DEBUG] stack ['$high320.7', '$i322.8']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=328, inst=LOAD_FAST(arg=6, lineno=183)
2023-11-07 09:01:25,069 [DEBUG] stack ['$binop_sub324.9']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=330, inst=LOAD_FAST(arg=4, lineno=183)
2023-11-07 09:01:25,069 [DEBUG] stack ['$binop_sub324.9', '$i328.10']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=332, inst=BINARY_OP(arg=10, lineno=183)
2023-11-07 09:01:25,069 [DEBUG] stack ['$binop_sub324.9', '$i328.10', '$low330.11']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=336, inst=COMPARE_OP(arg=4, lineno=183)
2023-11-07 09:01:25,069 [DEBUG] stack ['$binop_sub324.9', '$binop_sub332.12']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=342, inst=POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=183)
2023-11-07 09:01:25,069 [DEBUG] stack ['$336compare_op.13']
2023-11-07 09:01:25,069 [DEBUG] end state. edges=[Edge(pc=344, stack=(), blockstack=(), npush=0), Edge(pc=422, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,069 [DEBUG] pending: deque([State(pc_initial=566 nstack_initial=0), State(pc_initial=206 nstack_initial=0), State(pc_initial=344 nstack_initial=0), State(pc_initial=422 nstack_initial=0)])
2023-11-07 09:01:25,069 [DEBUG] pending: deque([State(pc_initial=206 nstack_initial=0), State(pc_initial=344 nstack_initial=0), State(pc_initial=422 nstack_initial=0)])
2023-11-07 09:01:25,069 [DEBUG] pending: deque([State(pc_initial=344 nstack_initial=0), State(pc_initial=422 nstack_initial=0)])
2023-11-07 09:01:25,069 [DEBUG] stack: []
2023-11-07 09:01:25,069 [DEBUG] state.pc_initial: State(pc_initial=344 nstack_initial=0)
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=344, inst=LOAD_FAST(arg=5, lineno=185)
2023-11-07 09:01:25,069 [DEBUG] stack []
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=346, inst=LOAD_FAST(arg=6, lineno=185)
2023-11-07 09:01:25,069 [DEBUG] stack ['$high344.0']
2023-11-07 09:01:25,069 [DEBUG] dispatch pc=348, inst=COMPARE_OP(arg=4, lineno=185)
2023-11-07 09:01:25,069 [DEBUG] stack ['$high344.0', '$i346.1']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=354, inst=POP_JUMP_FORWARD_IF_FALSE(arg=27, lineno=185)
2023-11-07 09:01:25,070 [DEBUG] stack ['$348compare_op.2']
2023-11-07 09:01:25,070 [DEBUG] end state. edges=[Edge(pc=356, stack=(), blockstack=(), npush=0), Edge(pc=410, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,070 [DEBUG] pending: deque([State(pc_initial=422 nstack_initial=0), State(pc_initial=356 nstack_initial=0), State(pc_initial=410 nstack_initial=0)])
2023-11-07 09:01:25,070 [DEBUG] stack: []
2023-11-07 09:01:25,070 [DEBUG] state.pc_initial: State(pc_initial=422 nstack_initial=0)
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=422, inst=LOAD_FAST(arg=6, lineno=190)
2023-11-07 09:01:25,070 [DEBUG] stack []
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=424, inst=LOAD_FAST(arg=4, lineno=190)
2023-11-07 09:01:25,070 [DEBUG] stack ['$i422.0']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=426, inst=COMPARE_OP(arg=4, lineno=190)
2023-11-07 09:01:25,070 [DEBUG] stack ['$i422.0', '$low424.1']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=432, inst=POP_JUMP_FORWARD_IF_FALSE(arg=27, lineno=190)
2023-11-07 09:01:25,070 [DEBUG] stack ['$426compare_op.2']
2023-11-07 09:01:25,070 [DEBUG] end state. edges=[Edge(pc=434, stack=(), blockstack=(), npush=0), Edge(pc=488, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,070 [DEBUG] pending: deque([State(pc_initial=356 nstack_initial=0), State(pc_initial=410 nstack_initial=0), State(pc_initial=434 nstack_initial=0), State(pc_initial=488 nstack_initial=0)])
2023-11-07 09:01:25,070 [DEBUG] stack: []
2023-11-07 09:01:25,070 [DEBUG] state.pc_initial: State(pc_initial=356 nstack_initial=0)
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=356, inst=LOAD_GLOBAL(arg=3, lineno=186)
2023-11-07 09:01:25,070 [DEBUG] stack []
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=368, inst=LOAD_FAST(arg=6, lineno=186)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$356.1', '$356load_global.0']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=370, inst=LOAD_CONST(arg=2, lineno=186)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$i368.2']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=372, inst=BINARY_OP(arg=0, lineno=186)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$i368.2', '$const370.3']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=376, inst=LOAD_FAST(arg=5, lineno=186)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$binop_add372.4']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=378, inst=PRECALL(arg=2, lineno=186)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$binop_add372.4', '$high376.5']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=382, inst=CALL(arg=2, lineno=186)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$binop_add372.4', '$high376.5']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=392, inst=LOAD_FAST(arg=2, lineno=186)
2023-11-07 09:01:25,070 [DEBUG] stack ['$382call.6']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=394, inst=LOAD_FAST(arg=3, lineno=186)
2023-11-07 09:01:25,070 [DEBUG] stack ['$382call.6', '$stack392.7']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=396, inst=STORE_SUBSCR(arg=None, lineno=186)
2023-11-07 09:01:25,070 [DEBUG] stack ['$382call.6', '$stack392.7', '$n394.8']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=400, inst=LOAD_FAST(arg=3, lineno=187)
2023-11-07 09:01:25,070 [DEBUG] stack []
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=402, inst=LOAD_CONST(arg=2, lineno=187)
2023-11-07 09:01:25,070 [DEBUG] stack ['$n400.9']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=404, inst=BINARY_OP(arg=13, lineno=187)
2023-11-07 09:01:25,070 [DEBUG] stack ['$n400.9', '$const402.10']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=408, inst=STORE_FAST(arg=3, lineno=187)
2023-11-07 09:01:25,070 [DEBUG] stack ['$binop_iadd404.11']
2023-11-07 09:01:25,070 [DEBUG] end state. edges=[Edge(pc=410, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,070 [DEBUG] pending: deque([State(pc_initial=410 nstack_initial=0), State(pc_initial=434 nstack_initial=0), State(pc_initial=488 nstack_initial=0), State(pc_initial=410 nstack_initial=0)])
2023-11-07 09:01:25,070 [DEBUG] stack: []
2023-11-07 09:01:25,070 [DEBUG] state.pc_initial: State(pc_initial=410 nstack_initial=0)
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=410, inst=LOAD_FAST(arg=6, lineno=188)
2023-11-07 09:01:25,070 [DEBUG] stack []
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=412, inst=LOAD_CONST(arg=2, lineno=188)
2023-11-07 09:01:25,070 [DEBUG] stack ['$i410.0']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=414, inst=BINARY_OP(arg=10, lineno=188)
2023-11-07 09:01:25,070 [DEBUG] stack ['$i410.0', '$const412.1']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=418, inst=STORE_FAST(arg=5, lineno=188)
2023-11-07 09:01:25,070 [DEBUG] stack ['$binop_sub414.2']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=420, inst=JUMP_FORWARD(arg=38, lineno=188)
2023-11-07 09:01:25,070 [DEBUG] stack []
2023-11-07 09:01:25,070 [DEBUG] end state. edges=[Edge(pc=498, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,070 [DEBUG] pending: deque([State(pc_initial=434 nstack_initial=0), State(pc_initial=488 nstack_initial=0), State(pc_initial=410 nstack_initial=0), State(pc_initial=498 nstack_initial=0)])
2023-11-07 09:01:25,070 [DEBUG] stack: []
2023-11-07 09:01:25,070 [DEBUG] state.pc_initial: State(pc_initial=434 nstack_initial=0)
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=434, inst=LOAD_GLOBAL(arg=3, lineno=191)
2023-11-07 09:01:25,070 [DEBUG] stack []
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=446, inst=LOAD_FAST(arg=4, lineno=191)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$434.1', '$434load_global.0']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=448, inst=LOAD_FAST(arg=6, lineno=191)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$434.1', '$434load_global.0', '$low446.2']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=450, inst=LOAD_CONST(arg=2, lineno=191)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$434.1', '$434load_global.0', '$low446.2', '$i448.3']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=452, inst=BINARY_OP(arg=10, lineno=191)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$434.1', '$434load_global.0', '$low446.2', '$i448.3', '$const450.4']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=456, inst=PRECALL(arg=2, lineno=191)
2023-11-07 09:01:25,070 [DEBUG] stack ['$null$434.1', '$434load_global.0', '$low446.2', '$binop_sub452.5']
2023-11-07 09:01:25,070 [DEBUG] dispatch pc=460, inst=CALL(arg=2, lineno=191)
2023-11-07 09:01:25,071 [DEBUG] stack ['$null$434.1', '$434load_global.0', '$low446.2', '$binop_sub452.5']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=470, inst=LOAD_FAST(arg=2, lineno=191)
2023-11-07 09:01:25,071 [DEBUG] stack ['$460call.6']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=472, inst=LOAD_FAST(arg=3, lineno=191)
2023-11-07 09:01:25,071 [DEBUG] stack ['$460call.6', '$stack470.7']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=474, inst=STORE_SUBSCR(arg=None, lineno=191)
2023-11-07 09:01:25,071 [DEBUG] stack ['$460call.6', '$stack470.7', '$n472.8']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=478, inst=LOAD_FAST(arg=3, lineno=192)
2023-11-07 09:01:25,071 [DEBUG] stack []
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=480, inst=LOAD_CONST(arg=2, lineno=192)
2023-11-07 09:01:25,071 [DEBUG] stack ['$n478.9']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=482, inst=BINARY_OP(arg=13, lineno=192)
2023-11-07 09:01:25,071 [DEBUG] stack ['$n478.9', '$const480.10']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=486, inst=STORE_FAST(arg=3, lineno=192)
2023-11-07 09:01:25,071 [DEBUG] stack ['$binop_iadd482.11']
2023-11-07 09:01:25,071 [DEBUG] end state. edges=[Edge(pc=488, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,071 [DEBUG] pending: deque([State(pc_initial=488 nstack_initial=0), State(pc_initial=410 nstack_initial=0), State(pc_initial=498 nstack_initial=0), State(pc_initial=488 nstack_initial=0)])
2023-11-07 09:01:25,071 [DEBUG] stack: []
2023-11-07 09:01:25,071 [DEBUG] state.pc_initial: State(pc_initial=488 nstack_initial=0)
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=488, inst=LOAD_FAST(arg=6, lineno=193)
2023-11-07 09:01:25,071 [DEBUG] stack []
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=490, inst=LOAD_CONST(arg=2, lineno=193)
2023-11-07 09:01:25,071 [DEBUG] stack ['$i488.0']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=492, inst=BINARY_OP(arg=0, lineno=193)
2023-11-07 09:01:25,071 [DEBUG] stack ['$i488.0', '$const490.1']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=496, inst=STORE_FAST(arg=4, lineno=193)
2023-11-07 09:01:25,071 [DEBUG] stack ['$binop_add492.2']
2023-11-07 09:01:25,071 [DEBUG] end state. edges=[Edge(pc=498, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,071 [DEBUG] pending: deque([State(pc_initial=410 nstack_initial=0), State(pc_initial=498 nstack_initial=0), State(pc_initial=488 nstack_initial=0), State(pc_initial=498 nstack_initial=0)])
2023-11-07 09:01:25,071 [DEBUG] pending: deque([State(pc_initial=498 nstack_initial=0), State(pc_initial=488 nstack_initial=0), State(pc_initial=498 nstack_initial=0)])
2023-11-07 09:01:25,071 [DEBUG] stack: []
2023-11-07 09:01:25,071 [DEBUG] state.pc_initial: State(pc_initial=498 nstack_initial=0)
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=498, inst=LOAD_FAST(arg=5, lineno=179)
2023-11-07 09:01:25,071 [DEBUG] stack []
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=500, inst=LOAD_FAST(arg=4, lineno=179)
2023-11-07 09:01:25,071 [DEBUG] stack ['$high498.0']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=502, inst=BINARY_OP(arg=10, lineno=179)
2023-11-07 09:01:25,071 [DEBUG] stack ['$high498.0', '$low500.1']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=506, inst=LOAD_GLOBAL(arg=6, lineno=179)
2023-11-07 09:01:25,071 [DEBUG] stack ['$binop_sub502.2']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=518, inst=COMPARE_OP(arg=5, lineno=179)
2023-11-07 09:01:25,071 [DEBUG] stack ['$binop_sub502.2', '$506load_global.3']
2023-11-07 09:01:25,071 [DEBUG] dispatch pc=524, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=130, lineno=179)
2023-11-07 09:01:25,071 [DEBUG] stack ['$518compare_op.4']
2023-11-07 09:01:25,071 [DEBUG] end state. edges=[Edge(pc=526, stack=(), blockstack=(), npush=0), Edge(pc=266, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,071 [DEBUG] pending: deque([State(pc_initial=488 nstack_initial=0), State(pc_initial=498 nstack_initial=0), State(pc_initial=526 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
2023-11-07 09:01:25,071 [DEBUG] pending: deque([State(pc_initial=498 nstack_initial=0), State(pc_initial=526 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
2023-11-07 09:01:25,071 [DEBUG] pending: deque([State(pc_initial=526 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
2023-11-07 09:01:25,071 [DEBUG] pending: deque([State(pc_initial=266 nstack_initial=0)])
2023-11-07 09:01:25,071 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,071 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=206 nstack_initial=0): set(),
             State(pc_initial=266 nstack_initial=0): set(),
             State(pc_initial=288 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=344 nstack_initial=0): set(),
             State(pc_initial=356 nstack_initial=0): set(),
             State(pc_initial=410 nstack_initial=0): set(),
             State(pc_initial=422 nstack_initial=0): set(),
             State(pc_initial=434 nstack_initial=0): set(),
             State(pc_initial=488 nstack_initial=0): set(),
             State(pc_initial=498 nstack_initial=0): set(),
             State(pc_initial=526 nstack_initial=0): set(),
             State(pc_initial=566 nstack_initial=0): set()})
2023-11-07 09:01:25,071 [DEBUG] defmap: {}
2023-11-07 09:01:25,071 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,071 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,071 [DEBUG] keep phismap: {}
2023-11-07 09:01:25,071 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:25,071 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,071 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {}), (8, {'res': '$8load_deref.1'}), (10, {'res': '$A10.2'}), (12, {}), (14, {}), (16, {'func': '$8load_deref.1', 'args': ['$A10.2'], 'kw_names': None, 'res': '$16call.3'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'value': '$16call.3'}), (28, {'idx': 0, 'res': '$28load_global.4'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {'res': '$A40.6'}), (42, {}), (44, {}), (46, {'func': '$28load_global.4', 'args': ['$A40.6'], 'kw_names': None, 'res': '$46call.7'}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'res': '$const56.8'}), (58, {'lhs': '$46call.7', 'rhs': '$const56.8', 'res': '$58compare_op.9'}), (60, {}), (62, {}), (64, {'pred': '$58compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 70: ()})
2023-11-07 09:01:25,071 [DEBUG] block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$R66.0'}), (68, {'retval': '$R66.0', 'castval': '$68return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,071 [DEBUG] block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'idx': 1, 'res': '$70load_global.0'}), (72, {}), (74, {}), (76, {}), (78, {}), (80, {}), (82, {'res': '$82load_deref.2'}), (84, {'res': '$84load_deref.3'}), (86, {}), (88, {}), (90, {'func': '$70load_global.0', 'args': ['$82load_deref.2', '$84load_deref.3'], 'kw_names': None, 'res': '$90call.4'}), (92, {}), (94, {}), (96, {}), (98, {}), (100, {'items': ['$90call.4'], 'res': '$100build_list.5'}), (102, {'idx': 2, 'res': '$102load_global.6'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {}), (114, {'op': '*', 'lhs': '$100build_list.5', 'rhs': '$102load_global.6', 'res': '$binop_mul114.7'}), (116, {}), (118, {'value': '$binop_mul114.7'}), (120, {'idx': 1, 'res': '$120load_global.8'}), (122, {}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {'res': '$132load_deref.10'}), (134, {'idx': 0, 'res': '$134load_global.11'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$A146.13'}), (148, {}), (150, {}), (152, {'func': '$134load_global.11', 'args': ['$A146.13'], 'kw_names': None, 'res': '$152call.14'}), (154, {}), (156, {}), (158, {}), (160, {}), (162, {'res': '$const162.15'}), (164, {'op': '-', 'lhs': '$152call.14', 'rhs': '$const162.15', 'res': '$binop_sub164.16'}), (166, {}), (168, {}), (170, {}), (172, {'func': '$120load_global.8', 'args': ['$132load_deref.10', '$binop_sub164.16'], 'kw_names': None, 'res': '$172call.17'}), (174, {}), (176, {}), (178, {}), (180, {}), (182, {'res': '$stack182.18'}), (184, {'res': '$const184.19'}), (186, {'target': '$stack182.18', 'index': '$const184.19', 'value': '$172call.17'}), (188, {}), (190, {'res': '$const190.20'}), (192, {'value': '$const190.20'}), (194, {'res': '$n194.21'}), (196, {'res': '$const196.22'}), (198, {'lhs': '$n194.21', 'rhs': '$const196.22', 'res': '$198compare_op.23'}), (200, {}), (202, {}), (204, {'pred': '$198compare_op.23'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={206: (), 566: ()})
2023-11-07 09:01:25,071 [DEBUG] block_infos State(pc_initial=206 nstack_initial=0):
AdaptBlockInfo(insts=((206, {'res': '$n206.0'}), (208, {'res': '$const208.1'}), (210, {'op': '-=', 'lhs': '$n206.0', 'rhs': '$const208.1', 'res': '$binop_isub210.2'}), (212, {}), (214, {'value': '$binop_isub210.2'}), (216, {'res': '$stack216.3'}), (218, {'res': '$n218.4'}), (220, {'index': '$n218.4', 'target': '$stack216.3', 'res': '$220binary_subscr.5'}), (222, {}), (224, {}), (226, {}), (228, {}), (230, {'iterable': '$220binary_subscr.5', 'stores': ['$230unpack_sequence.6', '$230unpack_sequence.7'], 'tupleobj': '$230unpack_sequence.8'}), (232, {}), (234, {'value': '$230unpack_sequence.6'}), (236, {'value': '$230unpack_sequence.7'}), (238, {'res': '$high238.9'}), (240, {'res': '$low240.10'}), (242, {'op': '-', 'lhs': '$high238.9', 'rhs': '$low240.10', 'res': '$binop_sub242.11'}), (244, {}), (246, {'idx': 3, 'res': '$246load_global.12'}), (248, {}), (250, {}), (252, {}), (254, {}), (256, {}), (258, {'lhs': '$binop_sub242.11', 'rhs': '$246load_global.12', 'res': '$258compare_op.13'}), (260, {}), (262, {}), (264, {'pred': '$258compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={266: (), 526: ()})
2023-11-07 09:01:25,071 [DEBUG] block_infos State(pc_initial=266 nstack_initial=0):
AdaptBlockInfo(insts=((266, {'res': '$n266.0'}), (268, {'idx': 2, 'res': '$268load_global.1'}), (270, {}), (272, {}), (274, {}), (276, {}), (278, {}), (280, {'lhs': '$n266.0', 'rhs': '$268load_global.1', 'res': '$280compare_op.2'}), (282, {}), (284, {}), (286, {'pred': '$280compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={288: (), 292: ()})
2023-11-07 09:01:25,071 [DEBUG] block_infos State(pc_initial=288 nstack_initial=0):
AdaptBlockInfo(insts=((288, {'res': '$assertion_error288.0'}), (290, {'exc': '$assertion_error288.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,071 [DEBUG] block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {}), (294, {'res': '$294load_deref.1'}), (296, {'res': '$A296.2'}), (298, {'res': '$R298.3'}), (300, {'res': '$low300.4'}), (302, {'res': '$high302.5'}), (304, {}), (306, {}), (308, {'func': '$294load_deref.1', 'args': ['$A296.2', '$R298.3', '$low300.4', '$high302.5'], 'kw_names': None, 'res': '$308call.6'}), (310, {}), (312, {}), (314, {}), (316, {}), (318, {'value': '$308call.6'}), (320, {'res': '$high320.7'}), (322, {'res': '$i322.8'}), (324, {'op': '-', 'lhs': '$high320.7', 'rhs': '$i322.8', 'res': '$binop_sub324.9'}), (326, {}), (328, {'res': '$i328.10'}), (330, {'res': '$low330.11'}), (332, {'op': '-', 'lhs': '$i328.10', 'rhs': '$low330.11', 'res': '$binop_sub332.12'}), (334, {}), (336, {'lhs': '$binop_sub324.9', 'rhs': '$binop_sub332.12', 'res': '$336compare_op.13'}), (338, {}), (340, {}), (342, {'pred': '$336compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={344: (), 422: ()})
2023-11-07 09:01:25,071 [DEBUG] block_infos State(pc_initial=344 nstack_initial=0):
AdaptBlockInfo(insts=((344, {'res': '$high344.0'}), (346, {'res': '$i346.1'}), (348, {'lhs': '$high344.0', 'rhs': '$i346.1', 'res': '$348compare_op.2'}), (350, {}), (352, {}), (354, {'pred': '$348compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={356: (), 410: ()})
2023-11-07 09:01:25,072 [DEBUG] block_infos State(pc_initial=356 nstack_initial=0):
AdaptBlockInfo(insts=((356, {'idx': 1, 'res': '$356load_global.0'}), (358, {}), (360, {}), (362, {}), (364, {}), (366, {}), (368, {'res': '$i368.2'}), (370, {'res': '$const370.3'}), (372, {'op': '+', 'lhs': '$i368.2', 'rhs': '$const370.3', 'res': '$binop_add372.4'}), (374, {}), (376, {'res': '$high376.5'}), (378, {}), (380, {}), (382, {'func': '$356load_global.0', 'args': ['$binop_add372.4', '$high376.5'], 'kw_names': None, 'res': '$382call.6'}), (384, {}), (386, {}), (388, {}), (390, {}), (392, {'res': '$stack392.7'}), (394, {'res': '$n394.8'}), (396, {'target': '$stack392.7', 'index': '$n394.8', 'value': '$382call.6'}), (398, {}), (400, {'res': '$n400.9'}), (402, {'res': '$const402.10'}), (404, {'op': '+=', 'lhs': '$n400.9', 'rhs': '$const402.10', 'res': '$binop_iadd404.11'}), (406, {}), (408, {'value': '$binop_iadd404.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={410: ()})
2023-11-07 09:01:25,072 [DEBUG] block_infos State(pc_initial=410 nstack_initial=0):
AdaptBlockInfo(insts=((410, {'res': '$i410.0'}), (412, {'res': '$const412.1'}), (414, {'op': '-', 'lhs': '$i410.0', 'rhs': '$const412.1', 'res': '$binop_sub414.2'}), (416, {}), (418, {'value': '$binop_sub414.2'}), (420, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={498: ()})
2023-11-07 09:01:25,072 [DEBUG] block_infos State(pc_initial=422 nstack_initial=0):
AdaptBlockInfo(insts=((422, {'res': '$i422.0'}), (424, {'res': '$low424.1'}), (426, {'lhs': '$i422.0', 'rhs': '$low424.1', 'res': '$426compare_op.2'}), (428, {}), (430, {}), (432, {'pred': '$426compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={434: (), 488: ()})
2023-11-07 09:01:25,072 [DEBUG] block_infos State(pc_initial=434 nstack_initial=0):
AdaptBlockInfo(insts=((434, {'idx': 1, 'res': '$434load_global.0'}), (436, {}), (438, {}), (440, {}), (442, {}), (444, {}), (446, {'res': '$low446.2'}), (448, {'res': '$i448.3'}), (450, {'res': '$const450.4'}), (452, {'op': '-', 'lhs': '$i448.3', 'rhs': '$const450.4', 'res': '$binop_sub452.5'}), (454, {}), (456, {}), (458, {}), (460, {'func': '$434load_global.0', 'args': ['$low446.2', '$binop_sub452.5'], 'kw_names': None, 'res': '$460call.6'}), (462, {}), (464, {}), (466, {}), (468, {}), (470, {'res': '$stack470.7'}), (472, {'res': '$n472.8'}), (474, {'target': '$stack470.7', 'index': '$n472.8', 'value': '$460call.6'}), (476, {}), (478, {'res': '$n478.9'}), (480, {'res': '$const480.10'}), (482, {'op': '+=', 'lhs': '$n478.9', 'rhs': '$const480.10', 'res': '$binop_iadd482.11'}), (484, {}), (486, {'value': '$binop_iadd482.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={488: ()})
2023-11-07 09:01:25,072 [DEBUG] block_infos State(pc_initial=488 nstack_initial=0):
AdaptBlockInfo(insts=((488, {'res': '$i488.0'}), (490, {'res': '$const490.1'}), (492, {'op': '+', 'lhs': '$i488.0', 'rhs': '$const490.1', 'res': '$binop_add492.2'}), (494, {}), (496, {'value': '$binop_add492.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={498: ()})
2023-11-07 09:01:25,072 [DEBUG] block_infos State(pc_initial=498 nstack_initial=0):
AdaptBlockInfo(insts=((498, {'res': '$high498.0'}), (500, {'res': '$low500.1'}), (502, {'op': '-', 'lhs': '$high498.0', 'rhs': '$low500.1', 'res': '$binop_sub502.2'}), (504, {}), (506, {'idx': 3, 'res': '$506load_global.3'}), (508, {}), (510, {}), (512, {}), (514, {}), (516, {}), (518, {'lhs': '$binop_sub502.2', 'rhs': '$506load_global.3', 'res': '$518compare_op.4'}), (520, {}), (522, {}), (524, {'pred': '$518compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={526: (), 266: ()})
2023-11-07 09:01:25,072 [DEBUG] block_infos State(pc_initial=526 nstack_initial=0):
AdaptBlockInfo(insts=((526, {}), (528, {'res': '$528load_deref.1'}), (530, {'res': '$A530.2'}), (532, {'res': '$R532.3'}), (534, {'res': '$low534.4'}), (536, {'res': '$high536.5'}), (538, {}), (540, {}), (542, {'func': '$528load_deref.1', 'args': ['$A530.2', '$R532.3', '$low534.4', '$high536.5'], 'kw_names': None, 'res': '$542call.6'}), (544, {}), (546, {}), (548, {}), (550, {}), (554, {'res': '$n554.7'}), (556, {'res': '$const556.8'}), (558, {'lhs': '$n554.7', 'rhs': '$const556.8', 'res': '$558compare_op.9'}), (560, {}), (562, {}), (564, {'pred': '$558compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={566: (), 206: ()})
2023-11-07 09:01:25,072 [DEBUG] block_infos State(pc_initial=566 nstack_initial=0):
AdaptBlockInfo(insts=((566, {'res': '$R566.0'}), (568, {'retval': '$R566.0', 'castval': '$568return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,073 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x282a0dbc0>) ['$8load_deref.1']
    R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None) ['$8load_deref.1', 'A', 'R']
    $28load_global.4 = global(len: <built-in function len>) ['$28load_global.4']
    $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.4', '$46call.7', 'A']
    $const56.8 = const(int, 2)               ['$const56.8']
    $58compare_op.9 = $46call.7 < $const56.8 ['$46call.7', '$58compare_op.9', '$const56.8']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.9', '$64pred', 'bool64']
    branch $64pred, 66, 70                   ['$64pred']
label 66:
    $68return_value.1 = cast(value=R)        ['$68return_value.1', 'R']
    return $68return_value.1                 ['$68return_value.1']
label 70:
    $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$70load_global.0']
    $82load_deref.2 = freevar(zero: 0)       ['$82load_deref.2']
    $84load_deref.3 = freevar(zero: 0)       ['$84load_deref.3']
    $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None) ['$70load_global.0', '$82load_deref.2', '$84load_deref.3', '$90call.4']
    $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)]) ['$100build_list.5', '$90call.4']
    $102load_global.6 = global(MAX_STACK: 100) ['$102load_global.6']
    stack = $100build_list.5 * $102load_global.6 ['$100build_list.5', '$102load_global.6', 'stack']
    $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$120load_global.8']
    $132load_deref.10 = freevar(zero: 0)     ['$132load_deref.10']
    $134load_global.11 = global(len: <built-in function len>) ['$134load_global.11']
    $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.11', '$152call.14', 'A']
    $const162.15 = const(int, 1)             ['$const162.15']
    $binop_sub164.16 = $152call.14 - $const162.15 ['$152call.14', '$binop_sub164.16', '$const162.15']
    $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.8', '$132load_deref.10', '$172call.17', '$binop_sub164.16']
    $const184.19 = const(int, 0)             ['$const184.19']
    stack[$const184.19] = $172call.17        ['$172call.17', '$const184.19', 'stack']
    n = const(int, 1)                        ['n']
    $const196.22 = const(int, 0)             ['$const196.22']
    $198compare_op.23 = n > $const196.22     ['$198compare_op.23', '$const196.22', 'n']
    bool204 = global(bool: <class 'bool'>)   ['bool204']
    $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None) ['$198compare_op.23', '$204pred', 'bool204']
    branch $204pred, 206, 566                ['$204pred']
label 206:
    $const208.1 = const(int, 1)              ['$const208.1']
    $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_isub210.2', '$const208.1', 'n']
    n = $binop_isub210.2                     ['$binop_isub210.2', 'n']
    $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>) ['$220binary_subscr.5', 'n', 'stack']
    $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2) ['$220binary_subscr.5', '$230unpack_sequence.8']
    $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$230unpack_sequence.6', '$230unpack_sequence.8']
    $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>) ['$230unpack_sequence.7', '$230unpack_sequence.8']
    low = $230unpack_sequence.6              ['$230unpack_sequence.6', 'low']
    high = $230unpack_sequence.7             ['$230unpack_sequence.7', 'high']
    $binop_sub242.11 = high - low            ['$binop_sub242.11', 'high', 'low']
    $246load_global.12 = global(SMALL_QUICKSORT: 15) ['$246load_global.12']
    $258compare_op.13 = $binop_sub242.11 >= $246load_global.12 ['$246load_global.12', '$258compare_op.13', '$binop_sub242.11']
    bool264 = global(bool: <class 'bool'>)   ['bool264']
    $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None) ['$258compare_op.13', '$264pred', 'bool264']
    branch $264pred, 266, 526                ['$264pred']
label 266:
    $268load_global.1 = global(MAX_STACK: 100) ['$268load_global.1']
    $280compare_op.2 = n < $268load_global.1 ['$268load_global.1', '$280compare_op.2', 'n']
    bool286 = global(bool: <class 'bool'>)   ['bool286']
    $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None) ['$280compare_op.2', '$286pred', 'bool286']
    branch $286pred, 292, 288                ['$286pred']
label 288:
    $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>) ['$assertion_error288.0']
    raise $assertion_error288.0              ['$assertion_error288.0']
label 292:
    $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x282a0f7e0>) ['$294load_deref.1']
    i = call $294load_deref.1(A, R, low, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$294load_deref.1', 'A', 'R', 'high', 'i', 'low']
    $binop_sub324.9 = high - i               ['$binop_sub324.9', 'high', 'i']
    $binop_sub332.12 = i - low               ['$binop_sub332.12', 'i', 'low']
    $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12 ['$336compare_op.13', '$binop_sub324.9', '$binop_sub332.12']
    bool342 = global(bool: <class 'bool'>)   ['bool342']
    $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None) ['$336compare_op.13', '$342pred', 'bool342']
    branch $342pred, 344, 422                ['$342pred']
label 344:
    $348compare_op.2 = high > i              ['$348compare_op.2', 'high', 'i']
    bool354 = global(bool: <class 'bool'>)   ['bool354']
    $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None) ['$348compare_op.2', '$354pred', 'bool354']
    branch $354pred, 356, 410                ['$354pred']
label 356:
    $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$356load_global.0']
    $const370.3 = const(int, 1)              ['$const370.3']
    $binop_add372.4 = i + $const370.3        ['$binop_add372.4', '$const370.3', 'i']
    $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$356load_global.0', '$382call.6', '$binop_add372.4', 'high']
    stack[n] = $382call.6                    ['$382call.6', 'n', 'stack']
    $const402.10 = const(int, 1)             ['$const402.10']
    $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd404.11', '$const402.10', 'n']
    n = $binop_iadd404.11                    ['$binop_iadd404.11', 'n']
    jump 410                                 []
label 410:
    $const412.1 = const(int, 1)              ['$const412.1']
    high = i - $const412.1                   ['$const412.1', 'high', 'i']
    jump 498                                 []
label 422:
    $426compare_op.2 = i > low               ['$426compare_op.2', 'i', 'low']
    bool432 = global(bool: <class 'bool'>)   ['bool432']
    $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None) ['$426compare_op.2', '$432pred', 'bool432']
    branch $432pred, 434, 488                ['$432pred']
label 434:
    $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$434load_global.0']
    $const450.4 = const(int, 1)              ['$const450.4']
    $binop_sub452.5 = i - $const450.4        ['$binop_sub452.5', '$const450.4', 'i']
    $460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None) ['$434load_global.0', '$460call.6', '$binop_sub452.5', 'low']
    stack[n] = $460call.6                    ['$460call.6', 'n', 'stack']
    $const480.10 = const(int, 1)             ['$const480.10']
    $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd482.11', '$const480.10', 'n']
    n = $binop_iadd482.11                    ['$binop_iadd482.11', 'n']
    jump 488                                 []
label 488:
    $const490.1 = const(int, 1)              ['$const490.1']
    low = i + $const490.1                    ['$const490.1', 'i', 'low']
    jump 498                                 []
label 498:
    $binop_sub502.2 = high - low             ['$binop_sub502.2', 'high', 'low']
    $506load_global.3 = global(SMALL_QUICKSORT: 15) ['$506load_global.3']
    $518compare_op.4 = $binop_sub502.2 >= $506load_global.3 ['$506load_global.3', '$518compare_op.4', '$binop_sub502.2']
    bool524 = global(bool: <class 'bool'>)   ['bool524']
    $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None) ['$518compare_op.4', '$524pred', 'bool524']
    branch $524pred, 266, 526                ['$524pred']
label 526:
    $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x282a0e3e0>) ['$528load_deref.1']
    $542call.6 = call $528load_deref.1(A, R, low, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$528load_deref.1', '$542call.6', 'A', 'R', 'high', 'low']
    $const556.8 = const(int, 0)              ['$const556.8']
    $558compare_op.9 = n > $const556.8       ['$558compare_op.9', '$const556.8', 'n']
    bool564 = global(bool: <class 'bool'>)   ['bool564']
    $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None) ['$558compare_op.9', '$564pred', 'bool564']
    branch $564pred, 206, 566                ['$564pred']
label 566:
    $568return_value.1 = cast(value=R)       ['$568return_value.1', 'R']
    return $568return_value.1                ['$568return_value.1']

2023-11-07 09:01:25,079 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,079 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,079 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,079 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x282a0dbc0>)
2023-11-07 09:01:25,079 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,079 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-11-07 09:01:25,079 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,079 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-11-07 09:01:25,079 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-11-07 09:01:25,079 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,079 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,079 [DEBUG] on stmt: branch $64pred, 66, 70
2023-11-07 09:01:25,079 [DEBUG] ==== SSA block analysis pass on 66
2023-11-07 09:01:25,079 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,079 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-11-07 09:01:25,080 [DEBUG] on stmt: return $68return_value.1
2023-11-07 09:01:25,080 [DEBUG] ==== SSA block analysis pass on 70
2023-11-07 09:01:25,080 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,080 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-11-07 09:01:25,080 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-11-07 09:01:25,080 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-11-07 09:01:25,080 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-11-07 09:01:25,080 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-11-07 09:01:25,080 [DEBUG] on stmt: stack[0] = $172call.17
2023-11-07 09:01:25,080 [DEBUG] on stmt: n = const(int, 1)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-11-07 09:01:25,080 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,080 [DEBUG] on stmt: branch $204pred, 206, 566
2023-11-07 09:01:25,080 [DEBUG] ==== SSA block analysis pass on 206
2023-11-07 09:01:25,080 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,080 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,080 [DEBUG] on stmt: n = $binop_isub210.2
2023-11-07 09:01:25,080 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-11-07 09:01:25,080 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-11-07 09:01:25,080 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-11-07 09:01:25,080 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-11-07 09:01:25,080 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,080 [DEBUG] on stmt: branch $264pred, 266, 526
2023-11-07 09:01:25,080 [DEBUG] ==== SSA block analysis pass on 266
2023-11-07 09:01:25,080 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,080 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-11-07 09:01:25,080 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,080 [DEBUG] on stmt: branch $286pred, 292, 288
2023-11-07 09:01:25,080 [DEBUG] ==== SSA block analysis pass on 288
2023-11-07 09:01:25,080 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,080 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,080 [DEBUG] ==== SSA block analysis pass on 292
2023-11-07 09:01:25,080 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,080 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x282a0f7e0>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $binop_sub324.9 = high - i
2023-11-07 09:01:25,080 [DEBUG] on stmt: $binop_sub332.12 = i - low
2023-11-07 09:01:25,080 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-11-07 09:01:25,080 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,080 [DEBUG] on stmt: branch $342pred, 344, 422
2023-11-07 09:01:25,080 [DEBUG] ==== SSA block analysis pass on 344
2023-11-07 09:01:25,080 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,080 [DEBUG] on stmt: $348compare_op.2 = high > i
2023-11-07 09:01:25,080 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,080 [DEBUG] on stmt: branch $354pred, 356, 410
2023-11-07 09:01:25,080 [DEBUG] ==== SSA block analysis pass on 356
2023-11-07 09:01:25,080 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,080 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-11-07 09:01:25,080 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-11-07 09:01:25,080 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,080 [DEBUG] on stmt: stack[n] = $382call.6
2023-11-07 09:01:25,080 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,081 [DEBUG] on stmt: n = $binop_iadd404.11
2023-11-07 09:01:25,081 [DEBUG] on stmt: jump 410
2023-11-07 09:01:25,081 [DEBUG] ==== SSA block analysis pass on 410
2023-11-07 09:01:25,081 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,081 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-11-07 09:01:25,081 [DEBUG] on stmt: high = i - $const412.1
2023-11-07 09:01:25,081 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,081 [DEBUG] ==== SSA block analysis pass on 422
2023-11-07 09:01:25,081 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,081 [DEBUG] on stmt: $426compare_op.2 = i > low
2023-11-07 09:01:25,081 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,081 [DEBUG] on stmt: branch $432pred, 434, 488
2023-11-07 09:01:25,081 [DEBUG] ==== SSA block analysis pass on 434
2023-11-07 09:01:25,081 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,081 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-11-07 09:01:25,081 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,081 [DEBUG] on stmt: stack[n] = $460call.6
2023-11-07 09:01:25,081 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,081 [DEBUG] on stmt: n = $binop_iadd482.11
2023-11-07 09:01:25,081 [DEBUG] on stmt: jump 488
2023-11-07 09:01:25,081 [DEBUG] ==== SSA block analysis pass on 488
2023-11-07 09:01:25,081 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,081 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-11-07 09:01:25,081 [DEBUG] on stmt: low = i + $const490.1
2023-11-07 09:01:25,081 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,081 [DEBUG] ==== SSA block analysis pass on 498
2023-11-07 09:01:25,081 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,081 [DEBUG] on stmt: $binop_sub502.2 = high - low
2023-11-07 09:01:25,081 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-11-07 09:01:25,081 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,081 [DEBUG] on stmt: branch $524pred, 266, 526
2023-11-07 09:01:25,081 [DEBUG] ==== SSA block analysis pass on 526
2023-11-07 09:01:25,081 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,081 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x282a0e3e0>)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-11-07 09:01:25,081 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,081 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,081 [DEBUG] on stmt: branch $564pred, 206, 566
2023-11-07 09:01:25,081 [DEBUG] ==== SSA block analysis pass on 566
2023-11-07 09:01:25,081 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28096d290>
2023-11-07 09:01:25,081 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-11-07 09:01:25,081 [DEBUG] on stmt: return $568return_value.1
2023-11-07 09:01:25,082 [DEBUG] defs defaultdict(<class 'list'>,
            {'$100build_list.5': [<numba.core.ir.Assign object at 0x28098d1d0>],
             '$102load_global.6': [<numba.core.ir.Assign object at 0x28098f910>],
             '$120load_global.8': [<numba.core.ir.Assign object at 0x28098e490>],
             '$132load_deref.10': [<numba.core.ir.Assign object at 0x28098fb50>],
             '$134load_global.11': [<numba.core.ir.Assign object at 0x2809b06d0>],
             '$152call.14': [<numba.core.ir.Assign object at 0x2809b1650>],
             '$172call.17': [<numba.core.ir.Assign object at 0x2809b2b90>],
             '$198compare_op.23': [<numba.core.ir.Assign object at 0x2809b3090>],
             '$204pred': [<numba.core.ir.Assign object at 0x2809b23d0>],
             '$220binary_subscr.5': [<numba.core.ir.Assign object at 0x2809b0690>],
             '$230unpack_sequence.6': [<numba.core.ir.Assign object at 0x28097d4d0>],
             '$230unpack_sequence.7': [<numba.core.ir.Assign object at 0x28097ff90>],
             '$230unpack_sequence.8': [<numba.core.ir.Assign object at 0x28097d650>],
             '$246load_global.12': [<numba.core.ir.Assign object at 0x28097f350>],
             '$258compare_op.13': [<numba.core.ir.Assign object at 0x28097dfd0>],
             '$264pred': [<numba.core.ir.Assign object at 0x28097d190>],
             '$268load_global.1': [<numba.core.ir.Assign object at 0x28097de10>],
             '$280compare_op.2': [<numba.core.ir.Assign object at 0x28097cd50>],
             '$286pred': [<numba.core.ir.Assign object at 0x28097c250>],
             '$28load_global.4': [<numba.core.ir.Assign object at 0x28069f990>],
             '$294load_deref.1': [<numba.core.ir.Assign object at 0x28097f990>],
             '$336compare_op.13': [<numba.core.ir.Assign object at 0x2809e3250>],
             '$342pred': [<numba.core.ir.Assign object at 0x2809e1d10>],
             '$348compare_op.2': [<numba.core.ir.Assign object at 0x2809e0750>],
             '$354pred': [<numba.core.ir.Assign object at 0x2809e04d0>],
             '$356load_global.0': [<numba.core.ir.Assign object at 0x2809e1450>],
             '$382call.6': [<numba.core.ir.Assign object at 0x2809e0910>],
             '$426compare_op.2': [<numba.core.ir.Assign object at 0x28099fc50>],
             '$432pred': [<numba.core.ir.Assign object at 0x28099c750>],
             '$434load_global.0': [<numba.core.ir.Assign object at 0x28099f250>],
             '$460call.6': [<numba.core.ir.Assign object at 0x28099f350>],
             '$46call.7': [<numba.core.ir.Assign object at 0x280939010>],
             '$506load_global.3': [<numba.core.ir.Assign object at 0x280a2bb50>],
             '$518compare_op.4': [<numba.core.ir.Assign object at 0x280a28810>],
             '$524pred': [<numba.core.ir.Assign object at 0x280a2b890>],
             '$528load_deref.1': [<numba.core.ir.Assign object at 0x280a286d0>],
             '$542call.6': [<numba.core.ir.Assign object at 0x280a28350>],
             '$558compare_op.9': [<numba.core.ir.Assign object at 0x280a2b190>],
             '$564pred': [<numba.core.ir.Assign object at 0x2809e4250>],
             '$568return_value.1': [<numba.core.ir.Assign object at 0x2809e7b50>],
             '$58compare_op.9': [<numba.core.ir.Assign object at 0x28098e190>],
             '$64pred': [<numba.core.ir.Assign object at 0x28098d6d0>],
             '$68return_value.1': [<numba.core.ir.Assign object at 0x28098f750>],
             '$70load_global.0': [<numba.core.ir.Assign object at 0x28098e3d0>],
             '$82load_deref.2': [<numba.core.ir.Assign object at 0x28098e4d0>],
             '$84load_deref.3': [<numba.core.ir.Assign object at 0x28098c610>],
             '$8load_deref.1': [<numba.core.ir.Assign object at 0x2808d0150>],
             '$90call.4': [<numba.core.ir.Assign object at 0x28098d7d0>],
             '$assertion_error288.0': [<numba.core.ir.Assign object at 0x28097dd10>],
             '$binop_add372.4': [<numba.core.ir.Assign object at 0x2809e2d90>],
             '$binop_iadd404.11': [<numba.core.ir.Assign object at 0x28099f790>],
             '$binop_iadd482.11': [<numba.core.ir.Assign object at 0x28099f690>],
             '$binop_isub210.2': [<numba.core.ir.Assign object at 0x2809b2190>],
             '$binop_sub164.16': [<numba.core.ir.Assign object at 0x2809b3cd0>],
             '$binop_sub242.11': [<numba.core.ir.Assign object at 0x28097dc90>],
             '$binop_sub324.9': [<numba.core.ir.Assign object at 0x2809e1a90>],
             '$binop_sub332.12': [<numba.core.ir.Assign object at 0x2809e1f10>],
             '$binop_sub452.5': [<numba.core.ir.Assign object at 0x28099f110>],
             '$binop_sub502.2': [<numba.core.ir.Assign object at 0x280a297d0>],
             '$const162.15': [<numba.core.ir.Assign object at 0x2809b3710>],
             '$const184.19': [<numba.core.ir.Assign object at 0x2809b3190>],
             '$const196.22': [<numba.core.ir.Assign object at 0x2809b0190>],
             '$const208.1': [<numba.core.ir.Assign object at 0x2809b02d0>],
             '$const370.3': [<numba.core.ir.Assign object at 0x2809e1390>],
             '$const402.10': [<numba.core.ir.Assign object at 0x28099f090>],
             '$const412.1': [<numba.core.ir.Assign object at 0x28099e290>],
             '$const450.4': [<numba.core.ir.Assign object at 0x28099d7d0>],
             '$const480.10': [<numba.core.ir.Assign object at 0x28099fa90>],
             '$const490.1': [<numba.core.ir.Assign object at 0x280a28b90>],
             '$const556.8': [<numba.core.ir.Assign object at 0x280a28f50>],
             '$const56.8': [<numba.core.ir.Assign object at 0x28098ef90>],
             'A': [<numba.core.ir.Assign object at 0x28096c0d0>],
             'R': [<numba.core.ir.Assign object at 0x28095e710>],
             'bool204': [<numba.core.ir.Assign object at 0x2809b2090>],
             'bool264': [<numba.core.ir.Assign object at 0x28097e010>],
             'bool286': [<numba.core.ir.Assign object at 0x28097d990>],
             'bool342': [<numba.core.ir.Assign object at 0x2809e0410>],
             'bool354': [<numba.core.ir.Assign object at 0x2809e0f50>],
             'bool432': [<numba.core.ir.Assign object at 0x28099f610>],
             'bool524': [<numba.core.ir.Assign object at 0x280a28550>],
             'bool564': [<numba.core.ir.Assign object at 0x280a29c50>],
             'bool64': [<numba.core.ir.Assign object at 0x28098fb10>],
             'high': [<numba.core.ir.Assign object at 0x28097d410>,
                      <numba.core.ir.Assign object at 0x28099ee10>],
             'i': [<numba.core.ir.Assign object at 0x2809e28d0>],
             'low': [<numba.core.ir.Assign object at 0x28097ec90>,
                     <numba.core.ir.Assign object at 0x280a2bcd0>],
             'n': [<numba.core.ir.Assign object at 0x2809b1b90>,
                   <numba.core.ir.Assign object at 0x2809b1490>,
                   <numba.core.ir.Assign object at 0x28099e950>,
                   <numba.core.ir.Assign object at 0x280a28910>],
             'stack': [<numba.core.ir.Assign object at 0x28098ed50>]})
2023-11-07 09:01:25,082 [DEBUG] SSA violators {'low', 'n', 'high'}
2023-11-07 09:01:25,082 [DEBUG] Fix SSA violator on var low
2023-11-07 09:01:25,082 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,082 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,082 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x282a0dbc0>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-11-07 09:01:25,082 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: branch $64pred, 66, 70
2023-11-07 09:01:25,082 [DEBUG] ==== SSA block rewrite pass on 66
2023-11-07 09:01:25,082 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,082 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-11-07 09:01:25,082 [DEBUG] on stmt: return $68return_value.1
2023-11-07 09:01:25,082 [DEBUG] ==== SSA block rewrite pass on 70
2023-11-07 09:01:25,082 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,082 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-11-07 09:01:25,082 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-11-07 09:01:25,082 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-11-07 09:01:25,082 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-11-07 09:01:25,082 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-11-07 09:01:25,082 [DEBUG] on stmt: stack[0] = $172call.17
2023-11-07 09:01:25,082 [DEBUG] on stmt: n = const(int, 1)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-11-07 09:01:25,082 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: branch $204pred, 206, 566
2023-11-07 09:01:25,082 [DEBUG] ==== SSA block rewrite pass on 206
2023-11-07 09:01:25,082 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,082 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,082 [DEBUG] on stmt: n = $binop_isub210.2
2023-11-07 09:01:25,082 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-11-07 09:01:25,082 [DEBUG] first assign: low
2023-11-07 09:01:25,082 [DEBUG] replaced with: low = $230unpack_sequence.6
2023-11-07 09:01:25,082 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-11-07 09:01:25,082 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-11-07 09:01:25,082 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-11-07 09:01:25,082 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: branch $264pred, 266, 526
2023-11-07 09:01:25,082 [DEBUG] ==== SSA block rewrite pass on 266
2023-11-07 09:01:25,082 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,082 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-11-07 09:01:25,082 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: branch $286pred, 292, 288
2023-11-07 09:01:25,082 [DEBUG] ==== SSA block rewrite pass on 288
2023-11-07 09:01:25,082 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,082 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,082 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:25,082 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,082 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x282a0f7e0>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $binop_sub324.9 = high - i
2023-11-07 09:01:25,082 [DEBUG] on stmt: $binop_sub332.12 = i - low
2023-11-07 09:01:25,082 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-11-07 09:01:25,082 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,082 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,082 [DEBUG] on stmt: branch $342pred, 344, 422
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 344
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,083 [DEBUG] on stmt: $348compare_op.2 = high > i
2023-11-07 09:01:25,083 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,083 [DEBUG] on stmt: branch $354pred, 356, 410
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,083 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-11-07 09:01:25,083 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,083 [DEBUG] on stmt: stack[n] = $382call.6
2023-11-07 09:01:25,083 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,083 [DEBUG] on stmt: n = $binop_iadd404.11
2023-11-07 09:01:25,083 [DEBUG] on stmt: jump 410
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 410
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,083 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-11-07 09:01:25,083 [DEBUG] on stmt: high = i - $const412.1
2023-11-07 09:01:25,083 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 422
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,083 [DEBUG] on stmt: $426compare_op.2 = i > low
2023-11-07 09:01:25,083 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,083 [DEBUG] on stmt: branch $432pred, 434, 488
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 434
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,083 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-11-07 09:01:25,083 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,083 [DEBUG] on stmt: stack[n] = $460call.6
2023-11-07 09:01:25,083 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,083 [DEBUG] on stmt: n = $binop_iadd482.11
2023-11-07 09:01:25,083 [DEBUG] on stmt: jump 488
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 488
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,083 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-11-07 09:01:25,083 [DEBUG] on stmt: low = i + $const490.1
2023-11-07 09:01:25,083 [DEBUG] replaced with: low.1 = i + $const490.1
2023-11-07 09:01:25,083 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 498
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,083 [DEBUG] on stmt: $binop_sub502.2 = high - low
2023-11-07 09:01:25,083 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-11-07 09:01:25,083 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,083 [DEBUG] on stmt: branch $524pred, 266, 526
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 526
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,083 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x282a0e3e0>)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-11-07 09:01:25,083 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,083 [DEBUG] on stmt: branch $564pred, 206, 566
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 566
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280939b90>
2023-11-07 09:01:25,083 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-11-07 09:01:25,083 [DEBUG] on stmt: return $568return_value.1
2023-11-07 09:01:25,083 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {206: [<numba.core.ir.Assign object at 0x280939d50>],
             488: [<numba.core.ir.Assign object at 0x28096e250>]})
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,083 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x282a0dbc0>)
2023-11-07 09:01:25,083 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-11-07 09:01:25,083 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,083 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,083 [DEBUG] on stmt: branch $64pred, 66, 70
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 66
2023-11-07 09:01:25,083 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,083 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-11-07 09:01:25,083 [DEBUG] on stmt: return $68return_value.1
2023-11-07 09:01:25,083 [DEBUG] ==== SSA block rewrite pass on 70
2023-11-07 09:01:25,084 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,084 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-11-07 09:01:25,084 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-11-07 09:01:25,084 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-11-07 09:01:25,084 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-11-07 09:01:25,084 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-11-07 09:01:25,084 [DEBUG] on stmt: stack[0] = $172call.17
2023-11-07 09:01:25,084 [DEBUG] on stmt: n = const(int, 1)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-11-07 09:01:25,084 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,084 [DEBUG] on stmt: branch $204pred, 206, 566
2023-11-07 09:01:25,084 [DEBUG] ==== SSA block rewrite pass on 206
2023-11-07 09:01:25,084 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,084 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,084 [DEBUG] on stmt: n = $binop_isub210.2
2023-11-07 09:01:25,084 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-11-07 09:01:25,084 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-11-07 09:01:25,084 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-11-07 09:01:25,084 [DEBUG] find_def var='low' stmt=$binop_sub242.11 = high - low
2023-11-07 09:01:25,084 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-11-07 09:01:25,084 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,084 [DEBUG] on stmt: branch $264pred, 266, 526
2023-11-07 09:01:25,084 [DEBUG] ==== SSA block rewrite pass on 266
2023-11-07 09:01:25,084 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,084 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-11-07 09:01:25,084 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,084 [DEBUG] on stmt: branch $286pred, 292, 288
2023-11-07 09:01:25,084 [DEBUG] ==== SSA block rewrite pass on 288
2023-11-07 09:01:25,084 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,084 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,084 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:25,084 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,084 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x282a0f7e0>)
2023-11-07 09:01:25,084 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,084 [DEBUG] find_def var='low' stmt=i = call $294load_deref.1(A, R, low, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,084 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,084 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,084 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,084 [DEBUG] find_def_from_top label 266
2023-11-07 09:01:25,084 [DEBUG] insert phi node low.2 = phi(incoming_values=[], incoming_blocks=[]) at 266
2023-11-07 09:01:25,084 [DEBUG] find_def_from_bottom label 498
2023-11-07 09:01:25,084 [DEBUG] find_def_from_top label 498
2023-11-07 09:01:25,084 [DEBUG] insert phi node low.3 = phi(incoming_values=[], incoming_blocks=[]) at 498
2023-11-07 09:01:25,084 [DEBUG] find_def_from_bottom label 488
2023-11-07 09:01:25,084 [DEBUG] incoming_def low.1 = i + $const490.1
2023-11-07 09:01:25,084 [DEBUG] find_def_from_bottom label 410
2023-11-07 09:01:25,084 [DEBUG] find_def_from_top label 410
2023-11-07 09:01:25,084 [DEBUG] idom 344 from label 410
2023-11-07 09:01:25,084 [DEBUG] find_def_from_bottom label 344
2023-11-07 09:01:25,084 [DEBUG] find_def_from_top label 344
2023-11-07 09:01:25,084 [DEBUG] idom 292 from label 344
2023-11-07 09:01:25,084 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,084 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,084 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,084 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,084 [DEBUG] incoming_def low.2 = phi(incoming_values=[], incoming_blocks=[])
2023-11-07 09:01:25,084 [DEBUG] incoming_def low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:181)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,084 [DEBUG] find_def_from_bottom label 206
2023-11-07 09:01:25,084 [DEBUG] incoming_def low = $230unpack_sequence.6
2023-11-07 09:01:25,085 [DEBUG] replaced with: i = call $294load_deref.1(A, R, low.2, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.2, quicksort.py:181), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,085 [DEBUG] on stmt: $binop_sub324.9 = high - i
2023-11-07 09:01:25,085 [DEBUG] on stmt: $binop_sub332.12 = i - low
2023-11-07 09:01:25,085 [DEBUG] find_def var='low' stmt=$binop_sub332.12 = i - low
2023-11-07 09:01:25,085 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,085 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,085 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,085 [DEBUG] replaced with: $binop_sub332.12 = i - low.2
2023-11-07 09:01:25,085 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-11-07 09:01:25,085 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,085 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,085 [DEBUG] on stmt: branch $342pred, 344, 422
2023-11-07 09:01:25,085 [DEBUG] ==== SSA block rewrite pass on 344
2023-11-07 09:01:25,085 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,085 [DEBUG] on stmt: $348compare_op.2 = high > i
2023-11-07 09:01:25,085 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,085 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,085 [DEBUG] on stmt: branch $354pred, 356, 410
2023-11-07 09:01:25,085 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,085 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,085 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,085 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-11-07 09:01:25,085 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-11-07 09:01:25,085 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,085 [DEBUG] on stmt: stack[n] = $382call.6
2023-11-07 09:01:25,085 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-11-07 09:01:25,085 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,085 [DEBUG] on stmt: n = $binop_iadd404.11
2023-11-07 09:01:25,085 [DEBUG] on stmt: jump 410
2023-11-07 09:01:25,085 [DEBUG] ==== SSA block rewrite pass on 410
2023-11-07 09:01:25,085 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,085 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-11-07 09:01:25,085 [DEBUG] on stmt: high = i - $const412.1
2023-11-07 09:01:25,085 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,085 [DEBUG] ==== SSA block rewrite pass on 422
2023-11-07 09:01:25,085 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,085 [DEBUG] on stmt: $426compare_op.2 = i > low
2023-11-07 09:01:25,085 [DEBUG] find_def var='low' stmt=$426compare_op.2 = i > low
2023-11-07 09:01:25,085 [DEBUG] find_def_from_top label 422
2023-11-07 09:01:25,085 [DEBUG] idom 292 from label 422
2023-11-07 09:01:25,085 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,085 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,085 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,085 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,085 [DEBUG] replaced with: $426compare_op.2 = i > low.2
2023-11-07 09:01:25,085 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,085 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,085 [DEBUG] on stmt: branch $432pred, 434, 488
2023-11-07 09:01:25,085 [DEBUG] ==== SSA block rewrite pass on 434
2023-11-07 09:01:25,085 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,085 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,085 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-11-07 09:01:25,085 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-11-07 09:01:25,085 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,085 [DEBUG] find_def var='low' stmt=$460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,085 [DEBUG] find_def_from_top label 434
2023-11-07 09:01:25,085 [DEBUG] idom 422 from label 434
2023-11-07 09:01:25,085 [DEBUG] find_def_from_bottom label 422
2023-11-07 09:01:25,085 [DEBUG] find_def_from_top label 422
2023-11-07 09:01:25,085 [DEBUG] idom 292 from label 422
2023-11-07 09:01:25,085 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,085 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,085 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,085 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,085 [DEBUG] replaced with: $460call.6 = call $434load_global.0(low.2, $binop_sub452.5, func=$434load_global.0, args=[Var(low.2, quicksort.py:181), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,085 [DEBUG] on stmt: stack[n] = $460call.6
2023-11-07 09:01:25,085 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-11-07 09:01:25,085 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,085 [DEBUG] on stmt: n = $binop_iadd482.11
2023-11-07 09:01:25,085 [DEBUG] on stmt: jump 488
2023-11-07 09:01:25,085 [DEBUG] ==== SSA block rewrite pass on 488
2023-11-07 09:01:25,085 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,085 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-11-07 09:01:25,085 [DEBUG] on stmt: low.1 = i + $const490.1
2023-11-07 09:01:25,085 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,085 [DEBUG] ==== SSA block rewrite pass on 498
2023-11-07 09:01:25,085 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,085 [DEBUG] on stmt: $binop_sub502.2 = high - low
2023-11-07 09:01:25,085 [DEBUG] find_def var='low' stmt=$binop_sub502.2 = high - low
2023-11-07 09:01:25,086 [DEBUG] replaced with: $binop_sub502.2 = high - low.3
2023-11-07 09:01:25,086 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-11-07 09:01:25,086 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] on stmt: branch $524pred, 266, 526
2023-11-07 09:01:25,086 [DEBUG] ==== SSA block rewrite pass on 526
2023-11-07 09:01:25,086 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,086 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x282a0e3e0>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] find_def var='low' stmt=$542call.6 = call $528load_deref.1(A, R, low, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] find_def_from_top label 526
2023-11-07 09:01:25,086 [DEBUG] insert phi node low.4 = phi(incoming_values=[], incoming_blocks=[]) at 526
2023-11-07 09:01:25,086 [DEBUG] find_def_from_bottom label 498
2023-11-07 09:01:25,086 [DEBUG] incoming_def low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:181)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,086 [DEBUG] find_def_from_bottom label 206
2023-11-07 09:01:25,086 [DEBUG] incoming_def low = $230unpack_sequence.6
2023-11-07 09:01:25,086 [DEBUG] replaced with: $542call.6 = call $528load_deref.1(A, R, low.4, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.4, quicksort.py:195), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-11-07 09:01:25,086 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] on stmt: branch $564pred, 206, 566
2023-11-07 09:01:25,086 [DEBUG] ==== SSA block rewrite pass on 566
2023-11-07 09:01:25,086 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28086be50>
2023-11-07 09:01:25,086 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-11-07 09:01:25,086 [DEBUG] on stmt: return $568return_value.1
2023-11-07 09:01:25,086 [DEBUG] Fix SSA violator on var n
2023-11-07 09:01:25,086 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,086 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,086 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x282a0dbc0>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-11-07 09:01:25,086 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] on stmt: branch $64pred, 66, 70
2023-11-07 09:01:25,086 [DEBUG] ==== SSA block rewrite pass on 66
2023-11-07 09:01:25,086 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,086 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-11-07 09:01:25,086 [DEBUG] on stmt: return $68return_value.1
2023-11-07 09:01:25,086 [DEBUG] ==== SSA block rewrite pass on 70
2023-11-07 09:01:25,086 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,086 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-11-07 09:01:25,086 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-11-07 09:01:25,086 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-11-07 09:01:25,086 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-11-07 09:01:25,086 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-11-07 09:01:25,086 [DEBUG] on stmt: stack[0] = $172call.17
2023-11-07 09:01:25,086 [DEBUG] on stmt: n = const(int, 1)
2023-11-07 09:01:25,086 [DEBUG] first assign: n
2023-11-07 09:01:25,086 [DEBUG] replaced with: n = const(int, 1)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-11-07 09:01:25,086 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,086 [DEBUG] on stmt: branch $204pred, 206, 566
2023-11-07 09:01:25,086 [DEBUG] ==== SSA block rewrite pass on 206
2023-11-07 09:01:25,086 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,086 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,086 [DEBUG] on stmt: n = $binop_isub210.2
2023-11-07 09:01:25,086 [DEBUG] replaced with: n.1 = $binop_isub210.2
2023-11-07 09:01:25,086 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,086 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-11-07 09:01:25,087 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-11-07 09:01:25,087 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-11-07 09:01:25,087 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-11-07 09:01:25,087 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,087 [DEBUG] on stmt: branch $264pred, 266, 526
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 266
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: low.2 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,087 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-11-07 09:01:25,087 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,087 [DEBUG] on stmt: branch $286pred, 292, 288
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 288
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,087 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x282a0f7e0>)
2023-11-07 09:01:25,087 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low.2, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.2, quicksort.py:181), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $binop_sub324.9 = high - i
2023-11-07 09:01:25,087 [DEBUG] on stmt: $binop_sub332.12 = i - low.2
2023-11-07 09:01:25,087 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-11-07 09:01:25,087 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,087 [DEBUG] on stmt: branch $342pred, 344, 422
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 344
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: $348compare_op.2 = high > i
2023-11-07 09:01:25,087 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,087 [DEBUG] on stmt: branch $354pred, 356, 410
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-11-07 09:01:25,087 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,087 [DEBUG] on stmt: stack[n] = $382call.6
2023-11-07 09:01:25,087 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,087 [DEBUG] on stmt: n = $binop_iadd404.11
2023-11-07 09:01:25,087 [DEBUG] replaced with: n.2 = $binop_iadd404.11
2023-11-07 09:01:25,087 [DEBUG] on stmt: jump 410
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 410
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-11-07 09:01:25,087 [DEBUG] on stmt: high = i - $const412.1
2023-11-07 09:01:25,087 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 422
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: $426compare_op.2 = i > low.2
2023-11-07 09:01:25,087 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,087 [DEBUG] on stmt: branch $432pred, 434, 488
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 434
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-11-07 09:01:25,087 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low.2, $binop_sub452.5, func=$434load_global.0, args=[Var(low.2, quicksort.py:181), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,087 [DEBUG] on stmt: stack[n] = $460call.6
2023-11-07 09:01:25,087 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,087 [DEBUG] on stmt: n = $binop_iadd482.11
2023-11-07 09:01:25,087 [DEBUG] replaced with: n.3 = $binop_iadd482.11
2023-11-07 09:01:25,087 [DEBUG] on stmt: jump 488
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 488
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-11-07 09:01:25,087 [DEBUG] on stmt: low.1 = i + $const490.1
2023-11-07 09:01:25,087 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 498
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:181)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,087 [DEBUG] on stmt: $binop_sub502.2 = high - low.3
2023-11-07 09:01:25,087 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-11-07 09:01:25,087 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,087 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,087 [DEBUG] on stmt: branch $524pred, 266, 526
2023-11-07 09:01:25,087 [DEBUG] ==== SSA block rewrite pass on 526
2023-11-07 09:01:25,087 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,087 [DEBUG] on stmt: low.4 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,087 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x282a0e3e0>)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low.4, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.4, quicksort.py:195), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-11-07 09:01:25,088 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,088 [DEBUG] on stmt: branch $564pred, 206, 566
2023-11-07 09:01:25,088 [DEBUG] ==== SSA block rewrite pass on 566
2023-11-07 09:01:25,088 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2809e0e90>
2023-11-07 09:01:25,088 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-11-07 09:01:25,088 [DEBUG] on stmt: return $568return_value.1
2023-11-07 09:01:25,088 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {70: [<numba.core.ir.Assign object at 0x280886990>],
             206: [<numba.core.ir.Assign object at 0x28096f6d0>],
             356: [<numba.core.ir.Assign object at 0x28098da10>],
             434: [<numba.core.ir.Assign object at 0x28098eb90>]})
2023-11-07 09:01:25,088 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,088 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,088 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x282a0dbc0>)
2023-11-07 09:01:25,088 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-11-07 09:01:25,088 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,088 [DEBUG] on stmt: branch $64pred, 66, 70
2023-11-07 09:01:25,088 [DEBUG] ==== SSA block rewrite pass on 66
2023-11-07 09:01:25,088 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,088 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-11-07 09:01:25,088 [DEBUG] on stmt: return $68return_value.1
2023-11-07 09:01:25,088 [DEBUG] ==== SSA block rewrite pass on 70
2023-11-07 09:01:25,088 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,088 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-11-07 09:01:25,088 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-11-07 09:01:25,088 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-11-07 09:01:25,088 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-11-07 09:01:25,088 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-11-07 09:01:25,088 [DEBUG] on stmt: stack[0] = $172call.17
2023-11-07 09:01:25,088 [DEBUG] on stmt: n = const(int, 1)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-11-07 09:01:25,088 [DEBUG] find_def var='n' stmt=$198compare_op.23 = n > $const196.22
2023-11-07 09:01:25,088 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,088 [DEBUG] on stmt: branch $204pred, 206, 566
2023-11-07 09:01:25,088 [DEBUG] ==== SSA block rewrite pass on 206
2023-11-07 09:01:25,088 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,088 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-11-07 09:01:25,088 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,088 [DEBUG] find_def var='n' stmt=$binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,088 [DEBUG] find_def_from_top label 206
2023-11-07 09:01:25,088 [DEBUG] insert phi node n.4 = phi(incoming_values=[], incoming_blocks=[]) at 206
2023-11-07 09:01:25,088 [DEBUG] find_def_from_bottom label 70
2023-11-07 09:01:25,088 [DEBUG] incoming_def n = const(int, 1)
2023-11-07 09:01:25,088 [DEBUG] find_def_from_bottom label 526
2023-11-07 09:01:25,088 [DEBUG] find_def_from_top label 526
2023-11-07 09:01:25,088 [DEBUG] insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 526
2023-11-07 09:01:25,088 [DEBUG] find_def_from_bottom label 498
2023-11-07 09:01:25,088 [DEBUG] find_def_from_top label 498
2023-11-07 09:01:25,088 [DEBUG] insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 498
2023-11-07 09:01:25,088 [DEBUG] find_def_from_bottom label 488
2023-11-07 09:01:25,088 [DEBUG] find_def_from_top label 488
2023-11-07 09:01:25,088 [DEBUG] insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 488
2023-11-07 09:01:25,088 [DEBUG] find_def_from_bottom label 434
2023-11-07 09:01:25,088 [DEBUG] incoming_def n.3 = $binop_iadd482.11
2023-11-07 09:01:25,088 [DEBUG] find_def_from_bottom label 422
2023-11-07 09:01:25,088 [DEBUG] find_def_from_top label 422
2023-11-07 09:01:25,088 [DEBUG] idom 292 from label 422
2023-11-07 09:01:25,088 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,088 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,088 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,088 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,088 [DEBUG] find_def_from_top label 266
2023-11-07 09:01:25,088 [DEBUG] insert phi node n.8 = phi(incoming_values=[], incoming_blocks=[]) at 266
2023-11-07 09:01:25,088 [DEBUG] find_def_from_bottom label 498
2023-11-07 09:01:25,088 [DEBUG] incoming_def n.6 = phi(incoming_values=[], incoming_blocks=[])
2023-11-07 09:01:25,089 [DEBUG] find_def_from_bottom label 206
2023-11-07 09:01:25,089 [DEBUG] incoming_def n.1 = $binop_isub210.2
2023-11-07 09:01:25,089 [DEBUG] incoming_def n.8 = phi(incoming_values=[Var(n.6, quicksort.py:176), Var(n.1, quicksort.py:176)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,089 [DEBUG] incoming_def n.7 = phi(incoming_values=[Var(n.3, quicksort.py:192), Var(n.8, quicksort.py:176)], incoming_blocks=[434, 422])
2023-11-07 09:01:25,089 [DEBUG] find_def_from_bottom label 410
2023-11-07 09:01:25,089 [DEBUG] find_def_from_top label 410
2023-11-07 09:01:25,089 [DEBUG] insert phi node n.9 = phi(incoming_values=[], incoming_blocks=[]) at 410
2023-11-07 09:01:25,089 [DEBUG] find_def_from_bottom label 344
2023-11-07 09:01:25,089 [DEBUG] find_def_from_top label 344
2023-11-07 09:01:25,089 [DEBUG] idom 292 from label 344
2023-11-07 09:01:25,089 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,089 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,089 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,089 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,089 [DEBUG] incoming_def n.8 = phi(incoming_values=[Var(n.6, quicksort.py:176), Var(n.1, quicksort.py:176)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,089 [DEBUG] find_def_from_bottom label 356
2023-11-07 09:01:25,089 [DEBUG] incoming_def n.2 = $binop_iadd404.11
2023-11-07 09:01:25,089 [DEBUG] incoming_def n.9 = phi(incoming_values=[Var(n.8, quicksort.py:176), Var(n.2, quicksort.py:187)], incoming_blocks=[344, 356])
2023-11-07 09:01:25,089 [DEBUG] incoming_def n.6 = phi(incoming_values=[Var(n.7, quicksort.py:176), Var(n.9, quicksort.py:176)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,089 [DEBUG] find_def_from_bottom label 206
2023-11-07 09:01:25,089 [DEBUG] incoming_def n.1 = $binop_isub210.2
2023-11-07 09:01:25,089 [DEBUG] incoming_def n.5 = phi(incoming_values=[Var(n.6, quicksort.py:176), Var(n.1, quicksort.py:176)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,089 [DEBUG] replaced with: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n.4, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,089 [DEBUG] on stmt: n.1 = $binop_isub210.2
2023-11-07 09:01:25,089 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-11-07 09:01:25,089 [DEBUG] find_def var='n' stmt=$220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-11-07 09:01:25,089 [DEBUG] replaced with: $220binary_subscr.5 = getitem(value=stack, index=n.1, fn=<built-in function getitem>)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,089 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-11-07 09:01:25,089 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-11-07 09:01:25,089 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-11-07 09:01:25,089 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-11-07 09:01:25,089 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,089 [DEBUG] on stmt: branch $264pred, 266, 526
2023-11-07 09:01:25,089 [DEBUG] ==== SSA block rewrite pass on 266
2023-11-07 09:01:25,089 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,089 [DEBUG] on stmt: low.2 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,089 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-11-07 09:01:25,089 [DEBUG] find_def var='n' stmt=$280compare_op.2 = n < $268load_global.1
2023-11-07 09:01:25,089 [DEBUG] replaced with: $280compare_op.2 = n.8 < $268load_global.1
2023-11-07 09:01:25,089 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,089 [DEBUG] on stmt: branch $286pred, 292, 288
2023-11-07 09:01:25,089 [DEBUG] ==== SSA block rewrite pass on 288
2023-11-07 09:01:25,089 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,089 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,089 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,089 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:25,089 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,089 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x282a0f7e0>)
2023-11-07 09:01:25,089 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low.2, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.2, quicksort.py:181), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $binop_sub324.9 = high - i
2023-11-07 09:01:25,089 [DEBUG] on stmt: $binop_sub332.12 = i - low.2
2023-11-07 09:01:25,089 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-11-07 09:01:25,089 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,089 [DEBUG] on stmt: branch $342pred, 344, 422
2023-11-07 09:01:25,089 [DEBUG] ==== SSA block rewrite pass on 344
2023-11-07 09:01:25,089 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,089 [DEBUG] on stmt: $348compare_op.2 = high > i
2023-11-07 09:01:25,089 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,089 [DEBUG] on stmt: branch $354pred, 356, 410
2023-11-07 09:01:25,089 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,089 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,089 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-11-07 09:01:25,089 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-11-07 09:01:25,089 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,089 [DEBUG] on stmt: stack[n] = $382call.6
2023-11-07 09:01:25,089 [DEBUG] find_def var='n' stmt=stack[n] = $382call.6
2023-11-07 09:01:25,089 [DEBUG] find_def_from_top label 356
2023-11-07 09:01:25,089 [DEBUG] idom 344 from label 356
2023-11-07 09:01:25,089 [DEBUG] find_def_from_bottom label 344
2023-11-07 09:01:25,089 [DEBUG] find_def_from_top label 344
2023-11-07 09:01:25,089 [DEBUG] idom 292 from label 344
2023-11-07 09:01:25,089 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,089 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,090 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,090 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,090 [DEBUG] replaced with: stack[n.8] = $382call.6
2023-11-07 09:01:25,090 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-11-07 09:01:25,090 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,090 [DEBUG] find_def var='n' stmt=$binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,090 [DEBUG] find_def_from_top label 356
2023-11-07 09:01:25,090 [DEBUG] idom 344 from label 356
2023-11-07 09:01:25,090 [DEBUG] find_def_from_bottom label 344
2023-11-07 09:01:25,090 [DEBUG] find_def_from_top label 344
2023-11-07 09:01:25,090 [DEBUG] idom 292 from label 344
2023-11-07 09:01:25,090 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,090 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,090 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,090 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,090 [DEBUG] replaced with: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.8, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,090 [DEBUG] on stmt: n.2 = $binop_iadd404.11
2023-11-07 09:01:25,090 [DEBUG] on stmt: jump 410
2023-11-07 09:01:25,090 [DEBUG] ==== SSA block rewrite pass on 410
2023-11-07 09:01:25,090 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,090 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-11-07 09:01:25,090 [DEBUG] on stmt: high = i - $const412.1
2023-11-07 09:01:25,090 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,090 [DEBUG] ==== SSA block rewrite pass on 422
2023-11-07 09:01:25,090 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,090 [DEBUG] on stmt: $426compare_op.2 = i > low.2
2023-11-07 09:01:25,090 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,090 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,090 [DEBUG] on stmt: branch $432pred, 434, 488
2023-11-07 09:01:25,090 [DEBUG] ==== SSA block rewrite pass on 434
2023-11-07 09:01:25,090 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,090 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,090 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-11-07 09:01:25,090 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-11-07 09:01:25,090 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low.2, $binop_sub452.5, func=$434load_global.0, args=[Var(low.2, quicksort.py:181), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,090 [DEBUG] on stmt: stack[n] = $460call.6
2023-11-07 09:01:25,090 [DEBUG] find_def var='n' stmt=stack[n] = $460call.6
2023-11-07 09:01:25,090 [DEBUG] find_def_from_top label 434
2023-11-07 09:01:25,090 [DEBUG] idom 422 from label 434
2023-11-07 09:01:25,090 [DEBUG] find_def_from_bottom label 422
2023-11-07 09:01:25,090 [DEBUG] find_def_from_top label 422
2023-11-07 09:01:25,090 [DEBUG] idom 292 from label 422
2023-11-07 09:01:25,090 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,090 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,090 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,090 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,090 [DEBUG] replaced with: stack[n.8] = $460call.6
2023-11-07 09:01:25,090 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-11-07 09:01:25,090 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,090 [DEBUG] find_def var='n' stmt=$binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,090 [DEBUG] find_def_from_top label 434
2023-11-07 09:01:25,090 [DEBUG] idom 422 from label 434
2023-11-07 09:01:25,090 [DEBUG] find_def_from_bottom label 422
2023-11-07 09:01:25,090 [DEBUG] find_def_from_top label 422
2023-11-07 09:01:25,090 [DEBUG] idom 292 from label 422
2023-11-07 09:01:25,090 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,090 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,090 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,090 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,090 [DEBUG] replaced with: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.8, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,090 [DEBUG] on stmt: n.3 = $binop_iadd482.11
2023-11-07 09:01:25,090 [DEBUG] on stmt: jump 488
2023-11-07 09:01:25,090 [DEBUG] ==== SSA block rewrite pass on 488
2023-11-07 09:01:25,090 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,090 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-11-07 09:01:25,090 [DEBUG] on stmt: low.1 = i + $const490.1
2023-11-07 09:01:25,090 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,090 [DEBUG] ==== SSA block rewrite pass on 498
2023-11-07 09:01:25,090 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,090 [DEBUG] on stmt: low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:181)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,090 [DEBUG] on stmt: $binop_sub502.2 = high - low.3
2023-11-07 09:01:25,090 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,090 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-11-07 09:01:25,090 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,090 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,090 [DEBUG] on stmt: branch $524pred, 266, 526
2023-11-07 09:01:25,090 [DEBUG] ==== SSA block rewrite pass on 526
2023-11-07 09:01:25,090 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,090 [DEBUG] on stmt: low.4 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,090 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x282a0e3e0>)
2023-11-07 09:01:25,090 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low.4, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.4, quicksort.py:195), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,090 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-11-07 09:01:25,090 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-11-07 09:01:25,090 [DEBUG] find_def var='n' stmt=$558compare_op.9 = n > $const556.8
2023-11-07 09:01:25,090 [DEBUG] replaced with: $558compare_op.9 = n.5 > $const556.8
2023-11-07 09:01:25,091 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: branch $564pred, 206, 566
2023-11-07 09:01:25,091 [DEBUG] ==== SSA block rewrite pass on 566
2023-11-07 09:01:25,091 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28095e9d0>
2023-11-07 09:01:25,091 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-11-07 09:01:25,091 [DEBUG] on stmt: return $568return_value.1
2023-11-07 09:01:25,091 [DEBUG] Fix SSA violator on var high
2023-11-07 09:01:25,091 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,091 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,091 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x282a0dbc0>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-11-07 09:01:25,091 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: branch $64pred, 66, 70
2023-11-07 09:01:25,091 [DEBUG] ==== SSA block rewrite pass on 66
2023-11-07 09:01:25,091 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,091 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-11-07 09:01:25,091 [DEBUG] on stmt: return $68return_value.1
2023-11-07 09:01:25,091 [DEBUG] ==== SSA block rewrite pass on 70
2023-11-07 09:01:25,091 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,091 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-11-07 09:01:25,091 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-11-07 09:01:25,091 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-11-07 09:01:25,091 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-11-07 09:01:25,091 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-11-07 09:01:25,091 [DEBUG] on stmt: stack[0] = $172call.17
2023-11-07 09:01:25,091 [DEBUG] on stmt: n = const(int, 1)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-11-07 09:01:25,091 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: branch $204pred, 206, 566
2023-11-07 09:01:25,091 [DEBUG] ==== SSA block rewrite pass on 206
2023-11-07 09:01:25,091 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,091 [DEBUG] on stmt: n.4 = phi(incoming_values=[Var(n, quicksort.py:173), Var(n.5, quicksort.py:176)], incoming_blocks=[70, 526])
2023-11-07 09:01:25,091 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n.4, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,091 [DEBUG] on stmt: n.1 = $binop_isub210.2
2023-11-07 09:01:25,091 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n.1, fn=<built-in function getitem>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-11-07 09:01:25,091 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-11-07 09:01:25,091 [DEBUG] first assign: high
2023-11-07 09:01:25,091 [DEBUG] replaced with: high = $230unpack_sequence.7
2023-11-07 09:01:25,091 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-11-07 09:01:25,091 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-11-07 09:01:25,091 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: branch $264pred, 266, 526
2023-11-07 09:01:25,091 [DEBUG] ==== SSA block rewrite pass on 266
2023-11-07 09:01:25,091 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,091 [DEBUG] on stmt: n.8 = phi(incoming_values=[Var(n.6, quicksort.py:176), Var(n.1, quicksort.py:176)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,091 [DEBUG] on stmt: low.2 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,091 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $280compare_op.2 = n.8 < $268load_global.1
2023-11-07 09:01:25,091 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: branch $286pred, 292, 288
2023-11-07 09:01:25,091 [DEBUG] ==== SSA block rewrite pass on 288
2023-11-07 09:01:25,091 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,091 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,091 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:25,091 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,091 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x282a0f7e0>)
2023-11-07 09:01:25,091 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low.2, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.2, quicksort.py:181), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,091 [DEBUG] on stmt: $binop_sub324.9 = high - i
2023-11-07 09:01:25,091 [DEBUG] on stmt: $binop_sub332.12 = i - low.2
2023-11-07 09:01:25,092 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-11-07 09:01:25,092 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,092 [DEBUG] on stmt: branch $342pred, 344, 422
2023-11-07 09:01:25,092 [DEBUG] ==== SSA block rewrite pass on 344
2023-11-07 09:01:25,092 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,092 [DEBUG] on stmt: $348compare_op.2 = high > i
2023-11-07 09:01:25,092 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,092 [DEBUG] on stmt: branch $354pred, 356, 410
2023-11-07 09:01:25,092 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,092 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,092 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-11-07 09:01:25,092 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,092 [DEBUG] on stmt: stack[n.8] = $382call.6
2023-11-07 09:01:25,092 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.8, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,092 [DEBUG] on stmt: n.2 = $binop_iadd404.11
2023-11-07 09:01:25,092 [DEBUG] on stmt: jump 410
2023-11-07 09:01:25,092 [DEBUG] ==== SSA block rewrite pass on 410
2023-11-07 09:01:25,092 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,092 [DEBUG] on stmt: n.9 = phi(incoming_values=[Var(n.8, quicksort.py:176), Var(n.2, quicksort.py:187)], incoming_blocks=[344, 356])
2023-11-07 09:01:25,092 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-11-07 09:01:25,092 [DEBUG] on stmt: high = i - $const412.1
2023-11-07 09:01:25,092 [DEBUG] replaced with: high.1 = i - $const412.1
2023-11-07 09:01:25,092 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,092 [DEBUG] ==== SSA block rewrite pass on 422
2023-11-07 09:01:25,092 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,092 [DEBUG] on stmt: $426compare_op.2 = i > low.2
2023-11-07 09:01:25,092 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,092 [DEBUG] on stmt: branch $432pred, 434, 488
2023-11-07 09:01:25,092 [DEBUG] ==== SSA block rewrite pass on 434
2023-11-07 09:01:25,092 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,092 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-11-07 09:01:25,092 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low.2, $binop_sub452.5, func=$434load_global.0, args=[Var(low.2, quicksort.py:181), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,092 [DEBUG] on stmt: stack[n.8] = $460call.6
2023-11-07 09:01:25,092 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.8, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,092 [DEBUG] on stmt: n.3 = $binop_iadd482.11
2023-11-07 09:01:25,092 [DEBUG] on stmt: jump 488
2023-11-07 09:01:25,092 [DEBUG] ==== SSA block rewrite pass on 488
2023-11-07 09:01:25,092 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,092 [DEBUG] on stmt: n.7 = phi(incoming_values=[Var(n.3, quicksort.py:192), Var(n.8, quicksort.py:176)], incoming_blocks=[434, 422])
2023-11-07 09:01:25,092 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-11-07 09:01:25,092 [DEBUG] on stmt: low.1 = i + $const490.1
2023-11-07 09:01:25,092 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,092 [DEBUG] ==== SSA block rewrite pass on 498
2023-11-07 09:01:25,092 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,092 [DEBUG] on stmt: n.6 = phi(incoming_values=[Var(n.7, quicksort.py:176), Var(n.9, quicksort.py:176)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,092 [DEBUG] on stmt: low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:181)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,092 [DEBUG] on stmt: $binop_sub502.2 = high - low.3
2023-11-07 09:01:25,092 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-11-07 09:01:25,092 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,092 [DEBUG] on stmt: branch $524pred, 266, 526
2023-11-07 09:01:25,092 [DEBUG] ==== SSA block rewrite pass on 526
2023-11-07 09:01:25,092 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,092 [DEBUG] on stmt: n.5 = phi(incoming_values=[Var(n.6, quicksort.py:176), Var(n.1, quicksort.py:176)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,092 [DEBUG] on stmt: low.4 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,092 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x282a0e3e0>)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low.4, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.4, quicksort.py:195), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $558compare_op.9 = n.5 > $const556.8
2023-11-07 09:01:25,092 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,092 [DEBUG] on stmt: branch $564pred, 206, 566
2023-11-07 09:01:25,092 [DEBUG] ==== SSA block rewrite pass on 566
2023-11-07 09:01:25,092 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2808d1890>
2023-11-07 09:01:25,092 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-11-07 09:01:25,092 [DEBUG] on stmt: return $568return_value.1
2023-11-07 09:01:25,092 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {206: [<numba.core.ir.Assign object at 0x2806f3e90>],
             410: [<numba.core.ir.Assign object at 0x2808e0310>]})
2023-11-07 09:01:25,092 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,092 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,092 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x282a0dbc0>)
2023-11-07 09:01:25,092 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,092 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-11-07 09:01:25,093 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,093 [DEBUG] on stmt: branch $64pred, 66, 70
2023-11-07 09:01:25,093 [DEBUG] ==== SSA block rewrite pass on 66
2023-11-07 09:01:25,093 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,093 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-11-07 09:01:25,093 [DEBUG] on stmt: return $68return_value.1
2023-11-07 09:01:25,093 [DEBUG] ==== SSA block rewrite pass on 70
2023-11-07 09:01:25,093 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,093 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-11-07 09:01:25,093 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-11-07 09:01:25,093 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-11-07 09:01:25,093 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-11-07 09:01:25,093 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-11-07 09:01:25,093 [DEBUG] on stmt: stack[0] = $172call.17
2023-11-07 09:01:25,093 [DEBUG] on stmt: n = const(int, 1)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-11-07 09:01:25,093 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,093 [DEBUG] on stmt: branch $204pred, 206, 566
2023-11-07 09:01:25,093 [DEBUG] ==== SSA block rewrite pass on 206
2023-11-07 09:01:25,093 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,093 [DEBUG] on stmt: n.4 = phi(incoming_values=[Var(n, quicksort.py:173), Var(n.5, quicksort.py:176)], incoming_blocks=[70, 526])
2023-11-07 09:01:25,093 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n.4, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,093 [DEBUG] on stmt: n.1 = $binop_isub210.2
2023-11-07 09:01:25,093 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n.1, fn=<built-in function getitem>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-11-07 09:01:25,093 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-11-07 09:01:25,093 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-11-07 09:01:25,093 [DEBUG] find_def var='high' stmt=$binop_sub242.11 = high - low
2023-11-07 09:01:25,093 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-11-07 09:01:25,093 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,093 [DEBUG] on stmt: branch $264pred, 266, 526
2023-11-07 09:01:25,093 [DEBUG] ==== SSA block rewrite pass on 266
2023-11-07 09:01:25,093 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,093 [DEBUG] on stmt: n.8 = phi(incoming_values=[Var(n.6, quicksort.py:176), Var(n.1, quicksort.py:176)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,093 [DEBUG] on stmt: low.2 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,093 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $280compare_op.2 = n.8 < $268load_global.1
2023-11-07 09:01:25,093 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,093 [DEBUG] on stmt: branch $286pred, 292, 288
2023-11-07 09:01:25,093 [DEBUG] ==== SSA block rewrite pass on 288
2023-11-07 09:01:25,093 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,093 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,093 [DEBUG] ==== SSA block rewrite pass on 292
2023-11-07 09:01:25,093 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,093 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x282a0f7e0>)
2023-11-07 09:01:25,093 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low.2, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.2, quicksort.py:181), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,093 [DEBUG] find_def var='high' stmt=i = call $294load_deref.1(A, R, low.2, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.2, quicksort.py:181), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,093 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,093 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,093 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,093 [DEBUG] find_def_from_top label 266
2023-11-07 09:01:25,093 [DEBUG] insert phi node high.2 = phi(incoming_values=[], incoming_blocks=[]) at 266
2023-11-07 09:01:25,093 [DEBUG] find_def_from_bottom label 498
2023-11-07 09:01:25,093 [DEBUG] find_def_from_top label 498
2023-11-07 09:01:25,093 [DEBUG] insert phi node high.3 = phi(incoming_values=[], incoming_blocks=[]) at 498
2023-11-07 09:01:25,093 [DEBUG] find_def_from_bottom label 488
2023-11-07 09:01:25,093 [DEBUG] find_def_from_top label 488
2023-11-07 09:01:25,093 [DEBUG] idom 422 from label 488
2023-11-07 09:01:25,093 [DEBUG] find_def_from_bottom label 422
2023-11-07 09:01:25,093 [DEBUG] find_def_from_top label 422
2023-11-07 09:01:25,093 [DEBUG] idom 292 from label 422
2023-11-07 09:01:25,093 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,094 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,094 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,094 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,094 [DEBUG] incoming_def high.2 = phi(incoming_values=[], incoming_blocks=[])
2023-11-07 09:01:25,094 [DEBUG] find_def_from_bottom label 410
2023-11-07 09:01:25,094 [DEBUG] incoming_def high.1 = i - $const412.1
2023-11-07 09:01:25,094 [DEBUG] incoming_def high.3 = phi(incoming_values=[Var(high.2, quicksort.py:181), Var(high.1, quicksort.py:188)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,094 [DEBUG] find_def_from_bottom label 206
2023-11-07 09:01:25,094 [DEBUG] incoming_def high = $230unpack_sequence.7
2023-11-07 09:01:25,094 [DEBUG] replaced with: i = call $294load_deref.1(A, R, low.2, high.2, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.2, quicksort.py:181), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,094 [DEBUG] on stmt: $binop_sub324.9 = high - i
2023-11-07 09:01:25,094 [DEBUG] find_def var='high' stmt=$binop_sub324.9 = high - i
2023-11-07 09:01:25,094 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,094 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,094 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,094 [DEBUG] replaced with: $binop_sub324.9 = high.2 - i
2023-11-07 09:01:25,094 [DEBUG] on stmt: $binop_sub332.12 = i - low.2
2023-11-07 09:01:25,094 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-11-07 09:01:25,094 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,094 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,094 [DEBUG] on stmt: branch $342pred, 344, 422
2023-11-07 09:01:25,094 [DEBUG] ==== SSA block rewrite pass on 344
2023-11-07 09:01:25,094 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,094 [DEBUG] on stmt: $348compare_op.2 = high > i
2023-11-07 09:01:25,094 [DEBUG] find_def var='high' stmt=$348compare_op.2 = high > i
2023-11-07 09:01:25,094 [DEBUG] find_def_from_top label 344
2023-11-07 09:01:25,094 [DEBUG] idom 292 from label 344
2023-11-07 09:01:25,094 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,094 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,094 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,094 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,094 [DEBUG] replaced with: $348compare_op.2 = high.2 > i
2023-11-07 09:01:25,094 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,094 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,094 [DEBUG] on stmt: branch $354pred, 356, 410
2023-11-07 09:01:25,094 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,094 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,094 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,094 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-11-07 09:01:25,094 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-11-07 09:01:25,094 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,094 [DEBUG] find_def var='high' stmt=$382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,094 [DEBUG] find_def_from_top label 356
2023-11-07 09:01:25,094 [DEBUG] idom 344 from label 356
2023-11-07 09:01:25,094 [DEBUG] find_def_from_bottom label 344
2023-11-07 09:01:25,094 [DEBUG] find_def_from_top label 344
2023-11-07 09:01:25,094 [DEBUG] idom 292 from label 344
2023-11-07 09:01:25,094 [DEBUG] find_def_from_bottom label 292
2023-11-07 09:01:25,094 [DEBUG] find_def_from_top label 292
2023-11-07 09:01:25,094 [DEBUG] idom 266 from label 292
2023-11-07 09:01:25,094 [DEBUG] find_def_from_bottom label 266
2023-11-07 09:01:25,094 [DEBUG] replaced with: $382call.6 = call $356load_global.0($binop_add372.4, high.2, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,094 [DEBUG] on stmt: stack[n.8] = $382call.6
2023-11-07 09:01:25,094 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-11-07 09:01:25,094 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.8, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,094 [DEBUG] on stmt: n.2 = $binop_iadd404.11
2023-11-07 09:01:25,094 [DEBUG] on stmt: jump 410
2023-11-07 09:01:25,094 [DEBUG] ==== SSA block rewrite pass on 410
2023-11-07 09:01:25,094 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,094 [DEBUG] on stmt: n.9 = phi(incoming_values=[Var(n.8, quicksort.py:176), Var(n.2, quicksort.py:187)], incoming_blocks=[344, 356])
2023-11-07 09:01:25,094 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-11-07 09:01:25,094 [DEBUG] on stmt: high.1 = i - $const412.1
2023-11-07 09:01:25,094 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,094 [DEBUG] ==== SSA block rewrite pass on 422
2023-11-07 09:01:25,094 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,094 [DEBUG] on stmt: $426compare_op.2 = i > low.2
2023-11-07 09:01:25,094 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,094 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,094 [DEBUG] on stmt: branch $432pred, 434, 488
2023-11-07 09:01:25,094 [DEBUG] ==== SSA block rewrite pass on 434
2023-11-07 09:01:25,094 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,094 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-11-07 09:01:25,094 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-11-07 09:01:25,094 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-11-07 09:01:25,094 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low.2, $binop_sub452.5, func=$434load_global.0, args=[Var(low.2, quicksort.py:181), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,094 [DEBUG] on stmt: stack[n.8] = $460call.6
2023-11-07 09:01:25,094 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-11-07 09:01:25,094 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.8, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,094 [DEBUG] on stmt: n.3 = $binop_iadd482.11
2023-11-07 09:01:25,094 [DEBUG] on stmt: jump 488
2023-11-07 09:01:25,094 [DEBUG] ==== SSA block rewrite pass on 488
2023-11-07 09:01:25,094 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,094 [DEBUG] on stmt: n.7 = phi(incoming_values=[Var(n.3, quicksort.py:192), Var(n.8, quicksort.py:176)], incoming_blocks=[434, 422])
2023-11-07 09:01:25,095 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-11-07 09:01:25,095 [DEBUG] on stmt: low.1 = i + $const490.1
2023-11-07 09:01:25,095 [DEBUG] on stmt: jump 498
2023-11-07 09:01:25,095 [DEBUG] ==== SSA block rewrite pass on 498
2023-11-07 09:01:25,095 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,095 [DEBUG] on stmt: n.6 = phi(incoming_values=[Var(n.7, quicksort.py:176), Var(n.9, quicksort.py:176)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,095 [DEBUG] on stmt: low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:181)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,095 [DEBUG] on stmt: $binop_sub502.2 = high - low.3
2023-11-07 09:01:25,095 [DEBUG] find_def var='high' stmt=$binop_sub502.2 = high - low.3
2023-11-07 09:01:25,095 [DEBUG] replaced with: $binop_sub502.2 = high.3 - low.3
2023-11-07 09:01:25,095 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-11-07 09:01:25,095 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-11-07 09:01:25,095 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,095 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,095 [DEBUG] on stmt: branch $524pred, 266, 526
2023-11-07 09:01:25,095 [DEBUG] ==== SSA block rewrite pass on 526
2023-11-07 09:01:25,095 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,095 [DEBUG] on stmt: n.5 = phi(incoming_values=[Var(n.6, quicksort.py:176), Var(n.1, quicksort.py:176)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,095 [DEBUG] on stmt: low.4 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-11-07 09:01:25,095 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x282a0e3e0>)
2023-11-07 09:01:25,095 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low.4, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.4, quicksort.py:195), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,095 [DEBUG] find_def var='high' stmt=$542call.6 = call $528load_deref.1(A, R, low.4, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.4, quicksort.py:195), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,095 [DEBUG] find_def_from_top label 526
2023-11-07 09:01:25,095 [DEBUG] insert phi node high.4 = phi(incoming_values=[], incoming_blocks=[]) at 526
2023-11-07 09:01:25,095 [DEBUG] find_def_from_bottom label 498
2023-11-07 09:01:25,095 [DEBUG] incoming_def high.3 = phi(incoming_values=[Var(high.2, quicksort.py:181), Var(high.1, quicksort.py:188)], incoming_blocks=[488, 410])
2023-11-07 09:01:25,095 [DEBUG] find_def_from_bottom label 206
2023-11-07 09:01:25,095 [DEBUG] incoming_def high = $230unpack_sequence.7
2023-11-07 09:01:25,095 [DEBUG] replaced with: $542call.6 = call $528load_deref.1(A, R, low.4, high.4, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.4, quicksort.py:195), Var(high.4, quicksort.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,095 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-11-07 09:01:25,095 [DEBUG] on stmt: $558compare_op.9 = n.5 > $const556.8
2023-11-07 09:01:25,095 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,095 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,095 [DEBUG] on stmt: branch $564pred, 206, 566
2023-11-07 09:01:25,095 [DEBUG] ==== SSA block rewrite pass on 566
2023-11-07 09:01:25,095 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28097ea90>
2023-11-07 09:01:25,095 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-11-07 09:01:25,095 [DEBUG] on stmt: return $568return_value.1
2023-11-07 09:01:25,098 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=41)
           2	RESUME(arg=0, lineno=41)
           4	LOAD_GLOBAL(arg=1, lineno=43)
          16	LOAD_ATTR(arg=1, lineno=43)
          26	LOAD_FAST(arg=0, lineno=43)
          28	LOAD_ATTR(arg=2, lineno=43)
          38	PRECALL(arg=1, lineno=43)
          42	CALL(arg=1, lineno=43)
          52	RETURN_VALUE(arg=None, lineno=43)
2023-11-07 09:01:25,098 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,098 [DEBUG] stack: []
2023-11-07 09:01:25,098 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,098 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=41)
2023-11-07 09:01:25,098 [DEBUG] stack []
2023-11-07 09:01:25,098 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=41)
2023-11-07 09:01:25,098 [DEBUG] stack []
2023-11-07 09:01:25,098 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=43)
2023-11-07 09:01:25,098 [DEBUG] stack []
2023-11-07 09:01:25,098 [DEBUG] dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=43)
2023-11-07 09:01:25,098 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:25,098 [DEBUG] dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=43)
2023-11-07 09:01:25,098 [DEBUG] stack ['$null$4.1', '$16load_attr.2']
2023-11-07 09:01:25,098 [DEBUG] dispatch pc=28, inst=LOAD_ATTR(arg=2, lineno=43)
2023-11-07 09:01:25,098 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$A26.3']
2023-11-07 09:01:25,098 [DEBUG] dispatch pc=38, inst=PRECALL(arg=1, lineno=43)
2023-11-07 09:01:25,098 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$28load_attr.4']
2023-11-07 09:01:25,098 [DEBUG] dispatch pc=42, inst=CALL(arg=1, lineno=43)
2023-11-07 09:01:25,098 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$28load_attr.4']
2023-11-07 09:01:25,098 [DEBUG] dispatch pc=52, inst=RETURN_VALUE(arg=None, lineno=43)
2023-11-07 09:01:25,098 [DEBUG] stack ['$42call.5']
2023-11-07 09:01:25,098 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,098 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,098 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:25,098 [DEBUG] defmap: {}
2023-11-07 09:01:25,099 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,099 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,099 [DEBUG] keep phismap: {}
2023-11-07 09:01:25,099 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:25,099 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,099 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$A26.3'}), (28, {'item': '$A26.3', 'res': '$28load_attr.4'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {'func': '$16load_attr.2', 'args': ['$28load_attr.4'], 'kw_names': None, 'res': '$42call.5'}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'retval': '$42call.5', 'castval': '$52return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,099 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=arange) ['$16load_attr.2', '$4load_global.0']
    $28load_attr.4 = getattr(value=A, attr=size) ['$28load_attr.4', 'A']
    $42call.5 = call $16load_attr.2($28load_attr.4, func=$16load_attr.2, args=[Var($28load_attr.4, quicksort.py:43)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_attr.2', '$28load_attr.4', '$42call.5']
    $52return_value.6 = cast(value=$42call.5) ['$42call.5', '$52return_value.6']
    return $52return_value.6                 ['$52return_value.6']

2023-11-07 09:01:25,103 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,103 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2809c7450>
2023-11-07 09:01:25,103 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,103 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,103 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=arange)
2023-11-07 09:01:25,103 [DEBUG] on stmt: $28load_attr.4 = getattr(value=A, attr=size)
2023-11-07 09:01:25,103 [DEBUG] on stmt: $42call.5 = call $16load_attr.2($28load_attr.4, func=$16load_attr.2, args=[Var($28load_attr.4, quicksort.py:43)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,103 [DEBUG] on stmt: $52return_value.6 = cast(value=$42call.5)
2023-11-07 09:01:25,103 [DEBUG] on stmt: return $52return_value.6
2023-11-07 09:01:25,103 [DEBUG] defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [<numba.core.ir.Assign object at 0x2809c4c90>],
             '$28load_attr.4': [<numba.core.ir.Assign object at 0x2809c6050>],
             '$42call.5': [<numba.core.ir.Assign object at 0x2809c7b10>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x2809c7890>],
             '$52return_value.6': [<numba.core.ir.Assign object at 0x2809c5410>],
             'A': [<numba.core.ir.Assign object at 0x2809c5910>]})
2023-11-07 09:01:25,103 [DEBUG] SSA violators set()
2023-11-07 09:01:25,105 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4603)
           2	COPY_FREE_VARS(arg=5, lineno=4603)
           4	RESUME(arg=0, lineno=4603)
           6	LOAD_DEREF(arg=17, lineno=4605)
           8	POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4605)
          10	LOAD_DEREF(arg=17, lineno=4605)
          12	JUMP_FORWARD(arg=1, lineno=4605)
>         14	LOAD_FAST(arg=0, lineno=4605)
>         16	STORE_FAST(arg=4, lineno=4605)
          18	LOAD_DEREF(arg=19, lineno=4606)
          20	POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4606)
          22	LOAD_DEREF(arg=19, lineno=4606)
          24	JUMP_FORWARD(arg=1, lineno=4606)
>         26	LOAD_FAST(arg=1, lineno=4606)
>         28	STORE_FAST(arg=5, lineno=4606)
          30	LOAD_DEREF(arg=18, lineno=4607)
          32	POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4607)
          34	LOAD_DEREF(arg=18, lineno=4607)
          36	JUMP_FORWARD(arg=1, lineno=4607)
>         38	LOAD_FAST(arg=2, lineno=4607)
>         40	STORE_FAST(arg=6, lineno=4607)
          42	LOAD_FAST(arg=6, lineno=4609)
          44	POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4609)
          46	LOAD_FAST(arg=6, lineno=4609)
          48	JUMP_FORWARD(arg=1, lineno=4609)
>         50	LOAD_CONST(arg=1, lineno=4609)
>         52	STORE_FAST(arg=7, lineno=4609)
          54	LOAD_FAST(arg=5, lineno=4610)
          56	POP_JUMP_FORWARD_IF_NOT_NONE(arg=5, lineno=4610)
          58	LOAD_CONST(arg=2, lineno=4611)
          60	LOAD_FAST(arg=4, lineno=4611)
          62	STORE_FAST(arg=9, lineno=4611)
          64	STORE_FAST(arg=8, lineno=4611)
          66	JUMP_FORWARD(arg=4, lineno=4611)
>         68	LOAD_FAST(arg=4, lineno=4613)
          70	LOAD_FAST(arg=5, lineno=4613)
          72	STORE_FAST(arg=9, lineno=4613)
          74	STORE_FAST(arg=8, lineno=4613)
>         76	LOAD_FAST(arg=7, lineno=4615)
          78	LOAD_CONST(arg=2, lineno=4615)
          80	COMPARE_OP(arg=2, lineno=4615)
          86	POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=4615)
          88	LOAD_GLOBAL(arg=1, lineno=4616)
         100	LOAD_CONST(arg=3, lineno=4616)
         102	PRECALL(arg=1, lineno=4616)
         106	CALL(arg=1, lineno=4616)
         116	RAISE_VARARGS(arg=1, lineno=4616)
>        118	LOAD_FAST(arg=9, lineno=4618)
         120	LOAD_FAST(arg=8, lineno=4618)
         122	BINARY_OP(arg=10, lineno=4618)
         126	LOAD_FAST(arg=7, lineno=4618)
         128	BINARY_OP(arg=11, lineno=4618)
         132	STORE_FAST(arg=10, lineno=4618)
         134	LOAD_GLOBAL(arg=3, lineno=4619)
         146	LOAD_GLOBAL(arg=5, lineno=4619)
         158	LOAD_ATTR(arg=3, lineno=4619)
         168	LOAD_FAST(arg=10, lineno=4619)
         170	LOAD_ATTR(arg=4, lineno=4619)
         180	PRECALL(arg=1, lineno=4619)
         184	CALL(arg=1, lineno=4619)
         194	PRECALL(arg=1, lineno=4619)
         198	CALL(arg=1, lineno=4619)
         208	STORE_FAST(arg=11, lineno=4619)
         210	LOAD_DEREF(arg=21, lineno=4622)
         212	LOAD_CONST(arg=4, lineno=4622)
         214	IS_OP(arg=0, lineno=4622)
         216	POP_JUMP_FORWARD_IF_FALSE(arg=69, lineno=4622)
         218	LOAD_GLOBAL(arg=3, lineno=4623)
         230	LOAD_GLOBAL(arg=5, lineno=4623)
         242	LOAD_ATTR(arg=3, lineno=4623)
         252	LOAD_FAST(arg=10, lineno=4623)
         254	LOAD_ATTR(arg=5, lineno=4623)
         264	PRECALL(arg=1, lineno=4623)
         268	CALL(arg=1, lineno=4623)
         278	PRECALL(arg=1, lineno=4623)
         282	CALL(arg=1, lineno=4623)
         292	STORE_FAST(arg=12, lineno=4623)
         294	LOAD_GLOBAL(arg=13, lineno=4624)
         306	LOAD_GLOBAL(arg=15, lineno=4624)
         318	LOAD_FAST(arg=12, lineno=4624)
         320	LOAD_FAST(arg=11, lineno=4624)
         322	PRECALL(arg=2, lineno=4624)
         326	CALL(arg=2, lineno=4624)
         336	LOAD_CONST(arg=2, lineno=4624)
         338	PRECALL(arg=2, lineno=4624)
         342	CALL(arg=2, lineno=4624)
         352	STORE_FAST(arg=13, lineno=4624)
         354	JUMP_FORWARD(arg=16, lineno=4624)
>        356	LOAD_GLOBAL(arg=13, lineno=4626)
         368	LOAD_FAST(arg=11, lineno=4626)
         370	LOAD_CONST(arg=2, lineno=4626)
         372	PRECALL(arg=2, lineno=4626)
         376	CALL(arg=2, lineno=4626)
         386	STORE_FAST(arg=13, lineno=4626)
>        388	LOAD_GLOBAL(arg=17, lineno=4627)
         400	LOAD_ATTR(arg=9, lineno=4627)
         410	LOAD_FAST(arg=13, lineno=4627)
         412	LOAD_DEREF(arg=20, lineno=4627)
         414	PRECALL(arg=2, lineno=4627)
         418	CALL(arg=2, lineno=4627)
         428	STORE_FAST(arg=14, lineno=4627)
         430	LOAD_FAST(arg=8, lineno=4628)
         432	STORE_FAST(arg=15, lineno=4628)
         434	LOAD_GLOBAL(arg=21, lineno=4629)
         446	LOAD_FAST(arg=13, lineno=4629)
         448	PRECALL(arg=1, lineno=4629)
         452	CALL(arg=1, lineno=4629)
         462	GET_ITER(arg=None, lineno=4629)
>        464	FOR_ITER(arg=13, lineno=4629)
         466	STORE_FAST(arg=16, lineno=4629)
         468	LOAD_FAST(arg=15, lineno=4630)
         470	LOAD_FAST(arg=16, lineno=4630)
         472	LOAD_FAST(arg=7, lineno=4630)
         474	BINARY_OP(arg=5, lineno=4630)
         478	BINARY_OP(arg=0, lineno=4630)
         482	LOAD_FAST(arg=14, lineno=4630)
         484	LOAD_FAST(arg=16, lineno=4630)
         486	STORE_SUBSCR(arg=None, lineno=4630)
         490	JUMP_BACKWARD(arg=14, lineno=4630)
>        492	LOAD_FAST(arg=14, lineno=4631)
         494	RETURN_VALUE(arg=None, lineno=4631)
2023-11-07 09:01:25,105 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,105 [DEBUG] stack: []
2023-11-07 09:01:25,105 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4603)
2023-11-07 09:01:25,105 [DEBUG] stack []
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=5, lineno=4603)
2023-11-07 09:01:25,105 [DEBUG] stack []
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=4603)
2023-11-07 09:01:25,105 [DEBUG] stack []
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=6, inst=LOAD_DEREF(arg=17, lineno=4605)
2023-11-07 09:01:25,105 [DEBUG] stack []
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=8, inst=POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4605)
2023-11-07 09:01:25,105 [DEBUG] stack ['$6load_deref.0']
2023-11-07 09:01:25,105 [DEBUG] end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,105 [DEBUG] pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
2023-11-07 09:01:25,105 [DEBUG] stack: []
2023-11-07 09:01:25,105 [DEBUG] state.pc_initial: State(pc_initial=10 nstack_initial=0)
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=10, inst=LOAD_DEREF(arg=17, lineno=4605)
2023-11-07 09:01:25,105 [DEBUG] stack []
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=12, inst=JUMP_FORWARD(arg=1, lineno=4605)
2023-11-07 09:01:25,105 [DEBUG] stack ['$10load_deref.0']
2023-11-07 09:01:25,105 [DEBUG] end state. edges=[Edge(pc=16, stack=('$10load_deref.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,105 [DEBUG] pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=16 nstack_initial=1)])
2023-11-07 09:01:25,105 [DEBUG] stack: []
2023-11-07 09:01:25,105 [DEBUG] state.pc_initial: State(pc_initial=14 nstack_initial=0)
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=4605)
2023-11-07 09:01:25,105 [DEBUG] stack []
2023-11-07 09:01:25,105 [DEBUG] end state. edges=[Edge(pc=16, stack=('$start14.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,105 [DEBUG] pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=16 nstack_initial=1)])
2023-11-07 09:01:25,105 [DEBUG] stack: ['$phi16.0']
2023-11-07 09:01:25,105 [DEBUG] state.pc_initial: State(pc_initial=16 nstack_initial=1)
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=16, inst=STORE_FAST(arg=4, lineno=4605)
2023-11-07 09:01:25,105 [DEBUG] stack ['$phi16.0']
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=18, inst=LOAD_DEREF(arg=19, lineno=4606)
2023-11-07 09:01:25,105 [DEBUG] stack []
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=20, inst=POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4606)
2023-11-07 09:01:25,105 [DEBUG] stack ['$18load_deref.1']
2023-11-07 09:01:25,105 [DEBUG] end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,105 [DEBUG] pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
2023-11-07 09:01:25,105 [DEBUG] pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
2023-11-07 09:01:25,105 [DEBUG] stack: []
2023-11-07 09:01:25,105 [DEBUG] state.pc_initial: State(pc_initial=22 nstack_initial=0)
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=22, inst=LOAD_DEREF(arg=19, lineno=4606)
2023-11-07 09:01:25,105 [DEBUG] stack []
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=24, inst=JUMP_FORWARD(arg=1, lineno=4606)
2023-11-07 09:01:25,105 [DEBUG] stack ['$22load_deref.0']
2023-11-07 09:01:25,105 [DEBUG] end state. edges=[Edge(pc=28, stack=('$22load_deref.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,105 [DEBUG] pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=28 nstack_initial=1)])
2023-11-07 09:01:25,105 [DEBUG] stack: []
2023-11-07 09:01:25,105 [DEBUG] state.pc_initial: State(pc_initial=26 nstack_initial=0)
2023-11-07 09:01:25,105 [DEBUG] dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=4606)
2023-11-07 09:01:25,105 [DEBUG] stack []
2023-11-07 09:01:25,105 [DEBUG] end state. edges=[Edge(pc=28, stack=('$stop26.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=28 nstack_initial=1)])
2023-11-07 09:01:25,106 [DEBUG] stack: ['$phi28.0']
2023-11-07 09:01:25,106 [DEBUG] state.pc_initial: State(pc_initial=28 nstack_initial=1)
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=28, inst=STORE_FAST(arg=5, lineno=4606)
2023-11-07 09:01:25,106 [DEBUG] stack ['$phi28.0']
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=30, inst=LOAD_DEREF(arg=18, lineno=4607)
2023-11-07 09:01:25,106 [DEBUG] stack []
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=32, inst=POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4607)
2023-11-07 09:01:25,106 [DEBUG] stack ['$30load_deref.1']
2023-11-07 09:01:25,106 [DEBUG] end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
2023-11-07 09:01:25,106 [DEBUG] stack: []
2023-11-07 09:01:25,106 [DEBUG] state.pc_initial: State(pc_initial=34 nstack_initial=0)
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=34, inst=LOAD_DEREF(arg=18, lineno=4607)
2023-11-07 09:01:25,106 [DEBUG] stack []
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=36, inst=JUMP_FORWARD(arg=1, lineno=4607)
2023-11-07 09:01:25,106 [DEBUG] stack ['$34load_deref.0']
2023-11-07 09:01:25,106 [DEBUG] end state. edges=[Edge(pc=40, stack=('$34load_deref.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=40 nstack_initial=1)])
2023-11-07 09:01:25,106 [DEBUG] stack: []
2023-11-07 09:01:25,106 [DEBUG] state.pc_initial: State(pc_initial=38 nstack_initial=0)
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=4607)
2023-11-07 09:01:25,106 [DEBUG] stack []
2023-11-07 09:01:25,106 [DEBUG] end state. edges=[Edge(pc=40, stack=('$step38.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=40 nstack_initial=1), State(pc_initial=40 nstack_initial=1)])
2023-11-07 09:01:25,106 [DEBUG] stack: ['$phi40.0']
2023-11-07 09:01:25,106 [DEBUG] state.pc_initial: State(pc_initial=40 nstack_initial=1)
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=40, inst=STORE_FAST(arg=6, lineno=4607)
2023-11-07 09:01:25,106 [DEBUG] stack ['$phi40.0']
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=42, inst=LOAD_FAST(arg=6, lineno=4609)
2023-11-07 09:01:25,106 [DEBUG] stack []
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=44, inst=POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4609)
2023-11-07 09:01:25,106 [DEBUG] stack ['$lit_step42.1']
2023-11-07 09:01:25,106 [DEBUG] end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=40 nstack_initial=1), State(pc_initial=46 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-11-07 09:01:25,106 [DEBUG] stack: []
2023-11-07 09:01:25,106 [DEBUG] state.pc_initial: State(pc_initial=46 nstack_initial=0)
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=46, inst=LOAD_FAST(arg=6, lineno=4609)
2023-11-07 09:01:25,106 [DEBUG] stack []
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=48, inst=JUMP_FORWARD(arg=1, lineno=4609)
2023-11-07 09:01:25,106 [DEBUG] stack ['$lit_step46.0']
2023-11-07 09:01:25,106 [DEBUG] end state. edges=[Edge(pc=52, stack=('$lit_step46.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=52 nstack_initial=1)])
2023-11-07 09:01:25,106 [DEBUG] stack: []
2023-11-07 09:01:25,106 [DEBUG] state.pc_initial: State(pc_initial=50 nstack_initial=0)
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=4609)
2023-11-07 09:01:25,106 [DEBUG] stack []
2023-11-07 09:01:25,106 [DEBUG] end state. edges=[Edge(pc=52, stack=('$const50.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=52 nstack_initial=1)])
2023-11-07 09:01:25,106 [DEBUG] stack: ['$phi52.0']
2023-11-07 09:01:25,106 [DEBUG] state.pc_initial: State(pc_initial=52 nstack_initial=1)
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=52, inst=STORE_FAST(arg=7, lineno=4609)
2023-11-07 09:01:25,106 [DEBUG] stack ['$phi52.0']
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=54, inst=LOAD_FAST(arg=5, lineno=4610)
2023-11-07 09:01:25,106 [DEBUG] stack []
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=56, inst=POP_JUMP_FORWARD_IF_NOT_NONE(arg=5, lineno=4610)
2023-11-07 09:01:25,106 [DEBUG] stack ['$lit_stop54.1']
2023-11-07 09:01:25,106 [DEBUG] end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=58 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2023-11-07 09:01:25,106 [DEBUG] stack: []
2023-11-07 09:01:25,106 [DEBUG] state.pc_initial: State(pc_initial=58 nstack_initial=0)
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=4611)
2023-11-07 09:01:25,106 [DEBUG] stack []
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=4611)
2023-11-07 09:01:25,106 [DEBUG] stack ['$const58.0']
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=62, inst=STORE_FAST(arg=9, lineno=4611)
2023-11-07 09:01:25,106 [DEBUG] stack ['$const58.0', '$lit_start60.1']
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=64, inst=STORE_FAST(arg=8, lineno=4611)
2023-11-07 09:01:25,106 [DEBUG] stack ['$const58.0']
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=66, inst=JUMP_FORWARD(arg=4, lineno=4611)
2023-11-07 09:01:25,106 [DEBUG] stack []
2023-11-07 09:01:25,106 [DEBUG] end state. edges=[Edge(pc=76, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2023-11-07 09:01:25,106 [DEBUG] stack: []
2023-11-07 09:01:25,106 [DEBUG] state.pc_initial: State(pc_initial=68 nstack_initial=0)
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=4613)
2023-11-07 09:01:25,106 [DEBUG] stack []
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=70, inst=LOAD_FAST(arg=5, lineno=4613)
2023-11-07 09:01:25,106 [DEBUG] stack ['$lit_start68.0']
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=72, inst=STORE_FAST(arg=9, lineno=4613)
2023-11-07 09:01:25,106 [DEBUG] stack ['$lit_start68.0', '$lit_stop70.1']
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=74, inst=STORE_FAST(arg=8, lineno=4613)
2023-11-07 09:01:25,106 [DEBUG] stack ['$lit_start68.0']
2023-11-07 09:01:25,106 [DEBUG] end state. edges=[Edge(pc=76, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,106 [DEBUG] pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2023-11-07 09:01:25,106 [DEBUG] stack: []
2023-11-07 09:01:25,106 [DEBUG] state.pc_initial: State(pc_initial=76 nstack_initial=0)
2023-11-07 09:01:25,106 [DEBUG] dispatch pc=76, inst=LOAD_FAST(arg=7, lineno=4615)
2023-11-07 09:01:25,107 [DEBUG] stack []
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=4615)
2023-11-07 09:01:25,107 [DEBUG] stack ['$_step76.0']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=80, inst=COMPARE_OP(arg=2, lineno=4615)
2023-11-07 09:01:25,107 [DEBUG] stack ['$_step76.0', '$const78.1']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=86, inst=POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=4615)
2023-11-07 09:01:25,107 [DEBUG] stack ['$80compare_op.2']
2023-11-07 09:01:25,107 [DEBUG] end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,107 [DEBUG] pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
2023-11-07 09:01:25,107 [DEBUG] pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
2023-11-07 09:01:25,107 [DEBUG] stack: []
2023-11-07 09:01:25,107 [DEBUG] state.pc_initial: State(pc_initial=88 nstack_initial=0)
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=4616)
2023-11-07 09:01:25,107 [DEBUG] stack []
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4616)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$88.1', '$88load_global.0']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=102, inst=PRECALL(arg=1, lineno=4616)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$88.1', '$88load_global.0', '$const100.2']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=106, inst=CALL(arg=1, lineno=4616)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$88.1', '$88load_global.0', '$const100.2']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=116, inst=RAISE_VARARGS(arg=1, lineno=4616)
2023-11-07 09:01:25,107 [DEBUG] stack ['$106call.3']
2023-11-07 09:01:25,107 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,107 [DEBUG] pending: deque([State(pc_initial=118 nstack_initial=0)])
2023-11-07 09:01:25,107 [DEBUG] stack: []
2023-11-07 09:01:25,107 [DEBUG] state.pc_initial: State(pc_initial=118 nstack_initial=0)
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=118, inst=LOAD_FAST(arg=9, lineno=4618)
2023-11-07 09:01:25,107 [DEBUG] stack []
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=4618)
2023-11-07 09:01:25,107 [DEBUG] stack ['$_stop118.0']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=122, inst=BINARY_OP(arg=10, lineno=4618)
2023-11-07 09:01:25,107 [DEBUG] stack ['$_stop118.0', '$_start120.1']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=126, inst=LOAD_FAST(arg=7, lineno=4618)
2023-11-07 09:01:25,107 [DEBUG] stack ['$binop_sub122.2']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=128, inst=BINARY_OP(arg=11, lineno=4618)
2023-11-07 09:01:25,107 [DEBUG] stack ['$binop_sub122.2', '$_step126.3']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=132, inst=STORE_FAST(arg=10, lineno=4618)
2023-11-07 09:01:25,107 [DEBUG] stack ['$binop_truediv128.4']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=134, inst=LOAD_GLOBAL(arg=3, lineno=4619)
2023-11-07 09:01:25,107 [DEBUG] stack []
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=146, inst=LOAD_GLOBAL(arg=5, lineno=4619)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$134.6', '$134load_global.5']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=158, inst=LOAD_ATTR(arg=3, lineno=4619)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$null$146.8', '$146load_global.7']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=168, inst=LOAD_FAST(arg=10, lineno=4619)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$null$146.8', '$158load_attr.9']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=170, inst=LOAD_ATTR(arg=4, lineno=4619)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$null$146.8', '$158load_attr.9', '$nitems_c168.10']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=180, inst=PRECALL(arg=1, lineno=4619)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$null$146.8', '$158load_attr.9', '$170load_attr.11']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=184, inst=CALL(arg=1, lineno=4619)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$null$146.8', '$158load_attr.9', '$170load_attr.11']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=194, inst=PRECALL(arg=1, lineno=4619)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$184call.12']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=198, inst=CALL(arg=1, lineno=4619)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$184call.12']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=208, inst=STORE_FAST(arg=11, lineno=4619)
2023-11-07 09:01:25,107 [DEBUG] stack ['$198call.13']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=210, inst=LOAD_DEREF(arg=21, lineno=4622)
2023-11-07 09:01:25,107 [DEBUG] stack []
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=212, inst=LOAD_CONST(arg=4, lineno=4622)
2023-11-07 09:01:25,107 [DEBUG] stack ['$210load_deref.14']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=214, inst=IS_OP(arg=0, lineno=4622)
2023-11-07 09:01:25,107 [DEBUG] stack ['$210load_deref.14', '$const212.15']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=216, inst=POP_JUMP_FORWARD_IF_FALSE(arg=69, lineno=4622)
2023-11-07 09:01:25,107 [DEBUG] stack ['$214is_op.16']
2023-11-07 09:01:25,107 [DEBUG] end state. edges=[Edge(pc=218, stack=(), blockstack=(), npush=0), Edge(pc=356, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,107 [DEBUG] pending: deque([State(pc_initial=218 nstack_initial=0), State(pc_initial=356 nstack_initial=0)])
2023-11-07 09:01:25,107 [DEBUG] stack: []
2023-11-07 09:01:25,107 [DEBUG] state.pc_initial: State(pc_initial=218 nstack_initial=0)
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=218, inst=LOAD_GLOBAL(arg=3, lineno=4623)
2023-11-07 09:01:25,107 [DEBUG] stack []
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=230, inst=LOAD_GLOBAL(arg=5, lineno=4623)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$218.1', '$218load_global.0']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=242, inst=LOAD_ATTR(arg=3, lineno=4623)
2023-11-07 09:01:25,107 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$null$230.3', '$230load_global.2']
2023-11-07 09:01:25,107 [DEBUG] dispatch pc=252, inst=LOAD_FAST(arg=10, lineno=4623)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$null$230.3', '$242load_attr.4']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=254, inst=LOAD_ATTR(arg=5, lineno=4623)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$null$230.3', '$242load_attr.4', '$nitems_c252.5']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=264, inst=PRECALL(arg=1, lineno=4623)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$null$230.3', '$242load_attr.4', '$254load_attr.6']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=268, inst=CALL(arg=1, lineno=4623)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$null$230.3', '$242load_attr.4', '$254load_attr.6']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=278, inst=PRECALL(arg=1, lineno=4623)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$268call.7']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=282, inst=CALL(arg=1, lineno=4623)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$268call.7']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=292, inst=STORE_FAST(arg=12, lineno=4623)
2023-11-07 09:01:25,108 [DEBUG] stack ['$282call.8']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=294, inst=LOAD_GLOBAL(arg=13, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack []
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=306, inst=LOAD_GLOBAL(arg=15, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$294.10', '$294load_global.9']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=318, inst=LOAD_FAST(arg=12, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$null$306.12', '$306load_global.11']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=320, inst=LOAD_FAST(arg=11, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$null$306.12', '$306load_global.11', '$nitems_i318.13']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=322, inst=PRECALL(arg=2, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$null$306.12', '$306load_global.11', '$nitems_i318.13', '$nitems_r320.14']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=326, inst=CALL(arg=2, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$null$306.12', '$306load_global.11', '$nitems_i318.13', '$nitems_r320.14']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=336, inst=LOAD_CONST(arg=2, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$326call.15']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=338, inst=PRECALL(arg=2, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$326call.15', '$const336.16']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=342, inst=CALL(arg=2, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$326call.15', '$const336.16']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=352, inst=STORE_FAST(arg=13, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack ['$342call.17']
2023-11-07 09:01:25,108 [DEBUG] dispatch pc=354, inst=JUMP_FORWARD(arg=16, lineno=4624)
2023-11-07 09:01:25,108 [DEBUG] stack []
2023-11-07 09:01:25,108 [DEBUG] end state. edges=[Edge(pc=388, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,109 [DEBUG] pending: deque([State(pc_initial=356 nstack_initial=0), State(pc_initial=388 nstack_initial=0)])
2023-11-07 09:01:25,109 [DEBUG] stack: []
2023-11-07 09:01:25,109 [DEBUG] state.pc_initial: State(pc_initial=356 nstack_initial=0)
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=356, inst=LOAD_GLOBAL(arg=13, lineno=4626)
2023-11-07 09:01:25,109 [DEBUG] stack []
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=368, inst=LOAD_FAST(arg=11, lineno=4626)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$356.1', '$356load_global.0']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=370, inst=LOAD_CONST(arg=2, lineno=4626)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$nitems_r368.2']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=372, inst=PRECALL(arg=2, lineno=4626)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$nitems_r368.2', '$const370.3']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=376, inst=CALL(arg=2, lineno=4626)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$nitems_r368.2', '$const370.3']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=386, inst=STORE_FAST(arg=13, lineno=4626)
2023-11-07 09:01:25,109 [DEBUG] stack ['$376call.4']
2023-11-07 09:01:25,109 [DEBUG] end state. edges=[Edge(pc=388, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,109 [DEBUG] pending: deque([State(pc_initial=388 nstack_initial=0), State(pc_initial=388 nstack_initial=0)])
2023-11-07 09:01:25,109 [DEBUG] stack: []
2023-11-07 09:01:25,109 [DEBUG] state.pc_initial: State(pc_initial=388 nstack_initial=0)
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=388, inst=LOAD_GLOBAL(arg=17, lineno=4627)
2023-11-07 09:01:25,109 [DEBUG] stack []
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=400, inst=LOAD_ATTR(arg=9, lineno=4627)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$388.1', '$388load_global.0']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=410, inst=LOAD_FAST(arg=13, lineno=4627)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$388.1', '$400load_attr.2']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=412, inst=LOAD_DEREF(arg=20, lineno=4627)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$388.1', '$400load_attr.2', '$nitems410.3']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=414, inst=PRECALL(arg=2, lineno=4627)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$388.1', '$400load_attr.2', '$nitems410.3', '$412load_deref.4']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=418, inst=CALL(arg=2, lineno=4627)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$388.1', '$400load_attr.2', '$nitems410.3', '$412load_deref.4']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=428, inst=STORE_FAST(arg=14, lineno=4627)
2023-11-07 09:01:25,109 [DEBUG] stack ['$418call.5']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=430, inst=LOAD_FAST(arg=8, lineno=4628)
2023-11-07 09:01:25,109 [DEBUG] stack []
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=432, inst=STORE_FAST(arg=15, lineno=4628)
2023-11-07 09:01:25,109 [DEBUG] stack ['$_start430.6']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=434, inst=LOAD_GLOBAL(arg=21, lineno=4629)
2023-11-07 09:01:25,109 [DEBUG] stack []
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=446, inst=LOAD_FAST(arg=13, lineno=4629)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$434.8', '$434load_global.7']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=448, inst=PRECALL(arg=1, lineno=4629)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$434.8', '$434load_global.7', '$nitems446.9']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=452, inst=CALL(arg=1, lineno=4629)
2023-11-07 09:01:25,109 [DEBUG] stack ['$null$434.8', '$434load_global.7', '$nitems446.9']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=462, inst=GET_ITER(arg=None, lineno=4629)
2023-11-07 09:01:25,109 [DEBUG] stack ['$452call.10']
2023-11-07 09:01:25,109 [DEBUG] end state. edges=[Edge(pc=464, stack=('$462get_iter.11',), blockstack=(), npush=0)]
2023-11-07 09:01:25,109 [DEBUG] pending: deque([State(pc_initial=388 nstack_initial=0), State(pc_initial=464 nstack_initial=1)])
2023-11-07 09:01:25,109 [DEBUG] pending: deque([State(pc_initial=464 nstack_initial=1)])
2023-11-07 09:01:25,109 [DEBUG] stack: ['$phi464.0']
2023-11-07 09:01:25,109 [DEBUG] state.pc_initial: State(pc_initial=464 nstack_initial=1)
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=464, inst=FOR_ITER(arg=13, lineno=4629)
2023-11-07 09:01:25,109 [DEBUG] stack ['$phi464.0']
2023-11-07 09:01:25,109 [DEBUG] end state. edges=[Edge(pc=492, stack=(), blockstack=(), npush=0), Edge(pc=466, stack=('$phi464.0', '$464for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:25,109 [DEBUG] pending: deque([State(pc_initial=492 nstack_initial=0), State(pc_initial=466 nstack_initial=2)])
2023-11-07 09:01:25,109 [DEBUG] stack: []
2023-11-07 09:01:25,109 [DEBUG] state.pc_initial: State(pc_initial=492 nstack_initial=0)
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=492, inst=LOAD_FAST(arg=14, lineno=4631)
2023-11-07 09:01:25,109 [DEBUG] stack []
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=494, inst=RETURN_VALUE(arg=None, lineno=4631)
2023-11-07 09:01:25,109 [DEBUG] stack ['$arr492.0']
2023-11-07 09:01:25,109 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,109 [DEBUG] pending: deque([State(pc_initial=466 nstack_initial=2)])
2023-11-07 09:01:25,109 [DEBUG] stack: ['$phi466.0', '$phi466.1']
2023-11-07 09:01:25,109 [DEBUG] state.pc_initial: State(pc_initial=466 nstack_initial=2)
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=466, inst=STORE_FAST(arg=16, lineno=4629)
2023-11-07 09:01:25,109 [DEBUG] stack ['$phi466.0', '$phi466.1']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=468, inst=LOAD_FAST(arg=15, lineno=4630)
2023-11-07 09:01:25,109 [DEBUG] stack ['$phi466.0']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=470, inst=LOAD_FAST(arg=16, lineno=4630)
2023-11-07 09:01:25,109 [DEBUG] stack ['$phi466.0', '$val468.2']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=472, inst=LOAD_FAST(arg=7, lineno=4630)
2023-11-07 09:01:25,109 [DEBUG] stack ['$phi466.0', '$val468.2', '$i470.3']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=474, inst=BINARY_OP(arg=5, lineno=4630)
2023-11-07 09:01:25,109 [DEBUG] stack ['$phi466.0', '$val468.2', '$i470.3', '$_step472.4']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=478, inst=BINARY_OP(arg=0, lineno=4630)
2023-11-07 09:01:25,109 [DEBUG] stack ['$phi466.0', '$val468.2', '$binop_mul474.5']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=482, inst=LOAD_FAST(arg=14, lineno=4630)
2023-11-07 09:01:25,109 [DEBUG] stack ['$phi466.0', '$binop_add478.6']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=484, inst=LOAD_FAST(arg=16, lineno=4630)
2023-11-07 09:01:25,109 [DEBUG] stack ['$phi466.0', '$binop_add478.6', '$arr482.7']
2023-11-07 09:01:25,109 [DEBUG] dispatch pc=486, inst=STORE_SUBSCR(arg=None, lineno=4630)
2023-11-07 09:01:25,109 [DEBUG] stack ['$phi466.0', '$binop_add478.6', '$arr482.7', '$i484.8']
2023-11-07 09:01:25,110 [DEBUG] dispatch pc=490, inst=JUMP_BACKWARD(arg=14, lineno=4630)
2023-11-07 09:01:25,110 [DEBUG] stack ['$phi466.0']
2023-11-07 09:01:25,110 [DEBUG] end state. edges=[Edge(pc=464, stack=('$phi466.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,110 [DEBUG] pending: deque([State(pc_initial=464 nstack_initial=1)])
2023-11-07 09:01:25,110 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,110 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=1): {'$phi28.0'},
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=1): {'$phi40.0'},
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=1): {'$phi52.0'},
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=218 nstack_initial=0): set(),
             State(pc_initial=356 nstack_initial=0): set(),
             State(pc_initial=388 nstack_initial=0): set(),
             State(pc_initial=464 nstack_initial=1): {'$phi464.0'},
             State(pc_initial=466 nstack_initial=2): {'$phi466.1'},
             State(pc_initial=492 nstack_initial=0): set()})
2023-11-07 09:01:25,110 [DEBUG] defmap: {'$phi16.0': State(pc_initial=14 nstack_initial=0),
 '$phi28.0': State(pc_initial=26 nstack_initial=0),
 '$phi40.0': State(pc_initial=38 nstack_initial=0),
 '$phi464.0': State(pc_initial=388 nstack_initial=0),
 '$phi466.1': State(pc_initial=464 nstack_initial=1),
 '$phi52.0': State(pc_initial=46 nstack_initial=0)}
2023-11-07 09:01:25,110 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi28.0': {('$22load_deref.0',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$stop26.0', State(pc_initial=26 nstack_initial=0))},
             '$phi40.0': {('$34load_deref.0',
                           State(pc_initial=34 nstack_initial=0)),
                          ('$step38.0', State(pc_initial=38 nstack_initial=0))},
             '$phi464.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0)),
                           ('$phi466.0',
                            State(pc_initial=466 nstack_initial=2))},
             '$phi466.0': {('$phi464.0',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi466.1': {('$464for_iter.2',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi52.0': {('$const50.0', State(pc_initial=50 nstack_initial=0)),
                          ('$lit_step46.0',
                           State(pc_initial=46 nstack_initial=0))}})
2023-11-07 09:01:25,110 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi28.0': {('$22load_deref.0',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$stop26.0', State(pc_initial=26 nstack_initial=0))},
             '$phi40.0': {('$34load_deref.0',
                           State(pc_initial=34 nstack_initial=0)),
                          ('$step38.0', State(pc_initial=38 nstack_initial=0))},
             '$phi464.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0)),
                           ('$phi464.0',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi466.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0))},
             '$phi466.1': {('$464for_iter.2',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi52.0': {('$const50.0', State(pc_initial=50 nstack_initial=0)),
                          ('$lit_step46.0',
                           State(pc_initial=46 nstack_initial=0))}})
2023-11-07 09:01:25,110 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi28.0': {('$22load_deref.0',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$stop26.0', State(pc_initial=26 nstack_initial=0))},
             '$phi40.0': {('$34load_deref.0',
                           State(pc_initial=34 nstack_initial=0)),
                          ('$step38.0', State(pc_initial=38 nstack_initial=0))},
             '$phi464.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0))},
             '$phi466.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0))},
             '$phi466.1': {('$464for_iter.2',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi52.0': {('$const50.0', State(pc_initial=50 nstack_initial=0)),
                          ('$lit_step46.0',
                           State(pc_initial=46 nstack_initial=0))}})
2023-11-07 09:01:25,110 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi28.0': {('$22load_deref.0',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$stop26.0', State(pc_initial=26 nstack_initial=0))},
             '$phi40.0': {('$34load_deref.0',
                           State(pc_initial=34 nstack_initial=0)),
                          ('$step38.0', State(pc_initial=38 nstack_initial=0))},
             '$phi464.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0))},
             '$phi466.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0))},
             '$phi466.1': {('$464for_iter.2',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi52.0': {('$const50.0', State(pc_initial=50 nstack_initial=0)),
                          ('$lit_step46.0',
                           State(pc_initial=46 nstack_initial=0))}})
2023-11-07 09:01:25,110 [DEBUG] keep phismap: {'$phi16.0': {('$10load_deref.0', State(pc_initial=10 nstack_initial=0)),
              ('$start14.0', State(pc_initial=14 nstack_initial=0))},
 '$phi28.0': {('$22load_deref.0', State(pc_initial=22 nstack_initial=0)),
              ('$stop26.0', State(pc_initial=26 nstack_initial=0))},
 '$phi40.0': {('$34load_deref.0', State(pc_initial=34 nstack_initial=0)),
              ('$step38.0', State(pc_initial=38 nstack_initial=0))},
 '$phi464.0': {('$462get_iter.11', State(pc_initial=388 nstack_initial=0))},
 '$phi466.1': {('$464for_iter.2', State(pc_initial=464 nstack_initial=1))},
 '$phi52.0': {('$const50.0', State(pc_initial=50 nstack_initial=0)),
              ('$lit_step46.0', State(pc_initial=46 nstack_initial=0))}}
2023-11-07 09:01:25,110 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi16.0': '$10load_deref.0'},
             State(pc_initial=14 nstack_initial=0): {'$phi16.0': '$start14.0'},
             State(pc_initial=22 nstack_initial=0): {'$phi28.0': '$22load_deref.0'},
             State(pc_initial=26 nstack_initial=0): {'$phi28.0': '$stop26.0'},
             State(pc_initial=34 nstack_initial=0): {'$phi40.0': '$34load_deref.0'},
             State(pc_initial=38 nstack_initial=0): {'$phi40.0': '$step38.0'},
             State(pc_initial=46 nstack_initial=0): {'$phi52.0': '$lit_step46.0'},
             State(pc_initial=50 nstack_initial=0): {'$phi52.0': '$const50.0'},
             State(pc_initial=388 nstack_initial=0): {'$phi464.0': '$462get_iter.11'},
             State(pc_initial=464 nstack_initial=1): {'$phi466.1': '$464for_iter.2'}})
2023-11-07 09:01:25,110 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$6load_deref.0'}), (8, {'pred': '$6load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_deref.0'}), (12, {})), outgoing_phis={'$phi16.0': '$10load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$10load_deref.0',)})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$start14.0'}),), outgoing_phis={'$phi16.0': '$start14.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$start14.0',)})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'value': '$phi16.0'}), (18, {'res': '$18load_deref.1'}), (20, {'pred': '$18load_deref.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$22load_deref.0'}), (24, {})), outgoing_phis={'$phi28.0': '$22load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ('$22load_deref.0',)})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$stop26.0'}),), outgoing_phis={'$phi28.0': '$stop26.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ('$stop26.0',)})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'value': '$phi28.0'}), (30, {'res': '$30load_deref.1'}), (32, {'pred': '$30load_deref.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_deref.0'}), (36, {})), outgoing_phis={'$phi40.0': '$34load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$34load_deref.0',)})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$step38.0'}),), outgoing_phis={'$phi40.0': '$step38.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$step38.0',)})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'value': '$phi40.0'}), (42, {'res': '$lit_step42.1'}), (44, {'pred': '$lit_step42.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: (), 50: ()})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$lit_step46.0'}), (48, {})), outgoing_phis={'$phi52.0': '$lit_step46.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$lit_step46.0',)})
2023-11-07 09:01:25,110 [DEBUG] block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$const50.0'}),), outgoing_phis={'$phi52.0': '$const50.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$const50.0',)})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'value': '$phi52.0'}), (54, {'res': '$lit_stop54.1'}), (56, {'pred': '$lit_stop54.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 68: ()})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'res': '$lit_start60.1'}), (62, {'value': '$lit_start60.1'}), (64, {'value': '$const58.0'}), (66, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: ()})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$lit_start68.0'}), (70, {'res': '$lit_stop70.1'}), (72, {'value': '$lit_stop70.1'}), (74, {'value': '$lit_start68.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: ()})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$_step76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$_step76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {}), (84, {}), (86, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 118: ()})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'idx': 0, 'res': '$88load_global.0'}), (90, {}), (92, {}), (94, {}), (96, {}), (98, {}), (100, {'res': '$const100.2'}), (102, {}), (104, {}), (106, {'func': '$88load_global.0', 'args': ['$const100.2'], 'kw_names': None, 'res': '$106call.3'}), (108, {}), (110, {}), (112, {}), (114, {}), (116, {'exc': '$106call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$_stop118.0'}), (120, {'res': '$_start120.1'}), (122, {'op': '-', 'lhs': '$_stop118.0', 'rhs': '$_start120.1', 'res': '$binop_sub122.2'}), (124, {}), (126, {'res': '$_step126.3'}), (128, {'op': '/', 'lhs': '$binop_sub122.2', 'rhs': '$_step126.3', 'res': '$binop_truediv128.4'}), (130, {}), (132, {'value': '$binop_truediv128.4'}), (134, {'idx': 1, 'res': '$134load_global.5'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'idx': 2, 'res': '$146load_global.7'}), (148, {}), (150, {}), (152, {}), (154, {}), (156, {}), (158, {'item': '$146load_global.7', 'res': '$158load_attr.9'}), (160, {}), (162, {}), (164, {}), (166, {}), (168, {'res': '$nitems_c168.10'}), (170, {'item': '$nitems_c168.10', 'res': '$170load_attr.11'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {}), (182, {}), (184, {'func': '$158load_attr.9', 'args': ['$170load_attr.11'], 'kw_names': None, 'res': '$184call.12'}), (186, {}), (188, {}), (190, {}), (192, {}), (194, {}), (196, {}), (198, {'func': '$134load_global.5', 'args': ['$184call.12'], 'kw_names': None, 'res': '$198call.13'}), (200, {}), (202, {}), (204, {}), (206, {}), (208, {'value': '$198call.13'}), (210, {'res': '$210load_deref.14'}), (212, {'res': '$const212.15'}), (214, {'lhs': '$210load_deref.14', 'rhs': '$const212.15', 'res': '$214is_op.16'}), (216, {'pred': '$214is_op.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={218: (), 356: ()})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=218 nstack_initial=0):
AdaptBlockInfo(insts=((218, {'idx': 1, 'res': '$218load_global.0'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {}), (230, {'idx': 2, 'res': '$230load_global.2'}), (232, {}), (234, {}), (236, {}), (238, {}), (240, {}), (242, {'item': '$230load_global.2', 'res': '$242load_attr.4'}), (244, {}), (246, {}), (248, {}), (250, {}), (252, {'res': '$nitems_c252.5'}), (254, {'item': '$nitems_c252.5', 'res': '$254load_attr.6'}), (256, {}), (258, {}), (260, {}), (262, {}), (264, {}), (266, {}), (268, {'func': '$242load_attr.4', 'args': ['$254load_attr.6'], 'kw_names': None, 'res': '$268call.7'}), (270, {}), (272, {}), (274, {}), (276, {}), (278, {}), (280, {}), (282, {'func': '$218load_global.0', 'args': ['$268call.7'], 'kw_names': None, 'res': '$282call.8'}), (284, {}), (286, {}), (288, {}), (290, {}), (292, {'value': '$282call.8'}), (294, {'idx': 6, 'res': '$294load_global.9'}), (296, {}), (298, {}), (300, {}), (302, {}), (304, {}), (306, {'idx': 7, 'res': '$306load_global.11'}), (308, {}), (310, {}), (312, {}), (314, {}), (316, {}), (318, {'res': '$nitems_i318.13'}), (320, {'res': '$nitems_r320.14'}), (322, {}), (324, {}), (326, {'func': '$306load_global.11', 'args': ['$nitems_i318.13', '$nitems_r320.14'], 'kw_names': None, 'res': '$326call.15'}), (328, {}), (330, {}), (332, {}), (334, {}), (336, {'res': '$const336.16'}), (338, {}), (340, {}), (342, {'func': '$294load_global.9', 'args': ['$326call.15', '$const336.16'], 'kw_names': None, 'res': '$342call.17'}), (344, {}), (346, {}), (348, {}), (350, {}), (352, {'value': '$342call.17'}), (354, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={388: ()})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=356 nstack_initial=0):
AdaptBlockInfo(insts=((356, {'idx': 6, 'res': '$356load_global.0'}), (358, {}), (360, {}), (362, {}), (364, {}), (366, {}), (368, {'res': '$nitems_r368.2'}), (370, {'res': '$const370.3'}), (372, {}), (374, {}), (376, {'func': '$356load_global.0', 'args': ['$nitems_r368.2', '$const370.3'], 'kw_names': None, 'res': '$376call.4'}), (378, {}), (380, {}), (382, {}), (384, {}), (386, {'value': '$376call.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={388: ()})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=388 nstack_initial=0):
AdaptBlockInfo(insts=((388, {'idx': 8, 'res': '$388load_global.0'}), (390, {}), (392, {}), (394, {}), (396, {}), (398, {}), (400, {'item': '$388load_global.0', 'res': '$400load_attr.2'}), (402, {}), (404, {}), (406, {}), (408, {}), (410, {'res': '$nitems410.3'}), (412, {'res': '$412load_deref.4'}), (414, {}), (416, {}), (418, {'func': '$400load_attr.2', 'args': ['$nitems410.3', '$412load_deref.4'], 'kw_names': None, 'res': '$418call.5'}), (420, {}), (422, {}), (424, {}), (426, {}), (428, {'value': '$418call.5'}), (430, {'res': '$_start430.6'}), (432, {'value': '$_start430.6'}), (434, {'idx': 10, 'res': '$434load_global.7'}), (436, {}), (438, {}), (440, {}), (442, {}), (444, {}), (446, {'res': '$nitems446.9'}), (448, {}), (450, {}), (452, {'func': '$434load_global.7', 'args': ['$nitems446.9'], 'kw_names': None, 'res': '$452call.10'}), (454, {}), (456, {}), (458, {}), (460, {}), (462, {'value': '$452call.10', 'res': '$462get_iter.11'})), outgoing_phis={'$phi464.0': '$462get_iter.11'}, blockstack=(), active_try_block=None, outgoing_edgepushed={464: ('$462get_iter.11',)})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=464 nstack_initial=1):
AdaptBlockInfo(insts=((464, {'iterator': '$phi464.0', 'pair': '$464for_iter.1', 'indval': '$464for_iter.2', 'pred': '$464for_iter.3'}),), outgoing_phis={'$phi466.1': '$464for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={492: (), 466: ('$phi464.0', '$464for_iter.2')})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=466 nstack_initial=2):
AdaptBlockInfo(insts=((466, {'value': '$phi466.1'}), (468, {'res': '$val468.2'}), (470, {'res': '$i470.3'}), (472, {'res': '$_step472.4'}), (474, {'op': '*', 'lhs': '$i470.3', 'rhs': '$_step472.4', 'res': '$binop_mul474.5'}), (476, {}), (478, {'op': '+', 'lhs': '$val468.2', 'rhs': '$binop_mul474.5', 'res': '$binop_add478.6'}), (480, {}), (482, {'res': '$arr482.7'}), (484, {'res': '$i484.8'}), (486, {'target': '$arr482.7', 'index': '$i484.8', 'value': '$binop_add478.6'}), (488, {}), (490, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={464: ('$phi466.0',)})
2023-11-07 09:01:25,111 [DEBUG] block_infos State(pc_initial=492 nstack_initial=0):
AdaptBlockInfo(insts=((492, {'res': '$arr492.0'}), (494, {'retval': '$arr492.0', 'castval': '$494return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,112 [DEBUG] label 0:
    start = arg(0, name=start)               ['start']
    stop = arg(1, name=stop)                 ['stop']
    step = arg(2, name=step)                 ['step']
    dtype = arg(3, name=dtype)               ['dtype']
    $6load_deref.0 = freevar(start_value: None) ['$6load_deref.0']
    $constNone8 = const(NoneType, None)      ['$constNone8']
    $maybeNone8 = $6load_deref.0 is not $constNone8 ['$6load_deref.0', '$constNone8', '$maybeNone8']
    $bool8 = global(bool: <class 'bool'>)    ['$bool8']
    $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None) ['$bool8', '$maybeNone8', '$pred8']
    branch $pred8, 10, 14                    ['$pred8']
label 10:
    $10load_deref.0 = freevar(start_value: None) ['$10load_deref.0']
    $phi16.0 = $10load_deref.0               ['$10load_deref.0', '$phi16.0']
    jump 16                                  []
label 14:
    $phi16.0 = start                         ['$phi16.0', 'start']
    jump 16                                  []
label 16:
    lit_start = $phi16.0                     ['$phi16.0', 'lit_start']
    $18load_deref.1 = freevar(stop_value: None) ['$18load_deref.1']
    $constNone20 = const(NoneType, None)     ['$constNone20']
    $maybeNone20 = $18load_deref.1 is not $constNone20 ['$18load_deref.1', '$constNone20', '$maybeNone20']
    $bool20 = global(bool: <class 'bool'>)   ['$bool20']
    $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None) ['$bool20', '$maybeNone20', '$pred20']
    branch $pred20, 22, 26                   ['$pred20']
label 22:
    $22load_deref.0 = freevar(stop_value: None) ['$22load_deref.0']
    $phi28.0 = $22load_deref.0               ['$22load_deref.0', '$phi28.0']
    jump 28                                  []
label 26:
    $phi28.0 = stop                          ['$phi28.0', 'stop']
    jump 28                                  []
label 28:
    lit_stop = $phi28.0                      ['$phi28.0', 'lit_stop']
    $30load_deref.1 = freevar(step_value: None) ['$30load_deref.1']
    $constNone32 = const(NoneType, None)     ['$constNone32']
    $maybeNone32 = $30load_deref.1 is not $constNone32 ['$30load_deref.1', '$constNone32', '$maybeNone32']
    $bool32 = global(bool: <class 'bool'>)   ['$bool32']
    $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None) ['$bool32', '$maybeNone32', '$pred32']
    branch $pred32, 34, 38                   ['$pred32']
label 34:
    $34load_deref.0 = freevar(step_value: None) ['$34load_deref.0']
    $phi40.0 = $34load_deref.0               ['$34load_deref.0', '$phi40.0']
    jump 40                                  []
label 38:
    $phi40.0 = step                          ['$phi40.0', 'step']
    jump 40                                  []
label 40:
    lit_step = $phi40.0                      ['$phi40.0', 'lit_step']
    $constNone44 = const(NoneType, None)     ['$constNone44']
    $maybeNone44 = lit_step is not $constNone44 ['$constNone44', '$maybeNone44', 'lit_step']
    $bool44 = global(bool: <class 'bool'>)   ['$bool44']
    $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None) ['$bool44', '$maybeNone44', '$pred44']
    branch $pred44, 46, 50                   ['$pred44']
label 46:
    $phi52.0 = lit_step                      ['$phi52.0', 'lit_step']
    jump 52                                  []
label 50:
    $const50.0 = const(int, 1)               ['$const50.0']
    $phi52.0 = $const50.0                    ['$const50.0', '$phi52.0']
    jump 52                                  []
label 52:
    _step = $phi52.0                         ['$phi52.0', '_step']
    $constNone56 = const(NoneType, None)     ['$constNone56']
    $maybeNone56 = lit_stop is $constNone56  ['$constNone56', '$maybeNone56', 'lit_stop']
    $bool56 = global(bool: <class 'bool'>)   ['$bool56']
    $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None) ['$bool56', '$maybeNone56', '$pred56']
    branch $pred56, 58, 68                   ['$pred56']
label 58:
    $const58.0 = const(int, 0)               ['$const58.0']
    _stop = lit_start                        ['_stop', 'lit_start']
    _start = $const58.0                      ['$const58.0', '_start']
    jump 76                                  []
label 68:
    _stop = lit_stop                         ['_stop', 'lit_stop']
    _start = lit_start                       ['_start', 'lit_start']
    jump 76                                  []
label 76:
    $const78.1 = const(int, 0)               ['$const78.1']
    $80compare_op.2 = _step == $const78.1    ['$80compare_op.2', '$const78.1', '_step']
    bool86 = global(bool: <class 'bool'>)    ['bool86']
    $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$86pred', 'bool86']
    branch $86pred, 88, 118                  ['$86pred']
label 88:
    $88load_global.0 = global(ValueError: <class 'ValueError'>) ['$88load_global.0']
    $const100.2 = const(str, Maximum allowed size exceeded) ['$const100.2']
    $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None) ['$106call.3', '$88load_global.0', '$const100.2']
    raise $106call.3                         ['$106call.3']
label 118:
    $binop_sub122.2 = _stop - _start         ['$binop_sub122.2', '_start', '_stop']
    nitems_c = $binop_sub122.2 / _step       ['$binop_sub122.2', '_step', 'nitems_c']
    $134load_global.5 = global(int: <class 'int'>) ['$134load_global.5']
    $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>) ['$146load_global.7']
    $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil) ['$146load_global.7', '$158load_attr.9']
    $170load_attr.11 = getattr(value=nitems_c, attr=real) ['$170load_attr.11', 'nitems_c']
    $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None) ['$158load_attr.9', '$170load_attr.11', '$184call.12']
    nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.5', '$184call.12', 'nitems_r']
    $210load_deref.14 = freevar(use_complex: False) ['$210load_deref.14']
    $const212.15 = const(bool, True)         ['$const212.15']
    $214is_op.16 = $210load_deref.14 is $const212.15 ['$210load_deref.14', '$214is_op.16', '$const212.15']
    bool216 = global(bool: <class 'bool'>)   ['bool216']
    $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None) ['$214is_op.16', '$216pred', 'bool216']
    branch $216pred, 218, 356                ['$216pred']
label 218:
    $218load_global.0 = global(int: <class 'int'>) ['$218load_global.0']
    $230load_global.2 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>) ['$230load_global.2']
    $242load_attr.4 = getattr(value=$230load_global.2, attr=ceil) ['$230load_global.2', '$242load_attr.4']
    $254load_attr.6 = getattr(value=nitems_c, attr=imag) ['$254load_attr.6', 'nitems_c']
    $268call.7 = call $242load_attr.4($254load_attr.6, func=$242load_attr.4, args=[Var($254load_attr.6, arrayobj.py:4623)], kws=(), vararg=None, varkwarg=None, target=None) ['$242load_attr.4', '$254load_attr.6', '$268call.7']
    nitems_i = call $218load_global.0($268call.7, func=$218load_global.0, args=[Var($268call.7, arrayobj.py:4623)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.0', '$268call.7', 'nitems_i']
    $294load_global.9 = global(max: <built-in function max>) ['$294load_global.9']
    $306load_global.11 = global(min: <built-in function min>) ['$306load_global.11']
    $326call.15 = call $306load_global.11(nitems_i, nitems_r, func=$306load_global.11, args=[Var(nitems_i, arrayobj.py:4623), Var(nitems_r, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None) ['$306load_global.11', '$326call.15', 'nitems_i', 'nitems_r']
    $const336.16 = const(int, 0)             ['$const336.16']
    nitems = call $294load_global.9($326call.15, $const336.16, func=$294load_global.9, args=[Var($326call.15, arrayobj.py:4624), Var($const336.16, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None) ['$294load_global.9', '$326call.15', '$const336.16', 'nitems']
    jump 388                                 []
label 356:
    $356load_global.0 = global(max: <built-in function max>) ['$356load_global.0']
    $const370.3 = const(int, 0)              ['$const370.3']
    nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None) ['$356load_global.0', '$const370.3', 'nitems', 'nitems_r']
    jump 388                                 []
label 388:
    $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$388load_global.0']
    $400load_attr.2 = getattr(value=$388load_global.0, attr=empty) ['$388load_global.0', '$400load_attr.2']
    $412load_deref.4 = freevar(true_dtype: int64) ['$412load_deref.4']
    arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None) ['$400load_attr.2', '$412load_deref.4', 'arr', 'nitems']
    val = _start                             ['_start', 'val']
    $434load_global.7 = global(range: <class 'range'>) ['$434load_global.7']
    $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None) ['$434load_global.7', '$452call.10', 'nitems']
    $462get_iter.11 = getiter(value=$452call.10) ['$452call.10', '$462get_iter.11']
    $phi464.0 = $462get_iter.11              ['$462get_iter.11', '$phi464.0']
    jump 464                                 []
label 464:
    $464for_iter.1 = iternext(value=$phi464.0) ['$464for_iter.1', '$phi464.0']
    $464for_iter.2 = pair_first(value=$464for_iter.1) ['$464for_iter.1', '$464for_iter.2']
    $464for_iter.3 = pair_second(value=$464for_iter.1) ['$464for_iter.1', '$464for_iter.3']
    $phi466.1 = $464for_iter.2               ['$464for_iter.2', '$phi466.1']
    branch $464for_iter.3, 466, 492          ['$464for_iter.3']
label 466:
    i = $phi466.1                            ['$phi466.1', 'i']
    $binop_mul474.5 = i * _step              ['$binop_mul474.5', '_step', 'i']
    $binop_add478.6 = val + $binop_mul474.5  ['$binop_add478.6', '$binop_mul474.5', 'val']
    arr[i] = $binop_add478.6                 ['$binop_add478.6', 'arr', 'i']
    jump 464                                 []
label 492:
    $494return_value.1 = cast(value=arr)     ['$494return_value.1', 'arr']
    return $494return_value.1                ['$494return_value.1']

2023-11-07 09:01:25,118 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,118 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,118 [DEBUG] on stmt: start = arg(0, name=start)
2023-11-07 09:01:25,118 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-11-07 09:01:25,118 [DEBUG] on stmt: step = arg(2, name=step)
2023-11-07 09:01:25,118 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-11-07 09:01:25,118 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-11-07 09:01:25,118 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-11-07 09:01:25,118 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-11-07 09:01:25,118 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,118 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,118 [DEBUG] on stmt: jump 14
2023-11-07 09:01:25,118 [DEBUG] ==== SSA block analysis pass on 14
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: $phi16.0 = start
2023-11-07 09:01:25,119 [DEBUG] on stmt: jump 16
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 16
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: lit_start = $phi16.0
2023-11-07 09:01:25,119 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: jump 26
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 26
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: $phi28.0 = stop
2023-11-07 09:01:25,119 [DEBUG] on stmt: jump 28
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 28
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: lit_stop = $phi28.0
2023-11-07 09:01:25,119 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: jump 38
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 38
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: $phi40.0 = step
2023-11-07 09:01:25,119 [DEBUG] on stmt: jump 40
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 40
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: lit_step = $phi40.0
2023-11-07 09:01:25,119 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-11-07 09:01:25,119 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: branch $pred44, 46, 50
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 46
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: $phi52.0 = lit_step
2023-11-07 09:01:25,119 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 50
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $phi52.0 = $const50.0
2023-11-07 09:01:25,119 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 52
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: _step = $phi52.0
2023-11-07 09:01:25,119 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-11-07 09:01:25,119 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: branch $pred56, 58, 68
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 58
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-11-07 09:01:25,119 [DEBUG] on stmt: _stop = lit_start
2023-11-07 09:01:25,119 [DEBUG] on stmt: _start = $const58.0
2023-11-07 09:01:25,119 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 68
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: _stop = lit_stop
2023-11-07 09:01:25,119 [DEBUG] on stmt: _start = lit_start
2023-11-07 09:01:25,119 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 76
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-11-07 09:01:25,119 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: branch $86pred, 88, 118
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 88
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 118
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,119 [DEBUG] on stmt: $binop_sub122.2 = _stop - _start
2023-11-07 09:01:25,119 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-11-07 09:01:25,119 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-11-07 09:01:25,119 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,119 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,119 [DEBUG] on stmt: jump 356
2023-11-07 09:01:25,119 [DEBUG] ==== SSA block analysis pass on 356
2023-11-07 09:01:25,119 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,120 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-11-07 09:01:25,120 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,120 [DEBUG] on stmt: jump 388
2023-11-07 09:01:25,120 [DEBUG] ==== SSA block analysis pass on 388
2023-11-07 09:01:25,120 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,120 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-11-07 09:01:25,120 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,120 [DEBUG] on stmt: val = _start
2023-11-07 09:01:25,120 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-11-07 09:01:25,120 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,120 [DEBUG] ==== SSA block analysis pass on 464
2023-11-07 09:01:25,120 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,120 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-11-07 09:01:25,120 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-11-07 09:01:25,120 [DEBUG] ==== SSA block analysis pass on 466
2023-11-07 09:01:25,120 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,120 [DEBUG] on stmt: i = $phi466.1
2023-11-07 09:01:25,120 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-11-07 09:01:25,120 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-11-07 09:01:25,120 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-11-07 09:01:25,120 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,120 [DEBUG] ==== SSA block analysis pass on 492
2023-11-07 09:01:25,120 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280544090>
2023-11-07 09:01:25,120 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-11-07 09:01:25,120 [DEBUG] on stmt: return $494return_value.1
2023-11-07 09:01:25,120 [DEBUG] defs defaultdict(<class 'list'>,
            {'$106call.3': [<numba.core.ir.Assign object at 0x280ad7b10>],
             '$134load_global.5': [<numba.core.ir.Assign object at 0x280ab5990>],
             '$146load_global.7': [<numba.core.ir.Assign object at 0x280ab6fd0>],
             '$158load_attr.9': [<numba.core.ir.Assign object at 0x280ab7cd0>],
             '$170load_attr.11': [<numba.core.ir.Assign object at 0x280ab6590>],
             '$184call.12': [<numba.core.ir.Assign object at 0x280ab5dd0>],
             '$18load_deref.1': [<numba.core.ir.Assign object at 0x280a51190>],
             '$210load_deref.14': [<numba.core.ir.Assign object at 0x280ab4c10>],
             '$214is_op.16': [<numba.core.ir.Assign object at 0x280ab57d0>],
             '$216pred': [<numba.core.ir.Assign object at 0x280ab7d90>],
             '$30load_deref.1': [<numba.core.ir.Assign object at 0x280a72f90>],
             '$356load_global.0': [<numba.core.ir.Assign object at 0x280a89710>],
             '$388load_global.0': [<numba.core.ir.Assign object at 0x280a89290>],
             '$400load_attr.2': [<numba.core.ir.Assign object at 0x280a8bc10>],
             '$412load_deref.4': [<numba.core.ir.Assign object at 0x280a88110>],
             '$434load_global.7': [<numba.core.ir.Assign object at 0x280af0690>],
             '$452call.10': [<numba.core.ir.Assign object at 0x280af2ad0>],
             '$462get_iter.11': [<numba.core.ir.Assign object at 0x280af1a50>],
             '$464for_iter.1': [<numba.core.ir.Assign object at 0x280af12d0>],
             '$464for_iter.2': [<numba.core.ir.Assign object at 0x280af33d0>],
             '$464for_iter.3': [<numba.core.ir.Assign object at 0x280af3b10>],
             '$494return_value.1': [<numba.core.ir.Assign object at 0x280af2b50>],
             '$6load_deref.0': [<numba.core.ir.Assign object at 0x2809e2150>],
             '$80compare_op.2': [<numba.core.ir.Assign object at 0x280ad6950>],
             '$86pred': [<numba.core.ir.Assign object at 0x280ad41d0>],
             '$88load_global.0': [<numba.core.ir.Assign object at 0x280ad7990>],
             '$binop_add478.6': [<numba.core.ir.Assign object at 0x280af2810>],
             '$binop_mul474.5': [<numba.core.ir.Assign object at 0x280af2190>],
             '$binop_sub122.2': [<numba.core.ir.Assign object at 0x280ab5750>],
             '$bool20': [<numba.core.ir.Assign object at 0x280a50550>],
             '$bool32': [<numba.core.ir.Assign object at 0x280a71190>],
             '$bool44': [<numba.core.ir.Assign object at 0x280a71b90>],
             '$bool56': [<numba.core.ir.Assign object at 0x280ad6450>],
             '$bool8': [<numba.core.ir.Assign object at 0x280a07450>],
             '$const100.2': [<numba.core.ir.Assign object at 0x280ad4150>],
             '$const212.15': [<numba.core.ir.Assign object at 0x280ab4190>],
             '$const370.3': [<numba.core.ir.Assign object at 0x280a8aa90>],
             '$const50.0': [<numba.core.ir.Assign object at 0x280a72990>],
             '$const58.0': [<numba.core.ir.Assign object at 0x280ad7c90>],
             '$const78.1': [<numba.core.ir.Assign object at 0x280ad7fd0>],
             '$constNone20': [<numba.core.ir.Assign object at 0x280a53750>],
             '$constNone32': [<numba.core.ir.Assign object at 0x280a71bd0>],
             '$constNone44': [<numba.core.ir.Assign object at 0x280a73410>],
             '$constNone56': [<numba.core.ir.Assign object at 0x280ad6e50>],
             '$constNone8': [<numba.core.ir.Assign object at 0x280a05c50>],
             '$maybeNone20': [<numba.core.ir.Assign object at 0x280a53050>],
             '$maybeNone32': [<numba.core.ir.Assign object at 0x280a70190>],
             '$maybeNone44': [<numba.core.ir.Assign object at 0x280a72c50>],
             '$maybeNone56': [<numba.core.ir.Assign object at 0x280ad59d0>],
             '$maybeNone8': [<numba.core.ir.Assign object at 0x280a07510>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x280a536d0>],
             '$phi28.0': [<numba.core.ir.Assign object at 0x280a72c90>],
             '$phi40.0': [<numba.core.ir.Assign object at 0x280583b90>],
             '$phi464.0': [<numba.core.ir.Assign object at 0x280a88910>],
             '$phi466.1': [<numba.core.ir.Assign object at 0x280af1d10>],
             '$phi52.0': [<numba.core.ir.Assign object at 0x280a72ad0>,
                          <numba.core.ir.Assign object at 0x280a71b10>],
             '$pred20': [<numba.core.ir.Assign object at 0x280a65510>],
             '$pred32': [<numba.core.ir.Assign object at 0x280a71150>],
             '$pred44': [<numba.core.ir.Assign object at 0x280a71c90>],
             '$pred56': [<numba.core.ir.Assign object at 0x280ad4210>],
             '$pred8': [<numba.core.ir.Assign object at 0x280a04f50>],
             '_start': [<numba.core.ir.Assign object at 0x280ad6890>,
                        <numba.core.ir.Assign object at 0x280ad5190>],
             '_step': [<numba.core.ir.Assign object at 0x280a73810>],
             '_stop': [<numba.core.ir.Assign object at 0x280ad6c50>,
                       <numba.core.ir.Assign object at 0x280ad4c90>],
             'arr': [<numba.core.ir.Assign object at 0x280a88050>],
             'bool216': [<numba.core.ir.Assign object at 0x280ab66d0>],
             'bool86': [<numba.core.ir.Assign object at 0x280ad6350>],
             'dtype': [<numba.core.ir.Assign object at 0x2808e1b10>],
             'i': [<numba.core.ir.Assign object at 0x280af2510>],
             'lit_start': [<numba.core.ir.Assign object at 0x280a504d0>],
             'lit_step': [<numba.core.ir.Assign object at 0x280a70650>],
             'lit_stop': [<numba.core.ir.Assign object at 0x280a70fd0>],
             'nitems': [<numba.core.ir.Assign object at 0x280a8a710>],
             'nitems_c': [<numba.core.ir.Assign object at 0x280ab5ad0>],
             'nitems_r': [<numba.core.ir.Assign object at 0x280ab63d0>],
             'start': [<numba.core.ir.Assign object at 0x28097fcd0>],
             'step': [<numba.core.ir.Assign object at 0x28097cc10>],
             'stop': [<numba.core.ir.Assign object at 0x28097eb50>],
             'val': [<numba.core.ir.Assign object at 0x280a890d0>]})
2023-11-07 09:01:25,120 [DEBUG] SSA violators {'$phi52.0', '_stop', '_start'}
2023-11-07 09:01:25,120 [DEBUG] Fix SSA violator on var $phi52.0
2023-11-07 09:01:25,120 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,120 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,120 [DEBUG] on stmt: start = arg(0, name=start)
2023-11-07 09:01:25,120 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-11-07 09:01:25,120 [DEBUG] on stmt: step = arg(2, name=step)
2023-11-07 09:01:25,120 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,120 [DEBUG] on stmt: jump 14
2023-11-07 09:01:25,120 [DEBUG] ==== SSA block rewrite pass on 14
2023-11-07 09:01:25,120 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,120 [DEBUG] on stmt: $phi16.0 = start
2023-11-07 09:01:25,120 [DEBUG] on stmt: jump 16
2023-11-07 09:01:25,120 [DEBUG] ==== SSA block rewrite pass on 16
2023-11-07 09:01:25,120 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,120 [DEBUG] on stmt: lit_start = $phi16.0
2023-11-07 09:01:25,120 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,120 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: jump 26
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 26
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: $phi28.0 = stop
2023-11-07 09:01:25,121 [DEBUG] on stmt: jump 28
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 28
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: lit_stop = $phi28.0
2023-11-07 09:01:25,121 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: jump 38
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: $phi40.0 = step
2023-11-07 09:01:25,121 [DEBUG] on stmt: jump 40
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 40
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: lit_step = $phi40.0
2023-11-07 09:01:25,121 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-11-07 09:01:25,121 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: branch $pred44, 46, 50
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 46
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: $phi52.0 = lit_step
2023-11-07 09:01:25,121 [DEBUG] first assign: $phi52.0
2023-11-07 09:01:25,121 [DEBUG] replaced with: $phi52.0 = lit_step
2023-11-07 09:01:25,121 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 50
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $phi52.0 = $const50.0
2023-11-07 09:01:25,121 [DEBUG] replaced with: $phi52.0.1 = $const50.0
2023-11-07 09:01:25,121 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 52
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: _step = $phi52.0
2023-11-07 09:01:25,121 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-11-07 09:01:25,121 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: branch $pred56, 58, 68
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 58
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-11-07 09:01:25,121 [DEBUG] on stmt: _stop = lit_start
2023-11-07 09:01:25,121 [DEBUG] on stmt: _start = $const58.0
2023-11-07 09:01:25,121 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 68
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: _stop = lit_stop
2023-11-07 09:01:25,121 [DEBUG] on stmt: _start = lit_start
2023-11-07 09:01:25,121 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 76
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-11-07 09:01:25,121 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: branch $86pred, 88, 118
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 88
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 118
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: $binop_sub122.2 = _stop - _start
2023-11-07 09:01:25,121 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-11-07 09:01:25,121 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-11-07 09:01:25,121 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: jump 356
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-11-07 09:01:25,121 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,121 [DEBUG] on stmt: jump 388
2023-11-07 09:01:25,121 [DEBUG] ==== SSA block rewrite pass on 388
2023-11-07 09:01:25,121 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,121 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,121 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-11-07 09:01:25,122 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: val = _start
2023-11-07 09:01:25,122 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-11-07 09:01:25,122 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 464
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,122 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-11-07 09:01:25,122 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 466
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,122 [DEBUG] on stmt: i = $phi466.1
2023-11-07 09:01:25,122 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-11-07 09:01:25,122 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-11-07 09:01:25,122 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-11-07 09:01:25,122 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 492
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a928d0>
2023-11-07 09:01:25,122 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-11-07 09:01:25,122 [DEBUG] on stmt: return $494return_value.1
2023-11-07 09:01:25,122 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {46: [<numba.core.ir.Assign object at 0x280a92010>],
             50: [<numba.core.ir.Assign object at 0x280a90f90>]})
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,122 [DEBUG] on stmt: start = arg(0, name=start)
2023-11-07 09:01:25,122 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-11-07 09:01:25,122 [DEBUG] on stmt: step = arg(2, name=step)
2023-11-07 09:01:25,122 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: jump 14
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 14
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,122 [DEBUG] on stmt: $phi16.0 = start
2023-11-07 09:01:25,122 [DEBUG] on stmt: jump 16
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 16
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,122 [DEBUG] on stmt: lit_start = $phi16.0
2023-11-07 09:01:25,122 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: jump 26
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 26
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,122 [DEBUG] on stmt: $phi28.0 = stop
2023-11-07 09:01:25,122 [DEBUG] on stmt: jump 28
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 28
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,122 [DEBUG] on stmt: lit_stop = $phi28.0
2023-11-07 09:01:25,122 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: jump 38
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,122 [DEBUG] on stmt: $phi40.0 = step
2023-11-07 09:01:25,122 [DEBUG] on stmt: jump 40
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 40
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,122 [DEBUG] on stmt: lit_step = $phi40.0
2023-11-07 09:01:25,122 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-11-07 09:01:25,122 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,122 [DEBUG] on stmt: branch $pred44, 46, 50
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 46
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,122 [DEBUG] on stmt: $phi52.0 = lit_step
2023-11-07 09:01:25,122 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 50
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,122 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-11-07 09:01:25,122 [DEBUG] on stmt: $phi52.0.1 = $const50.0
2023-11-07 09:01:25,122 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,122 [DEBUG] ==== SSA block rewrite pass on 52
2023-11-07 09:01:25,122 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,122 [DEBUG] on stmt: _step = $phi52.0
2023-11-07 09:01:25,122 [DEBUG] find_def var='$phi52.0' stmt=_step = $phi52.0
2023-11-07 09:01:25,122 [DEBUG] find_def_from_top label 52
2023-11-07 09:01:25,122 [DEBUG] insert phi node $phi52.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 52
2023-11-07 09:01:25,122 [DEBUG] find_def_from_bottom label 50
2023-11-07 09:01:25,123 [DEBUG] incoming_def $phi52.0.1 = $const50.0
2023-11-07 09:01:25,123 [DEBUG] find_def_from_bottom label 46
2023-11-07 09:01:25,123 [DEBUG] incoming_def $phi52.0 = lit_step
2023-11-07 09:01:25,123 [DEBUG] replaced with: _step = $phi52.0.2
2023-11-07 09:01:25,123 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-11-07 09:01:25,123 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,123 [DEBUG] on stmt: branch $pred56, 58, 68
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 58
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,123 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-11-07 09:01:25,123 [DEBUG] on stmt: _stop = lit_start
2023-11-07 09:01:25,123 [DEBUG] on stmt: _start = $const58.0
2023-11-07 09:01:25,123 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 68
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,123 [DEBUG] on stmt: _stop = lit_stop
2023-11-07 09:01:25,123 [DEBUG] on stmt: _start = lit_start
2023-11-07 09:01:25,123 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 76
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,123 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-11-07 09:01:25,123 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,123 [DEBUG] on stmt: branch $86pred, 88, 118
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 88
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,123 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,123 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 118
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,123 [DEBUG] on stmt: $binop_sub122.2 = _stop - _start
2023-11-07 09:01:25,123 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-11-07 09:01:25,123 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,123 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-11-07 09:01:25,123 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,123 [DEBUG] on stmt: jump 356
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,123 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-11-07 09:01:25,123 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,123 [DEBUG] on stmt: jump 388
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 388
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,123 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-11-07 09:01:25,123 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,123 [DEBUG] on stmt: val = _start
2023-11-07 09:01:25,123 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-11-07 09:01:25,123 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 464
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,123 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-11-07 09:01:25,123 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-11-07 09:01:25,123 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 466
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,123 [DEBUG] on stmt: i = $phi466.1
2023-11-07 09:01:25,123 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-11-07 09:01:25,123 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-11-07 09:01:25,123 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-11-07 09:01:25,123 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 492
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a92310>
2023-11-07 09:01:25,123 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-11-07 09:01:25,123 [DEBUG] on stmt: return $494return_value.1
2023-11-07 09:01:25,123 [DEBUG] Fix SSA violator on var _stop
2023-11-07 09:01:25,123 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,123 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,123 [DEBUG] on stmt: start = arg(0, name=start)
2023-11-07 09:01:25,124 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-11-07 09:01:25,124 [DEBUG] on stmt: step = arg(2, name=step)
2023-11-07 09:01:25,124 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: jump 14
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 14
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: $phi16.0 = start
2023-11-07 09:01:25,124 [DEBUG] on stmt: jump 16
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 16
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: lit_start = $phi16.0
2023-11-07 09:01:25,124 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: jump 26
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 26
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: $phi28.0 = stop
2023-11-07 09:01:25,124 [DEBUG] on stmt: jump 28
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 28
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: lit_stop = $phi28.0
2023-11-07 09:01:25,124 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: jump 38
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: $phi40.0 = step
2023-11-07 09:01:25,124 [DEBUG] on stmt: jump 40
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 40
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: lit_step = $phi40.0
2023-11-07 09:01:25,124 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-11-07 09:01:25,124 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: branch $pred44, 46, 50
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 46
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: $phi52.0 = lit_step
2023-11-07 09:01:25,124 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 50
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $phi52.0.1 = $const50.0
2023-11-07 09:01:25,124 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 52
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: $phi52.0.2 = phi(incoming_values=[Var($phi52.0.1, arrayobj.py:4609), Var($phi52.0, arrayobj.py:4609)], incoming_blocks=[50, 46])
2023-11-07 09:01:25,124 [DEBUG] on stmt: _step = $phi52.0.2
2023-11-07 09:01:25,124 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-11-07 09:01:25,124 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: branch $pred56, 58, 68
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 58
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-11-07 09:01:25,124 [DEBUG] on stmt: _stop = lit_start
2023-11-07 09:01:25,124 [DEBUG] first assign: _stop
2023-11-07 09:01:25,124 [DEBUG] replaced with: _stop = lit_start
2023-11-07 09:01:25,124 [DEBUG] on stmt: _start = $const58.0
2023-11-07 09:01:25,124 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 68
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: _stop = lit_stop
2023-11-07 09:01:25,124 [DEBUG] replaced with: _stop.1 = lit_stop
2023-11-07 09:01:25,124 [DEBUG] on stmt: _start = lit_start
2023-11-07 09:01:25,124 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 76
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-11-07 09:01:25,124 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: branch $86pred, 88, 118
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 88
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,124 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-11-07 09:01:25,124 [DEBUG] ==== SSA block rewrite pass on 118
2023-11-07 09:01:25,124 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,124 [DEBUG] on stmt: $binop_sub122.2 = _stop - _start
2023-11-07 09:01:25,124 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-11-07 09:01:25,124 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:25,124 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-11-07 09:01:25,125 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: jump 356
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,125 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-11-07 09:01:25,125 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: jump 388
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 388
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,125 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-11-07 09:01:25,125 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: val = _start
2023-11-07 09:01:25,125 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-11-07 09:01:25,125 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 464
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,125 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-11-07 09:01:25,125 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 466
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,125 [DEBUG] on stmt: i = $phi466.1
2023-11-07 09:01:25,125 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-11-07 09:01:25,125 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-11-07 09:01:25,125 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-11-07 09:01:25,125 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 492
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280a93cd0>
2023-11-07 09:01:25,125 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-11-07 09:01:25,125 [DEBUG] on stmt: return $494return_value.1
2023-11-07 09:01:25,125 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x280a92790>],
             68: [<numba.core.ir.Assign object at 0x280a91750>]})
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,125 [DEBUG] on stmt: start = arg(0, name=start)
2023-11-07 09:01:25,125 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-11-07 09:01:25,125 [DEBUG] on stmt: step = arg(2, name=step)
2023-11-07 09:01:25,125 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: jump 14
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 14
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,125 [DEBUG] on stmt: $phi16.0 = start
2023-11-07 09:01:25,125 [DEBUG] on stmt: jump 16
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 16
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,125 [DEBUG] on stmt: lit_start = $phi16.0
2023-11-07 09:01:25,125 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: jump 26
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 26
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,125 [DEBUG] on stmt: $phi28.0 = stop
2023-11-07 09:01:25,125 [DEBUG] on stmt: jump 28
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 28
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,125 [DEBUG] on stmt: lit_stop = $phi28.0
2023-11-07 09:01:25,125 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: jump 38
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,125 [DEBUG] on stmt: $phi40.0 = step
2023-11-07 09:01:25,125 [DEBUG] on stmt: jump 40
2023-11-07 09:01:25,125 [DEBUG] ==== SSA block rewrite pass on 40
2023-11-07 09:01:25,125 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,125 [DEBUG] on stmt: lit_step = $phi40.0
2023-11-07 09:01:25,125 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-11-07 09:01:25,125 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,125 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: branch $pred44, 46, 50
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 46
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: $phi52.0 = lit_step
2023-11-07 09:01:25,126 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 50
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $phi52.0.1 = $const50.0
2023-11-07 09:01:25,126 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 52
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: $phi52.0.2 = phi(incoming_values=[Var($phi52.0.1, arrayobj.py:4609), Var($phi52.0, arrayobj.py:4609)], incoming_blocks=[50, 46])
2023-11-07 09:01:25,126 [DEBUG] on stmt: _step = $phi52.0.2
2023-11-07 09:01:25,126 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-11-07 09:01:25,126 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: branch $pred56, 58, 68
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 58
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-11-07 09:01:25,126 [DEBUG] on stmt: _stop = lit_start
2023-11-07 09:01:25,126 [DEBUG] on stmt: _start = $const58.0
2023-11-07 09:01:25,126 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 68
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: _stop.1 = lit_stop
2023-11-07 09:01:25,126 [DEBUG] on stmt: _start = lit_start
2023-11-07 09:01:25,126 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 76
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-11-07 09:01:25,126 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: branch $86pred, 88, 118
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 88
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 118
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: $binop_sub122.2 = _stop - _start
2023-11-07 09:01:25,126 [DEBUG] find_def var='_stop' stmt=$binop_sub122.2 = _stop - _start
2023-11-07 09:01:25,126 [DEBUG] find_def_from_top label 118
2023-11-07 09:01:25,126 [DEBUG] idom 76 from label 118
2023-11-07 09:01:25,126 [DEBUG] find_def_from_bottom label 76
2023-11-07 09:01:25,126 [DEBUG] find_def_from_top label 76
2023-11-07 09:01:25,126 [DEBUG] insert phi node _stop.2 = phi(incoming_values=[], incoming_blocks=[]) at 76
2023-11-07 09:01:25,126 [DEBUG] find_def_from_bottom label 58
2023-11-07 09:01:25,126 [DEBUG] incoming_def _stop = lit_start
2023-11-07 09:01:25,126 [DEBUG] find_def_from_bottom label 68
2023-11-07 09:01:25,126 [DEBUG] incoming_def _stop.1 = lit_stop
2023-11-07 09:01:25,126 [DEBUG] replaced with: $binop_sub122.2 = _stop.2 - _start
2023-11-07 09:01:25,126 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-11-07 09:01:25,126 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-11-07 09:01:25,126 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: jump 356
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-11-07 09:01:25,126 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: jump 388
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 388
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-11-07 09:01:25,126 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: val = _start
2023-11-07 09:01:25,126 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-11-07 09:01:25,126 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,126 [DEBUG] ==== SSA block rewrite pass on 464
2023-11-07 09:01:25,126 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,126 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-11-07 09:01:25,126 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-11-07 09:01:25,127 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 466
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,127 [DEBUG] on stmt: i = $phi466.1
2023-11-07 09:01:25,127 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-11-07 09:01:25,127 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-11-07 09:01:25,127 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 492
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280855990>
2023-11-07 09:01:25,127 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-11-07 09:01:25,127 [DEBUG] on stmt: return $494return_value.1
2023-11-07 09:01:25,127 [DEBUG] Fix SSA violator on var _start
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: start = arg(0, name=start)
2023-11-07 09:01:25,127 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-11-07 09:01:25,127 [DEBUG] on stmt: step = arg(2, name=step)
2023-11-07 09:01:25,127 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 14
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 14
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: $phi16.0 = start
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 16
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 16
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: lit_start = $phi16.0
2023-11-07 09:01:25,127 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 26
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 26
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: $phi28.0 = stop
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 28
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 28
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: lit_stop = $phi28.0
2023-11-07 09:01:25,127 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 38
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: $phi40.0 = step
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 40
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 40
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: lit_step = $phi40.0
2023-11-07 09:01:25,127 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-11-07 09:01:25,127 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: branch $pred44, 46, 50
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 46
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: $phi52.0 = lit_step
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 50
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $phi52.0.1 = $const50.0
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 52
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: $phi52.0.2 = phi(incoming_values=[Var($phi52.0.1, arrayobj.py:4609), Var($phi52.0, arrayobj.py:4609)], incoming_blocks=[50, 46])
2023-11-07 09:01:25,127 [DEBUG] on stmt: _step = $phi52.0.2
2023-11-07 09:01:25,127 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-11-07 09:01:25,127 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,127 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,127 [DEBUG] on stmt: branch $pred56, 58, 68
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 58
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-11-07 09:01:25,127 [DEBUG] on stmt: _stop = lit_start
2023-11-07 09:01:25,127 [DEBUG] on stmt: _start = $const58.0
2023-11-07 09:01:25,127 [DEBUG] first assign: _start
2023-11-07 09:01:25,127 [DEBUG] replaced with: _start = $const58.0
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 68
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: _stop.1 = lit_stop
2023-11-07 09:01:25,127 [DEBUG] on stmt: _start = lit_start
2023-11-07 09:01:25,127 [DEBUG] replaced with: _start.1 = lit_start
2023-11-07 09:01:25,127 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,127 [DEBUG] ==== SSA block rewrite pass on 76
2023-11-07 09:01:25,127 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,127 [DEBUG] on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4611), Var(_stop.1, arrayobj.py:4613)], incoming_blocks=[58, 68])
2023-11-07 09:01:25,127 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-11-07 09:01:25,128 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: branch $86pred, 88, 118
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 88
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,128 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 118
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,128 [DEBUG] on stmt: $binop_sub122.2 = _stop.2 - _start
2023-11-07 09:01:25,128 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-11-07 09:01:25,128 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-11-07 09:01:25,128 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: jump 356
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,128 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-11-07 09:01:25,128 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: jump 388
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 388
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,128 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-11-07 09:01:25,128 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: val = _start
2023-11-07 09:01:25,128 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-11-07 09:01:25,128 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 464
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,128 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-11-07 09:01:25,128 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 466
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,128 [DEBUG] on stmt: i = $phi466.1
2023-11-07 09:01:25,128 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-11-07 09:01:25,128 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-11-07 09:01:25,128 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-11-07 09:01:25,128 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 492
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280544090>
2023-11-07 09:01:25,128 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-11-07 09:01:25,128 [DEBUG] on stmt: return $494return_value.1
2023-11-07 09:01:25,128 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x280a93dd0>],
             68: [<numba.core.ir.Assign object at 0x280a91c10>]})
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,128 [DEBUG] on stmt: start = arg(0, name=start)
2023-11-07 09:01:25,128 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-11-07 09:01:25,128 [DEBUG] on stmt: step = arg(2, name=step)
2023-11-07 09:01:25,128 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: jump 14
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 14
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,128 [DEBUG] on stmt: $phi16.0 = start
2023-11-07 09:01:25,128 [DEBUG] on stmt: jump 16
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 16
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,128 [DEBUG] on stmt: lit_start = $phi16.0
2023-11-07 09:01:25,128 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,128 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,128 [DEBUG] on stmt: jump 26
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 26
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,128 [DEBUG] on stmt: $phi28.0 = stop
2023-11-07 09:01:25,128 [DEBUG] on stmt: jump 28
2023-11-07 09:01:25,128 [DEBUG] ==== SSA block rewrite pass on 28
2023-11-07 09:01:25,128 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,128 [DEBUG] on stmt: lit_stop = $phi28.0
2023-11-07 09:01:25,128 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: jump 38
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: $phi40.0 = step
2023-11-07 09:01:25,129 [DEBUG] on stmt: jump 40
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 40
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: lit_step = $phi40.0
2023-11-07 09:01:25,129 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-11-07 09:01:25,129 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: branch $pred44, 46, 50
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 46
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: $phi52.0 = lit_step
2023-11-07 09:01:25,129 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 50
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $phi52.0.1 = $const50.0
2023-11-07 09:01:25,129 [DEBUG] on stmt: jump 52
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 52
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: $phi52.0.2 = phi(incoming_values=[Var($phi52.0.1, arrayobj.py:4609), Var($phi52.0, arrayobj.py:4609)], incoming_blocks=[50, 46])
2023-11-07 09:01:25,129 [DEBUG] on stmt: _step = $phi52.0.2
2023-11-07 09:01:25,129 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-11-07 09:01:25,129 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: branch $pred56, 58, 68
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 58
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-11-07 09:01:25,129 [DEBUG] on stmt: _stop = lit_start
2023-11-07 09:01:25,129 [DEBUG] on stmt: _start = $const58.0
2023-11-07 09:01:25,129 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 68
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: _stop.1 = lit_stop
2023-11-07 09:01:25,129 [DEBUG] on stmt: _start.1 = lit_start
2023-11-07 09:01:25,129 [DEBUG] on stmt: jump 76
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 76
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4611), Var(_stop.1, arrayobj.py:4613)], incoming_blocks=[58, 68])
2023-11-07 09:01:25,129 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-11-07 09:01:25,129 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: branch $86pred, 88, 118
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 88
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 118
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: $binop_sub122.2 = _stop.2 - _start
2023-11-07 09:01:25,129 [DEBUG] find_def var='_start' stmt=$binop_sub122.2 = _stop.2 - _start
2023-11-07 09:01:25,129 [DEBUG] find_def_from_top label 118
2023-11-07 09:01:25,129 [DEBUG] idom 76 from label 118
2023-11-07 09:01:25,129 [DEBUG] find_def_from_bottom label 76
2023-11-07 09:01:25,129 [DEBUG] find_def_from_top label 76
2023-11-07 09:01:25,129 [DEBUG] insert phi node _start.2 = phi(incoming_values=[], incoming_blocks=[]) at 76
2023-11-07 09:01:25,129 [DEBUG] find_def_from_bottom label 58
2023-11-07 09:01:25,129 [DEBUG] incoming_def _start = $const58.0
2023-11-07 09:01:25,129 [DEBUG] find_def_from_bottom label 68
2023-11-07 09:01:25,129 [DEBUG] incoming_def _start.1 = lit_start
2023-11-07 09:01:25,129 [DEBUG] replaced with: $binop_sub122.2 = _stop.2 - _start.2
2023-11-07 09:01:25,129 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-11-07 09:01:25,129 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-11-07 09:01:25,129 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: jump 356
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 356
2023-11-07 09:01:25,129 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,129 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-11-07 09:01:25,129 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-11-07 09:01:25,129 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,129 [DEBUG] on stmt: jump 388
2023-11-07 09:01:25,129 [DEBUG] ==== SSA block rewrite pass on 388
2023-11-07 09:01:25,130 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,130 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,130 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-11-07 09:01:25,130 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-11-07 09:01:25,130 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,130 [DEBUG] on stmt: val = _start
2023-11-07 09:01:25,130 [DEBUG] find_def var='_start' stmt=val = _start
2023-11-07 09:01:25,130 [DEBUG] find_def_from_top label 388
2023-11-07 09:01:25,130 [DEBUG] idom 356 from label 388
2023-11-07 09:01:25,130 [DEBUG] find_def_from_bottom label 356
2023-11-07 09:01:25,130 [DEBUG] find_def_from_top label 356
2023-11-07 09:01:25,130 [DEBUG] idom 118 from label 356
2023-11-07 09:01:25,130 [DEBUG] find_def_from_bottom label 118
2023-11-07 09:01:25,130 [DEBUG] find_def_from_top label 118
2023-11-07 09:01:25,130 [DEBUG] idom 76 from label 118
2023-11-07 09:01:25,130 [DEBUG] find_def_from_bottom label 76
2023-11-07 09:01:25,130 [DEBUG] replaced with: val = _start.2
2023-11-07 09:01:25,130 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-11-07 09:01:25,130 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,130 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-11-07 09:01:25,130 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-11-07 09:01:25,130 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,130 [DEBUG] ==== SSA block rewrite pass on 464
2023-11-07 09:01:25,130 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,130 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-11-07 09:01:25,130 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-11-07 09:01:25,130 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-11-07 09:01:25,130 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-11-07 09:01:25,130 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-11-07 09:01:25,130 [DEBUG] ==== SSA block rewrite pass on 466
2023-11-07 09:01:25,130 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,130 [DEBUG] on stmt: i = $phi466.1
2023-11-07 09:01:25,130 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-11-07 09:01:25,130 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-11-07 09:01:25,130 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-11-07 09:01:25,130 [DEBUG] on stmt: jump 464
2023-11-07 09:01:25,130 [DEBUG] ==== SSA block rewrite pass on 492
2023-11-07 09:01:25,130 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280a91450>
2023-11-07 09:01:25,130 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-11-07 09:01:25,130 [DEBUG] on stmt: return $494return_value.1
2023-11-07 09:01:25,134 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4251)
           2	COPY_FREE_VARS(arg=1, lineno=4251)
           4	RESUME(arg=0, lineno=4251)
           6	LOAD_GLOBAL(arg=1, lineno=4252)
          18	LOAD_FAST(arg=0, lineno=4252)
          20	LOAD_FAST(arg=1, lineno=4252)
          22	LOAD_DEREF(arg=2, lineno=4252)
          24	PRECALL(arg=3, lineno=4252)
          28	CALL(arg=3, lineno=4252)
          38	RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:25,134 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,134 [DEBUG] stack: []
2023-11-07 09:01:25,134 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,134 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4251)
2023-11-07 09:01:25,134 [DEBUG] stack []
2023-11-07 09:01:25,134 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4251)
2023-11-07 09:01:25,134 [DEBUG] stack []
2023-11-07 09:01:25,134 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=4251)
2023-11-07 09:01:25,134 [DEBUG] stack []
2023-11-07 09:01:25,134 [DEBUG] dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4252)
2023-11-07 09:01:25,134 [DEBUG] stack []
2023-11-07 09:01:25,134 [DEBUG] dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4252)
2023-11-07 09:01:25,134 [DEBUG] stack ['$null$6.1', '$6load_global.0']
2023-11-07 09:01:25,134 [DEBUG] dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4252)
2023-11-07 09:01:25,134 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2023-11-07 09:01:25,134 [DEBUG] dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4252)
2023-11-07 09:01:25,134 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2023-11-07 09:01:25,134 [DEBUG] dispatch pc=24, inst=PRECALL(arg=3, lineno=4252)
2023-11-07 09:01:25,134 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:25,134 [DEBUG] dispatch pc=28, inst=CALL(arg=3, lineno=4252)
2023-11-07 09:01:25,134 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:25,134 [DEBUG] dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:25,134 [DEBUG] stack ['$28call.5']
2023-11-07 09:01:25,134 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,134 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,134 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:25,134 [DEBUG] defmap: {}
2023-11-07 09:01:25,134 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,134 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,134 [DEBUG] keep phismap: {}
2023-11-07 09:01:25,134 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:25,134 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,134 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,135 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(int64, 1d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2023-11-07 09:01:25,136 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,136 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280c0d790>
2023-11-07 09:01:25,136 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-11-07 09:01:25,136 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-11-07 09:01:25,136 [DEBUG] on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-11-07 09:01:25,136 [DEBUG] on stmt: $22load_deref.4 = freevar(retty: array(int64, 1d, C))
2023-11-07 09:01:25,136 [DEBUG] on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,136 [DEBUG] on stmt: $38return_value.6 = cast(value=$28call.5)
2023-11-07 09:01:25,136 [DEBUG] on stmt: return $38return_value.6
2023-11-07 09:01:25,136 [DEBUG] defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x280c0ed10>],
             '$28call.5': [<numba.core.ir.Assign object at 0x280c0e750>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x280c0d9d0>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x280c0c390>],
             'dtype': [<numba.core.ir.Assign object at 0x280af8110>],
             'shape': [<numba.core.ir.Assign object at 0x280afa3d0>]})
2023-11-07 09:01:25,136 [DEBUG] SSA violators set()
2023-11-07 09:01:25,269 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	COPY_FREE_VARS(arg=2, lineno=86)
           4	RESUME(arg=0, lineno=86)
           6	LOAD_FAST(arg=2, lineno=92)
           8	LOAD_CONST(arg=1, lineno=92)
          10	COMPARE_OP(arg=5, lineno=92)
          16	POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=92)
          18	LOAD_ASSERTION_ERROR(arg=None, lineno=92)
          20	RAISE_VARARGS(arg=1, lineno=92)
>         22	LOAD_FAST(arg=3, lineno=93)
          24	LOAD_FAST(arg=2, lineno=93)
          26	COMPARE_OP(arg=4, lineno=93)
          32	POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=93)
          34	LOAD_ASSERTION_ERROR(arg=None, lineno=93)
          36	RAISE_VARARGS(arg=1, lineno=93)
>         38	LOAD_FAST(arg=2, lineno=95)
          40	LOAD_FAST(arg=3, lineno=95)
          42	BINARY_OP(arg=0, lineno=95)
          46	LOAD_CONST(arg=2, lineno=95)
          48	BINARY_OP(arg=9, lineno=95)
          52	STORE_FAST(arg=4, lineno=95)
          54	PUSH_NULL(arg=None, lineno=102)
          56	LOAD_DEREF(arg=9, lineno=102)
          58	PUSH_NULL(arg=None, lineno=102)
          60	LOAD_DEREF(arg=8, lineno=102)
          62	LOAD_FAST(arg=0, lineno=102)
          64	LOAD_FAST(arg=1, lineno=102)
          66	LOAD_FAST(arg=4, lineno=102)
          68	BINARY_SUBSCR(arg=None, lineno=102)
          78	PRECALL(arg=2, lineno=102)
          82	CALL(arg=2, lineno=102)
          92	PUSH_NULL(arg=None, lineno=102)
          94	LOAD_DEREF(arg=8, lineno=102)
          96	LOAD_FAST(arg=0, lineno=102)
          98	LOAD_FAST(arg=1, lineno=102)
         100	LOAD_FAST(arg=2, lineno=102)
         102	BINARY_SUBSCR(arg=None, lineno=102)
         112	PRECALL(arg=2, lineno=102)
         116	CALL(arg=2, lineno=102)
         126	PRECALL(arg=2, lineno=102)
         130	CALL(arg=2, lineno=102)
         140	POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=102)
         142	LOAD_FAST(arg=1, lineno=103)
         144	LOAD_FAST(arg=4, lineno=103)
         146	BINARY_SUBSCR(arg=None, lineno=103)
         156	LOAD_FAST(arg=1, lineno=103)
         158	LOAD_FAST(arg=2, lineno=103)
         160	BINARY_SUBSCR(arg=None, lineno=103)
         170	SWAP(arg=2, lineno=103)
         172	LOAD_FAST(arg=1, lineno=103)
         174	LOAD_FAST(arg=2, lineno=103)
         176	STORE_SUBSCR(arg=None, lineno=103)
         180	LOAD_FAST(arg=1, lineno=103)
         182	LOAD_FAST(arg=4, lineno=103)
         184	STORE_SUBSCR(arg=None, lineno=103)
>        188	PUSH_NULL(arg=None, lineno=104)
         190	LOAD_DEREF(arg=9, lineno=104)
         192	PUSH_NULL(arg=None, lineno=104)
         194	LOAD_DEREF(arg=8, lineno=104)
         196	LOAD_FAST(arg=0, lineno=104)
         198	LOAD_FAST(arg=1, lineno=104)
         200	LOAD_FAST(arg=3, lineno=104)
         202	BINARY_SUBSCR(arg=None, lineno=104)
         212	PRECALL(arg=2, lineno=104)
         216	CALL(arg=2, lineno=104)
         226	PUSH_NULL(arg=None, lineno=104)
         228	LOAD_DEREF(arg=8, lineno=104)
         230	LOAD_FAST(arg=0, lineno=104)
         232	LOAD_FAST(arg=1, lineno=104)
         234	LOAD_FAST(arg=4, lineno=104)
         236	BINARY_SUBSCR(arg=None, lineno=104)
         246	PRECALL(arg=2, lineno=104)
         250	CALL(arg=2, lineno=104)
         260	PRECALL(arg=2, lineno=104)
         264	CALL(arg=2, lineno=104)
         274	POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=104)
         276	LOAD_FAST(arg=1, lineno=105)
         278	LOAD_FAST(arg=4, lineno=105)
         280	BINARY_SUBSCR(arg=None, lineno=105)
         290	LOAD_FAST(arg=1, lineno=105)
         292	LOAD_FAST(arg=3, lineno=105)
         294	BINARY_SUBSCR(arg=None, lineno=105)
         304	SWAP(arg=2, lineno=105)
         306	LOAD_FAST(arg=1, lineno=105)
         308	LOAD_FAST(arg=3, lineno=105)
         310	STORE_SUBSCR(arg=None, lineno=105)
         314	LOAD_FAST(arg=1, lineno=105)
         316	LOAD_FAST(arg=4, lineno=105)
         318	STORE_SUBSCR(arg=None, lineno=105)
>        322	PUSH_NULL(arg=None, lineno=106)
         324	LOAD_DEREF(arg=9, lineno=106)
         326	PUSH_NULL(arg=None, lineno=106)
         328	LOAD_DEREF(arg=8, lineno=106)
         330	LOAD_FAST(arg=0, lineno=106)
         332	LOAD_FAST(arg=1, lineno=106)
         334	LOAD_FAST(arg=4, lineno=106)
         336	BINARY_SUBSCR(arg=None, lineno=106)
         346	PRECALL(arg=2, lineno=106)
         350	CALL(arg=2, lineno=106)
         360	PUSH_NULL(arg=None, lineno=106)
         362	LOAD_DEREF(arg=8, lineno=106)
         364	LOAD_FAST(arg=0, lineno=106)
         366	LOAD_FAST(arg=1, lineno=106)
         368	LOAD_FAST(arg=2, lineno=106)
         370	BINARY_SUBSCR(arg=None, lineno=106)
         380	PRECALL(arg=2, lineno=106)
         384	CALL(arg=2, lineno=106)
         394	PRECALL(arg=2, lineno=106)
         398	CALL(arg=2, lineno=106)
         408	POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=106)
         410	LOAD_FAST(arg=1, lineno=107)
         412	LOAD_FAST(arg=4, lineno=107)
         414	BINARY_SUBSCR(arg=None, lineno=107)
         424	LOAD_FAST(arg=1, lineno=107)
         426	LOAD_FAST(arg=2, lineno=107)
         428	BINARY_SUBSCR(arg=None, lineno=107)
         438	SWAP(arg=2, lineno=107)
         440	LOAD_FAST(arg=1, lineno=107)
         442	LOAD_FAST(arg=2, lineno=107)
         444	STORE_SUBSCR(arg=None, lineno=107)
         448	LOAD_FAST(arg=1, lineno=107)
         450	LOAD_FAST(arg=4, lineno=107)
         452	STORE_SUBSCR(arg=None, lineno=107)
>        456	PUSH_NULL(arg=None, lineno=108)
         458	LOAD_DEREF(arg=8, lineno=108)
         460	LOAD_FAST(arg=0, lineno=108)
         462	LOAD_FAST(arg=1, lineno=108)
         464	LOAD_FAST(arg=4, lineno=108)
         466	BINARY_SUBSCR(arg=None, lineno=108)
         476	PRECALL(arg=2, lineno=108)
         480	CALL(arg=2, lineno=108)
         490	STORE_FAST(arg=5, lineno=108)
         492	LOAD_FAST(arg=1, lineno=111)
         494	LOAD_FAST(arg=4, lineno=111)
         496	BINARY_SUBSCR(arg=None, lineno=111)
         506	LOAD_FAST(arg=1, lineno=111)
         508	LOAD_FAST(arg=3, lineno=111)
         510	BINARY_SUBSCR(arg=None, lineno=111)
         520	SWAP(arg=2, lineno=111)
         522	LOAD_FAST(arg=1, lineno=111)
         524	LOAD_FAST(arg=3, lineno=111)
         526	STORE_SUBSCR(arg=None, lineno=111)
         530	LOAD_FAST(arg=1, lineno=111)
         532	LOAD_FAST(arg=4, lineno=111)
         534	STORE_SUBSCR(arg=None, lineno=111)
         538	LOAD_FAST(arg=2, lineno=112)
         540	STORE_FAST(arg=6, lineno=112)
         542	LOAD_FAST(arg=3, lineno=113)
         544	LOAD_CONST(arg=2, lineno=113)
         546	BINARY_OP(arg=10, lineno=113)
         550	STORE_FAST(arg=7, lineno=113)
         552	NOP(arg=None, lineno=114)
>        554	LOAD_FAST(arg=6, lineno=115)
         556	LOAD_FAST(arg=3, lineno=115)
         558	COMPARE_OP(arg=0, lineno=115)
         564	POP_JUMP_FORWARD_IF_FALSE(arg=67, lineno=115)
         566	PUSH_NULL(arg=None, lineno=115)
         568	LOAD_DEREF(arg=9, lineno=115)
         570	PUSH_NULL(arg=None, lineno=115)
         572	LOAD_DEREF(arg=8, lineno=115)
         574	LOAD_FAST(arg=0, lineno=115)
         576	LOAD_FAST(arg=1, lineno=115)
         578	LOAD_FAST(arg=6, lineno=115)
         580	BINARY_SUBSCR(arg=None, lineno=115)
         590	PRECALL(arg=2, lineno=115)
         594	CALL(arg=2, lineno=115)
         604	LOAD_FAST(arg=5, lineno=115)
         606	PRECALL(arg=2, lineno=115)
         610	CALL(arg=2, lineno=115)
         620	POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=115)
>        622	LOAD_FAST(arg=6, lineno=116)
         624	LOAD_CONST(arg=2, lineno=116)
         626	BINARY_OP(arg=13, lineno=116)
         630	STORE_FAST(arg=6, lineno=116)
         632	LOAD_FAST(arg=6, lineno=115)
         634	LOAD_FAST(arg=3, lineno=115)
         636	COMPARE_OP(arg=0, lineno=115)
         642	POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=115)
         644	PUSH_NULL(arg=None, lineno=115)
         646	LOAD_DEREF(arg=9, lineno=115)
         648	PUSH_NULL(arg=None, lineno=115)
         650	LOAD_DEREF(arg=8, lineno=115)
         652	LOAD_FAST(arg=0, lineno=115)
         654	LOAD_FAST(arg=1, lineno=115)
         656	LOAD_FAST(arg=6, lineno=115)
         658	BINARY_SUBSCR(arg=None, lineno=115)
         668	PRECALL(arg=2, lineno=115)
         672	CALL(arg=2, lineno=115)
         682	LOAD_FAST(arg=5, lineno=115)
         684	PRECALL(arg=2, lineno=115)
         688	CALL(arg=2, lineno=115)
         698	POP_JUMP_BACKWARD_IF_TRUE(arg=39, lineno=115)
>        700	LOAD_FAST(arg=7, lineno=117)
         702	LOAD_FAST(arg=2, lineno=117)
         704	COMPARE_OP(arg=5, lineno=117)
         710	POP_JUMP_FORWARD_IF_FALSE(arg=67, lineno=117)
         712	PUSH_NULL(arg=None, lineno=117)
         714	LOAD_DEREF(arg=9, lineno=117)
         716	LOAD_FAST(arg=5, lineno=117)
         718	PUSH_NULL(arg=None, lineno=117)
         720	LOAD_DEREF(arg=8, lineno=117)
         722	LOAD_FAST(arg=0, lineno=117)
         724	LOAD_FAST(arg=1, lineno=117)
         726	LOAD_FAST(arg=7, lineno=117)
         728	BINARY_SUBSCR(arg=None, lineno=117)
         738	PRECALL(arg=2, lineno=117)
         742	CALL(arg=2, lineno=117)
         752	PRECALL(arg=2, lineno=117)
         756	CALL(arg=2, lineno=117)
         766	POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=117)
>        768	LOAD_FAST(arg=7, lineno=118)
         770	LOAD_CONST(arg=2, lineno=118)
         772	BINARY_OP(arg=23, lineno=118)
         776	STORE_FAST(arg=7, lineno=118)
         778	LOAD_FAST(arg=7, lineno=117)
         780	LOAD_FAST(arg=2, lineno=117)
         782	COMPARE_OP(arg=5, lineno=117)
         788	POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=117)
         790	PUSH_NULL(arg=None, lineno=117)
         792	LOAD_DEREF(arg=9, lineno=117)
         794	LOAD_FAST(arg=5, lineno=117)
         796	PUSH_NULL(arg=None, lineno=117)
         798	LOAD_DEREF(arg=8, lineno=117)
         800	LOAD_FAST(arg=0, lineno=117)
         802	LOAD_FAST(arg=1, lineno=117)
         804	LOAD_FAST(arg=7, lineno=117)
         806	BINARY_SUBSCR(arg=None, lineno=117)
         816	PRECALL(arg=2, lineno=117)
         820	CALL(arg=2, lineno=117)
         830	PRECALL(arg=2, lineno=117)
         834	CALL(arg=2, lineno=117)
         844	POP_JUMP_BACKWARD_IF_TRUE(arg=39, lineno=117)
>        846	LOAD_FAST(arg=6, lineno=119)
         848	LOAD_FAST(arg=7, lineno=119)
         850	COMPARE_OP(arg=5, lineno=119)
         856	POP_JUMP_FORWARD_IF_FALSE(arg=1, lineno=119)
         858	JUMP_FORWARD(arg=34, lineno=120)
>        860	LOAD_FAST(arg=1, lineno=121)
         862	LOAD_FAST(arg=7, lineno=121)
         864	BINARY_SUBSCR(arg=None, lineno=121)
         874	LOAD_FAST(arg=1, lineno=121)
         876	LOAD_FAST(arg=6, lineno=121)
         878	BINARY_SUBSCR(arg=None, lineno=121)
         888	SWAP(arg=2, lineno=121)
         890	LOAD_FAST(arg=1, lineno=121)
         892	LOAD_FAST(arg=6, lineno=121)
         894	STORE_SUBSCR(arg=None, lineno=121)
         898	LOAD_FAST(arg=1, lineno=121)
         900	LOAD_FAST(arg=7, lineno=121)
         902	STORE_SUBSCR(arg=None, lineno=121)
         906	LOAD_FAST(arg=6, lineno=122)
         908	LOAD_CONST(arg=2, lineno=122)
         910	BINARY_OP(arg=13, lineno=122)
         914	STORE_FAST(arg=6, lineno=122)
         916	LOAD_FAST(arg=7, lineno=123)
         918	LOAD_CONST(arg=2, lineno=123)
         920	BINARY_OP(arg=23, lineno=123)
         924	STORE_FAST(arg=7, lineno=123)
         926	JUMP_BACKWARD(arg=187, lineno=114)
>        928	LOAD_FAST(arg=1, lineno=126)
         930	LOAD_FAST(arg=3, lineno=126)
         932	BINARY_SUBSCR(arg=None, lineno=126)
         942	LOAD_FAST(arg=1, lineno=126)
         944	LOAD_FAST(arg=6, lineno=126)
         946	BINARY_SUBSCR(arg=None, lineno=126)
         956	SWAP(arg=2, lineno=126)
         958	LOAD_FAST(arg=1, lineno=126)
         960	LOAD_FAST(arg=6, lineno=126)
         962	STORE_SUBSCR(arg=None, lineno=126)
         966	LOAD_FAST(arg=1, lineno=126)
         968	LOAD_FAST(arg=3, lineno=126)
         970	STORE_SUBSCR(arg=None, lineno=126)
         974	LOAD_FAST(arg=6, lineno=127)
         976	RETURN_VALUE(arg=None, lineno=127)
2023-11-07 09:01:25,270 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,270 [DEBUG] stack: []
2023-11-07 09:01:25,270 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,270 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=86)
2023-11-07 09:01:25,270 [DEBUG] stack []
2023-11-07 09:01:25,270 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=2, lineno=86)
2023-11-07 09:01:25,270 [DEBUG] stack []
2023-11-07 09:01:25,270 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=86)
2023-11-07 09:01:25,270 [DEBUG] stack []
2023-11-07 09:01:25,270 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=92)
2023-11-07 09:01:25,270 [DEBUG] stack []
2023-11-07 09:01:25,270 [DEBUG] dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=92)
2023-11-07 09:01:25,270 [DEBUG] stack ['$low6.0']
2023-11-07 09:01:25,270 [DEBUG] dispatch pc=10, inst=COMPARE_OP(arg=5, lineno=92)
2023-11-07 09:01:25,270 [DEBUG] stack ['$low6.0', '$const8.1']
2023-11-07 09:01:25,270 [DEBUG] dispatch pc=16, inst=POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=92)
2023-11-07 09:01:25,270 [DEBUG] stack ['$10compare_op.2']
2023-11-07 09:01:25,270 [DEBUG] end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=22, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,270 [DEBUG] pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=22 nstack_initial=0)])
2023-11-07 09:01:25,270 [DEBUG] stack: []
2023-11-07 09:01:25,270 [DEBUG] state.pc_initial: State(pc_initial=18 nstack_initial=0)
2023-11-07 09:01:25,270 [DEBUG] dispatch pc=18, inst=LOAD_ASSERTION_ERROR(arg=None, lineno=92)
2023-11-07 09:01:25,270 [DEBUG] stack []
2023-11-07 09:01:25,270 [DEBUG] dispatch pc=20, inst=RAISE_VARARGS(arg=1, lineno=92)
2023-11-07 09:01:25,270 [DEBUG] stack ['$assertion_error18.0']
2023-11-07 09:01:25,270 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,270 [DEBUG] pending: deque([State(pc_initial=22 nstack_initial=0)])
2023-11-07 09:01:25,270 [DEBUG] stack: []
2023-11-07 09:01:25,270 [DEBUG] state.pc_initial: State(pc_initial=22 nstack_initial=0)
2023-11-07 09:01:25,270 [DEBUG] dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=93)
2023-11-07 09:01:25,270 [DEBUG] stack []
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=93)
2023-11-07 09:01:25,271 [DEBUG] stack ['$high22.0']
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=26, inst=COMPARE_OP(arg=4, lineno=93)
2023-11-07 09:01:25,271 [DEBUG] stack ['$high22.0', '$low24.1']
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=32, inst=POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=93)
2023-11-07 09:01:25,271 [DEBUG] stack ['$26compare_op.2']
2023-11-07 09:01:25,271 [DEBUG] end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,271 [DEBUG] pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
2023-11-07 09:01:25,271 [DEBUG] stack: []
2023-11-07 09:01:25,271 [DEBUG] state.pc_initial: State(pc_initial=34 nstack_initial=0)
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=34, inst=LOAD_ASSERTION_ERROR(arg=None, lineno=93)
2023-11-07 09:01:25,271 [DEBUG] stack []
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=36, inst=RAISE_VARARGS(arg=1, lineno=93)
2023-11-07 09:01:25,271 [DEBUG] stack ['$assertion_error34.0']
2023-11-07 09:01:25,271 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,271 [DEBUG] pending: deque([State(pc_initial=38 nstack_initial=0)])
2023-11-07 09:01:25,271 [DEBUG] stack: []
2023-11-07 09:01:25,271 [DEBUG] state.pc_initial: State(pc_initial=38 nstack_initial=0)
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=95)
2023-11-07 09:01:25,271 [DEBUG] stack []
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=95)
2023-11-07 09:01:25,271 [DEBUG] stack ['$low38.0']
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=42, inst=BINARY_OP(arg=0, lineno=95)
2023-11-07 09:01:25,271 [DEBUG] stack ['$low38.0', '$high40.1']
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=95)
2023-11-07 09:01:25,271 [DEBUG] stack ['$binop_add42.2']
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=48, inst=BINARY_OP(arg=9, lineno=95)
2023-11-07 09:01:25,271 [DEBUG] stack ['$binop_add42.2', '$const46.3']
2023-11-07 09:01:25,271 [DEBUG] dispatch pc=52, inst=STORE_FAST(arg=4, lineno=95)
2023-11-07 09:01:25,271 [DEBUG] stack ['$binop_rshift48.4']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=54, inst=PUSH_NULL(arg=None, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack []
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=56, inst=LOAD_DEREF(arg=9, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=58, inst=PUSH_NULL(arg=None, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=60, inst=LOAD_DEREF(arg=8, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8', '$A62.9']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8', '$A62.9', '$R64.10']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8', '$A62.9', '$R64.10', '$mid66.11']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=78, inst=PRECALL(arg=2, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8', '$A62.9', '$68binary_subscr.12']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=82, inst=CALL(arg=2, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8', '$A62.9', '$68binary_subscr.12']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=92, inst=PUSH_NULL(arg=None, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=94, inst=LOAD_DEREF(arg=8, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=96, inst=LOAD_FAST(arg=0, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15']
2023-11-07 09:01:25,272 [DEBUG] dispatch pc=98, inst=LOAD_FAST(arg=1, lineno=102)
2023-11-07 09:01:25,272 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15', '$A96.16']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=102)
2023-11-07 09:01:25,273 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15', '$A96.16', '$R98.17']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=102, inst=BINARY_SUBSCR(arg=None, lineno=102)
2023-11-07 09:01:25,273 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15', '$A96.16', '$R98.17', '$low100.18']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=112, inst=PRECALL(arg=2, lineno=102)
2023-11-07 09:01:25,273 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15', '$A96.16', '$102binary_subscr.19']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=116, inst=CALL(arg=2, lineno=102)
2023-11-07 09:01:25,273 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15', '$A96.16', '$102binary_subscr.19']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=126, inst=PRECALL(arg=2, lineno=102)
2023-11-07 09:01:25,273 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$116call.20']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=130, inst=CALL(arg=2, lineno=102)
2023-11-07 09:01:25,273 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$116call.20']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=140, inst=POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=102)
2023-11-07 09:01:25,273 [DEBUG] stack ['$130call.21']
2023-11-07 09:01:25,273 [DEBUG] end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=188, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,273 [DEBUG] pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
2023-11-07 09:01:25,273 [DEBUG] stack: []
2023-11-07 09:01:25,273 [DEBUG] state.pc_initial: State(pc_initial=142 nstack_initial=0)
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=142, inst=LOAD_FAST(arg=1, lineno=103)
2023-11-07 09:01:25,273 [DEBUG] stack []
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=144, inst=LOAD_FAST(arg=4, lineno=103)
2023-11-07 09:01:25,273 [DEBUG] stack ['$R142.0']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=146, inst=BINARY_SUBSCR(arg=None, lineno=103)
2023-11-07 09:01:25,273 [DEBUG] stack ['$R142.0', '$mid144.1']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=103)
2023-11-07 09:01:25,273 [DEBUG] stack ['$146binary_subscr.2']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=158, inst=LOAD_FAST(arg=2, lineno=103)
2023-11-07 09:01:25,273 [DEBUG] stack ['$146binary_subscr.2', '$R156.3']
2023-11-07 09:01:25,273 [DEBUG] dispatch pc=160, inst=BINARY_SUBSCR(arg=None, lineno=103)
2023-11-07 09:01:25,274 [DEBUG] stack ['$146binary_subscr.2', '$R156.3', '$low158.4']
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=170, inst=SWAP(arg=2, lineno=103)
2023-11-07 09:01:25,274 [DEBUG] stack ['$146binary_subscr.2', '$160binary_subscr.5']
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=172, inst=LOAD_FAST(arg=1, lineno=103)
2023-11-07 09:01:25,274 [DEBUG] stack ['$160binary_subscr.5', '$146binary_subscr.2']
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=174, inst=LOAD_FAST(arg=2, lineno=103)
2023-11-07 09:01:25,274 [DEBUG] stack ['$160binary_subscr.5', '$146binary_subscr.2', '$R172.6']
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=176, inst=STORE_SUBSCR(arg=None, lineno=103)
2023-11-07 09:01:25,274 [DEBUG] stack ['$160binary_subscr.5', '$146binary_subscr.2', '$R172.6', '$low174.7']
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=180, inst=LOAD_FAST(arg=1, lineno=103)
2023-11-07 09:01:25,274 [DEBUG] stack ['$160binary_subscr.5']
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=182, inst=LOAD_FAST(arg=4, lineno=103)
2023-11-07 09:01:25,274 [DEBUG] stack ['$160binary_subscr.5', '$R180.8']
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=184, inst=STORE_SUBSCR(arg=None, lineno=103)
2023-11-07 09:01:25,274 [DEBUG] stack ['$160binary_subscr.5', '$R180.8', '$mid182.9']
2023-11-07 09:01:25,274 [DEBUG] end state. edges=[Edge(pc=188, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,274 [DEBUG] pending: deque([State(pc_initial=188 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
2023-11-07 09:01:25,274 [DEBUG] stack: []
2023-11-07 09:01:25,274 [DEBUG] state.pc_initial: State(pc_initial=188 nstack_initial=0)
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=188, inst=PUSH_NULL(arg=None, lineno=104)
2023-11-07 09:01:25,274 [DEBUG] stack []
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=190, inst=LOAD_DEREF(arg=9, lineno=104)
2023-11-07 09:01:25,274 [DEBUG] stack ['$null$188.0']
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=192, inst=PUSH_NULL(arg=None, lineno=104)
2023-11-07 09:01:25,274 [DEBUG] stack ['$null$188.0', '$190load_deref.1']
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=194, inst=LOAD_DEREF(arg=8, lineno=104)
2023-11-07 09:01:25,274 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2']
2023-11-07 09:01:25,274 [DEBUG] dispatch pc=196, inst=LOAD_FAST(arg=0, lineno=104)
2023-11-07 09:01:25,274 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3', '$A196.4']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=200, inst=LOAD_FAST(arg=3, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3', '$A196.4', '$R198.5']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3', '$A196.4', '$R198.5', '$high200.6']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=212, inst=PRECALL(arg=2, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3', '$A196.4', '$202binary_subscr.7']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=216, inst=CALL(arg=2, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3', '$A196.4', '$202binary_subscr.7']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=226, inst=PUSH_NULL(arg=None, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=228, inst=LOAD_DEREF(arg=8, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=230, inst=LOAD_FAST(arg=0, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10', '$A230.11']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10', '$A230.11', '$R232.12']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10', '$A230.11', '$R232.12', '$mid234.13']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=246, inst=PRECALL(arg=2, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10', '$A230.11', '$236binary_subscr.14']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=250, inst=CALL(arg=2, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10', '$A230.11', '$236binary_subscr.14']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=260, inst=PRECALL(arg=2, lineno=104)
2023-11-07 09:01:25,275 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$250call.15']
2023-11-07 09:01:25,275 [DEBUG] dispatch pc=264, inst=CALL(arg=2, lineno=104)
2023-11-07 09:01:25,276 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$250call.15']
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=274, inst=POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=104)
2023-11-07 09:01:25,276 [DEBUG] stack ['$264call.16']
2023-11-07 09:01:25,276 [DEBUG] end state. edges=[Edge(pc=276, stack=(), blockstack=(), npush=0), Edge(pc=322, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,276 [DEBUG] pending: deque([State(pc_initial=188 nstack_initial=0), State(pc_initial=276 nstack_initial=0), State(pc_initial=322 nstack_initial=0)])
2023-11-07 09:01:25,276 [DEBUG] pending: deque([State(pc_initial=276 nstack_initial=0), State(pc_initial=322 nstack_initial=0)])
2023-11-07 09:01:25,276 [DEBUG] stack: []
2023-11-07 09:01:25,276 [DEBUG] state.pc_initial: State(pc_initial=276 nstack_initial=0)
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=276, inst=LOAD_FAST(arg=1, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack []
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=278, inst=LOAD_FAST(arg=4, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack ['$R276.0']
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=280, inst=BINARY_SUBSCR(arg=None, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack ['$R276.0', '$mid278.1']
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=290, inst=LOAD_FAST(arg=1, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack ['$280binary_subscr.2']
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=292, inst=LOAD_FAST(arg=3, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack ['$280binary_subscr.2', '$R290.3']
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack ['$280binary_subscr.2', '$R290.3', '$high292.4']
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=304, inst=SWAP(arg=2, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack ['$280binary_subscr.2', '$294binary_subscr.5']
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=306, inst=LOAD_FAST(arg=1, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack ['$294binary_subscr.5', '$280binary_subscr.2']
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=308, inst=LOAD_FAST(arg=3, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack ['$294binary_subscr.5', '$280binary_subscr.2', '$R306.6']
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=310, inst=STORE_SUBSCR(arg=None, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack ['$294binary_subscr.5', '$280binary_subscr.2', '$R306.6', '$high308.7']
2023-11-07 09:01:25,276 [DEBUG] dispatch pc=314, inst=LOAD_FAST(arg=1, lineno=105)
2023-11-07 09:01:25,276 [DEBUG] stack ['$294binary_subscr.5']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=316, inst=LOAD_FAST(arg=4, lineno=105)
2023-11-07 09:01:25,277 [DEBUG] stack ['$294binary_subscr.5', '$R314.8']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=318, inst=STORE_SUBSCR(arg=None, lineno=105)
2023-11-07 09:01:25,277 [DEBUG] stack ['$294binary_subscr.5', '$R314.8', '$mid316.9']
2023-11-07 09:01:25,277 [DEBUG] end state. edges=[Edge(pc=322, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,277 [DEBUG] pending: deque([State(pc_initial=322 nstack_initial=0), State(pc_initial=322 nstack_initial=0)])
2023-11-07 09:01:25,277 [DEBUG] stack: []
2023-11-07 09:01:25,277 [DEBUG] state.pc_initial: State(pc_initial=322 nstack_initial=0)
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=322, inst=PUSH_NULL(arg=None, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack []
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=324, inst=LOAD_DEREF(arg=9, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack ['$null$322.0']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=326, inst=PUSH_NULL(arg=None, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack ['$null$322.0', '$324load_deref.1']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=328, inst=LOAD_DEREF(arg=8, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=330, inst=LOAD_FAST(arg=0, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=332, inst=LOAD_FAST(arg=1, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3', '$A330.4']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=334, inst=LOAD_FAST(arg=4, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3', '$A330.4', '$R332.5']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3', '$A330.4', '$R332.5', '$mid334.6']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=346, inst=PRECALL(arg=2, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3', '$A330.4', '$336binary_subscr.7']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=350, inst=CALL(arg=2, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3', '$A330.4', '$336binary_subscr.7']
2023-11-07 09:01:25,277 [DEBUG] dispatch pc=360, inst=PUSH_NULL(arg=None, lineno=106)
2023-11-07 09:01:25,277 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=362, inst=LOAD_DEREF(arg=8, lineno=106)
2023-11-07 09:01:25,278 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=364, inst=LOAD_FAST(arg=0, lineno=106)
2023-11-07 09:01:25,278 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=366, inst=LOAD_FAST(arg=1, lineno=106)
2023-11-07 09:01:25,278 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10', '$A364.11']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=368, inst=LOAD_FAST(arg=2, lineno=106)
2023-11-07 09:01:25,278 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10', '$A364.11', '$R366.12']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=370, inst=BINARY_SUBSCR(arg=None, lineno=106)
2023-11-07 09:01:25,278 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10', '$A364.11', '$R366.12', '$low368.13']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=380, inst=PRECALL(arg=2, lineno=106)
2023-11-07 09:01:25,278 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10', '$A364.11', '$370binary_subscr.14']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=384, inst=CALL(arg=2, lineno=106)
2023-11-07 09:01:25,278 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10', '$A364.11', '$370binary_subscr.14']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=394, inst=PRECALL(arg=2, lineno=106)
2023-11-07 09:01:25,278 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$384call.15']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=398, inst=CALL(arg=2, lineno=106)
2023-11-07 09:01:25,278 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$384call.15']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=408, inst=POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=106)
2023-11-07 09:01:25,278 [DEBUG] stack ['$398call.16']
2023-11-07 09:01:25,278 [DEBUG] end state. edges=[Edge(pc=410, stack=(), blockstack=(), npush=0), Edge(pc=456, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,278 [DEBUG] pending: deque([State(pc_initial=322 nstack_initial=0), State(pc_initial=410 nstack_initial=0), State(pc_initial=456 nstack_initial=0)])
2023-11-07 09:01:25,278 [DEBUG] pending: deque([State(pc_initial=410 nstack_initial=0), State(pc_initial=456 nstack_initial=0)])
2023-11-07 09:01:25,278 [DEBUG] stack: []
2023-11-07 09:01:25,278 [DEBUG] state.pc_initial: State(pc_initial=410 nstack_initial=0)
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=410, inst=LOAD_FAST(arg=1, lineno=107)
2023-11-07 09:01:25,278 [DEBUG] stack []
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=412, inst=LOAD_FAST(arg=4, lineno=107)
2023-11-07 09:01:25,278 [DEBUG] stack ['$R410.0']
2023-11-07 09:01:25,278 [DEBUG] dispatch pc=414, inst=BINARY_SUBSCR(arg=None, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$R410.0', '$mid412.1']
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=424, inst=LOAD_FAST(arg=1, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$414binary_subscr.2']
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=426, inst=LOAD_FAST(arg=2, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$414binary_subscr.2', '$R424.3']
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=428, inst=BINARY_SUBSCR(arg=None, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$414binary_subscr.2', '$R424.3', '$low426.4']
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=438, inst=SWAP(arg=2, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$414binary_subscr.2', '$428binary_subscr.5']
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=440, inst=LOAD_FAST(arg=1, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$428binary_subscr.5', '$414binary_subscr.2']
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=442, inst=LOAD_FAST(arg=2, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$428binary_subscr.5', '$414binary_subscr.2', '$R440.6']
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=444, inst=STORE_SUBSCR(arg=None, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$428binary_subscr.5', '$414binary_subscr.2', '$R440.6', '$low442.7']
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=448, inst=LOAD_FAST(arg=1, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$428binary_subscr.5']
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=450, inst=LOAD_FAST(arg=4, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$428binary_subscr.5', '$R448.8']
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=452, inst=STORE_SUBSCR(arg=None, lineno=107)
2023-11-07 09:01:25,279 [DEBUG] stack ['$428binary_subscr.5', '$R448.8', '$mid450.9']
2023-11-07 09:01:25,279 [DEBUG] end state. edges=[Edge(pc=456, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,279 [DEBUG] pending: deque([State(pc_initial=456 nstack_initial=0), State(pc_initial=456 nstack_initial=0)])
2023-11-07 09:01:25,279 [DEBUG] stack: []
2023-11-07 09:01:25,279 [DEBUG] state.pc_initial: State(pc_initial=456 nstack_initial=0)
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=456, inst=PUSH_NULL(arg=None, lineno=108)
2023-11-07 09:01:25,279 [DEBUG] stack []
2023-11-07 09:01:25,279 [DEBUG] dispatch pc=458, inst=LOAD_DEREF(arg=8, lineno=108)
2023-11-07 09:01:25,279 [DEBUG] stack ['$null$456.0']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=460, inst=LOAD_FAST(arg=0, lineno=108)
2023-11-07 09:01:25,280 [DEBUG] stack ['$null$456.0', '$458load_deref.1']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=462, inst=LOAD_FAST(arg=1, lineno=108)
2023-11-07 09:01:25,280 [DEBUG] stack ['$null$456.0', '$458load_deref.1', '$A460.2']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=464, inst=LOAD_FAST(arg=4, lineno=108)
2023-11-07 09:01:25,280 [DEBUG] stack ['$null$456.0', '$458load_deref.1', '$A460.2', '$R462.3']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=466, inst=BINARY_SUBSCR(arg=None, lineno=108)
2023-11-07 09:01:25,280 [DEBUG] stack ['$null$456.0', '$458load_deref.1', '$A460.2', '$R462.3', '$mid464.4']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=476, inst=PRECALL(arg=2, lineno=108)
2023-11-07 09:01:25,280 [DEBUG] stack ['$null$456.0', '$458load_deref.1', '$A460.2', '$466binary_subscr.5']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=480, inst=CALL(arg=2, lineno=108)
2023-11-07 09:01:25,280 [DEBUG] stack ['$null$456.0', '$458load_deref.1', '$A460.2', '$466binary_subscr.5']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=490, inst=STORE_FAST(arg=5, lineno=108)
2023-11-07 09:01:25,280 [DEBUG] stack ['$480call.6']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=492, inst=LOAD_FAST(arg=1, lineno=111)
2023-11-07 09:01:25,280 [DEBUG] stack []
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=494, inst=LOAD_FAST(arg=4, lineno=111)
2023-11-07 09:01:25,280 [DEBUG] stack ['$R492.7']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=496, inst=BINARY_SUBSCR(arg=None, lineno=111)
2023-11-07 09:01:25,280 [DEBUG] stack ['$R492.7', '$mid494.8']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=506, inst=LOAD_FAST(arg=1, lineno=111)
2023-11-07 09:01:25,280 [DEBUG] stack ['$496binary_subscr.9']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=508, inst=LOAD_FAST(arg=3, lineno=111)
2023-11-07 09:01:25,280 [DEBUG] stack ['$496binary_subscr.9', '$R506.10']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=510, inst=BINARY_SUBSCR(arg=None, lineno=111)
2023-11-07 09:01:25,280 [DEBUG] stack ['$496binary_subscr.9', '$R506.10', '$high508.11']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=520, inst=SWAP(arg=2, lineno=111)
2023-11-07 09:01:25,280 [DEBUG] stack ['$496binary_subscr.9', '$510binary_subscr.12']
2023-11-07 09:01:25,280 [DEBUG] dispatch pc=522, inst=LOAD_FAST(arg=1, lineno=111)
2023-11-07 09:01:25,281 [DEBUG] stack ['$510binary_subscr.12', '$496binary_subscr.9']
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=524, inst=LOAD_FAST(arg=3, lineno=111)
2023-11-07 09:01:25,281 [DEBUG] stack ['$510binary_subscr.12', '$496binary_subscr.9', '$R522.13']
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=526, inst=STORE_SUBSCR(arg=None, lineno=111)
2023-11-07 09:01:25,281 [DEBUG] stack ['$510binary_subscr.12', '$496binary_subscr.9', '$R522.13', '$high524.14']
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=530, inst=LOAD_FAST(arg=1, lineno=111)
2023-11-07 09:01:25,281 [DEBUG] stack ['$510binary_subscr.12']
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=532, inst=LOAD_FAST(arg=4, lineno=111)
2023-11-07 09:01:25,281 [DEBUG] stack ['$510binary_subscr.12', '$R530.15']
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=534, inst=STORE_SUBSCR(arg=None, lineno=111)
2023-11-07 09:01:25,281 [DEBUG] stack ['$510binary_subscr.12', '$R530.15', '$mid532.16']
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=538, inst=LOAD_FAST(arg=2, lineno=112)
2023-11-07 09:01:25,281 [DEBUG] stack []
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=540, inst=STORE_FAST(arg=6, lineno=112)
2023-11-07 09:01:25,281 [DEBUG] stack ['$low538.17']
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=542, inst=LOAD_FAST(arg=3, lineno=113)
2023-11-07 09:01:25,281 [DEBUG] stack []
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=544, inst=LOAD_CONST(arg=2, lineno=113)
2023-11-07 09:01:25,281 [DEBUG] stack ['$high542.18']
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=546, inst=BINARY_OP(arg=10, lineno=113)
2023-11-07 09:01:25,281 [DEBUG] stack ['$high542.18', '$const544.19']
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=550, inst=STORE_FAST(arg=7, lineno=113)
2023-11-07 09:01:25,281 [DEBUG] stack ['$binop_sub546.20']
2023-11-07 09:01:25,281 [DEBUG] dispatch pc=552, inst=NOP(arg=None, lineno=114)
2023-11-07 09:01:25,281 [DEBUG] stack []
2023-11-07 09:01:25,281 [DEBUG] end state. edges=[Edge(pc=554, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,281 [DEBUG] pending: deque([State(pc_initial=456 nstack_initial=0), State(pc_initial=554 nstack_initial=0)])
2023-11-07 09:01:25,281 [DEBUG] pending: deque([State(pc_initial=554 nstack_initial=0)])
2023-11-07 09:01:25,281 [DEBUG] stack: []
2023-11-07 09:01:25,282 [DEBUG] state.pc_initial: State(pc_initial=554 nstack_initial=0)
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=554, inst=LOAD_FAST(arg=6, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack []
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=556, inst=LOAD_FAST(arg=3, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack ['$i554.0']
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=558, inst=COMPARE_OP(arg=0, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack ['$i554.0', '$high556.1']
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=564, inst=POP_JUMP_FORWARD_IF_FALSE(arg=67, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack ['$558compare_op.2']
2023-11-07 09:01:25,282 [DEBUG] end state. edges=[Edge(pc=566, stack=(), blockstack=(), npush=0), Edge(pc=700, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,282 [DEBUG] pending: deque([State(pc_initial=566 nstack_initial=0), State(pc_initial=700 nstack_initial=0)])
2023-11-07 09:01:25,282 [DEBUG] stack: []
2023-11-07 09:01:25,282 [DEBUG] state.pc_initial: State(pc_initial=566 nstack_initial=0)
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=566, inst=PUSH_NULL(arg=None, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack []
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=568, inst=LOAD_DEREF(arg=9, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack ['$null$566.0']
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=570, inst=PUSH_NULL(arg=None, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack ['$null$566.0', '$568load_deref.1']
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=572, inst=LOAD_DEREF(arg=8, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2']
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=574, inst=LOAD_FAST(arg=0, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3']
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=576, inst=LOAD_FAST(arg=1, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3', '$A574.4']
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=578, inst=LOAD_FAST(arg=6, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3', '$A574.4', '$R576.5']
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=580, inst=BINARY_SUBSCR(arg=None, lineno=115)
2023-11-07 09:01:25,282 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3', '$A574.4', '$R576.5', '$i578.6']
2023-11-07 09:01:25,282 [DEBUG] dispatch pc=590, inst=PRECALL(arg=2, lineno=115)
2023-11-07 09:01:25,283 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3', '$A574.4', '$580binary_subscr.7']
2023-11-07 09:01:25,283 [DEBUG] dispatch pc=594, inst=CALL(arg=2, lineno=115)
2023-11-07 09:01:25,283 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3', '$A574.4', '$580binary_subscr.7']
2023-11-07 09:01:25,283 [DEBUG] dispatch pc=604, inst=LOAD_FAST(arg=5, lineno=115)
2023-11-07 09:01:25,283 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$594call.8']
2023-11-07 09:01:25,283 [DEBUG] dispatch pc=606, inst=PRECALL(arg=2, lineno=115)
2023-11-07 09:01:25,283 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$594call.8', '$pivot604.9']
2023-11-07 09:01:25,283 [DEBUG] dispatch pc=610, inst=CALL(arg=2, lineno=115)
2023-11-07 09:01:25,283 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$594call.8', '$pivot604.9']
2023-11-07 09:01:25,283 [DEBUG] dispatch pc=620, inst=POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=115)
2023-11-07 09:01:25,283 [DEBUG] stack ['$610call.10']
2023-11-07 09:01:25,283 [DEBUG] end state. edges=[Edge(pc=622, stack=(), blockstack=(), npush=0), Edge(pc=700, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,283 [DEBUG] pending: deque([State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0), State(pc_initial=700 nstack_initial=0)])
2023-11-07 09:01:25,283 [DEBUG] stack: []
2023-11-07 09:01:25,283 [DEBUG] state.pc_initial: State(pc_initial=700 nstack_initial=0)
2023-11-07 09:01:25,283 [DEBUG] dispatch pc=700, inst=LOAD_FAST(arg=7, lineno=117)
2023-11-07 09:01:25,283 [DEBUG] stack []
2023-11-07 09:01:25,283 [DEBUG] dispatch pc=702, inst=LOAD_FAST(arg=2, lineno=117)
2023-11-07 09:01:25,283 [DEBUG] stack ['$j700.0']
2023-11-07 09:01:25,283 [DEBUG] dispatch pc=704, inst=COMPARE_OP(arg=5, lineno=117)
2023-11-07 09:01:25,283 [DEBUG] stack ['$j700.0', '$low702.1']
2023-11-07 09:01:25,283 [DEBUG] dispatch pc=710, inst=POP_JUMP_FORWARD_IF_FALSE(arg=67, lineno=117)
2023-11-07 09:01:25,283 [DEBUG] stack ['$704compare_op.2']
2023-11-07 09:01:25,283 [DEBUG] end state. edges=[Edge(pc=712, stack=(), blockstack=(), npush=0), Edge(pc=846, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,283 [DEBUG] pending: deque([State(pc_initial=622 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=712 nstack_initial=0), State(pc_initial=846 nstack_initial=0)])
2023-11-07 09:01:25,283 [DEBUG] stack: []
2023-11-07 09:01:25,283 [DEBUG] state.pc_initial: State(pc_initial=622 nstack_initial=0)
2023-11-07 09:01:25,283 [DEBUG] dispatch pc=622, inst=LOAD_FAST(arg=6, lineno=116)
2023-11-07 09:01:25,283 [DEBUG] stack []
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=624, inst=LOAD_CONST(arg=2, lineno=116)
2023-11-07 09:01:25,284 [DEBUG] stack ['$i622.0']
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=626, inst=BINARY_OP(arg=13, lineno=116)
2023-11-07 09:01:25,284 [DEBUG] stack ['$i622.0', '$const624.1']
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=630, inst=STORE_FAST(arg=6, lineno=116)
2023-11-07 09:01:25,284 [DEBUG] stack ['$binop_iadd626.2']
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=632, inst=LOAD_FAST(arg=6, lineno=115)
2023-11-07 09:01:25,284 [DEBUG] stack []
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=634, inst=LOAD_FAST(arg=3, lineno=115)
2023-11-07 09:01:25,284 [DEBUG] stack ['$i632.3']
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=636, inst=COMPARE_OP(arg=0, lineno=115)
2023-11-07 09:01:25,284 [DEBUG] stack ['$i632.3', '$high634.4']
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=642, inst=POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=115)
2023-11-07 09:01:25,284 [DEBUG] stack ['$636compare_op.5']
2023-11-07 09:01:25,284 [DEBUG] end state. edges=[Edge(pc=644, stack=(), blockstack=(), npush=0), Edge(pc=700, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,284 [DEBUG] pending: deque([State(pc_initial=700 nstack_initial=0), State(pc_initial=712 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=644 nstack_initial=0), State(pc_initial=700 nstack_initial=0)])
2023-11-07 09:01:25,284 [DEBUG] pending: deque([State(pc_initial=712 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=644 nstack_initial=0), State(pc_initial=700 nstack_initial=0)])
2023-11-07 09:01:25,284 [DEBUG] stack: []
2023-11-07 09:01:25,284 [DEBUG] state.pc_initial: State(pc_initial=712 nstack_initial=0)
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=712, inst=PUSH_NULL(arg=None, lineno=117)
2023-11-07 09:01:25,284 [DEBUG] stack []
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=714, inst=LOAD_DEREF(arg=9, lineno=117)
2023-11-07 09:01:25,284 [DEBUG] stack ['$null$712.0']
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=716, inst=LOAD_FAST(arg=5, lineno=117)
2023-11-07 09:01:25,284 [DEBUG] stack ['$null$712.0', '$714load_deref.1']
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=718, inst=PUSH_NULL(arg=None, lineno=117)
2023-11-07 09:01:25,284 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2']
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=720, inst=LOAD_DEREF(arg=8, lineno=117)
2023-11-07 09:01:25,284 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3']
2023-11-07 09:01:25,284 [DEBUG] dispatch pc=722, inst=LOAD_FAST(arg=0, lineno=117)
2023-11-07 09:01:25,284 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4']
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=724, inst=LOAD_FAST(arg=1, lineno=117)
2023-11-07 09:01:25,285 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4', '$A722.5']
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=726, inst=LOAD_FAST(arg=7, lineno=117)
2023-11-07 09:01:25,285 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4', '$A722.5', '$R724.6']
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=728, inst=BINARY_SUBSCR(arg=None, lineno=117)
2023-11-07 09:01:25,285 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4', '$A722.5', '$R724.6', '$j726.7']
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=738, inst=PRECALL(arg=2, lineno=117)
2023-11-07 09:01:25,285 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4', '$A722.5', '$728binary_subscr.8']
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=742, inst=CALL(arg=2, lineno=117)
2023-11-07 09:01:25,285 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4', '$A722.5', '$728binary_subscr.8']
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=752, inst=PRECALL(arg=2, lineno=117)
2023-11-07 09:01:25,285 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$742call.9']
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=756, inst=CALL(arg=2, lineno=117)
2023-11-07 09:01:25,285 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$742call.9']
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=766, inst=POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=117)
2023-11-07 09:01:25,285 [DEBUG] stack ['$756call.10']
2023-11-07 09:01:25,285 [DEBUG] end state. edges=[Edge(pc=768, stack=(), blockstack=(), npush=0), Edge(pc=846, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,285 [DEBUG] pending: deque([State(pc_initial=846 nstack_initial=0), State(pc_initial=644 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=768 nstack_initial=0), State(pc_initial=846 nstack_initial=0)])
2023-11-07 09:01:25,285 [DEBUG] stack: []
2023-11-07 09:01:25,285 [DEBUG] state.pc_initial: State(pc_initial=846 nstack_initial=0)
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=846, inst=LOAD_FAST(arg=6, lineno=119)
2023-11-07 09:01:25,285 [DEBUG] stack []
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=848, inst=LOAD_FAST(arg=7, lineno=119)
2023-11-07 09:01:25,285 [DEBUG] stack ['$i846.0']
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=850, inst=COMPARE_OP(arg=5, lineno=119)
2023-11-07 09:01:25,285 [DEBUG] stack ['$i846.0', '$j848.1']
2023-11-07 09:01:25,285 [DEBUG] dispatch pc=856, inst=POP_JUMP_FORWARD_IF_FALSE(arg=1, lineno=119)
2023-11-07 09:01:25,285 [DEBUG] stack ['$850compare_op.2']
2023-11-07 09:01:25,285 [DEBUG] end state. edges=[Edge(pc=858, stack=(), blockstack=(), npush=0), Edge(pc=860, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,286 [DEBUG] pending: deque([State(pc_initial=644 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=768 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=858 nstack_initial=0), State(pc_initial=860 nstack_initial=0)])
2023-11-07 09:01:25,286 [DEBUG] stack: []
2023-11-07 09:01:25,286 [DEBUG] state.pc_initial: State(pc_initial=644 nstack_initial=0)
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=644, inst=PUSH_NULL(arg=None, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack []
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=646, inst=LOAD_DEREF(arg=9, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=648, inst=PUSH_NULL(arg=None, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=650, inst=LOAD_DEREF(arg=8, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=652, inst=LOAD_FAST(arg=0, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=654, inst=LOAD_FAST(arg=1, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3', '$A652.4']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=656, inst=LOAD_FAST(arg=6, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3', '$A652.4', '$R654.5']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=658, inst=BINARY_SUBSCR(arg=None, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3', '$A652.4', '$R654.5', '$i656.6']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=668, inst=PRECALL(arg=2, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3', '$A652.4', '$658binary_subscr.7']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=672, inst=CALL(arg=2, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3', '$A652.4', '$658binary_subscr.7']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=682, inst=LOAD_FAST(arg=5, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$672call.8']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=684, inst=PRECALL(arg=2, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$672call.8', '$pivot682.9']
2023-11-07 09:01:25,286 [DEBUG] dispatch pc=688, inst=CALL(arg=2, lineno=115)
2023-11-07 09:01:25,286 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$672call.8', '$pivot682.9']
2023-11-07 09:01:25,287 [DEBUG] dispatch pc=698, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=39, lineno=115)
2023-11-07 09:01:25,287 [DEBUG] stack ['$688call.10']
2023-11-07 09:01:25,287 [DEBUG] end state. edges=[Edge(pc=700, stack=(), blockstack=(), npush=0), Edge(pc=622, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,287 [DEBUG] pending: deque([State(pc_initial=700 nstack_initial=0), State(pc_initial=768 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=858 nstack_initial=0), State(pc_initial=860 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0)])
2023-11-07 09:01:25,287 [DEBUG] pending: deque([State(pc_initial=768 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=858 nstack_initial=0), State(pc_initial=860 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0)])
2023-11-07 09:01:25,287 [DEBUG] stack: []
2023-11-07 09:01:25,287 [DEBUG] state.pc_initial: State(pc_initial=768 nstack_initial=0)
2023-11-07 09:01:25,287 [DEBUG] dispatch pc=768, inst=LOAD_FAST(arg=7, lineno=118)
2023-11-07 09:01:25,287 [DEBUG] stack []
2023-11-07 09:01:25,287 [DEBUG] dispatch pc=770, inst=LOAD_CONST(arg=2, lineno=118)
2023-11-07 09:01:25,287 [DEBUG] stack ['$j768.0']
2023-11-07 09:01:25,287 [DEBUG] dispatch pc=772, inst=BINARY_OP(arg=23, lineno=118)
2023-11-07 09:01:25,287 [DEBUG] stack ['$j768.0', '$const770.1']
2023-11-07 09:01:25,287 [DEBUG] dispatch pc=776, inst=STORE_FAST(arg=7, lineno=118)
2023-11-07 09:01:25,287 [DEBUG] stack ['$binop_isub772.2']
2023-11-07 09:01:25,287 [DEBUG] dispatch pc=778, inst=LOAD_FAST(arg=7, lineno=117)
2023-11-07 09:01:25,287 [DEBUG] stack []
2023-11-07 09:01:25,287 [DEBUG] dispatch pc=780, inst=LOAD_FAST(arg=2, lineno=117)
2023-11-07 09:01:25,287 [DEBUG] stack ['$j778.3']
2023-11-07 09:01:25,287 [DEBUG] dispatch pc=782, inst=COMPARE_OP(arg=5, lineno=117)
2023-11-07 09:01:25,287 [DEBUG] stack ['$j778.3', '$low780.4']
2023-11-07 09:01:25,287 [DEBUG] dispatch pc=788, inst=POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=117)
2023-11-07 09:01:25,287 [DEBUG] stack ['$782compare_op.5']
2023-11-07 09:01:25,287 [DEBUG] end state. edges=[Edge(pc=790, stack=(), blockstack=(), npush=0), Edge(pc=846, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,287 [DEBUG] pending: deque([State(pc_initial=846 nstack_initial=0), State(pc_initial=858 nstack_initial=0), State(pc_initial=860 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0), State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0)])
2023-11-07 09:01:25,287 [DEBUG] pending: deque([State(pc_initial=858 nstack_initial=0), State(pc_initial=860 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0), State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0)])
2023-11-07 09:01:25,287 [DEBUG] stack: []
2023-11-07 09:01:25,287 [DEBUG] state.pc_initial: State(pc_initial=858 nstack_initial=0)
2023-11-07 09:01:25,287 [DEBUG] dispatch pc=858, inst=JUMP_FORWARD(arg=34, lineno=120)
2023-11-07 09:01:25,287 [DEBUG] stack []
2023-11-07 09:01:25,287 [DEBUG] end state. edges=[Edge(pc=928, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,287 [DEBUG] pending: deque([State(pc_initial=860 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0), State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=928 nstack_initial=0)])
2023-11-07 09:01:25,287 [DEBUG] stack: []
2023-11-07 09:01:25,287 [DEBUG] state.pc_initial: State(pc_initial=860 nstack_initial=0)
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=860, inst=LOAD_FAST(arg=1, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack []
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=862, inst=LOAD_FAST(arg=7, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$R860.0']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=864, inst=BINARY_SUBSCR(arg=None, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$R860.0', '$j862.1']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=874, inst=LOAD_FAST(arg=1, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$864binary_subscr.2']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=876, inst=LOAD_FAST(arg=6, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$864binary_subscr.2', '$R874.3']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=878, inst=BINARY_SUBSCR(arg=None, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$864binary_subscr.2', '$R874.3', '$i876.4']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=888, inst=SWAP(arg=2, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$864binary_subscr.2', '$878binary_subscr.5']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=890, inst=LOAD_FAST(arg=1, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$878binary_subscr.5', '$864binary_subscr.2']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=892, inst=LOAD_FAST(arg=6, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$878binary_subscr.5', '$864binary_subscr.2', '$R890.6']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=894, inst=STORE_SUBSCR(arg=None, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$878binary_subscr.5', '$864binary_subscr.2', '$R890.6', '$i892.7']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=898, inst=LOAD_FAST(arg=1, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$878binary_subscr.5']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=900, inst=LOAD_FAST(arg=7, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$878binary_subscr.5', '$R898.8']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=902, inst=STORE_SUBSCR(arg=None, lineno=121)
2023-11-07 09:01:25,288 [DEBUG] stack ['$878binary_subscr.5', '$R898.8', '$j900.9']
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=906, inst=LOAD_FAST(arg=6, lineno=122)
2023-11-07 09:01:25,288 [DEBUG] stack []
2023-11-07 09:01:25,288 [DEBUG] dispatch pc=908, inst=LOAD_CONST(arg=2, lineno=122)
2023-11-07 09:01:25,289 [DEBUG] stack ['$i906.10']
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=910, inst=BINARY_OP(arg=13, lineno=122)
2023-11-07 09:01:25,289 [DEBUG] stack ['$i906.10', '$const908.11']
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=914, inst=STORE_FAST(arg=6, lineno=122)
2023-11-07 09:01:25,289 [DEBUG] stack ['$binop_iadd910.12']
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=916, inst=LOAD_FAST(arg=7, lineno=123)
2023-11-07 09:01:25,289 [DEBUG] stack []
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=918, inst=LOAD_CONST(arg=2, lineno=123)
2023-11-07 09:01:25,289 [DEBUG] stack ['$j916.13']
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=920, inst=BINARY_OP(arg=23, lineno=123)
2023-11-07 09:01:25,289 [DEBUG] stack ['$j916.13', '$const918.14']
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=924, inst=STORE_FAST(arg=7, lineno=123)
2023-11-07 09:01:25,289 [DEBUG] stack ['$binop_isub920.15']
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=926, inst=JUMP_BACKWARD(arg=187, lineno=114)
2023-11-07 09:01:25,289 [DEBUG] stack []
2023-11-07 09:01:25,289 [DEBUG] end state. edges=[Edge(pc=554, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,289 [DEBUG] pending: deque([State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0), State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=928 nstack_initial=0), State(pc_initial=554 nstack_initial=0)])
2023-11-07 09:01:25,289 [DEBUG] pending: deque([State(pc_initial=622 nstack_initial=0), State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=928 nstack_initial=0), State(pc_initial=554 nstack_initial=0)])
2023-11-07 09:01:25,289 [DEBUG] pending: deque([State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=928 nstack_initial=0), State(pc_initial=554 nstack_initial=0)])
2023-11-07 09:01:25,289 [DEBUG] stack: []
2023-11-07 09:01:25,289 [DEBUG] state.pc_initial: State(pc_initial=790 nstack_initial=0)
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=790, inst=PUSH_NULL(arg=None, lineno=117)
2023-11-07 09:01:25,289 [DEBUG] stack []
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=792, inst=LOAD_DEREF(arg=9, lineno=117)
2023-11-07 09:01:25,289 [DEBUG] stack ['$null$790.0']
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=794, inst=LOAD_FAST(arg=5, lineno=117)
2023-11-07 09:01:25,289 [DEBUG] stack ['$null$790.0', '$792load_deref.1']
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=796, inst=PUSH_NULL(arg=None, lineno=117)
2023-11-07 09:01:25,289 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2']
2023-11-07 09:01:25,289 [DEBUG] dispatch pc=798, inst=LOAD_DEREF(arg=8, lineno=117)
2023-11-07 09:01:25,290 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=800, inst=LOAD_FAST(arg=0, lineno=117)
2023-11-07 09:01:25,290 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=802, inst=LOAD_FAST(arg=1, lineno=117)
2023-11-07 09:01:25,290 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4', '$A800.5']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=804, inst=LOAD_FAST(arg=7, lineno=117)
2023-11-07 09:01:25,290 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4', '$A800.5', '$R802.6']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=806, inst=BINARY_SUBSCR(arg=None, lineno=117)
2023-11-07 09:01:25,290 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4', '$A800.5', '$R802.6', '$j804.7']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=816, inst=PRECALL(arg=2, lineno=117)
2023-11-07 09:01:25,290 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4', '$A800.5', '$806binary_subscr.8']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=820, inst=CALL(arg=2, lineno=117)
2023-11-07 09:01:25,290 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4', '$A800.5', '$806binary_subscr.8']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=830, inst=PRECALL(arg=2, lineno=117)
2023-11-07 09:01:25,290 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$820call.9']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=834, inst=CALL(arg=2, lineno=117)
2023-11-07 09:01:25,290 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$820call.9']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=844, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=39, lineno=117)
2023-11-07 09:01:25,290 [DEBUG] stack ['$834call.10']
2023-11-07 09:01:25,290 [DEBUG] end state. edges=[Edge(pc=846, stack=(), blockstack=(), npush=0), Edge(pc=768, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,290 [DEBUG] pending: deque([State(pc_initial=846 nstack_initial=0), State(pc_initial=928 nstack_initial=0), State(pc_initial=554 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=768 nstack_initial=0)])
2023-11-07 09:01:25,290 [DEBUG] pending: deque([State(pc_initial=928 nstack_initial=0), State(pc_initial=554 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=768 nstack_initial=0)])
2023-11-07 09:01:25,290 [DEBUG] stack: []
2023-11-07 09:01:25,290 [DEBUG] state.pc_initial: State(pc_initial=928 nstack_initial=0)
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=928, inst=LOAD_FAST(arg=1, lineno=126)
2023-11-07 09:01:25,290 [DEBUG] stack []
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=930, inst=LOAD_FAST(arg=3, lineno=126)
2023-11-07 09:01:25,290 [DEBUG] stack ['$R928.0']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=932, inst=BINARY_SUBSCR(arg=None, lineno=126)
2023-11-07 09:01:25,290 [DEBUG] stack ['$R928.0', '$high930.1']
2023-11-07 09:01:25,290 [DEBUG] dispatch pc=942, inst=LOAD_FAST(arg=1, lineno=126)
2023-11-07 09:01:25,291 [DEBUG] stack ['$932binary_subscr.2']
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=944, inst=LOAD_FAST(arg=6, lineno=126)
2023-11-07 09:01:25,291 [DEBUG] stack ['$932binary_subscr.2', '$R942.3']
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=946, inst=BINARY_SUBSCR(arg=None, lineno=126)
2023-11-07 09:01:25,291 [DEBUG] stack ['$932binary_subscr.2', '$R942.3', '$i944.4']
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=956, inst=SWAP(arg=2, lineno=126)
2023-11-07 09:01:25,291 [DEBUG] stack ['$932binary_subscr.2', '$946binary_subscr.5']
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=958, inst=LOAD_FAST(arg=1, lineno=126)
2023-11-07 09:01:25,291 [DEBUG] stack ['$946binary_subscr.5', '$932binary_subscr.2']
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=960, inst=LOAD_FAST(arg=6, lineno=126)
2023-11-07 09:01:25,291 [DEBUG] stack ['$946binary_subscr.5', '$932binary_subscr.2', '$R958.6']
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=962, inst=STORE_SUBSCR(arg=None, lineno=126)
2023-11-07 09:01:25,291 [DEBUG] stack ['$946binary_subscr.5', '$932binary_subscr.2', '$R958.6', '$i960.7']
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=966, inst=LOAD_FAST(arg=1, lineno=126)
2023-11-07 09:01:25,291 [DEBUG] stack ['$946binary_subscr.5']
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=968, inst=LOAD_FAST(arg=3, lineno=126)
2023-11-07 09:01:25,291 [DEBUG] stack ['$946binary_subscr.5', '$R966.8']
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=970, inst=STORE_SUBSCR(arg=None, lineno=126)
2023-11-07 09:01:25,291 [DEBUG] stack ['$946binary_subscr.5', '$R966.8', '$high968.9']
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=974, inst=LOAD_FAST(arg=6, lineno=127)
2023-11-07 09:01:25,291 [DEBUG] stack []
2023-11-07 09:01:25,291 [DEBUG] dispatch pc=976, inst=RETURN_VALUE(arg=None, lineno=127)
2023-11-07 09:01:25,291 [DEBUG] stack ['$i974.10']
2023-11-07 09:01:25,291 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,291 [DEBUG] pending: deque([State(pc_initial=554 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=768 nstack_initial=0)])
2023-11-07 09:01:25,291 [DEBUG] pending: deque([State(pc_initial=846 nstack_initial=0), State(pc_initial=768 nstack_initial=0)])
2023-11-07 09:01:25,291 [DEBUG] pending: deque([State(pc_initial=768 nstack_initial=0)])
2023-11-07 09:01:25,291 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,292 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=188 nstack_initial=0): set(),
             State(pc_initial=276 nstack_initial=0): set(),
             State(pc_initial=322 nstack_initial=0): set(),
             State(pc_initial=410 nstack_initial=0): set(),
             State(pc_initial=456 nstack_initial=0): set(),
             State(pc_initial=554 nstack_initial=0): set(),
             State(pc_initial=566 nstack_initial=0): set(),
             State(pc_initial=622 nstack_initial=0): set(),
             State(pc_initial=644 nstack_initial=0): set(),
             State(pc_initial=700 nstack_initial=0): set(),
             State(pc_initial=712 nstack_initial=0): set(),
             State(pc_initial=768 nstack_initial=0): set(),
             State(pc_initial=790 nstack_initial=0): set(),
             State(pc_initial=846 nstack_initial=0): set(),
             State(pc_initial=858 nstack_initial=0): set(),
             State(pc_initial=860 nstack_initial=0): set(),
             State(pc_initial=928 nstack_initial=0): set()})
2023-11-07 09:01:25,292 [DEBUG] defmap: {}
2023-11-07 09:01:25,292 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,292 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,292 [DEBUG] keep phismap: {}
2023-11-07 09:01:25,292 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:25,292 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$low6.0'}), (8, {'res': '$const8.1'}), (10, {'lhs': '$low6.0', 'rhs': '$const8.1', 'res': '$10compare_op.2'}), (12, {}), (14, {}), (16, {'pred': '$10compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 22: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$assertion_error18.0'}), (20, {'exc': '$assertion_error18.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$high22.0'}), (24, {'res': '$low24.1'}), (26, {'lhs': '$high22.0', 'rhs': '$low24.1', 'res': '$26compare_op.2'}), (28, {}), (30, {}), (32, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$assertion_error34.0'}), (36, {'exc': '$assertion_error34.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$low38.0'}), (40, {'res': '$high40.1'}), (42, {'op': '+', 'lhs': '$low38.0', 'rhs': '$high40.1', 'res': '$binop_add42.2'}), (44, {}), (46, {'res': '$const46.3'}), (48, {'op': '>>', 'lhs': '$binop_add42.2', 'rhs': '$const46.3', 'res': '$binop_rshift48.4'}), (50, {}), (52, {'value': '$binop_rshift48.4'}), (54, {}), (56, {'res': '$56load_deref.6'}), (58, {}), (60, {'res': '$60load_deref.8'}), (62, {'res': '$A62.9'}), (64, {'res': '$R64.10'}), (66, {'res': '$mid66.11'}), (68, {'index': '$mid66.11', 'target': '$R64.10', 'res': '$68binary_subscr.12'}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {}), (80, {}), (82, {'func': '$60load_deref.8', 'args': ['$A62.9', '$68binary_subscr.12'], 'kw_names': None, 'res': '$82call.13'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'res': '$94load_deref.15'}), (96, {'res': '$A96.16'}), (98, {'res': '$R98.17'}), (100, {'res': '$low100.18'}), (102, {'index': '$low100.18', 'target': '$R98.17', 'res': '$102binary_subscr.19'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {}), (114, {}), (116, {'func': '$94load_deref.15', 'args': ['$A96.16', '$102binary_subscr.19'], 'kw_names': None, 'res': '$116call.20'}), (118, {}), (120, {}), (122, {}), (124, {}), (126, {}), (128, {}), (130, {'func': '$56load_deref.6', 'args': ['$82call.13', '$116call.20'], 'kw_names': None, 'res': '$130call.21'}), (132, {}), (134, {}), (136, {}), (138, {}), (140, {'pred': '$130call.21'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 188: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$R142.0'}), (144, {'res': '$mid144.1'}), (146, {'index': '$mid144.1', 'target': '$R142.0', 'res': '$146binary_subscr.2'}), (148, {}), (150, {}), (152, {}), (154, {}), (156, {'res': '$R156.3'}), (158, {'res': '$low158.4'}), (160, {'index': '$low158.4', 'target': '$R156.3', 'res': '$160binary_subscr.5'}), (162, {}), (164, {}), (166, {}), (168, {}), (172, {'res': '$R172.6'}), (174, {'res': '$low174.7'}), (176, {'target': '$R172.6', 'index': '$low174.7', 'value': '$146binary_subscr.2'}), (178, {}), (180, {'res': '$R180.8'}), (182, {'res': '$mid182.9'}), (184, {'target': '$R180.8', 'index': '$mid182.9', 'value': '$160binary_subscr.5'}), (186, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={188: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=188 nstack_initial=0):
AdaptBlockInfo(insts=((188, {}), (190, {'res': '$190load_deref.1'}), (192, {}), (194, {'res': '$194load_deref.3'}), (196, {'res': '$A196.4'}), (198, {'res': '$R198.5'}), (200, {'res': '$high200.6'}), (202, {'index': '$high200.6', 'target': '$R198.5', 'res': '$202binary_subscr.7'}), (204, {}), (206, {}), (208, {}), (210, {}), (212, {}), (214, {}), (216, {'func': '$194load_deref.3', 'args': ['$A196.4', '$202binary_subscr.7'], 'kw_names': None, 'res': '$216call.8'}), (218, {}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'res': '$228load_deref.10'}), (230, {'res': '$A230.11'}), (232, {'res': '$R232.12'}), (234, {'res': '$mid234.13'}), (236, {'index': '$mid234.13', 'target': '$R232.12', 'res': '$236binary_subscr.14'}), (238, {}), (240, {}), (242, {}), (244, {}), (246, {}), (248, {}), (250, {'func': '$228load_deref.10', 'args': ['$A230.11', '$236binary_subscr.14'], 'kw_names': None, 'res': '$250call.15'}), (252, {}), (254, {}), (256, {}), (258, {}), (260, {}), (262, {}), (264, {'func': '$190load_deref.1', 'args': ['$216call.8', '$250call.15'], 'kw_names': None, 'res': '$264call.16'}), (266, {}), (268, {}), (270, {}), (272, {}), (274, {'pred': '$264call.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={276: (), 322: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=276 nstack_initial=0):
AdaptBlockInfo(insts=((276, {'res': '$R276.0'}), (278, {'res': '$mid278.1'}), (280, {'index': '$mid278.1', 'target': '$R276.0', 'res': '$280binary_subscr.2'}), (282, {}), (284, {}), (286, {}), (288, {}), (290, {'res': '$R290.3'}), (292, {'res': '$high292.4'}), (294, {'index': '$high292.4', 'target': '$R290.3', 'res': '$294binary_subscr.5'}), (296, {}), (298, {}), (300, {}), (302, {}), (306, {'res': '$R306.6'}), (308, {'res': '$high308.7'}), (310, {'target': '$R306.6', 'index': '$high308.7', 'value': '$280binary_subscr.2'}), (312, {}), (314, {'res': '$R314.8'}), (316, {'res': '$mid316.9'}), (318, {'target': '$R314.8', 'index': '$mid316.9', 'value': '$294binary_subscr.5'}), (320, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={322: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=322 nstack_initial=0):
AdaptBlockInfo(insts=((322, {}), (324, {'res': '$324load_deref.1'}), (326, {}), (328, {'res': '$328load_deref.3'}), (330, {'res': '$A330.4'}), (332, {'res': '$R332.5'}), (334, {'res': '$mid334.6'}), (336, {'index': '$mid334.6', 'target': '$R332.5', 'res': '$336binary_subscr.7'}), (338, {}), (340, {}), (342, {}), (344, {}), (346, {}), (348, {}), (350, {'func': '$328load_deref.3', 'args': ['$A330.4', '$336binary_subscr.7'], 'kw_names': None, 'res': '$350call.8'}), (352, {}), (354, {}), (356, {}), (358, {}), (360, {}), (362, {'res': '$362load_deref.10'}), (364, {'res': '$A364.11'}), (366, {'res': '$R366.12'}), (368, {'res': '$low368.13'}), (370, {'index': '$low368.13', 'target': '$R366.12', 'res': '$370binary_subscr.14'}), (372, {}), (374, {}), (376, {}), (378, {}), (380, {}), (382, {}), (384, {'func': '$362load_deref.10', 'args': ['$A364.11', '$370binary_subscr.14'], 'kw_names': None, 'res': '$384call.15'}), (386, {}), (388, {}), (390, {}), (392, {}), (394, {}), (396, {}), (398, {'func': '$324load_deref.1', 'args': ['$350call.8', '$384call.15'], 'kw_names': None, 'res': '$398call.16'}), (400, {}), (402, {}), (404, {}), (406, {}), (408, {'pred': '$398call.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={410: (), 456: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=410 nstack_initial=0):
AdaptBlockInfo(insts=((410, {'res': '$R410.0'}), (412, {'res': '$mid412.1'}), (414, {'index': '$mid412.1', 'target': '$R410.0', 'res': '$414binary_subscr.2'}), (416, {}), (418, {}), (420, {}), (422, {}), (424, {'res': '$R424.3'}), (426, {'res': '$low426.4'}), (428, {'index': '$low426.4', 'target': '$R424.3', 'res': '$428binary_subscr.5'}), (430, {}), (432, {}), (434, {}), (436, {}), (440, {'res': '$R440.6'}), (442, {'res': '$low442.7'}), (444, {'target': '$R440.6', 'index': '$low442.7', 'value': '$414binary_subscr.2'}), (446, {}), (448, {'res': '$R448.8'}), (450, {'res': '$mid450.9'}), (452, {'target': '$R448.8', 'index': '$mid450.9', 'value': '$428binary_subscr.5'}), (454, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={456: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=456 nstack_initial=0):
AdaptBlockInfo(insts=((456, {}), (458, {'res': '$458load_deref.1'}), (460, {'res': '$A460.2'}), (462, {'res': '$R462.3'}), (464, {'res': '$mid464.4'}), (466, {'index': '$mid464.4', 'target': '$R462.3', 'res': '$466binary_subscr.5'}), (468, {}), (470, {}), (472, {}), (474, {}), (476, {}), (478, {}), (480, {'func': '$458load_deref.1', 'args': ['$A460.2', '$466binary_subscr.5'], 'kw_names': None, 'res': '$480call.6'}), (482, {}), (484, {}), (486, {}), (488, {}), (490, {'value': '$480call.6'}), (492, {'res': '$R492.7'}), (494, {'res': '$mid494.8'}), (496, {'index': '$mid494.8', 'target': '$R492.7', 'res': '$496binary_subscr.9'}), (498, {}), (500, {}), (502, {}), (504, {}), (506, {'res': '$R506.10'}), (508, {'res': '$high508.11'}), (510, {'index': '$high508.11', 'target': '$R506.10', 'res': '$510binary_subscr.12'}), (512, {}), (514, {}), (516, {}), (518, {}), (522, {'res': '$R522.13'}), (524, {'res': '$high524.14'}), (526, {'target': '$R522.13', 'index': '$high524.14', 'value': '$496binary_subscr.9'}), (528, {}), (530, {'res': '$R530.15'}), (532, {'res': '$mid532.16'}), (534, {'target': '$R530.15', 'index': '$mid532.16', 'value': '$510binary_subscr.12'}), (536, {}), (538, {'res': '$low538.17'}), (540, {'value': '$low538.17'}), (542, {'res': '$high542.18'}), (544, {'res': '$const544.19'}), (546, {'op': '-', 'lhs': '$high542.18', 'rhs': '$const544.19', 'res': '$binop_sub546.20'}), (548, {}), (550, {'value': '$binop_sub546.20'}), (552, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={554: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=554 nstack_initial=0):
AdaptBlockInfo(insts=((554, {'res': '$i554.0'}), (556, {'res': '$high556.1'}), (558, {'lhs': '$i554.0', 'rhs': '$high556.1', 'res': '$558compare_op.2'}), (560, {}), (562, {}), (564, {'pred': '$558compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={566: (), 700: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=566 nstack_initial=0):
AdaptBlockInfo(insts=((566, {}), (568, {'res': '$568load_deref.1'}), (570, {}), (572, {'res': '$572load_deref.3'}), (574, {'res': '$A574.4'}), (576, {'res': '$R576.5'}), (578, {'res': '$i578.6'}), (580, {'index': '$i578.6', 'target': '$R576.5', 'res': '$580binary_subscr.7'}), (582, {}), (584, {}), (586, {}), (588, {}), (590, {}), (592, {}), (594, {'func': '$572load_deref.3', 'args': ['$A574.4', '$580binary_subscr.7'], 'kw_names': None, 'res': '$594call.8'}), (596, {}), (598, {}), (600, {}), (602, {}), (604, {'res': '$pivot604.9'}), (606, {}), (608, {}), (610, {'func': '$568load_deref.1', 'args': ['$594call.8', '$pivot604.9'], 'kw_names': None, 'res': '$610call.10'}), (612, {}), (614, {}), (616, {}), (618, {}), (620, {'pred': '$610call.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={622: (), 700: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=622 nstack_initial=0):
AdaptBlockInfo(insts=((622, {'res': '$i622.0'}), (624, {'res': '$const624.1'}), (626, {'op': '+=', 'lhs': '$i622.0', 'rhs': '$const624.1', 'res': '$binop_iadd626.2'}), (628, {}), (630, {'value': '$binop_iadd626.2'}), (632, {'res': '$i632.3'}), (634, {'res': '$high634.4'}), (636, {'lhs': '$i632.3', 'rhs': '$high634.4', 'res': '$636compare_op.5'}), (638, {}), (640, {}), (642, {'pred': '$636compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={644: (), 700: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=644 nstack_initial=0):
AdaptBlockInfo(insts=((644, {}), (646, {'res': '$646load_deref.1'}), (648, {}), (650, {'res': '$650load_deref.3'}), (652, {'res': '$A652.4'}), (654, {'res': '$R654.5'}), (656, {'res': '$i656.6'}), (658, {'index': '$i656.6', 'target': '$R654.5', 'res': '$658binary_subscr.7'}), (660, {}), (662, {}), (664, {}), (666, {}), (668, {}), (670, {}), (672, {'func': '$650load_deref.3', 'args': ['$A652.4', '$658binary_subscr.7'], 'kw_names': None, 'res': '$672call.8'}), (674, {}), (676, {}), (678, {}), (680, {}), (682, {'res': '$pivot682.9'}), (684, {}), (686, {}), (688, {'func': '$646load_deref.1', 'args': ['$672call.8', '$pivot682.9'], 'kw_names': None, 'res': '$688call.10'}), (690, {}), (692, {}), (694, {}), (696, {}), (698, {'pred': '$688call.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={700: (), 622: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=700 nstack_initial=0):
AdaptBlockInfo(insts=((700, {'res': '$j700.0'}), (702, {'res': '$low702.1'}), (704, {'lhs': '$j700.0', 'rhs': '$low702.1', 'res': '$704compare_op.2'}), (706, {}), (708, {}), (710, {'pred': '$704compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={712: (), 846: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=712 nstack_initial=0):
AdaptBlockInfo(insts=((712, {}), (714, {'res': '$714load_deref.1'}), (716, {'res': '$pivot716.2'}), (718, {}), (720, {'res': '$720load_deref.4'}), (722, {'res': '$A722.5'}), (724, {'res': '$R724.6'}), (726, {'res': '$j726.7'}), (728, {'index': '$j726.7', 'target': '$R724.6', 'res': '$728binary_subscr.8'}), (730, {}), (732, {}), (734, {}), (736, {}), (738, {}), (740, {}), (742, {'func': '$720load_deref.4', 'args': ['$A722.5', '$728binary_subscr.8'], 'kw_names': None, 'res': '$742call.9'}), (744, {}), (746, {}), (748, {}), (750, {}), (752, {}), (754, {}), (756, {'func': '$714load_deref.1', 'args': ['$pivot716.2', '$742call.9'], 'kw_names': None, 'res': '$756call.10'}), (758, {}), (760, {}), (762, {}), (764, {}), (766, {'pred': '$756call.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={768: (), 846: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=768 nstack_initial=0):
AdaptBlockInfo(insts=((768, {'res': '$j768.0'}), (770, {'res': '$const770.1'}), (772, {'op': '-=', 'lhs': '$j768.0', 'rhs': '$const770.1', 'res': '$binop_isub772.2'}), (774, {}), (776, {'value': '$binop_isub772.2'}), (778, {'res': '$j778.3'}), (780, {'res': '$low780.4'}), (782, {'lhs': '$j778.3', 'rhs': '$low780.4', 'res': '$782compare_op.5'}), (784, {}), (786, {}), (788, {'pred': '$782compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={790: (), 846: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=790 nstack_initial=0):
AdaptBlockInfo(insts=((790, {}), (792, {'res': '$792load_deref.1'}), (794, {'res': '$pivot794.2'}), (796, {}), (798, {'res': '$798load_deref.4'}), (800, {'res': '$A800.5'}), (802, {'res': '$R802.6'}), (804, {'res': '$j804.7'}), (806, {'index': '$j804.7', 'target': '$R802.6', 'res': '$806binary_subscr.8'}), (808, {}), (810, {}), (812, {}), (814, {}), (816, {}), (818, {}), (820, {'func': '$798load_deref.4', 'args': ['$A800.5', '$806binary_subscr.8'], 'kw_names': None, 'res': '$820call.9'}), (822, {}), (824, {}), (826, {}), (828, {}), (830, {}), (832, {}), (834, {'func': '$792load_deref.1', 'args': ['$pivot794.2', '$820call.9'], 'kw_names': None, 'res': '$834call.10'}), (836, {}), (838, {}), (840, {}), (842, {}), (844, {'pred': '$834call.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={846: (), 768: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=846 nstack_initial=0):
AdaptBlockInfo(insts=((846, {'res': '$i846.0'}), (848, {'res': '$j848.1'}), (850, {'lhs': '$i846.0', 'rhs': '$j848.1', 'res': '$850compare_op.2'}), (852, {}), (854, {}), (856, {'pred': '$850compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={858: (), 860: ()})
2023-11-07 09:01:25,292 [DEBUG] block_infos State(pc_initial=858 nstack_initial=0):
AdaptBlockInfo(insts=((858, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={928: ()})
2023-11-07 09:01:25,293 [DEBUG] block_infos State(pc_initial=860 nstack_initial=0):
AdaptBlockInfo(insts=((860, {'res': '$R860.0'}), (862, {'res': '$j862.1'}), (864, {'index': '$j862.1', 'target': '$R860.0', 'res': '$864binary_subscr.2'}), (866, {}), (868, {}), (870, {}), (872, {}), (874, {'res': '$R874.3'}), (876, {'res': '$i876.4'}), (878, {'index': '$i876.4', 'target': '$R874.3', 'res': '$878binary_subscr.5'}), (880, {}), (882, {}), (884, {}), (886, {}), (890, {'res': '$R890.6'}), (892, {'res': '$i892.7'}), (894, {'target': '$R890.6', 'index': '$i892.7', 'value': '$864binary_subscr.2'}), (896, {}), (898, {'res': '$R898.8'}), (900, {'res': '$j900.9'}), (902, {'target': '$R898.8', 'index': '$j900.9', 'value': '$878binary_subscr.5'}), (904, {}), (906, {'res': '$i906.10'}), (908, {'res': '$const908.11'}), (910, {'op': '+=', 'lhs': '$i906.10', 'rhs': '$const908.11', 'res': '$binop_iadd910.12'}), (912, {}), (914, {'value': '$binop_iadd910.12'}), (916, {'res': '$j916.13'}), (918, {'res': '$const918.14'}), (920, {'op': '-=', 'lhs': '$j916.13', 'rhs': '$const918.14', 'res': '$binop_isub920.15'}), (922, {}), (924, {'value': '$binop_isub920.15'}), (926, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={554: ()})
2023-11-07 09:01:25,293 [DEBUG] block_infos State(pc_initial=928 nstack_initial=0):
AdaptBlockInfo(insts=((928, {'res': '$R928.0'}), (930, {'res': '$high930.1'}), (932, {'index': '$high930.1', 'target': '$R928.0', 'res': '$932binary_subscr.2'}), (934, {}), (936, {}), (938, {}), (940, {}), (942, {'res': '$R942.3'}), (944, {'res': '$i944.4'}), (946, {'index': '$i944.4', 'target': '$R942.3', 'res': '$946binary_subscr.5'}), (948, {}), (950, {}), (952, {}), (954, {}), (958, {'res': '$R958.6'}), (960, {'res': '$i960.7'}), (962, {'target': '$R958.6', 'index': '$i960.7', 'value': '$932binary_subscr.2'}), (964, {}), (966, {'res': '$R966.8'}), (968, {'res': '$high968.9'}), (970, {'target': '$R966.8', 'index': '$high968.9', 'value': '$946binary_subscr.5'}), (972, {}), (974, {'res': '$i974.10'}), (976, {'retval': '$i974.10', 'castval': '$976return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,295 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    R = arg(1, name=R)                       ['R']
    low = arg(2, name=low)                   ['low']
    high = arg(3, name=high)                 ['high']
    $const8.1 = const(int, 0)                ['$const8.1']
    $10compare_op.2 = low >= $const8.1       ['$10compare_op.2', '$const8.1', 'low']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None) ['$10compare_op.2', '$16pred', 'bool16']
    branch $16pred, 22, 18                   ['$16pred']
label 18:
    $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>) ['$assertion_error18.0']
    raise $assertion_error18.0               ['$assertion_error18.0']
label 22:
    $26compare_op.2 = high > low             ['$26compare_op.2', 'high', 'low']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$32pred', 'bool32']
    branch $32pred, 38, 34                   ['$32pred']
label 34:
    $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>) ['$assertion_error34.0']
    raise $assertion_error34.0               ['$assertion_error34.0']
label 38:
    $binop_add42.2 = low + high              ['$binop_add42.2', 'high', 'low']
    $const46.3 = const(int, 1)               ['$const46.3']
    mid = $binop_add42.2 >> $const46.3       ['$binop_add42.2', '$const46.3', 'mid']
    $56load_deref.6 = freevar(LT: <function lt_floats at 0x169820c20>) ['$56load_deref.6']
    $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$60load_deref.8']
    $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$68binary_subscr.12', 'R', 'mid']
    $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.8', '$68binary_subscr.12', '$82call.13', 'A']
    $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$94load_deref.15']
    $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$102binary_subscr.19', 'R', 'low']
    $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$102binary_subscr.19', '$116call.20', '$94load_deref.15', 'A']
    $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$116call.20', '$130call.21', '$56load_deref.6', '$82call.13']
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None) ['$130call.21', '$140pred', 'bool140']
    branch $140pred, 142, 188                ['$140pred']
label 142:
    $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$146binary_subscr.2', 'R', 'mid']
    $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$160binary_subscr.5', 'R', 'low']
    R[low] = $146binary_subscr.2             ['$146binary_subscr.2', 'R', 'low']
    R[mid] = $160binary_subscr.5             ['$160binary_subscr.5', 'R', 'mid']
    jump 188                                 []
label 188:
    $190load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>) ['$190load_deref.1']
    $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$194load_deref.3']
    $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$202binary_subscr.7', 'R', 'high']
    $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None) ['$194load_deref.3', '$202binary_subscr.7', '$216call.8', 'A']
    $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$228load_deref.10']
    $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$236binary_subscr.14', 'R', 'mid']
    $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None) ['$228load_deref.10', '$236binary_subscr.14', '$250call.15', 'A']
    $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None) ['$190load_deref.1', '$216call.8', '$250call.15', '$264call.16']
    bool274 = global(bool: <class 'bool'>)   ['bool274']
    $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None) ['$264call.16', '$274pred', 'bool274']
    branch $274pred, 276, 322                ['$274pred']
label 276:
    $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$280binary_subscr.2', 'R', 'mid']
    $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$294binary_subscr.5', 'R', 'high']
    R[high] = $280binary_subscr.2            ['$280binary_subscr.2', 'R', 'high']
    R[mid] = $294binary_subscr.5             ['$294binary_subscr.5', 'R', 'mid']
    jump 322                                 []
label 322:
    $324load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>) ['$324load_deref.1']
    $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$328load_deref.3']
    $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$336binary_subscr.7', 'R', 'mid']
    $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None) ['$328load_deref.3', '$336binary_subscr.7', '$350call.8', 'A']
    $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$362load_deref.10']
    $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$370binary_subscr.14', 'R', 'low']
    $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None) ['$362load_deref.10', '$370binary_subscr.14', '$384call.15', 'A']
    $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None) ['$324load_deref.1', '$350call.8', '$384call.15', '$398call.16']
    bool408 = global(bool: <class 'bool'>)   ['bool408']
    $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None) ['$398call.16', '$408pred', 'bool408']
    branch $408pred, 410, 456                ['$408pred']
label 410:
    $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$414binary_subscr.2', 'R', 'mid']
    $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$428binary_subscr.5', 'R', 'low']
    R[low] = $414binary_subscr.2             ['$414binary_subscr.2', 'R', 'low']
    R[mid] = $428binary_subscr.5             ['$428binary_subscr.5', 'R', 'mid']
    jump 456                                 []
label 456:
    $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$458load_deref.1']
    $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$466binary_subscr.5', 'R', 'mid']
    pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None) ['$458load_deref.1', '$466binary_subscr.5', 'A', 'pivot']
    $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$496binary_subscr.9', 'R', 'mid']
    $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$510binary_subscr.12', 'R', 'high']
    R[high] = $496binary_subscr.9            ['$496binary_subscr.9', 'R', 'high']
    R[mid] = $510binary_subscr.12            ['$510binary_subscr.12', 'R', 'mid']
    i = low                                  ['i', 'low']
    $const544.19 = const(int, 1)             ['$const544.19']
    j = high - $const544.19                  ['$const544.19', 'high', 'j']
    jump 554                                 []
label 554:
    $558compare_op.2 = i < high              ['$558compare_op.2', 'high', 'i']
    bool564 = global(bool: <class 'bool'>)   ['bool564']
    $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$558compare_op.2', '$564pred', 'bool564']
    branch $564pred, 566, 700                ['$564pred']
label 566:
    $568load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>) ['$568load_deref.1']
    $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$572load_deref.3']
    $580binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$580binary_subscr.7', 'R', 'i']
    $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None) ['$572load_deref.3', '$580binary_subscr.7', '$594call.8', 'A']
    $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None) ['$568load_deref.1', '$594call.8', '$610call.10', 'pivot']
    bool620 = global(bool: <class 'bool'>)   ['bool620']
    $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$610call.10', '$620pred', 'bool620']
    branch $620pred, 622, 700                ['$620pred']
label 622:
    $const624.1 = const(int, 1)              ['$const624.1']
    $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd626.2', '$const624.1', 'i']
    i = $binop_iadd626.2                     ['$binop_iadd626.2', 'i']
    $636compare_op.5 = i < high              ['$636compare_op.5', 'high', 'i']
    bool642 = global(bool: <class 'bool'>)   ['bool642']
    $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$636compare_op.5', '$642pred', 'bool642']
    branch $642pred, 644, 700                ['$642pred']
label 644:
    $646load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>) ['$646load_deref.1']
    $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$650load_deref.3']
    $658binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$658binary_subscr.7', 'R', 'i']
    $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None) ['$650load_deref.3', '$658binary_subscr.7', '$672call.8', 'A']
    $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None) ['$646load_deref.1', '$672call.8', '$688call.10', 'pivot']
    bool698 = global(bool: <class 'bool'>)   ['bool698']
    $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$688call.10', '$698pred', 'bool698']
    branch $698pred, 622, 700                ['$698pred']
label 700:
    $704compare_op.2 = j >= low              ['$704compare_op.2', 'j', 'low']
    bool710 = global(bool: <class 'bool'>)   ['bool710']
    $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$704compare_op.2', '$710pred', 'bool710']
    branch $710pred, 712, 846                ['$710pred']
label 712:
    $714load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>) ['$714load_deref.1']
    $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$720load_deref.4']
    $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>) ['$728binary_subscr.8', 'R', 'j']
    $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None) ['$720load_deref.4', '$728binary_subscr.8', '$742call.9', 'A']
    $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None) ['$714load_deref.1', '$742call.9', '$756call.10', 'pivot']
    bool766 = global(bool: <class 'bool'>)   ['bool766']
    $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$756call.10', '$766pred', 'bool766']
    branch $766pred, 768, 846                ['$766pred']
label 768:
    $const770.1 = const(int, 1)              ['$const770.1']
    $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_isub772.2', '$const770.1', 'j']
    j = $binop_isub772.2                     ['$binop_isub772.2', 'j']
    $782compare_op.5 = j >= low              ['$782compare_op.5', 'j', 'low']
    bool788 = global(bool: <class 'bool'>)   ['bool788']
    $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$782compare_op.5', '$788pred', 'bool788']
    branch $788pred, 790, 846                ['$788pred']
label 790:
    $792load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>) ['$792load_deref.1']
    $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$798load_deref.4']
    $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>) ['$806binary_subscr.8', 'R', 'j']
    $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None) ['$798load_deref.4', '$806binary_subscr.8', '$820call.9', 'A']
    $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None) ['$792load_deref.1', '$820call.9', '$834call.10', 'pivot']
    bool844 = global(bool: <class 'bool'>)   ['bool844']
    $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$834call.10', '$844pred', 'bool844']
    branch $844pred, 768, 846                ['$844pred']
label 846:
    $850compare_op.2 = i >= j                ['$850compare_op.2', 'i', 'j']
    bool856 = global(bool: <class 'bool'>)   ['bool856']
    $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None) ['$850compare_op.2', '$856pred', 'bool856']
    branch $856pred, 858, 860                ['$856pred']
label 858:
    jump 928                                 []
label 860:
    $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>) ['$864binary_subscr.2', 'R', 'j']
    $878binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$878binary_subscr.5', 'R', 'i']
    R[i] = $864binary_subscr.2               ['$864binary_subscr.2', 'R', 'i']
    R[j] = $878binary_subscr.5               ['$878binary_subscr.5', 'R', 'j']
    $const908.11 = const(int, 1)             ['$const908.11']
    $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd910.12', '$const908.11', 'i']
    i = $binop_iadd910.12                    ['$binop_iadd910.12', 'i']
    $const918.14 = const(int, 1)             ['$const918.14']
    $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined) ['$binop_isub920.15', '$const918.14', 'j']
    j = $binop_isub920.15                    ['$binop_isub920.15', 'j']
    jump 554                                 []
label 928:
    $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$932binary_subscr.2', 'R', 'high']
    $946binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$946binary_subscr.5', 'R', 'i']
    R[i] = $932binary_subscr.2               ['$932binary_subscr.2', 'R', 'i']
    R[high] = $946binary_subscr.5            ['$946binary_subscr.5', 'R', 'high']
    $976return_value.11 = cast(value=i)      ['$976return_value.11', 'i']
    return $976return_value.11               ['$976return_value.11']

2023-11-07 09:01:25,308 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,308 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,308 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,308 [DEBUG] on stmt: R = arg(1, name=R)
2023-11-07 09:01:25,308 [DEBUG] on stmt: low = arg(2, name=low)
2023-11-07 09:01:25,308 [DEBUG] on stmt: high = arg(3, name=high)
2023-11-07 09:01:25,308 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-11-07 09:01:25,308 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-11-07 09:01:25,308 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,308 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,308 [DEBUG] on stmt: branch $16pred, 22, 18
2023-11-07 09:01:25,308 [DEBUG] ==== SSA block analysis pass on 18
2023-11-07 09:01:25,308 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,308 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,308 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,308 [DEBUG] ==== SSA block analysis pass on 22
2023-11-07 09:01:25,308 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,308 [DEBUG] on stmt: $26compare_op.2 = high > low
2023-11-07 09:01:25,308 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,308 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,308 [DEBUG] on stmt: branch $32pred, 38, 34
2023-11-07 09:01:25,308 [DEBUG] ==== SSA block analysis pass on 34
2023-11-07 09:01:25,308 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,308 [DEBUG] on stmt: $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,308 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,308 [DEBUG] ==== SSA block analysis pass on 38
2023-11-07 09:01:25,308 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,308 [DEBUG] on stmt: $binop_add42.2 = low + high
2023-11-07 09:01:25,309 [DEBUG] on stmt: $const46.3 = const(int, 1)
2023-11-07 09:01:25,309 [DEBUG] on stmt: mid = $binop_add42.2 >> $const46.3
2023-11-07 09:01:25,309 [DEBUG] on stmt: $56load_deref.6 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,309 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,309 [DEBUG] on stmt: branch $140pred, 142, 188
2023-11-07 09:01:25,309 [DEBUG] ==== SSA block analysis pass on 142
2023-11-07 09:01:25,309 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,309 [DEBUG] on stmt: $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: R[low] = $146binary_subscr.2
2023-11-07 09:01:25,309 [DEBUG] on stmt: R[mid] = $160binary_subscr.5
2023-11-07 09:01:25,309 [DEBUG] on stmt: jump 188
2023-11-07 09:01:25,309 [DEBUG] ==== SSA block analysis pass on 188
2023-11-07 09:01:25,309 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,309 [DEBUG] on stmt: $190load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,309 [DEBUG] on stmt: bool274 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,309 [DEBUG] on stmt: branch $274pred, 276, 322
2023-11-07 09:01:25,309 [DEBUG] ==== SSA block analysis pass on 276
2023-11-07 09:01:25,309 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,309 [DEBUG] on stmt: $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,309 [DEBUG] on stmt: R[high] = $280binary_subscr.2
2023-11-07 09:01:25,310 [DEBUG] on stmt: R[mid] = $294binary_subscr.5
2023-11-07 09:01:25,310 [DEBUG] on stmt: jump 322
2023-11-07 09:01:25,310 [DEBUG] ==== SSA block analysis pass on 322
2023-11-07 09:01:25,310 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,310 [DEBUG] on stmt: $324load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,310 [DEBUG] on stmt: bool408 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,310 [DEBUG] on stmt: branch $408pred, 410, 456
2023-11-07 09:01:25,310 [DEBUG] ==== SSA block analysis pass on 410
2023-11-07 09:01:25,310 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,310 [DEBUG] on stmt: $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: R[low] = $414binary_subscr.2
2023-11-07 09:01:25,310 [DEBUG] on stmt: R[mid] = $428binary_subscr.5
2023-11-07 09:01:25,310 [DEBUG] on stmt: jump 456
2023-11-07 09:01:25,310 [DEBUG] ==== SSA block analysis pass on 456
2023-11-07 09:01:25,310 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,310 [DEBUG] on stmt: $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: R[high] = $496binary_subscr.9
2023-11-07 09:01:25,310 [DEBUG] on stmt: R[mid] = $510binary_subscr.12
2023-11-07 09:01:25,310 [DEBUG] on stmt: i = low
2023-11-07 09:01:25,310 [DEBUG] on stmt: $const544.19 = const(int, 1)
2023-11-07 09:01:25,310 [DEBUG] on stmt: j = high - $const544.19
2023-11-07 09:01:25,310 [DEBUG] on stmt: jump 554
2023-11-07 09:01:25,310 [DEBUG] ==== SSA block analysis pass on 554
2023-11-07 09:01:25,310 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,310 [DEBUG] on stmt: $558compare_op.2 = i < high
2023-11-07 09:01:25,310 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,310 [DEBUG] on stmt: $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,310 [DEBUG] on stmt: branch $564pred, 566, 700
2023-11-07 09:01:25,311 [DEBUG] ==== SSA block analysis pass on 566
2023-11-07 09:01:25,311 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,311 [DEBUG] on stmt: $568load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $580binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,311 [DEBUG] on stmt: bool620 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,311 [DEBUG] on stmt: branch $620pred, 622, 700
2023-11-07 09:01:25,311 [DEBUG] ==== SSA block analysis pass on 622
2023-11-07 09:01:25,311 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,311 [DEBUG] on stmt: $const624.1 = const(int, 1)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,311 [DEBUG] on stmt: i = $binop_iadd626.2
2023-11-07 09:01:25,311 [DEBUG] on stmt: $636compare_op.5 = i < high
2023-11-07 09:01:25,311 [DEBUG] on stmt: bool642 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,311 [DEBUG] on stmt: branch $642pred, 644, 700
2023-11-07 09:01:25,311 [DEBUG] ==== SSA block analysis pass on 644
2023-11-07 09:01:25,311 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,311 [DEBUG] on stmt: $646load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $658binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,311 [DEBUG] on stmt: bool698 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,311 [DEBUG] on stmt: branch $698pred, 622, 700
2023-11-07 09:01:25,311 [DEBUG] ==== SSA block analysis pass on 700
2023-11-07 09:01:25,311 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,311 [DEBUG] on stmt: $704compare_op.2 = j >= low
2023-11-07 09:01:25,311 [DEBUG] on stmt: bool710 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,311 [DEBUG] on stmt: branch $710pred, 712, 846
2023-11-07 09:01:25,311 [DEBUG] ==== SSA block analysis pass on 712
2023-11-07 09:01:25,311 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,311 [DEBUG] on stmt: $714load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,311 [DEBUG] on stmt: $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,312 [DEBUG] on stmt: bool766 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,312 [DEBUG] on stmt: branch $766pred, 768, 846
2023-11-07 09:01:25,312 [DEBUG] ==== SSA block analysis pass on 768
2023-11-07 09:01:25,312 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,312 [DEBUG] on stmt: $const770.1 = const(int, 1)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,312 [DEBUG] on stmt: j = $binop_isub772.2
2023-11-07 09:01:25,312 [DEBUG] on stmt: $782compare_op.5 = j >= low
2023-11-07 09:01:25,312 [DEBUG] on stmt: bool788 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,312 [DEBUG] on stmt: branch $788pred, 790, 846
2023-11-07 09:01:25,312 [DEBUG] ==== SSA block analysis pass on 790
2023-11-07 09:01:25,312 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,312 [DEBUG] on stmt: $792load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,312 [DEBUG] on stmt: bool844 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,312 [DEBUG] on stmt: branch $844pred, 768, 846
2023-11-07 09:01:25,312 [DEBUG] ==== SSA block analysis pass on 846
2023-11-07 09:01:25,312 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,312 [DEBUG] on stmt: $850compare_op.2 = i >= j
2023-11-07 09:01:25,312 [DEBUG] on stmt: bool856 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,312 [DEBUG] on stmt: branch $856pred, 858, 860
2023-11-07 09:01:25,312 [DEBUG] ==== SSA block analysis pass on 858
2023-11-07 09:01:25,312 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,312 [DEBUG] on stmt: jump 928
2023-11-07 09:01:25,312 [DEBUG] ==== SSA block analysis pass on 860
2023-11-07 09:01:25,312 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,312 [DEBUG] on stmt: $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: $878binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,312 [DEBUG] on stmt: R[i] = $864binary_subscr.2
2023-11-07 09:01:25,313 [DEBUG] on stmt: R[j] = $878binary_subscr.5
2023-11-07 09:01:25,313 [DEBUG] on stmt: $const908.11 = const(int, 1)
2023-11-07 09:01:25,313 [DEBUG] on stmt: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,313 [DEBUG] on stmt: i = $binop_iadd910.12
2023-11-07 09:01:25,313 [DEBUG] on stmt: $const918.14 = const(int, 1)
2023-11-07 09:01:25,313 [DEBUG] on stmt: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,313 [DEBUG] on stmt: j = $binop_isub920.15
2023-11-07 09:01:25,313 [DEBUG] on stmt: jump 554
2023-11-07 09:01:25,313 [DEBUG] ==== SSA block analysis pass on 928
2023-11-07 09:01:25,313 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17f4b2ed0>
2023-11-07 09:01:25,313 [DEBUG] on stmt: $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,313 [DEBUG] on stmt: $946binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,313 [DEBUG] on stmt: R[i] = $932binary_subscr.2
2023-11-07 09:01:25,313 [DEBUG] on stmt: R[high] = $946binary_subscr.5
2023-11-07 09:01:25,313 [DEBUG] on stmt: $976return_value.11 = cast(value=i)
2023-11-07 09:01:25,313 [DEBUG] on stmt: return $976return_value.11
2023-11-07 09:01:25,315 [DEBUG] defs defaultdict(<class 'list'>,
            {'$102binary_subscr.19': [<numba.core.ir.Assign object at 0x280d61110>],
             '$10compare_op.2': [<numba.core.ir.Assign object at 0x280ebbc10>],
             '$116call.20': [<numba.core.ir.Assign object at 0x280d63d10>],
             '$130call.21': [<numba.core.ir.Assign object at 0x280d614d0>],
             '$140pred': [<numba.core.ir.Assign object at 0x280d63b90>],
             '$146binary_subscr.2': [<numba.core.ir.Assign object at 0x280d608d0>],
             '$160binary_subscr.5': [<numba.core.ir.Assign object at 0x280d63710>],
             '$16pred': [<numba.core.ir.Assign object at 0x280ea8d90>],
             '$190load_deref.1': [<numba.core.ir.Assign object at 0x280d61090>],
             '$194load_deref.3': [<numba.core.ir.Assign object at 0x280d62e10>],
             '$202binary_subscr.7': [<numba.core.ir.Assign object at 0x280d60250>],
             '$216call.8': [<numba.core.ir.Assign object at 0x280dbd810>],
             '$228load_deref.10': [<numba.core.ir.Assign object at 0x280dbd7d0>],
             '$236binary_subscr.14': [<numba.core.ir.Assign object at 0x280dbc750>],
             '$250call.15': [<numba.core.ir.Assign object at 0x280dbf550>],
             '$264call.16': [<numba.core.ir.Assign object at 0x280dbd990>],
             '$26compare_op.2': [<numba.core.ir.Assign object at 0x280e237d0>],
             '$274pred': [<numba.core.ir.Assign object at 0x280dbe590>],
             '$280binary_subscr.2': [<numba.core.ir.Assign object at 0x280dbc650>],
             '$294binary_subscr.5': [<numba.core.ir.Assign object at 0x280dbdb90>],
             '$324load_deref.1': [<numba.core.ir.Assign object at 0x28083d510>],
             '$328load_deref.3': [<numba.core.ir.Assign object at 0x28083e490>],
             '$32pred': [<numba.core.ir.Assign object at 0x280e6e990>],
             '$336binary_subscr.7': [<numba.core.ir.Assign object at 0x280cff690>],
             '$350call.8': [<numba.core.ir.Assign object at 0x280cfcb90>],
             '$362load_deref.10': [<numba.core.ir.Assign object at 0x280e07610>],
             '$370binary_subscr.14': [<numba.core.ir.Assign object at 0x280e07c50>],
             '$384call.15': [<numba.core.ir.Assign object at 0x280e07790>],
             '$398call.16': [<numba.core.ir.Assign object at 0x280e05ed0>],
             '$408pred': [<numba.core.ir.Assign object at 0x280e04990>],
             '$414binary_subscr.2': [<numba.core.ir.Assign object at 0x280e071d0>],
             '$428binary_subscr.5': [<numba.core.ir.Assign object at 0x280e04dd0>],
             '$458load_deref.1': [<numba.core.ir.Assign object at 0x280e04190>],
             '$466binary_subscr.5': [<numba.core.ir.Assign object at 0x280e7cf50>],
             '$496binary_subscr.9': [<numba.core.ir.Assign object at 0x280e7f850>],
             '$510binary_subscr.12': [<numba.core.ir.Assign object at 0x280e7ef90>],
             '$558compare_op.2': [<numba.core.ir.Assign object at 0x280e7e210>],
             '$564pred': [<numba.core.ir.Assign object at 0x280e7dad0>],
             '$568load_deref.1': [<numba.core.ir.Assign object at 0x280e7f010>],
             '$56load_deref.6': [<numba.core.ir.Assign object at 0x280d7b050>],
             '$572load_deref.3': [<numba.core.ir.Assign object at 0x280e7d850>],
             '$580binary_subscr.7': [<numba.core.ir.Assign object at 0x280db2b50>],
             '$594call.8': [<numba.core.ir.Assign object at 0x280db2d90>],
             '$60load_deref.8': [<numba.core.ir.Assign object at 0x280d7bbd0>],
             '$610call.10': [<numba.core.ir.Assign object at 0x280db29d0>],
             '$620pred': [<numba.core.ir.Assign object at 0x280db0990>],
             '$636compare_op.5': [<numba.core.ir.Assign object at 0x280db2fd0>],
             '$642pred': [<numba.core.ir.Assign object at 0x280db1850>],
             '$646load_deref.1': [<numba.core.ir.Assign object at 0x280db0450>],
             '$650load_deref.3': [<numba.core.ir.Assign object at 0x280db3550>],
             '$658binary_subscr.7': [<numba.core.ir.Assign object at 0x280e287d0>],
             '$672call.8': [<numba.core.ir.Assign object at 0x280e280d0>],
             '$688call.10': [<numba.core.ir.Assign object at 0x280e2b550>],
             '$68binary_subscr.12': [<numba.core.ir.Assign object at 0x280d7a610>],
             '$698pred': [<numba.core.ir.Assign object at 0x280e29550>],
             '$704compare_op.2': [<numba.core.ir.Assign object at 0x280e2ac10>],
             '$710pred': [<numba.core.ir.Assign object at 0x280e29810>],
             '$714load_deref.1': [<numba.core.ir.Assign object at 0x280e28550>],
             '$720load_deref.4': [<numba.core.ir.Assign object at 0x280e29210>],
             '$728binary_subscr.8': [<numba.core.ir.Assign object at 0x280e29ed0>],
             '$742call.9': [<numba.core.ir.Assign object at 0x280e2a850>],
             '$756call.10': [<numba.core.ir.Assign object at 0x280df3e50>],
             '$766pred': [<numba.core.ir.Assign object at 0x280df24d0>],
             '$782compare_op.5': [<numba.core.ir.Assign object at 0x280df2510>],
             '$788pred': [<numba.core.ir.Assign object at 0x280df2c50>],
             '$792load_deref.1': [<numba.core.ir.Assign object at 0x280df00d0>],
             '$798load_deref.4': [<numba.core.ir.Assign object at 0x280df1790>],
             '$806binary_subscr.8': [<numba.core.ir.Assign object at 0x280df2a50>],
             '$820call.9': [<numba.core.ir.Assign object at 0x280df3010>],
             '$82call.13': [<numba.core.ir.Assign object at 0x280d7b890>],
             '$834call.10': [<numba.core.ir.Assign object at 0x280df3610>],
             '$844pred': [<numba.core.ir.Assign object at 0x280df20d0>],
             '$850compare_op.2': [<numba.core.ir.Assign object at 0x280c7b7d0>],
             '$856pred': [<numba.core.ir.Assign object at 0x280c79490>],
             '$864binary_subscr.2': [<numba.core.ir.Assign object at 0x280c7b6d0>],
             '$878binary_subscr.5': [<numba.core.ir.Assign object at 0x280c7a210>],
             '$932binary_subscr.2': [<numba.core.ir.Assign object at 0x280476150>],
             '$946binary_subscr.5': [<numba.core.ir.Assign object at 0x280476390>],
             '$94load_deref.15': [<numba.core.ir.Assign object at 0x280d78390>],
             '$976return_value.11': [<numba.core.ir.Assign object at 0x280469650>],
             '$assertion_error18.0': [<numba.core.ir.Assign object at 0x280c80290>],
             '$assertion_error34.0': [<numba.core.ir.Assign object at 0x280e6fe10>],
             '$binop_add42.2': [<numba.core.ir.Assign object at 0x280d7aad0>],
             '$binop_iadd626.2': [<numba.core.ir.Assign object at 0x280db0ed0>],
             '$binop_iadd910.12': [<numba.core.ir.Assign object at 0x17f46c290>],
             '$binop_isub772.2': [<numba.core.ir.Assign object at 0x280df0f90>],
             '$binop_isub920.15': [<numba.core.ir.Assign object at 0x280673f50>],
             '$const46.3': [<numba.core.ir.Assign object at 0x280d78ed0>],
             '$const544.19': [<numba.core.ir.Assign object at 0x280e7d390>],
             '$const624.1': [<numba.core.ir.Assign object at 0x280db2490>],
             '$const770.1': [<numba.core.ir.Assign object at 0x280df1150>],
             '$const8.1': [<numba.core.ir.Assign object at 0x280de0150>],
             '$const908.11': [<numba.core.ir.Assign object at 0x17f312a10>],
             '$const918.14': [<numba.core.ir.Assign object at 0x280672a50>],
             'A': [<numba.core.ir.Assign object at 0x280d4f490>],
             'R': [<numba.core.ir.Assign object at 0x280d4cd90>],
             'bool140': [<numba.core.ir.Assign object at 0x280d62350>],
             'bool16': [<numba.core.ir.Assign object at 0x280ea9110>],
             'bool274': [<numba.core.ir.Assign object at 0x280dbcd50>],
             'bool32': [<numba.core.ir.Assign object at 0x280e6d890>],
             'bool408': [<numba.core.ir.Assign object at 0x280e06dd0>],
             'bool564': [<numba.core.ir.Assign object at 0x280e7fa90>],
             'bool620': [<numba.core.ir.Assign object at 0x280db0ad0>],
             'bool642': [<numba.core.ir.Assign object at 0x280db2690>],
             'bool698': [<numba.core.ir.Assign object at 0x280e2bd10>],
             'bool710': [<numba.core.ir.Assign object at 0x280e2a0d0>],
             'bool766': [<numba.core.ir.Assign object at 0x280df2c90>],
             'bool788': [<numba.core.ir.Assign object at 0x280df1c50>],
             'bool844': [<numba.core.ir.Assign object at 0x280df32d0>],
             'bool856': [<numba.core.ir.Assign object at 0x280c79590>],
             'high': [<numba.core.ir.Assign object at 0x280d4c890>],
             'i': [<numba.core.ir.Assign object at 0x280e7f950>,
                   <numba.core.ir.Assign object at 0x280db30d0>,
                   <numba.core.ir.Assign object at 0x28006a9d0>],
             'j': [<numba.core.ir.Assign object at 0x280e7e950>,
                   <numba.core.ir.Assign object at 0x280df0cd0>,
                   <numba.core.ir.Assign object at 0x280670ad0>],
             'low': [<numba.core.ir.Assign object at 0x280d4e110>],
             'mid': [<numba.core.ir.Assign object at 0x280d7b710>],
             'pivot': [<numba.core.ir.Assign object at 0x280e7c550>]})
2023-11-07 09:01:25,315 [DEBUG] SSA violators {'i', 'j'}
2023-11-07 09:01:25,315 [DEBUG] Fix SSA violator on var i
2023-11-07 09:01:25,315 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,315 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,315 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,315 [DEBUG] on stmt: R = arg(1, name=R)
2023-11-07 09:01:25,315 [DEBUG] on stmt: low = arg(2, name=low)
2023-11-07 09:01:25,315 [DEBUG] on stmt: high = arg(3, name=high)
2023-11-07 09:01:25,315 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-11-07 09:01:25,315 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-11-07 09:01:25,316 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,316 [DEBUG] on stmt: branch $16pred, 22, 18
2023-11-07 09:01:25,316 [DEBUG] ==== SSA block rewrite pass on 18
2023-11-07 09:01:25,316 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,316 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,316 [DEBUG] ==== SSA block rewrite pass on 22
2023-11-07 09:01:25,316 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,316 [DEBUG] on stmt: $26compare_op.2 = high > low
2023-11-07 09:01:25,316 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,316 [DEBUG] on stmt: branch $32pred, 38, 34
2023-11-07 09:01:25,316 [DEBUG] ==== SSA block rewrite pass on 34
2023-11-07 09:01:25,316 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,316 [DEBUG] on stmt: $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,316 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,316 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,316 [DEBUG] on stmt: $binop_add42.2 = low + high
2023-11-07 09:01:25,316 [DEBUG] on stmt: $const46.3 = const(int, 1)
2023-11-07 09:01:25,316 [DEBUG] on stmt: mid = $binop_add42.2 >> $const46.3
2023-11-07 09:01:25,316 [DEBUG] on stmt: $56load_deref.6 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,316 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,316 [DEBUG] on stmt: branch $140pred, 142, 188
2023-11-07 09:01:25,316 [DEBUG] ==== SSA block rewrite pass on 142
2023-11-07 09:01:25,316 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,316 [DEBUG] on stmt: $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,316 [DEBUG] on stmt: R[low] = $146binary_subscr.2
2023-11-07 09:01:25,316 [DEBUG] on stmt: R[mid] = $160binary_subscr.5
2023-11-07 09:01:25,316 [DEBUG] on stmt: jump 188
2023-11-07 09:01:25,317 [DEBUG] ==== SSA block rewrite pass on 188
2023-11-07 09:01:25,317 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,317 [DEBUG] on stmt: $190load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,317 [DEBUG] on stmt: bool274 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,317 [DEBUG] on stmt: branch $274pred, 276, 322
2023-11-07 09:01:25,317 [DEBUG] ==== SSA block rewrite pass on 276
2023-11-07 09:01:25,317 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,317 [DEBUG] on stmt: $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: R[high] = $280binary_subscr.2
2023-11-07 09:01:25,317 [DEBUG] on stmt: R[mid] = $294binary_subscr.5
2023-11-07 09:01:25,317 [DEBUG] on stmt: jump 322
2023-11-07 09:01:25,317 [DEBUG] ==== SSA block rewrite pass on 322
2023-11-07 09:01:25,317 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,317 [DEBUG] on stmt: $324load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,317 [DEBUG] on stmt: bool408 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,317 [DEBUG] on stmt: branch $408pred, 410, 456
2023-11-07 09:01:25,317 [DEBUG] ==== SSA block rewrite pass on 410
2023-11-07 09:01:25,317 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,317 [DEBUG] on stmt: $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,317 [DEBUG] on stmt: R[low] = $414binary_subscr.2
2023-11-07 09:01:25,317 [DEBUG] on stmt: R[mid] = $428binary_subscr.5
2023-11-07 09:01:25,317 [DEBUG] on stmt: jump 456
2023-11-07 09:01:25,317 [DEBUG] ==== SSA block rewrite pass on 456
2023-11-07 09:01:25,317 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,318 [DEBUG] on stmt: $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,318 [DEBUG] on stmt: pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,318 [DEBUG] on stmt: R[high] = $496binary_subscr.9
2023-11-07 09:01:25,318 [DEBUG] on stmt: R[mid] = $510binary_subscr.12
2023-11-07 09:01:25,318 [DEBUG] on stmt: i = low
2023-11-07 09:01:25,318 [DEBUG] first assign: i
2023-11-07 09:01:25,318 [DEBUG] replaced with: i = low
2023-11-07 09:01:25,318 [DEBUG] on stmt: $const544.19 = const(int, 1)
2023-11-07 09:01:25,318 [DEBUG] on stmt: j = high - $const544.19
2023-11-07 09:01:25,318 [DEBUG] on stmt: jump 554
2023-11-07 09:01:25,318 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:25,318 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,318 [DEBUG] on stmt: $558compare_op.2 = i < high
2023-11-07 09:01:25,318 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,318 [DEBUG] on stmt: branch $564pred, 566, 700
2023-11-07 09:01:25,318 [DEBUG] ==== SSA block rewrite pass on 566
2023-11-07 09:01:25,318 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,318 [DEBUG] on stmt: $568load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $580binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,318 [DEBUG] on stmt: bool620 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,318 [DEBUG] on stmt: branch $620pred, 622, 700
2023-11-07 09:01:25,318 [DEBUG] ==== SSA block rewrite pass on 622
2023-11-07 09:01:25,318 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,318 [DEBUG] on stmt: $const624.1 = const(int, 1)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,318 [DEBUG] on stmt: i = $binop_iadd626.2
2023-11-07 09:01:25,318 [DEBUG] replaced with: i.1 = $binop_iadd626.2
2023-11-07 09:01:25,318 [DEBUG] on stmt: $636compare_op.5 = i < high
2023-11-07 09:01:25,318 [DEBUG] on stmt: bool642 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,318 [DEBUG] on stmt: $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,318 [DEBUG] on stmt: branch $642pred, 644, 700
2023-11-07 09:01:25,318 [DEBUG] ==== SSA block rewrite pass on 644
2023-11-07 09:01:25,318 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,318 [DEBUG] on stmt: $646load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $658binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,319 [DEBUG] on stmt: bool698 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,319 [DEBUG] on stmt: branch $698pred, 622, 700
2023-11-07 09:01:25,319 [DEBUG] ==== SSA block rewrite pass on 700
2023-11-07 09:01:25,319 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,319 [DEBUG] on stmt: $704compare_op.2 = j >= low
2023-11-07 09:01:25,319 [DEBUG] on stmt: bool710 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,319 [DEBUG] on stmt: branch $710pred, 712, 846
2023-11-07 09:01:25,319 [DEBUG] ==== SSA block rewrite pass on 712
2023-11-07 09:01:25,319 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,319 [DEBUG] on stmt: $714load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,319 [DEBUG] on stmt: bool766 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,319 [DEBUG] on stmt: branch $766pred, 768, 846
2023-11-07 09:01:25,319 [DEBUG] ==== SSA block rewrite pass on 768
2023-11-07 09:01:25,319 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,319 [DEBUG] on stmt: $const770.1 = const(int, 1)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,319 [DEBUG] on stmt: j = $binop_isub772.2
2023-11-07 09:01:25,319 [DEBUG] on stmt: $782compare_op.5 = j >= low
2023-11-07 09:01:25,319 [DEBUG] on stmt: bool788 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,319 [DEBUG] on stmt: branch $788pred, 790, 846
2023-11-07 09:01:25,319 [DEBUG] ==== SSA block rewrite pass on 790
2023-11-07 09:01:25,319 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,319 [DEBUG] on stmt: $792load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,319 [DEBUG] on stmt: $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,319 [DEBUG] on stmt: bool844 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,320 [DEBUG] on stmt: $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,320 [DEBUG] on stmt: branch $844pred, 768, 846
2023-11-07 09:01:25,320 [DEBUG] ==== SSA block rewrite pass on 846
2023-11-07 09:01:25,320 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,320 [DEBUG] on stmt: $850compare_op.2 = i >= j
2023-11-07 09:01:25,320 [DEBUG] on stmt: bool856 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,320 [DEBUG] on stmt: $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,320 [DEBUG] on stmt: branch $856pred, 858, 860
2023-11-07 09:01:25,320 [DEBUG] ==== SSA block rewrite pass on 858
2023-11-07 09:01:25,320 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,320 [DEBUG] on stmt: jump 928
2023-11-07 09:01:25,320 [DEBUG] ==== SSA block rewrite pass on 860
2023-11-07 09:01:25,320 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,320 [DEBUG] on stmt: $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,320 [DEBUG] on stmt: $878binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,320 [DEBUG] on stmt: R[i] = $864binary_subscr.2
2023-11-07 09:01:25,320 [DEBUG] on stmt: R[j] = $878binary_subscr.5
2023-11-07 09:01:25,320 [DEBUG] on stmt: $const908.11 = const(int, 1)
2023-11-07 09:01:25,320 [DEBUG] on stmt: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,320 [DEBUG] on stmt: i = $binop_iadd910.12
2023-11-07 09:01:25,320 [DEBUG] replaced with: i.2 = $binop_iadd910.12
2023-11-07 09:01:25,320 [DEBUG] on stmt: $const918.14 = const(int, 1)
2023-11-07 09:01:25,320 [DEBUG] on stmt: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,320 [DEBUG] on stmt: j = $binop_isub920.15
2023-11-07 09:01:25,320 [DEBUG] on stmt: jump 554
2023-11-07 09:01:25,320 [DEBUG] ==== SSA block rewrite pass on 928
2023-11-07 09:01:25,320 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280d34d50>
2023-11-07 09:01:25,320 [DEBUG] on stmt: $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,320 [DEBUG] on stmt: $946binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,320 [DEBUG] on stmt: R[i] = $932binary_subscr.2
2023-11-07 09:01:25,320 [DEBUG] on stmt: R[high] = $946binary_subscr.5
2023-11-07 09:01:25,320 [DEBUG] on stmt: $976return_value.11 = cast(value=i)
2023-11-07 09:01:25,320 [DEBUG] on stmt: return $976return_value.11
2023-11-07 09:01:25,320 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {456: [<numba.core.ir.Assign object at 0x280d37410>],
             622: [<numba.core.ir.Assign object at 0x280d356d0>],
             860: [<numba.core.ir.Assign object at 0x280e60950>]})
2023-11-07 09:01:25,320 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,320 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,320 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,320 [DEBUG] on stmt: R = arg(1, name=R)
2023-11-07 09:01:25,320 [DEBUG] on stmt: low = arg(2, name=low)
2023-11-07 09:01:25,320 [DEBUG] on stmt: high = arg(3, name=high)
2023-11-07 09:01:25,320 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-11-07 09:01:25,320 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-11-07 09:01:25,321 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,321 [DEBUG] on stmt: branch $16pred, 22, 18
2023-11-07 09:01:25,321 [DEBUG] ==== SSA block rewrite pass on 18
2023-11-07 09:01:25,321 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,321 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,321 [DEBUG] ==== SSA block rewrite pass on 22
2023-11-07 09:01:25,321 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,321 [DEBUG] on stmt: $26compare_op.2 = high > low
2023-11-07 09:01:25,321 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,321 [DEBUG] on stmt: branch $32pred, 38, 34
2023-11-07 09:01:25,321 [DEBUG] ==== SSA block rewrite pass on 34
2023-11-07 09:01:25,321 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,321 [DEBUG] on stmt: $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,321 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,321 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,321 [DEBUG] on stmt: $binop_add42.2 = low + high
2023-11-07 09:01:25,321 [DEBUG] on stmt: $const46.3 = const(int, 1)
2023-11-07 09:01:25,321 [DEBUG] on stmt: mid = $binop_add42.2 >> $const46.3
2023-11-07 09:01:25,321 [DEBUG] on stmt: $56load_deref.6 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,321 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,321 [DEBUG] on stmt: branch $140pred, 142, 188
2023-11-07 09:01:25,321 [DEBUG] ==== SSA block rewrite pass on 142
2023-11-07 09:01:25,321 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,321 [DEBUG] on stmt: $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,321 [DEBUG] on stmt: R[low] = $146binary_subscr.2
2023-11-07 09:01:25,321 [DEBUG] on stmt: R[mid] = $160binary_subscr.5
2023-11-07 09:01:25,321 [DEBUG] on stmt: jump 188
2023-11-07 09:01:25,322 [DEBUG] ==== SSA block rewrite pass on 188
2023-11-07 09:01:25,322 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,322 [DEBUG] on stmt: $190load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,322 [DEBUG] on stmt: bool274 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,322 [DEBUG] on stmt: branch $274pred, 276, 322
2023-11-07 09:01:25,322 [DEBUG] ==== SSA block rewrite pass on 276
2023-11-07 09:01:25,322 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,322 [DEBUG] on stmt: $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: R[high] = $280binary_subscr.2
2023-11-07 09:01:25,322 [DEBUG] on stmt: R[mid] = $294binary_subscr.5
2023-11-07 09:01:25,322 [DEBUG] on stmt: jump 322
2023-11-07 09:01:25,322 [DEBUG] ==== SSA block rewrite pass on 322
2023-11-07 09:01:25,322 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,322 [DEBUG] on stmt: $324load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,322 [DEBUG] on stmt: bool408 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,322 [DEBUG] on stmt: branch $408pred, 410, 456
2023-11-07 09:01:25,322 [DEBUG] ==== SSA block rewrite pass on 410
2023-11-07 09:01:25,322 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,322 [DEBUG] on stmt: $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,322 [DEBUG] on stmt: R[low] = $414binary_subscr.2
2023-11-07 09:01:25,322 [DEBUG] on stmt: R[mid] = $428binary_subscr.5
2023-11-07 09:01:25,322 [DEBUG] on stmt: jump 456
2023-11-07 09:01:25,323 [DEBUG] ==== SSA block rewrite pass on 456
2023-11-07 09:01:25,323 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,323 [DEBUG] on stmt: $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,323 [DEBUG] on stmt: $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,323 [DEBUG] on stmt: pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,323 [DEBUG] on stmt: $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,323 [DEBUG] on stmt: $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,323 [DEBUG] on stmt: R[high] = $496binary_subscr.9
2023-11-07 09:01:25,323 [DEBUG] on stmt: R[mid] = $510binary_subscr.12
2023-11-07 09:01:25,323 [DEBUG] on stmt: i = low
2023-11-07 09:01:25,323 [DEBUG] on stmt: $const544.19 = const(int, 1)
2023-11-07 09:01:25,323 [DEBUG] on stmt: j = high - $const544.19
2023-11-07 09:01:25,323 [DEBUG] on stmt: jump 554
2023-11-07 09:01:25,323 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:25,323 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,323 [DEBUG] on stmt: $558compare_op.2 = i < high
2023-11-07 09:01:25,323 [DEBUG] find_def var='i' stmt=$558compare_op.2 = i < high
2023-11-07 09:01:25,323 [DEBUG] find_def_from_top label 554
2023-11-07 09:01:25,323 [DEBUG] insert phi node i.3 = phi(incoming_values=[], incoming_blocks=[]) at 554
2023-11-07 09:01:25,323 [DEBUG] find_def_from_bottom label 456
2023-11-07 09:01:25,323 [DEBUG] incoming_def i = low
2023-11-07 09:01:25,323 [DEBUG] find_def_from_bottom label 860
2023-11-07 09:01:25,323 [DEBUG] incoming_def i.2 = $binop_iadd910.12
2023-11-07 09:01:25,323 [DEBUG] replaced with: $558compare_op.2 = i.3 < high
2023-11-07 09:01:25,323 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,323 [DEBUG] on stmt: $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,323 [DEBUG] on stmt: branch $564pred, 566, 700
2023-11-07 09:01:25,323 [DEBUG] ==== SSA block rewrite pass on 566
2023-11-07 09:01:25,323 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,323 [DEBUG] on stmt: $568load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,323 [DEBUG] on stmt: $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,323 [DEBUG] on stmt: $580binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,323 [DEBUG] find_def var='i' stmt=$580binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,323 [DEBUG] find_def_from_top label 566
2023-11-07 09:01:25,323 [DEBUG] idom 554 from label 566
2023-11-07 09:01:25,323 [DEBUG] find_def_from_bottom label 554
2023-11-07 09:01:25,323 [DEBUG] replaced with: $580binary_subscr.7 = getitem(value=R, index=i.3, fn=<built-in function getitem>)
2023-11-07 09:01:25,323 [DEBUG] on stmt: $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,323 [DEBUG] on stmt: $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,323 [DEBUG] on stmt: bool620 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,323 [DEBUG] on stmt: $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,323 [DEBUG] on stmt: branch $620pred, 622, 700
2023-11-07 09:01:25,323 [DEBUG] ==== SSA block rewrite pass on 622
2023-11-07 09:01:25,323 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,324 [DEBUG] on stmt: $const624.1 = const(int, 1)
2023-11-07 09:01:25,324 [DEBUG] on stmt: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,324 [DEBUG] find_def var='i' stmt=$binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,324 [DEBUG] find_def_from_top label 622
2023-11-07 09:01:25,324 [DEBUG] insert phi node i.4 = phi(incoming_values=[], incoming_blocks=[]) at 622
2023-11-07 09:01:25,324 [DEBUG] find_def_from_bottom label 644
2023-11-07 09:01:25,324 [DEBUG] find_def_from_top label 644
2023-11-07 09:01:25,324 [DEBUG] idom 622 from label 644
2023-11-07 09:01:25,324 [DEBUG] find_def_from_bottom label 622
2023-11-07 09:01:25,324 [DEBUG] incoming_def i.1 = $binop_iadd626.2
2023-11-07 09:01:25,324 [DEBUG] find_def_from_bottom label 566
2023-11-07 09:01:25,324 [DEBUG] find_def_from_top label 566
2023-11-07 09:01:25,324 [DEBUG] idom 554 from label 566
2023-11-07 09:01:25,324 [DEBUG] find_def_from_bottom label 554
2023-11-07 09:01:25,324 [DEBUG] incoming_def i.3 = phi(incoming_values=[Var(i, quicksort.py:112), Var(i.2, quicksort.py:122)], incoming_blocks=[456, 860])
2023-11-07 09:01:25,324 [DEBUG] replaced with: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.4, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,324 [DEBUG] on stmt: i.1 = $binop_iadd626.2
2023-11-07 09:01:25,324 [DEBUG] on stmt: $636compare_op.5 = i < high
2023-11-07 09:01:25,324 [DEBUG] find_def var='i' stmt=$636compare_op.5 = i < high
2023-11-07 09:01:25,324 [DEBUG] replaced with: $636compare_op.5 = i.1 < high
2023-11-07 09:01:25,324 [DEBUG] on stmt: bool642 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,324 [DEBUG] on stmt: $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,324 [DEBUG] on stmt: branch $642pred, 644, 700
2023-11-07 09:01:25,324 [DEBUG] ==== SSA block rewrite pass on 644
2023-11-07 09:01:25,324 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,324 [DEBUG] on stmt: $646load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,324 [DEBUG] on stmt: $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,324 [DEBUG] on stmt: $658binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,324 [DEBUG] find_def var='i' stmt=$658binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,324 [DEBUG] find_def_from_top label 644
2023-11-07 09:01:25,324 [DEBUG] idom 622 from label 644
2023-11-07 09:01:25,324 [DEBUG] find_def_from_bottom label 622
2023-11-07 09:01:25,324 [DEBUG] replaced with: $658binary_subscr.7 = getitem(value=R, index=i.1, fn=<built-in function getitem>)
2023-11-07 09:01:25,324 [DEBUG] on stmt: $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,324 [DEBUG] on stmt: $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,324 [DEBUG] on stmt: bool698 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,324 [DEBUG] on stmt: $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,324 [DEBUG] on stmt: branch $698pred, 622, 700
2023-11-07 09:01:25,324 [DEBUG] ==== SSA block rewrite pass on 700
2023-11-07 09:01:25,324 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,324 [DEBUG] on stmt: $704compare_op.2 = j >= low
2023-11-07 09:01:25,324 [DEBUG] on stmt: bool710 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,324 [DEBUG] on stmt: $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,324 [DEBUG] on stmt: branch $710pred, 712, 846
2023-11-07 09:01:25,324 [DEBUG] ==== SSA block rewrite pass on 712
2023-11-07 09:01:25,324 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,324 [DEBUG] on stmt: $714load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,324 [DEBUG] on stmt: $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,325 [DEBUG] on stmt: bool766 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,325 [DEBUG] on stmt: branch $766pred, 768, 846
2023-11-07 09:01:25,325 [DEBUG] ==== SSA block rewrite pass on 768
2023-11-07 09:01:25,325 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,325 [DEBUG] on stmt: $const770.1 = const(int, 1)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,325 [DEBUG] on stmt: j = $binop_isub772.2
2023-11-07 09:01:25,325 [DEBUG] on stmt: $782compare_op.5 = j >= low
2023-11-07 09:01:25,325 [DEBUG] on stmt: bool788 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,325 [DEBUG] on stmt: branch $788pred, 790, 846
2023-11-07 09:01:25,325 [DEBUG] ==== SSA block rewrite pass on 790
2023-11-07 09:01:25,325 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,325 [DEBUG] on stmt: $792load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,325 [DEBUG] on stmt: bool844 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,325 [DEBUG] on stmt: branch $844pred, 768, 846
2023-11-07 09:01:25,325 [DEBUG] ==== SSA block rewrite pass on 846
2023-11-07 09:01:25,325 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,325 [DEBUG] on stmt: $850compare_op.2 = i >= j
2023-11-07 09:01:25,325 [DEBUG] find_def var='i' stmt=$850compare_op.2 = i >= j
2023-11-07 09:01:25,325 [DEBUG] find_def_from_top label 846
2023-11-07 09:01:25,325 [DEBUG] idom 700 from label 846
2023-11-07 09:01:25,325 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,325 [DEBUG] find_def_from_top label 700
2023-11-07 09:01:25,325 [DEBUG] insert phi node i.5 = phi(incoming_values=[], incoming_blocks=[]) at 700
2023-11-07 09:01:25,325 [DEBUG] find_def_from_bottom label 554
2023-11-07 09:01:25,325 [DEBUG] incoming_def i.3 = phi(incoming_values=[Var(i, quicksort.py:112), Var(i.2, quicksort.py:122)], incoming_blocks=[456, 860])
2023-11-07 09:01:25,325 [DEBUG] find_def_from_bottom label 622
2023-11-07 09:01:25,325 [DEBUG] incoming_def i.1 = $binop_iadd626.2
2023-11-07 09:01:25,325 [DEBUG] find_def_from_bottom label 644
2023-11-07 09:01:25,325 [DEBUG] find_def_from_top label 644
2023-11-07 09:01:25,325 [DEBUG] idom 622 from label 644
2023-11-07 09:01:25,325 [DEBUG] find_def_from_bottom label 622
2023-11-07 09:01:25,325 [DEBUG] incoming_def i.1 = $binop_iadd626.2
2023-11-07 09:01:25,325 [DEBUG] find_def_from_bottom label 566
2023-11-07 09:01:25,325 [DEBUG] find_def_from_top label 566
2023-11-07 09:01:25,325 [DEBUG] idom 554 from label 566
2023-11-07 09:01:25,325 [DEBUG] find_def_from_bottom label 554
2023-11-07 09:01:25,325 [DEBUG] incoming_def i.3 = phi(incoming_values=[Var(i, quicksort.py:112), Var(i.2, quicksort.py:122)], incoming_blocks=[456, 860])
2023-11-07 09:01:25,325 [DEBUG] replaced with: $850compare_op.2 = i.5 >= j
2023-11-07 09:01:25,325 [DEBUG] on stmt: bool856 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,325 [DEBUG] on stmt: $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,326 [DEBUG] on stmt: branch $856pred, 858, 860
2023-11-07 09:01:25,326 [DEBUG] ==== SSA block rewrite pass on 858
2023-11-07 09:01:25,326 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,326 [DEBUG] on stmt: jump 928
2023-11-07 09:01:25,326 [DEBUG] ==== SSA block rewrite pass on 860
2023-11-07 09:01:25,326 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,326 [DEBUG] on stmt: $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,326 [DEBUG] on stmt: $878binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,326 [DEBUG] find_def var='i' stmt=$878binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,326 [DEBUG] find_def_from_top label 860
2023-11-07 09:01:25,326 [DEBUG] idom 846 from label 860
2023-11-07 09:01:25,326 [DEBUG] find_def_from_bottom label 846
2023-11-07 09:01:25,326 [DEBUG] find_def_from_top label 846
2023-11-07 09:01:25,326 [DEBUG] idom 700 from label 846
2023-11-07 09:01:25,326 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,326 [DEBUG] replaced with: $878binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-11-07 09:01:25,326 [DEBUG] on stmt: R[i] = $864binary_subscr.2
2023-11-07 09:01:25,326 [DEBUG] find_def var='i' stmt=R[i] = $864binary_subscr.2
2023-11-07 09:01:25,326 [DEBUG] find_def_from_top label 860
2023-11-07 09:01:25,326 [DEBUG] idom 846 from label 860
2023-11-07 09:01:25,326 [DEBUG] find_def_from_bottom label 846
2023-11-07 09:01:25,326 [DEBUG] find_def_from_top label 846
2023-11-07 09:01:25,326 [DEBUG] idom 700 from label 846
2023-11-07 09:01:25,326 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,326 [DEBUG] replaced with: R[i.5] = $864binary_subscr.2
2023-11-07 09:01:25,326 [DEBUG] on stmt: R[j] = $878binary_subscr.5
2023-11-07 09:01:25,326 [DEBUG] on stmt: $const908.11 = const(int, 1)
2023-11-07 09:01:25,326 [DEBUG] on stmt: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,326 [DEBUG] find_def var='i' stmt=$binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,326 [DEBUG] find_def_from_top label 860
2023-11-07 09:01:25,326 [DEBUG] idom 846 from label 860
2023-11-07 09:01:25,326 [DEBUG] find_def_from_bottom label 846
2023-11-07 09:01:25,326 [DEBUG] find_def_from_top label 846
2023-11-07 09:01:25,326 [DEBUG] idom 700 from label 846
2023-11-07 09:01:25,326 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,326 [DEBUG] replaced with: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.5, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,326 [DEBUG] on stmt: i.2 = $binop_iadd910.12
2023-11-07 09:01:25,326 [DEBUG] on stmt: $const918.14 = const(int, 1)
2023-11-07 09:01:25,326 [DEBUG] on stmt: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,326 [DEBUG] on stmt: j = $binop_isub920.15
2023-11-07 09:01:25,326 [DEBUG] on stmt: jump 554
2023-11-07 09:01:25,326 [DEBUG] ==== SSA block rewrite pass on 928
2023-11-07 09:01:25,326 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280e62450>
2023-11-07 09:01:25,326 [DEBUG] on stmt: $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,326 [DEBUG] on stmt: $946binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,326 [DEBUG] find_def var='i' stmt=$946binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,326 [DEBUG] find_def_from_top label 928
2023-11-07 09:01:25,326 [DEBUG] idom 858 from label 928
2023-11-07 09:01:25,326 [DEBUG] find_def_from_bottom label 858
2023-11-07 09:01:25,326 [DEBUG] find_def_from_top label 858
2023-11-07 09:01:25,326 [DEBUG] idom 846 from label 858
2023-11-07 09:01:25,326 [DEBUG] find_def_from_bottom label 846
2023-11-07 09:01:25,326 [DEBUG] find_def_from_top label 846
2023-11-07 09:01:25,326 [DEBUG] idom 700 from label 846
2023-11-07 09:01:25,326 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,326 [DEBUG] replaced with: $946binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-11-07 09:01:25,326 [DEBUG] on stmt: R[i] = $932binary_subscr.2
2023-11-07 09:01:25,327 [DEBUG] find_def var='i' stmt=R[i] = $932binary_subscr.2
2023-11-07 09:01:25,327 [DEBUG] find_def_from_top label 928
2023-11-07 09:01:25,327 [DEBUG] idom 858 from label 928
2023-11-07 09:01:25,327 [DEBUG] find_def_from_bottom label 858
2023-11-07 09:01:25,327 [DEBUG] find_def_from_top label 858
2023-11-07 09:01:25,327 [DEBUG] idom 846 from label 858
2023-11-07 09:01:25,327 [DEBUG] find_def_from_bottom label 846
2023-11-07 09:01:25,327 [DEBUG] find_def_from_top label 846
2023-11-07 09:01:25,327 [DEBUG] idom 700 from label 846
2023-11-07 09:01:25,327 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,327 [DEBUG] replaced with: R[i.5] = $932binary_subscr.2
2023-11-07 09:01:25,327 [DEBUG] on stmt: R[high] = $946binary_subscr.5
2023-11-07 09:01:25,327 [DEBUG] on stmt: $976return_value.11 = cast(value=i)
2023-11-07 09:01:25,327 [DEBUG] find_def var='i' stmt=$976return_value.11 = cast(value=i)
2023-11-07 09:01:25,327 [DEBUG] find_def_from_top label 928
2023-11-07 09:01:25,327 [DEBUG] idom 858 from label 928
2023-11-07 09:01:25,327 [DEBUG] find_def_from_bottom label 858
2023-11-07 09:01:25,327 [DEBUG] find_def_from_top label 858
2023-11-07 09:01:25,327 [DEBUG] idom 846 from label 858
2023-11-07 09:01:25,327 [DEBUG] find_def_from_bottom label 846
2023-11-07 09:01:25,327 [DEBUG] find_def_from_top label 846
2023-11-07 09:01:25,327 [DEBUG] idom 700 from label 846
2023-11-07 09:01:25,327 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,327 [DEBUG] replaced with: $976return_value.11 = cast(value=i.5)
2023-11-07 09:01:25,327 [DEBUG] on stmt: return $976return_value.11
2023-11-07 09:01:25,327 [DEBUG] Fix SSA violator on var j
2023-11-07 09:01:25,327 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,327 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,327 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,327 [DEBUG] on stmt: R = arg(1, name=R)
2023-11-07 09:01:25,327 [DEBUG] on stmt: low = arg(2, name=low)
2023-11-07 09:01:25,327 [DEBUG] on stmt: high = arg(3, name=high)
2023-11-07 09:01:25,327 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-11-07 09:01:25,327 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-11-07 09:01:25,327 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,327 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,327 [DEBUG] on stmt: branch $16pred, 22, 18
2023-11-07 09:01:25,327 [DEBUG] ==== SSA block rewrite pass on 18
2023-11-07 09:01:25,327 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,327 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,327 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,327 [DEBUG] ==== SSA block rewrite pass on 22
2023-11-07 09:01:25,327 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,327 [DEBUG] on stmt: $26compare_op.2 = high > low
2023-11-07 09:01:25,327 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,327 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,327 [DEBUG] on stmt: branch $32pred, 38, 34
2023-11-07 09:01:25,327 [DEBUG] ==== SSA block rewrite pass on 34
2023-11-07 09:01:25,327 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,327 [DEBUG] on stmt: $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,327 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,327 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,327 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,327 [DEBUG] on stmt: $binop_add42.2 = low + high
2023-11-07 09:01:25,328 [DEBUG] on stmt: $const46.3 = const(int, 1)
2023-11-07 09:01:25,328 [DEBUG] on stmt: mid = $binop_add42.2 >> $const46.3
2023-11-07 09:01:25,328 [DEBUG] on stmt: $56load_deref.6 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,328 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,328 [DEBUG] on stmt: branch $140pred, 142, 188
2023-11-07 09:01:25,328 [DEBUG] ==== SSA block rewrite pass on 142
2023-11-07 09:01:25,328 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,328 [DEBUG] on stmt: $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: R[low] = $146binary_subscr.2
2023-11-07 09:01:25,328 [DEBUG] on stmt: R[mid] = $160binary_subscr.5
2023-11-07 09:01:25,328 [DEBUG] on stmt: jump 188
2023-11-07 09:01:25,328 [DEBUG] ==== SSA block rewrite pass on 188
2023-11-07 09:01:25,328 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,328 [DEBUG] on stmt: $190load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,328 [DEBUG] on stmt: bool274 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,328 [DEBUG] on stmt: branch $274pred, 276, 322
2023-11-07 09:01:25,328 [DEBUG] ==== SSA block rewrite pass on 276
2023-11-07 09:01:25,328 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,328 [DEBUG] on stmt: $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: R[high] = $280binary_subscr.2
2023-11-07 09:01:25,328 [DEBUG] on stmt: R[mid] = $294binary_subscr.5
2023-11-07 09:01:25,328 [DEBUG] on stmt: jump 322
2023-11-07 09:01:25,328 [DEBUG] ==== SSA block rewrite pass on 322
2023-11-07 09:01:25,328 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,328 [DEBUG] on stmt: $324load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,328 [DEBUG] on stmt: $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,329 [DEBUG] on stmt: bool408 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,329 [DEBUG] on stmt: branch $408pred, 410, 456
2023-11-07 09:01:25,329 [DEBUG] ==== SSA block rewrite pass on 410
2023-11-07 09:01:25,329 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,329 [DEBUG] on stmt: $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: R[low] = $414binary_subscr.2
2023-11-07 09:01:25,329 [DEBUG] on stmt: R[mid] = $428binary_subscr.5
2023-11-07 09:01:25,329 [DEBUG] on stmt: jump 456
2023-11-07 09:01:25,329 [DEBUG] ==== SSA block rewrite pass on 456
2023-11-07 09:01:25,329 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,329 [DEBUG] on stmt: $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: R[high] = $496binary_subscr.9
2023-11-07 09:01:25,329 [DEBUG] on stmt: R[mid] = $510binary_subscr.12
2023-11-07 09:01:25,329 [DEBUG] on stmt: i = low
2023-11-07 09:01:25,329 [DEBUG] on stmt: $const544.19 = const(int, 1)
2023-11-07 09:01:25,329 [DEBUG] on stmt: j = high - $const544.19
2023-11-07 09:01:25,329 [DEBUG] first assign: j
2023-11-07 09:01:25,329 [DEBUG] replaced with: j = high - $const544.19
2023-11-07 09:01:25,329 [DEBUG] on stmt: jump 554
2023-11-07 09:01:25,329 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:25,329 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,329 [DEBUG] on stmt: i.3 = phi(incoming_values=[Var(i, quicksort.py:112), Var(i.2, quicksort.py:122)], incoming_blocks=[456, 860])
2023-11-07 09:01:25,329 [DEBUG] on stmt: $558compare_op.2 = i.3 < high
2023-11-07 09:01:25,329 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,329 [DEBUG] on stmt: branch $564pred, 566, 700
2023-11-07 09:01:25,329 [DEBUG] ==== SSA block rewrite pass on 566
2023-11-07 09:01:25,329 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,329 [DEBUG] on stmt: $568load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $580binary_subscr.7 = getitem(value=R, index=i.3, fn=<built-in function getitem>)
2023-11-07 09:01:25,329 [DEBUG] on stmt: $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: bool620 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: branch $620pred, 622, 700
2023-11-07 09:01:25,330 [DEBUG] ==== SSA block rewrite pass on 622
2023-11-07 09:01:25,330 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,330 [DEBUG] on stmt: i.4 = phi(incoming_values=[Var(i.1, quicksort.py:116), Var(i.3, quicksort.py:115)], incoming_blocks=[644, 566])
2023-11-07 09:01:25,330 [DEBUG] on stmt: $const624.1 = const(int, 1)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.4, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,330 [DEBUG] on stmt: i.1 = $binop_iadd626.2
2023-11-07 09:01:25,330 [DEBUG] on stmt: $636compare_op.5 = i.1 < high
2023-11-07 09:01:25,330 [DEBUG] on stmt: bool642 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: branch $642pred, 644, 700
2023-11-07 09:01:25,330 [DEBUG] ==== SSA block rewrite pass on 644
2023-11-07 09:01:25,330 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,330 [DEBUG] on stmt: $646load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $658binary_subscr.7 = getitem(value=R, index=i.1, fn=<built-in function getitem>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: bool698 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: branch $698pred, 622, 700
2023-11-07 09:01:25,330 [DEBUG] ==== SSA block rewrite pass on 700
2023-11-07 09:01:25,330 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,330 [DEBUG] on stmt: i.5 = phi(incoming_values=[Var(i.3, quicksort.py:115), Var(i.1, quicksort.py:116), Var(i.1, quicksort.py:116), Var(i.3, quicksort.py:115)], incoming_blocks=[554, 622, 644, 566])
2023-11-07 09:01:25,330 [DEBUG] on stmt: $704compare_op.2 = j >= low
2023-11-07 09:01:25,330 [DEBUG] on stmt: bool710 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: branch $710pred, 712, 846
2023-11-07 09:01:25,330 [DEBUG] ==== SSA block rewrite pass on 712
2023-11-07 09:01:25,330 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,330 [DEBUG] on stmt: $714load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: bool766 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,330 [DEBUG] on stmt: $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,330 [DEBUG] on stmt: branch $766pred, 768, 846
2023-11-07 09:01:25,330 [DEBUG] ==== SSA block rewrite pass on 768
2023-11-07 09:01:25,330 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,331 [DEBUG] on stmt: $const770.1 = const(int, 1)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,331 [DEBUG] on stmt: j = $binop_isub772.2
2023-11-07 09:01:25,331 [DEBUG] replaced with: j.1 = $binop_isub772.2
2023-11-07 09:01:25,331 [DEBUG] on stmt: $782compare_op.5 = j >= low
2023-11-07 09:01:25,331 [DEBUG] on stmt: bool788 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,331 [DEBUG] on stmt: branch $788pred, 790, 846
2023-11-07 09:01:25,331 [DEBUG] ==== SSA block rewrite pass on 790
2023-11-07 09:01:25,331 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,331 [DEBUG] on stmt: $792load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,331 [DEBUG] on stmt: bool844 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,331 [DEBUG] on stmt: branch $844pred, 768, 846
2023-11-07 09:01:25,331 [DEBUG] ==== SSA block rewrite pass on 846
2023-11-07 09:01:25,331 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,331 [DEBUG] on stmt: $850compare_op.2 = i.5 >= j
2023-11-07 09:01:25,331 [DEBUG] on stmt: bool856 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,331 [DEBUG] on stmt: branch $856pred, 858, 860
2023-11-07 09:01:25,331 [DEBUG] ==== SSA block rewrite pass on 858
2023-11-07 09:01:25,331 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,331 [DEBUG] on stmt: jump 928
2023-11-07 09:01:25,331 [DEBUG] ==== SSA block rewrite pass on 860
2023-11-07 09:01:25,331 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,331 [DEBUG] on stmt: $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $878binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-11-07 09:01:25,331 [DEBUG] on stmt: R[i.5] = $864binary_subscr.2
2023-11-07 09:01:25,331 [DEBUG] on stmt: R[j] = $878binary_subscr.5
2023-11-07 09:01:25,331 [DEBUG] on stmt: $const908.11 = const(int, 1)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.5, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,331 [DEBUG] on stmt: i.2 = $binop_iadd910.12
2023-11-07 09:01:25,331 [DEBUG] on stmt: $const918.14 = const(int, 1)
2023-11-07 09:01:25,331 [DEBUG] on stmt: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,331 [DEBUG] on stmt: j = $binop_isub920.15
2023-11-07 09:01:25,331 [DEBUG] replaced with: j.2 = $binop_isub920.15
2023-11-07 09:01:25,331 [DEBUG] on stmt: jump 554
2023-11-07 09:01:25,331 [DEBUG] ==== SSA block rewrite pass on 928
2023-11-07 09:01:25,331 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280e60550>
2023-11-07 09:01:25,331 [DEBUG] on stmt: $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $946binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: R[i.5] = $932binary_subscr.2
2023-11-07 09:01:25,332 [DEBUG] on stmt: R[high] = $946binary_subscr.5
2023-11-07 09:01:25,332 [DEBUG] on stmt: $976return_value.11 = cast(value=i.5)
2023-11-07 09:01:25,332 [DEBUG] on stmt: return $976return_value.11
2023-11-07 09:01:25,332 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {456: [<numba.core.ir.Assign object at 0x280d36510>],
             768: [<numba.core.ir.Assign object at 0x280d36a50>],
             860: [<numba.core.ir.Assign object at 0x280ea8a90>]})
2023-11-07 09:01:25,332 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,332 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,332 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,332 [DEBUG] on stmt: R = arg(1, name=R)
2023-11-07 09:01:25,332 [DEBUG] on stmt: low = arg(2, name=low)
2023-11-07 09:01:25,332 [DEBUG] on stmt: high = arg(3, name=high)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-11-07 09:01:25,332 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,332 [DEBUG] on stmt: branch $16pred, 22, 18
2023-11-07 09:01:25,332 [DEBUG] ==== SSA block rewrite pass on 18
2023-11-07 09:01:25,332 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,332 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,332 [DEBUG] ==== SSA block rewrite pass on 22
2023-11-07 09:01:25,332 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,332 [DEBUG] on stmt: $26compare_op.2 = high > low
2023-11-07 09:01:25,332 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,332 [DEBUG] on stmt: branch $32pred, 38, 34
2023-11-07 09:01:25,332 [DEBUG] ==== SSA block rewrite pass on 34
2023-11-07 09:01:25,332 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,332 [DEBUG] on stmt: $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,332 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,332 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,332 [DEBUG] on stmt: $binop_add42.2 = low + high
2023-11-07 09:01:25,332 [DEBUG] on stmt: $const46.3 = const(int, 1)
2023-11-07 09:01:25,332 [DEBUG] on stmt: mid = $binop_add42.2 >> $const46.3
2023-11-07 09:01:25,332 [DEBUG] on stmt: $56load_deref.6 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,332 [DEBUG] on stmt: $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,333 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,333 [DEBUG] on stmt: branch $140pred, 142, 188
2023-11-07 09:01:25,333 [DEBUG] ==== SSA block rewrite pass on 142
2023-11-07 09:01:25,333 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,333 [DEBUG] on stmt: $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: R[low] = $146binary_subscr.2
2023-11-07 09:01:25,333 [DEBUG] on stmt: R[mid] = $160binary_subscr.5
2023-11-07 09:01:25,333 [DEBUG] on stmt: jump 188
2023-11-07 09:01:25,333 [DEBUG] ==== SSA block rewrite pass on 188
2023-11-07 09:01:25,333 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,333 [DEBUG] on stmt: $190load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,333 [DEBUG] on stmt: bool274 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,333 [DEBUG] on stmt: branch $274pred, 276, 322
2023-11-07 09:01:25,333 [DEBUG] ==== SSA block rewrite pass on 276
2023-11-07 09:01:25,333 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,333 [DEBUG] on stmt: $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: R[high] = $280binary_subscr.2
2023-11-07 09:01:25,333 [DEBUG] on stmt: R[mid] = $294binary_subscr.5
2023-11-07 09:01:25,333 [DEBUG] on stmt: jump 322
2023-11-07 09:01:25,333 [DEBUG] ==== SSA block rewrite pass on 322
2023-11-07 09:01:25,333 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,333 [DEBUG] on stmt: $324load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,333 [DEBUG] on stmt: $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,334 [DEBUG] on stmt: bool408 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,334 [DEBUG] on stmt: branch $408pred, 410, 456
2023-11-07 09:01:25,334 [DEBUG] ==== SSA block rewrite pass on 410
2023-11-07 09:01:25,334 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,334 [DEBUG] on stmt: $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: R[low] = $414binary_subscr.2
2023-11-07 09:01:25,334 [DEBUG] on stmt: R[mid] = $428binary_subscr.5
2023-11-07 09:01:25,334 [DEBUG] on stmt: jump 456
2023-11-07 09:01:25,334 [DEBUG] ==== SSA block rewrite pass on 456
2023-11-07 09:01:25,334 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,334 [DEBUG] on stmt: $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: R[high] = $496binary_subscr.9
2023-11-07 09:01:25,334 [DEBUG] on stmt: R[mid] = $510binary_subscr.12
2023-11-07 09:01:25,334 [DEBUG] on stmt: i = low
2023-11-07 09:01:25,334 [DEBUG] on stmt: $const544.19 = const(int, 1)
2023-11-07 09:01:25,334 [DEBUG] on stmt: j = high - $const544.19
2023-11-07 09:01:25,334 [DEBUG] on stmt: jump 554
2023-11-07 09:01:25,334 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:25,334 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,334 [DEBUG] on stmt: i.3 = phi(incoming_values=[Var(i, quicksort.py:112), Var(i.2, quicksort.py:122)], incoming_blocks=[456, 860])
2023-11-07 09:01:25,334 [DEBUG] on stmt: $558compare_op.2 = i.3 < high
2023-11-07 09:01:25,334 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,334 [DEBUG] on stmt: branch $564pred, 566, 700
2023-11-07 09:01:25,334 [DEBUG] ==== SSA block rewrite pass on 566
2023-11-07 09:01:25,334 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,334 [DEBUG] on stmt: $568load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $580binary_subscr.7 = getitem(value=R, index=i.3, fn=<built-in function getitem>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,334 [DEBUG] on stmt: bool620 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,334 [DEBUG] on stmt: $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,334 [DEBUG] on stmt: branch $620pred, 622, 700
2023-11-07 09:01:25,335 [DEBUG] ==== SSA block rewrite pass on 622
2023-11-07 09:01:25,335 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,335 [DEBUG] on stmt: i.4 = phi(incoming_values=[Var(i.1, quicksort.py:116), Var(i.3, quicksort.py:115)], incoming_blocks=[644, 566])
2023-11-07 09:01:25,335 [DEBUG] on stmt: $const624.1 = const(int, 1)
2023-11-07 09:01:25,335 [DEBUG] on stmt: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.4, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,335 [DEBUG] on stmt: i.1 = $binop_iadd626.2
2023-11-07 09:01:25,335 [DEBUG] on stmt: $636compare_op.5 = i.1 < high
2023-11-07 09:01:25,335 [DEBUG] on stmt: bool642 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,335 [DEBUG] on stmt: $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,335 [DEBUG] on stmt: branch $642pred, 644, 700
2023-11-07 09:01:25,335 [DEBUG] ==== SSA block rewrite pass on 644
2023-11-07 09:01:25,335 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,335 [DEBUG] on stmt: $646load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,335 [DEBUG] on stmt: $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,335 [DEBUG] on stmt: $658binary_subscr.7 = getitem(value=R, index=i.1, fn=<built-in function getitem>)
2023-11-07 09:01:25,335 [DEBUG] on stmt: $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,335 [DEBUG] on stmt: $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,335 [DEBUG] on stmt: bool698 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,335 [DEBUG] on stmt: $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,335 [DEBUG] on stmt: branch $698pred, 622, 700
2023-11-07 09:01:25,335 [DEBUG] ==== SSA block rewrite pass on 700
2023-11-07 09:01:25,335 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,335 [DEBUG] on stmt: i.5 = phi(incoming_values=[Var(i.3, quicksort.py:115), Var(i.1, quicksort.py:116), Var(i.1, quicksort.py:116), Var(i.3, quicksort.py:115)], incoming_blocks=[554, 622, 644, 566])
2023-11-07 09:01:25,335 [DEBUG] on stmt: $704compare_op.2 = j >= low
2023-11-07 09:01:25,335 [DEBUG] find_def var='j' stmt=$704compare_op.2 = j >= low
2023-11-07 09:01:25,335 [DEBUG] find_def_from_top label 700
2023-11-07 09:01:25,335 [DEBUG] idom 554 from label 700
2023-11-07 09:01:25,335 [DEBUG] find_def_from_bottom label 554
2023-11-07 09:01:25,335 [DEBUG] find_def_from_top label 554
2023-11-07 09:01:25,335 [DEBUG] insert phi node j.3 = phi(incoming_values=[], incoming_blocks=[]) at 554
2023-11-07 09:01:25,335 [DEBUG] find_def_from_bottom label 456
2023-11-07 09:01:25,335 [DEBUG] incoming_def j = high - $const544.19
2023-11-07 09:01:25,335 [DEBUG] find_def_from_bottom label 860
2023-11-07 09:01:25,335 [DEBUG] incoming_def j.2 = $binop_isub920.15
2023-11-07 09:01:25,335 [DEBUG] replaced with: $704compare_op.2 = j.3 >= low
2023-11-07 09:01:25,335 [DEBUG] on stmt: bool710 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,335 [DEBUG] on stmt: $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,335 [DEBUG] on stmt: branch $710pred, 712, 846
2023-11-07 09:01:25,335 [DEBUG] ==== SSA block rewrite pass on 712
2023-11-07 09:01:25,335 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,335 [DEBUG] on stmt: $714load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,335 [DEBUG] on stmt: $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,335 [DEBUG] on stmt: $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,335 [DEBUG] find_def var='j' stmt=$728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,335 [DEBUG] find_def_from_top label 712
2023-11-07 09:01:25,335 [DEBUG] idom 700 from label 712
2023-11-07 09:01:25,335 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,335 [DEBUG] find_def_from_top label 700
2023-11-07 09:01:25,335 [DEBUG] idom 554 from label 700
2023-11-07 09:01:25,336 [DEBUG] find_def_from_bottom label 554
2023-11-07 09:01:25,336 [DEBUG] replaced with: $728binary_subscr.8 = getitem(value=R, index=j.3, fn=<built-in function getitem>)
2023-11-07 09:01:25,336 [DEBUG] on stmt: $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,336 [DEBUG] on stmt: $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,336 [DEBUG] on stmt: bool766 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,336 [DEBUG] on stmt: $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,336 [DEBUG] on stmt: branch $766pred, 768, 846
2023-11-07 09:01:25,336 [DEBUG] ==== SSA block rewrite pass on 768
2023-11-07 09:01:25,336 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,336 [DEBUG] on stmt: $const770.1 = const(int, 1)
2023-11-07 09:01:25,336 [DEBUG] on stmt: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,336 [DEBUG] find_def var='j' stmt=$binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,336 [DEBUG] find_def_from_top label 768
2023-11-07 09:01:25,336 [DEBUG] insert phi node j.4 = phi(incoming_values=[], incoming_blocks=[]) at 768
2023-11-07 09:01:25,336 [DEBUG] find_def_from_bottom label 712
2023-11-07 09:01:25,336 [DEBUG] find_def_from_top label 712
2023-11-07 09:01:25,336 [DEBUG] idom 700 from label 712
2023-11-07 09:01:25,336 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,336 [DEBUG] find_def_from_top label 700
2023-11-07 09:01:25,336 [DEBUG] idom 554 from label 700
2023-11-07 09:01:25,336 [DEBUG] find_def_from_bottom label 554
2023-11-07 09:01:25,336 [DEBUG] incoming_def j.3 = phi(incoming_values=[Var(j, quicksort.py:113), Var(j.2, quicksort.py:123)], incoming_blocks=[456, 860])
2023-11-07 09:01:25,336 [DEBUG] find_def_from_bottom label 790
2023-11-07 09:01:25,336 [DEBUG] find_def_from_top label 790
2023-11-07 09:01:25,336 [DEBUG] idom 768 from label 790
2023-11-07 09:01:25,336 [DEBUG] find_def_from_bottom label 768
2023-11-07 09:01:25,336 [DEBUG] incoming_def j.1 = $binop_isub772.2
2023-11-07 09:01:25,336 [DEBUG] replaced with: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.4, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,336 [DEBUG] on stmt: j.1 = $binop_isub772.2
2023-11-07 09:01:25,336 [DEBUG] on stmt: $782compare_op.5 = j >= low
2023-11-07 09:01:25,336 [DEBUG] find_def var='j' stmt=$782compare_op.5 = j >= low
2023-11-07 09:01:25,336 [DEBUG] replaced with: $782compare_op.5 = j.1 >= low
2023-11-07 09:01:25,336 [DEBUG] on stmt: bool788 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,336 [DEBUG] on stmt: $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,336 [DEBUG] on stmt: branch $788pred, 790, 846
2023-11-07 09:01:25,336 [DEBUG] ==== SSA block rewrite pass on 790
2023-11-07 09:01:25,336 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,336 [DEBUG] on stmt: $792load_deref.1 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,336 [DEBUG] on stmt: $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,336 [DEBUG] on stmt: $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,336 [DEBUG] find_def var='j' stmt=$806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,336 [DEBUG] find_def_from_top label 790
2023-11-07 09:01:25,336 [DEBUG] idom 768 from label 790
2023-11-07 09:01:25,336 [DEBUG] find_def_from_bottom label 768
2023-11-07 09:01:25,336 [DEBUG] replaced with: $806binary_subscr.8 = getitem(value=R, index=j.1, fn=<built-in function getitem>)
2023-11-07 09:01:25,336 [DEBUG] on stmt: $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,336 [DEBUG] on stmt: $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,336 [DEBUG] on stmt: bool844 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,336 [DEBUG] on stmt: $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,336 [DEBUG] on stmt: branch $844pred, 768, 846
2023-11-07 09:01:25,336 [DEBUG] ==== SSA block rewrite pass on 846
2023-11-07 09:01:25,337 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,337 [DEBUG] on stmt: $850compare_op.2 = i.5 >= j
2023-11-07 09:01:25,337 [DEBUG] find_def var='j' stmt=$850compare_op.2 = i.5 >= j
2023-11-07 09:01:25,337 [DEBUG] find_def_from_top label 846
2023-11-07 09:01:25,337 [DEBUG] insert phi node j.5 = phi(incoming_values=[], incoming_blocks=[]) at 846
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 712
2023-11-07 09:01:25,337 [DEBUG] find_def_from_top label 712
2023-11-07 09:01:25,337 [DEBUG] idom 700 from label 712
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,337 [DEBUG] find_def_from_top label 700
2023-11-07 09:01:25,337 [DEBUG] idom 554 from label 700
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 554
2023-11-07 09:01:25,337 [DEBUG] incoming_def j.3 = phi(incoming_values=[Var(j, quicksort.py:113), Var(j.2, quicksort.py:123)], incoming_blocks=[456, 860])
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 768
2023-11-07 09:01:25,337 [DEBUG] incoming_def j.1 = $binop_isub772.2
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 700
2023-11-07 09:01:25,337 [DEBUG] find_def_from_top label 700
2023-11-07 09:01:25,337 [DEBUG] idom 554 from label 700
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 554
2023-11-07 09:01:25,337 [DEBUG] incoming_def j.3 = phi(incoming_values=[Var(j, quicksort.py:113), Var(j.2, quicksort.py:123)], incoming_blocks=[456, 860])
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 790
2023-11-07 09:01:25,337 [DEBUG] find_def_from_top label 790
2023-11-07 09:01:25,337 [DEBUG] idom 768 from label 790
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 768
2023-11-07 09:01:25,337 [DEBUG] incoming_def j.1 = $binop_isub772.2
2023-11-07 09:01:25,337 [DEBUG] replaced with: $850compare_op.2 = i.5 >= j.5
2023-11-07 09:01:25,337 [DEBUG] on stmt: bool856 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,337 [DEBUG] on stmt: $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,337 [DEBUG] on stmt: branch $856pred, 858, 860
2023-11-07 09:01:25,337 [DEBUG] ==== SSA block rewrite pass on 858
2023-11-07 09:01:25,337 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,337 [DEBUG] on stmt: jump 928
2023-11-07 09:01:25,337 [DEBUG] ==== SSA block rewrite pass on 860
2023-11-07 09:01:25,337 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,337 [DEBUG] on stmt: $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,337 [DEBUG] find_def var='j' stmt=$864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-11-07 09:01:25,337 [DEBUG] find_def_from_top label 860
2023-11-07 09:01:25,337 [DEBUG] idom 846 from label 860
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 846
2023-11-07 09:01:25,337 [DEBUG] replaced with: $864binary_subscr.2 = getitem(value=R, index=j.5, fn=<built-in function getitem>)
2023-11-07 09:01:25,337 [DEBUG] on stmt: $878binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-11-07 09:01:25,337 [DEBUG] on stmt: R[i.5] = $864binary_subscr.2
2023-11-07 09:01:25,337 [DEBUG] on stmt: R[j] = $878binary_subscr.5
2023-11-07 09:01:25,337 [DEBUG] find_def var='j' stmt=R[j] = $878binary_subscr.5
2023-11-07 09:01:25,337 [DEBUG] find_def_from_top label 860
2023-11-07 09:01:25,337 [DEBUG] idom 846 from label 860
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 846
2023-11-07 09:01:25,337 [DEBUG] replaced with: R[j.5] = $878binary_subscr.5
2023-11-07 09:01:25,337 [DEBUG] on stmt: $const908.11 = const(int, 1)
2023-11-07 09:01:25,337 [DEBUG] on stmt: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.5, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,337 [DEBUG] on stmt: i.2 = $binop_iadd910.12
2023-11-07 09:01:25,337 [DEBUG] on stmt: $const918.14 = const(int, 1)
2023-11-07 09:01:25,337 [DEBUG] on stmt: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,337 [DEBUG] find_def var='j' stmt=$binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,337 [DEBUG] find_def_from_top label 860
2023-11-07 09:01:25,337 [DEBUG] idom 846 from label 860
2023-11-07 09:01:25,337 [DEBUG] find_def_from_bottom label 846
2023-11-07 09:01:25,337 [DEBUG] replaced with: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.5, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,337 [DEBUG] on stmt: j.2 = $binop_isub920.15
2023-11-07 09:01:25,337 [DEBUG] on stmt: jump 554
2023-11-07 09:01:25,338 [DEBUG] ==== SSA block rewrite pass on 928
2023-11-07 09:01:25,338 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280eba950>
2023-11-07 09:01:25,338 [DEBUG] on stmt: $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-11-07 09:01:25,338 [DEBUG] on stmt: $946binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-11-07 09:01:25,338 [DEBUG] on stmt: R[i.5] = $932binary_subscr.2
2023-11-07 09:01:25,338 [DEBUG] on stmt: R[high] = $946binary_subscr.5
2023-11-07 09:01:25,338 [DEBUG] on stmt: $976return_value.11 = cast(value=i.5)
2023-11-07 09:01:25,338 [DEBUG] on stmt: return $976return_value.11
2023-11-07 09:01:25,343 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=45)
           2	RESUME(arg=0, lineno=45)
           4	LOAD_FAST(arg=0, lineno=47)
           6	LOAD_FAST(arg=1, lineno=47)
           8	BINARY_SUBSCR(arg=None, lineno=47)
          18	RETURN_VALUE(arg=None, lineno=47)
2023-11-07 09:01:25,343 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,343 [DEBUG] stack: []
2023-11-07 09:01:25,343 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,343 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=45)
2023-11-07 09:01:25,343 [DEBUG] stack []
2023-11-07 09:01:25,343 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=45)
2023-11-07 09:01:25,343 [DEBUG] stack []
2023-11-07 09:01:25,343 [DEBUG] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=47)
2023-11-07 09:01:25,343 [DEBUG] stack []
2023-11-07 09:01:25,343 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=47)
2023-11-07 09:01:25,343 [DEBUG] stack ['$A4.0']
2023-11-07 09:01:25,343 [DEBUG] dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=47)
2023-11-07 09:01:25,343 [DEBUG] stack ['$A4.0', '$idx_or_val6.1']
2023-11-07 09:01:25,343 [DEBUG] dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=47)
2023-11-07 09:01:25,343 [DEBUG] stack ['$8binary_subscr.2']
2023-11-07 09:01:25,343 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,343 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,343 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:25,343 [DEBUG] defmap: {}
2023-11-07 09:01:25,343 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,343 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:25,343 [DEBUG] keep phismap: {}
2023-11-07 09:01:25,343 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:25,343 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,344 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$A4.0'}), (6, {'res': '$idx_or_val6.1'}), (8, {'index': '$idx_or_val6.1', 'target': '$A4.0', 'res': '$8binary_subscr.2'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'retval': '$8binary_subscr.2', 'castval': '$18return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,344 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    idx_or_val = arg(1, name=idx_or_val)     ['idx_or_val']
    $8binary_subscr.2 = getitem(value=A, index=idx_or_val, fn=<built-in function getitem>) ['$8binary_subscr.2', 'A', 'idx_or_val']
    $18return_value.3 = cast(value=$8binary_subscr.2) ['$18return_value.3', '$8binary_subscr.2']
    return $18return_value.3                 ['$18return_value.3']

2023-11-07 09:01:25,345 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,345 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280e7fad0>
2023-11-07 09:01:25,345 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,345 [DEBUG] on stmt: idx_or_val = arg(1, name=idx_or_val)
2023-11-07 09:01:25,345 [DEBUG] on stmt: $8binary_subscr.2 = getitem(value=A, index=idx_or_val, fn=<built-in function getitem>)
2023-11-07 09:01:25,345 [DEBUG] on stmt: $18return_value.3 = cast(value=$8binary_subscr.2)
2023-11-07 09:01:25,345 [DEBUG] on stmt: return $18return_value.3
2023-11-07 09:01:25,345 [DEBUG] defs defaultdict(<class 'list'>,
            {'$18return_value.3': [<numba.core.ir.Assign object at 0x280d7a990>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x280dbe8d0>],
             'A': [<numba.core.ir.Assign object at 0x280e6d310>],
             'idx_or_val': [<numba.core.ir.Assign object at 0x280e6db50>]})
2023-11-07 09:01:25,345 [DEBUG] SSA violators set()
2023-11-07 09:01:25,355 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=6111)
           2	RESUME(arg=0, lineno=6111)
           4	LOAD_FAST(arg=0, lineno=6116)
           6	LOAD_FAST(arg=1, lineno=6116)
           8	COMPARE_OP(arg=0, lineno=6116)
          14	JUMP_IF_TRUE_OR_POP(arg=40, lineno=6116)
          16	LOAD_GLOBAL(arg=1, lineno=6116)
          28	LOAD_ATTR(arg=1, lineno=6116)
          38	LOAD_FAST(arg=1, lineno=6116)
          40	PRECALL(arg=1, lineno=6116)
          44	CALL(arg=1, lineno=6116)
          54	JUMP_IF_FALSE_OR_POP(arg=20, lineno=6116)
          56	LOAD_GLOBAL(arg=1, lineno=6116)
          68	LOAD_ATTR(arg=1, lineno=6116)
          78	LOAD_FAST(arg=0, lineno=6116)
          80	PRECALL(arg=1, lineno=6116)
          84	CALL(arg=1, lineno=6116)
          94	UNARY_NOT(arg=None, lineno=6116)
>         96	RETURN_VALUE(arg=None, lineno=6116)
2023-11-07 09:01:25,355 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,355 [DEBUG] stack: []
2023-11-07 09:01:25,355 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=6111)
2023-11-07 09:01:25,355 [DEBUG] stack []
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=6111)
2023-11-07 09:01:25,355 [DEBUG] stack []
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=6116)
2023-11-07 09:01:25,355 [DEBUG] stack []
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=6116)
2023-11-07 09:01:25,355 [DEBUG] stack ['$a4.0']
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=8, inst=COMPARE_OP(arg=0, lineno=6116)
2023-11-07 09:01:25,355 [DEBUG] stack ['$a4.0', '$b6.1']
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=14, inst=JUMP_IF_TRUE_OR_POP(arg=40, lineno=6116)
2023-11-07 09:01:25,355 [DEBUG] stack ['$8compare_op.2']
2023-11-07 09:01:25,355 [DEBUG] end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=('$8compare_op.2',), blockstack=(), npush=0)]
2023-11-07 09:01:25,355 [DEBUG] pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=96 nstack_initial=1)])
2023-11-07 09:01:25,355 [DEBUG] stack: []
2023-11-07 09:01:25,355 [DEBUG] state.pc_initial: State(pc_initial=16 nstack_initial=0)
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=6116)
2023-11-07 09:01:25,355 [DEBUG] stack []
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=28, inst=LOAD_ATTR(arg=1, lineno=6116)
2023-11-07 09:01:25,355 [DEBUG] stack ['$null$16.1', '$16load_global.0']
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=6116)
2023-11-07 09:01:25,355 [DEBUG] stack ['$null$16.1', '$28load_attr.2']
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=40, inst=PRECALL(arg=1, lineno=6116)
2023-11-07 09:01:25,355 [DEBUG] stack ['$null$16.1', '$28load_attr.2', '$b38.3']
2023-11-07 09:01:25,355 [DEBUG] dispatch pc=44, inst=CALL(arg=1, lineno=6116)
2023-11-07 09:01:25,356 [DEBUG] stack ['$null$16.1', '$28load_attr.2', '$b38.3']
2023-11-07 09:01:25,356 [DEBUG] dispatch pc=54, inst=JUMP_IF_FALSE_OR_POP(arg=20, lineno=6116)
2023-11-07 09:01:25,356 [DEBUG] stack ['$44call.4']
2023-11-07 09:01:25,356 [DEBUG] end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=('$44call.4',), blockstack=(), npush=0)]
2023-11-07 09:01:25,356 [DEBUG] pending: deque([State(pc_initial=96 nstack_initial=1), State(pc_initial=56 nstack_initial=0), State(pc_initial=96 nstack_initial=1)])
2023-11-07 09:01:25,356 [DEBUG] stack: ['$phi96.0']
2023-11-07 09:01:25,356 [DEBUG] state.pc_initial: State(pc_initial=96 nstack_initial=1)
2023-11-07 09:01:25,356 [DEBUG] dispatch pc=96, inst=RETURN_VALUE(arg=None, lineno=6116)
2023-11-07 09:01:25,356 [DEBUG] stack ['$phi96.0']
2023-11-07 09:01:25,356 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,356 [DEBUG] pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=96 nstack_initial=1)])
2023-11-07 09:01:25,356 [DEBUG] stack: []
2023-11-07 09:01:25,356 [DEBUG] state.pc_initial: State(pc_initial=56 nstack_initial=0)
2023-11-07 09:01:25,356 [DEBUG] dispatch pc=56, inst=LOAD_GLOBAL(arg=1, lineno=6116)
2023-11-07 09:01:25,356 [DEBUG] stack []
2023-11-07 09:01:25,356 [DEBUG] dispatch pc=68, inst=LOAD_ATTR(arg=1, lineno=6116)
2023-11-07 09:01:25,356 [DEBUG] stack ['$null$56.1', '$56load_global.0']
2023-11-07 09:01:25,356 [DEBUG] dispatch pc=78, inst=LOAD_FAST(arg=0, lineno=6116)
2023-11-07 09:01:25,356 [DEBUG] stack ['$null$56.1', '$68load_attr.2']
2023-11-07 09:01:25,356 [DEBUG] dispatch pc=80, inst=PRECALL(arg=1, lineno=6116)
2023-11-07 09:01:25,356 [DEBUG] stack ['$null$56.1', '$68load_attr.2', '$a78.3']
2023-11-07 09:01:25,356 [DEBUG] dispatch pc=84, inst=CALL(arg=1, lineno=6116)
2023-11-07 09:01:25,356 [DEBUG] stack ['$null$56.1', '$68load_attr.2', '$a78.3']
2023-11-07 09:01:25,356 [DEBUG] dispatch pc=94, inst=UNARY_NOT(arg=None, lineno=6116)
2023-11-07 09:01:25,356 [DEBUG] stack ['$84call.4']
2023-11-07 09:01:25,356 [DEBUG] end state. edges=[Edge(pc=96, stack=('$94unary_not.5',), blockstack=(), npush=0)]
2023-11-07 09:01:25,356 [DEBUG] pending: deque([State(pc_initial=96 nstack_initial=1), State(pc_initial=96 nstack_initial=1)])
2023-11-07 09:01:25,356 [DEBUG] pending: deque([State(pc_initial=96 nstack_initial=1)])
2023-11-07 09:01:25,356 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,356 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=1): {'$phi96.0'}})
2023-11-07 09:01:25,356 [DEBUG] defmap: {'$phi96.0': State(pc_initial=0 nstack_initial=0)}
2023-11-07 09:01:25,356 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi96.0': {('$44call.4', State(pc_initial=16 nstack_initial=0)),
                          ('$8compare_op.2',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$94unary_not.5',
                           State(pc_initial=56 nstack_initial=0))}})
2023-11-07 09:01:25,356 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi96.0': {('$44call.4', State(pc_initial=16 nstack_initial=0)),
                          ('$8compare_op.2',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$94unary_not.5',
                           State(pc_initial=56 nstack_initial=0))}})
2023-11-07 09:01:25,356 [DEBUG] keep phismap: {'$phi96.0': {('$44call.4', State(pc_initial=16 nstack_initial=0)),
              ('$8compare_op.2', State(pc_initial=0 nstack_initial=0)),
              ('$94unary_not.5', State(pc_initial=56 nstack_initial=0))}}
2023-11-07 09:01:25,356 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi96.0': '$8compare_op.2'},
             State(pc_initial=16 nstack_initial=0): {'$phi96.0': '$44call.4'},
             State(pc_initial=56 nstack_initial=0): {'$phi96.0': '$94unary_not.5'}})
2023-11-07 09:01:25,356 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,356 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'res': '$b6.1'}), (8, {'lhs': '$a4.0', 'rhs': '$b6.1', 'res': '$8compare_op.2'}), (10, {}), (12, {}), (14, {'pred': '$8compare_op.2'})), outgoing_phis={'$phi96.0': '$8compare_op.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 96: ('$8compare_op.2',)})
2023-11-07 09:01:25,356 [DEBUG] block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'idx': 0, 'res': '$16load_global.0'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {'item': '$16load_global.0', 'res': '$28load_attr.2'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'res': '$b38.3'}), (40, {}), (42, {}), (44, {'func': '$28load_attr.2', 'args': ['$b38.3'], 'kw_names': None, 'res': '$44call.4'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {'pred': '$44call.4'})), outgoing_phis={'$phi96.0': '$44call.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 96: ('$44call.4',)})
2023-11-07 09:01:25,356 [DEBUG] block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'idx': 0, 'res': '$56load_global.0'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {'item': '$56load_global.0', 'res': '$68load_attr.2'}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'res': '$a78.3'}), (80, {}), (82, {}), (84, {'func': '$68load_attr.2', 'args': ['$a78.3'], 'kw_names': None, 'res': '$84call.4'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'value': '$84call.4', 'res': '$94unary_not.5'})), outgoing_phis={'$phi96.0': '$94unary_not.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ('$94unary_not.5',)})
2023-11-07 09:01:25,356 [DEBUG] block_infos State(pc_initial=96 nstack_initial=1):
AdaptBlockInfo(insts=((96, {'retval': '$phi96.0', 'castval': '$96return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,357 [DEBUG] label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $8compare_op.2 = a < b                   ['$8compare_op.2', 'a', 'b']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($8compare_op.2, func=bool14, args=(Var($8compare_op.2, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None) ['$14pred', '$8compare_op.2', 'bool14']
    $phi96.0 = $8compare_op.2                ['$8compare_op.2', '$phi96.0']
    branch $14pred, 96, 16                   ['$14pred']
label 16:
    $16load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $28load_attr.2 = getattr(value=$16load_global.0, attr=isnan) ['$16load_global.0', '$28load_attr.2']
    $44call.4 = call $28load_attr.2(b, func=$28load_attr.2, args=[Var(b, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_attr.2', '$44call.4', 'b']
    bool54 = global(bool: <class 'bool'>)    ['bool54']
    $54pred = call bool54($44call.4, func=bool54, args=(Var($44call.4, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None) ['$44call.4', '$54pred', 'bool54']
    $phi96.0 = $44call.4                     ['$44call.4', '$phi96.0']
    branch $54pred, 56, 96                   ['$54pred']
label 56:
    $56load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$56load_global.0']
    $68load_attr.2 = getattr(value=$56load_global.0, attr=isnan) ['$56load_global.0', '$68load_attr.2']
    $84call.4 = call $68load_attr.2(a, func=$68load_attr.2, args=[Var(a, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_attr.2', '$84call.4', 'a']
    $94unary_not.5 = unary(fn=<built-in function not_>, value=$84call.4) ['$84call.4', '$94unary_not.5']
    $phi96.0 = $94unary_not.5                ['$94unary_not.5', '$phi96.0']
    jump 96                                  []
label 96:
    $96return_value.1 = cast(value=$phi96.0) ['$96return_value.1', '$phi96.0']
    return $96return_value.1                 ['$96return_value.1']

2023-11-07 09:01:25,359 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,359 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2802f48d0>
2023-11-07 09:01:25,359 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:25,359 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $8compare_op.2 = a < b
2023-11-07 09:01:25,359 [DEBUG] on stmt: bool14 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $14pred = call bool14($8compare_op.2, func=bool14, args=(Var($8compare_op.2, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $phi96.0 = $8compare_op.2
2023-11-07 09:01:25,359 [DEBUG] on stmt: branch $14pred, 96, 16
2023-11-07 09:01:25,359 [DEBUG] ==== SSA block analysis pass on 16
2023-11-07 09:01:25,359 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2802f48d0>
2023-11-07 09:01:25,359 [DEBUG] on stmt: $16load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $28load_attr.2 = getattr(value=$16load_global.0, attr=isnan)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $44call.4 = call $28load_attr.2(b, func=$28load_attr.2, args=[Var(b, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,359 [DEBUG] on stmt: bool54 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $54pred = call bool54($44call.4, func=bool54, args=(Var($44call.4, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $phi96.0 = $44call.4
2023-11-07 09:01:25,359 [DEBUG] on stmt: branch $54pred, 56, 96
2023-11-07 09:01:25,359 [DEBUG] ==== SSA block analysis pass on 56
2023-11-07 09:01:25,359 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2802f48d0>
2023-11-07 09:01:25,359 [DEBUG] on stmt: $56load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $68load_attr.2 = getattr(value=$56load_global.0, attr=isnan)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $84call.4 = call $68load_attr.2(a, func=$68load_attr.2, args=[Var(a, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $94unary_not.5 = unary(fn=<built-in function not_>, value=$84call.4)
2023-11-07 09:01:25,359 [DEBUG] on stmt: $phi96.0 = $94unary_not.5
2023-11-07 09:01:25,359 [DEBUG] on stmt: jump 96
2023-11-07 09:01:25,359 [DEBUG] ==== SSA block analysis pass on 96
2023-11-07 09:01:25,359 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2802f48d0>
2023-11-07 09:01:25,359 [DEBUG] on stmt: $96return_value.1 = cast(value=$phi96.0)
2023-11-07 09:01:25,359 [DEBUG] on stmt: return $96return_value.1
2023-11-07 09:01:25,359 [DEBUG] defs defaultdict(<class 'list'>,
            {'$14pred': [<numba.core.ir.Assign object at 0x280495c90>],
             '$16load_global.0': [<numba.core.ir.Assign object at 0x280494bd0>],
             '$28load_attr.2': [<numba.core.ir.Assign object at 0x280497a90>],
             '$44call.4': [<numba.core.ir.Assign object at 0x280494c10>],
             '$54pred': [<numba.core.ir.Assign object at 0x2802f73d0>],
             '$56load_global.0': [<numba.core.ir.Assign object at 0x2802f6210>],
             '$68load_attr.2': [<numba.core.ir.Assign object at 0x2802f57d0>],
             '$84call.4': [<numba.core.ir.Assign object at 0x2802f55d0>],
             '$8compare_op.2': [<numba.core.ir.Assign object at 0x280494090>],
             '$94unary_not.5': [<numba.core.ir.Assign object at 0x2802f5390>],
             '$96return_value.1': [<numba.core.ir.Assign object at 0x2802f5a90>],
             '$phi96.0': [<numba.core.ir.Assign object at 0x280495010>,
                          <numba.core.ir.Assign object at 0x280496d50>,
                          <numba.core.ir.Assign object at 0x28098f890>],
             'a': [<numba.core.ir.Assign object at 0x280495b10>],
             'b': [<numba.core.ir.Assign object at 0x280495bd0>],
             'bool14': [<numba.core.ir.Assign object at 0x280496f10>],
             'bool54': [<numba.core.ir.Assign object at 0x280497190>]})
2023-11-07 09:01:25,359 [DEBUG] SSA violators {'$phi96.0'}
2023-11-07 09:01:25,360 [DEBUG] Fix SSA violator on var $phi96.0
2023-11-07 09:01:25,360 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,360 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2802f49d0>
2023-11-07 09:01:25,360 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:25,360 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $8compare_op.2 = a < b
2023-11-07 09:01:25,360 [DEBUG] on stmt: bool14 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $14pred = call bool14($8compare_op.2, func=bool14, args=(Var($8compare_op.2, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $phi96.0 = $8compare_op.2
2023-11-07 09:01:25,360 [DEBUG] first assign: $phi96.0
2023-11-07 09:01:25,360 [DEBUG] replaced with: $phi96.0 = $8compare_op.2
2023-11-07 09:01:25,360 [DEBUG] on stmt: branch $14pred, 96, 16
2023-11-07 09:01:25,360 [DEBUG] ==== SSA block rewrite pass on 16
2023-11-07 09:01:25,360 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2802f49d0>
2023-11-07 09:01:25,360 [DEBUG] on stmt: $16load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $28load_attr.2 = getattr(value=$16load_global.0, attr=isnan)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $44call.4 = call $28load_attr.2(b, func=$28load_attr.2, args=[Var(b, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,360 [DEBUG] on stmt: bool54 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $54pred = call bool54($44call.4, func=bool54, args=(Var($44call.4, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $phi96.0 = $44call.4
2023-11-07 09:01:25,360 [DEBUG] replaced with: $phi96.0.1 = $44call.4
2023-11-07 09:01:25,360 [DEBUG] on stmt: branch $54pred, 56, 96
2023-11-07 09:01:25,360 [DEBUG] ==== SSA block rewrite pass on 56
2023-11-07 09:01:25,360 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2802f49d0>
2023-11-07 09:01:25,360 [DEBUG] on stmt: $56load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $68load_attr.2 = getattr(value=$56load_global.0, attr=isnan)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $84call.4 = call $68load_attr.2(a, func=$68load_attr.2, args=[Var(a, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $94unary_not.5 = unary(fn=<built-in function not_>, value=$84call.4)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $phi96.0 = $94unary_not.5
2023-11-07 09:01:25,360 [DEBUG] replaced with: $phi96.0.2 = $94unary_not.5
2023-11-07 09:01:25,360 [DEBUG] on stmt: jump 96
2023-11-07 09:01:25,360 [DEBUG] ==== SSA block rewrite pass on 96
2023-11-07 09:01:25,360 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2802f49d0>
2023-11-07 09:01:25,360 [DEBUG] on stmt: $96return_value.1 = cast(value=$phi96.0)
2023-11-07 09:01:25,360 [DEBUG] on stmt: return $96return_value.1
2023-11-07 09:01:25,360 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x2802f7dd0>],
             16: [<numba.core.ir.Assign object at 0x2802f7110>],
             56: [<numba.core.ir.Assign object at 0x2802f7210>]})
2023-11-07 09:01:25,360 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,360 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802f4c90>
2023-11-07 09:01:25,360 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:25,360 [DEBUG] on stmt: b = arg(1, name=b)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $8compare_op.2 = a < b
2023-11-07 09:01:25,360 [DEBUG] on stmt: bool14 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $14pred = call bool14($8compare_op.2, func=bool14, args=(Var($8compare_op.2, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $phi96.0 = $8compare_op.2
2023-11-07 09:01:25,360 [DEBUG] on stmt: branch $14pred, 96, 16
2023-11-07 09:01:25,360 [DEBUG] ==== SSA block rewrite pass on 16
2023-11-07 09:01:25,360 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802f4c90>
2023-11-07 09:01:25,360 [DEBUG] on stmt: $16load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $28load_attr.2 = getattr(value=$16load_global.0, attr=isnan)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $44call.4 = call $28load_attr.2(b, func=$28load_attr.2, args=[Var(b, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,360 [DEBUG] on stmt: bool54 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $54pred = call bool54($44call.4, func=bool54, args=(Var($44call.4, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $phi96.0.1 = $44call.4
2023-11-07 09:01:25,360 [DEBUG] on stmt: branch $54pred, 56, 96
2023-11-07 09:01:25,360 [DEBUG] ==== SSA block rewrite pass on 56
2023-11-07 09:01:25,360 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802f4c90>
2023-11-07 09:01:25,360 [DEBUG] on stmt: $56load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $68load_attr.2 = getattr(value=$56load_global.0, attr=isnan)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $84call.4 = call $68load_attr.2(a, func=$68load_attr.2, args=[Var(a, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $94unary_not.5 = unary(fn=<built-in function not_>, value=$84call.4)
2023-11-07 09:01:25,360 [DEBUG] on stmt: $phi96.0.2 = $94unary_not.5
2023-11-07 09:01:25,360 [DEBUG] on stmt: jump 96
2023-11-07 09:01:25,360 [DEBUG] ==== SSA block rewrite pass on 96
2023-11-07 09:01:25,360 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2802f4c90>
2023-11-07 09:01:25,360 [DEBUG] on stmt: $96return_value.1 = cast(value=$phi96.0)
2023-11-07 09:01:25,360 [DEBUG] find_def var='$phi96.0' stmt=$96return_value.1 = cast(value=$phi96.0)
2023-11-07 09:01:25,360 [DEBUG] find_def_from_top label 96
2023-11-07 09:01:25,360 [DEBUG] insert phi node $phi96.0.3 = phi(incoming_values=[], incoming_blocks=[]) at 96
2023-11-07 09:01:25,360 [DEBUG] find_def_from_bottom label 0
2023-11-07 09:01:25,360 [DEBUG] incoming_def $phi96.0 = $8compare_op.2
2023-11-07 09:01:25,360 [DEBUG] find_def_from_bottom label 16
2023-11-07 09:01:25,360 [DEBUG] incoming_def $phi96.0.1 = $44call.4
2023-11-07 09:01:25,360 [DEBUG] find_def_from_bottom label 56
2023-11-07 09:01:25,360 [DEBUG] incoming_def $phi96.0.2 = $94unary_not.5
2023-11-07 09:01:25,360 [DEBUG] replaced with: $96return_value.1 = cast(value=$phi96.0.3)
2023-11-07 09:01:25,360 [DEBUG] on stmt: return $96return_value.1
2023-11-07 09:01:25,476 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=66)
           2	COPY_FREE_VARS(arg=2, lineno=66)
           4	RESUME(arg=0, lineno=66)
           6	LOAD_FAST(arg=2, lineno=71)
           8	LOAD_CONST(arg=1, lineno=71)
          10	COMPARE_OP(arg=5, lineno=71)
          16	POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=71)
          18	LOAD_ASSERTION_ERROR(arg=None, lineno=71)
          20	RAISE_VARARGS(arg=1, lineno=71)
>         22	LOAD_FAST(arg=3, lineno=72)
          24	LOAD_FAST(arg=2, lineno=72)
          26	COMPARE_OP(arg=1, lineno=72)
          32	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=72)
          34	LOAD_CONST(arg=2, lineno=73)
          36	RETURN_VALUE(arg=None, lineno=73)
>         38	LOAD_GLOBAL(arg=1, lineno=75)
          50	LOAD_FAST(arg=2, lineno=75)
          52	LOAD_CONST(arg=3, lineno=75)
          54	BINARY_OP(arg=0, lineno=75)
          58	LOAD_FAST(arg=3, lineno=75)
          60	LOAD_CONST(arg=3, lineno=75)
          62	BINARY_OP(arg=0, lineno=75)
          66	PRECALL(arg=2, lineno=75)
          70	CALL(arg=2, lineno=75)
          80	GET_ITER(arg=None, lineno=75)
>         82	FOR_ITER(arg=122, lineno=75)
          84	STORE_FAST(arg=4, lineno=75)
          86	LOAD_FAST(arg=1, lineno=76)
          88	LOAD_FAST(arg=4, lineno=76)
          90	BINARY_SUBSCR(arg=None, lineno=76)
         100	STORE_FAST(arg=5, lineno=76)
         102	PUSH_NULL(arg=None, lineno=77)
         104	LOAD_DEREF(arg=8, lineno=77)
         106	LOAD_FAST(arg=0, lineno=77)
         108	LOAD_FAST(arg=5, lineno=77)
         110	PRECALL(arg=2, lineno=77)
         114	CALL(arg=2, lineno=77)
         124	STORE_FAST(arg=6, lineno=77)
         126	LOAD_FAST(arg=4, lineno=79)
         128	STORE_FAST(arg=7, lineno=79)
         130	LOAD_FAST(arg=7, lineno=80)
         132	LOAD_FAST(arg=2, lineno=80)
         134	COMPARE_OP(arg=4, lineno=80)
         140	POP_JUMP_FORWARD_IF_FALSE(arg=87, lineno=80)
         142	PUSH_NULL(arg=None, lineno=80)
         144	LOAD_DEREF(arg=9, lineno=80)
         146	LOAD_FAST(arg=6, lineno=80)
         148	PUSH_NULL(arg=None, lineno=80)
         150	LOAD_DEREF(arg=8, lineno=80)
         152	LOAD_FAST(arg=0, lineno=80)
         154	LOAD_FAST(arg=1, lineno=80)
         156	LOAD_FAST(arg=7, lineno=80)
         158	LOAD_CONST(arg=3, lineno=80)
         160	BINARY_OP(arg=10, lineno=80)
         164	BINARY_SUBSCR(arg=None, lineno=80)
         174	PRECALL(arg=2, lineno=80)
         178	CALL(arg=2, lineno=80)
         188	PRECALL(arg=2, lineno=80)
         192	CALL(arg=2, lineno=80)
         202	POP_JUMP_FORWARD_IF_FALSE(arg=56, lineno=80)
>        204	LOAD_FAST(arg=1, lineno=82)
         206	LOAD_FAST(arg=7, lineno=82)
         208	LOAD_CONST(arg=3, lineno=82)
         210	BINARY_OP(arg=10, lineno=82)
         214	BINARY_SUBSCR(arg=None, lineno=82)
         224	LOAD_FAST(arg=1, lineno=82)
         226	LOAD_FAST(arg=7, lineno=82)
         228	STORE_SUBSCR(arg=None, lineno=82)
         232	LOAD_FAST(arg=7, lineno=83)
         234	LOAD_CONST(arg=3, lineno=83)
         236	BINARY_OP(arg=23, lineno=83)
         240	STORE_FAST(arg=7, lineno=83)
         242	LOAD_FAST(arg=7, lineno=80)
         244	LOAD_FAST(arg=2, lineno=80)
         246	COMPARE_OP(arg=4, lineno=80)
         252	POP_JUMP_FORWARD_IF_FALSE(arg=31, lineno=80)
         254	PUSH_NULL(arg=None, lineno=80)
         256	LOAD_DEREF(arg=9, lineno=80)
         258	LOAD_FAST(arg=6, lineno=80)
         260	PUSH_NULL(arg=None, lineno=80)
         262	LOAD_DEREF(arg=8, lineno=80)
         264	LOAD_FAST(arg=0, lineno=80)
         266	LOAD_FAST(arg=1, lineno=80)
         268	LOAD_FAST(arg=7, lineno=80)
         270	LOAD_CONST(arg=3, lineno=80)
         272	BINARY_OP(arg=10, lineno=80)
         276	BINARY_SUBSCR(arg=None, lineno=80)
         286	PRECALL(arg=2, lineno=80)
         290	CALL(arg=2, lineno=80)
         300	PRECALL(arg=2, lineno=80)
         304	CALL(arg=2, lineno=80)
         314	POP_JUMP_BACKWARD_IF_TRUE(arg=56, lineno=80)
>        316	LOAD_FAST(arg=5, lineno=84)
         318	LOAD_FAST(arg=1, lineno=84)
         320	LOAD_FAST(arg=7, lineno=84)
         322	STORE_SUBSCR(arg=None, lineno=84)
         326	JUMP_BACKWARD(arg=123, lineno=84)
>        328	LOAD_CONST(arg=2, lineno=75)
         330	RETURN_VALUE(arg=None, lineno=75)
2023-11-07 09:01:25,476 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:25,476 [DEBUG] stack: []
2023-11-07 09:01:25,476 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:25,476 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=66)
2023-11-07 09:01:25,476 [DEBUG] stack []
2023-11-07 09:01:25,476 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=2, lineno=66)
2023-11-07 09:01:25,476 [DEBUG] stack []
2023-11-07 09:01:25,476 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=66)
2023-11-07 09:01:25,476 [DEBUG] stack []
2023-11-07 09:01:25,476 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=71)
2023-11-07 09:01:25,476 [DEBUG] stack []
2023-11-07 09:01:25,476 [DEBUG] dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=71)
2023-11-07 09:01:25,476 [DEBUG] stack ['$low6.0']
2023-11-07 09:01:25,476 [DEBUG] dispatch pc=10, inst=COMPARE_OP(arg=5, lineno=71)
2023-11-07 09:01:25,476 [DEBUG] stack ['$low6.0', '$const8.1']
2023-11-07 09:01:25,476 [DEBUG] dispatch pc=16, inst=POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=71)
2023-11-07 09:01:25,476 [DEBUG] stack ['$10compare_op.2']
2023-11-07 09:01:25,477 [DEBUG] end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=22, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,477 [DEBUG] pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=22 nstack_initial=0)])
2023-11-07 09:01:25,477 [DEBUG] stack: []
2023-11-07 09:01:25,477 [DEBUG] state.pc_initial: State(pc_initial=18 nstack_initial=0)
2023-11-07 09:01:25,477 [DEBUG] dispatch pc=18, inst=LOAD_ASSERTION_ERROR(arg=None, lineno=71)
2023-11-07 09:01:25,477 [DEBUG] stack []
2023-11-07 09:01:25,477 [DEBUG] dispatch pc=20, inst=RAISE_VARARGS(arg=1, lineno=71)
2023-11-07 09:01:25,477 [DEBUG] stack ['$assertion_error18.0']
2023-11-07 09:01:25,477 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,477 [DEBUG] pending: deque([State(pc_initial=22 nstack_initial=0)])
2023-11-07 09:01:25,477 [DEBUG] stack: []
2023-11-07 09:01:25,477 [DEBUG] state.pc_initial: State(pc_initial=22 nstack_initial=0)
2023-11-07 09:01:25,477 [DEBUG] dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=72)
2023-11-07 09:01:25,477 [DEBUG] stack []
2023-11-07 09:01:25,477 [DEBUG] dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=72)
2023-11-07 09:01:25,477 [DEBUG] stack ['$high22.0']
2023-11-07 09:01:25,477 [DEBUG] dispatch pc=26, inst=COMPARE_OP(arg=1, lineno=72)
2023-11-07 09:01:25,477 [DEBUG] stack ['$high22.0', '$low24.1']
2023-11-07 09:01:25,477 [DEBUG] dispatch pc=32, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=72)
2023-11-07 09:01:25,477 [DEBUG] stack ['$26compare_op.2']
2023-11-07 09:01:25,477 [DEBUG] end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:25,477 [DEBUG] pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
2023-11-07 09:01:25,477 [DEBUG] stack: []
2023-11-07 09:01:25,477 [DEBUG] state.pc_initial: State(pc_initial=34 nstack_initial=0)
2023-11-07 09:01:25,477 [DEBUG] dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=73)
2023-11-07 09:01:25,477 [DEBUG] stack []
2023-11-07 09:01:25,477 [DEBUG] dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=73)
2023-11-07 09:01:25,477 [DEBUG] stack ['$const34.0']
2023-11-07 09:01:25,477 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,477 [DEBUG] pending: deque([State(pc_initial=38 nstack_initial=0)])
2023-11-07 09:01:25,477 [DEBUG] stack: []
2023-11-07 09:01:25,477 [DEBUG] state.pc_initial: State(pc_initial=38 nstack_initial=0)
2023-11-07 09:01:25,477 [DEBUG] dispatch pc=38, inst=LOAD_GLOBAL(arg=1, lineno=75)
2023-11-07 09:01:25,477 [DEBUG] stack []
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=50, inst=LOAD_FAST(arg=2, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack ['$null$38.1', '$38load_global.0']
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=52, inst=LOAD_CONST(arg=3, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack ['$null$38.1', '$38load_global.0', '$low50.2']
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=54, inst=BINARY_OP(arg=0, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack ['$null$38.1', '$38load_global.0', '$low50.2', '$const52.3']
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=58, inst=LOAD_FAST(arg=3, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack ['$null$38.1', '$38load_global.0', '$binop_add54.4']
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=60, inst=LOAD_CONST(arg=3, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack ['$null$38.1', '$38load_global.0', '$binop_add54.4', '$high58.5']
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=62, inst=BINARY_OP(arg=0, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack ['$null$38.1', '$38load_global.0', '$binop_add54.4', '$high58.5', '$const60.6']
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=66, inst=PRECALL(arg=2, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack ['$null$38.1', '$38load_global.0', '$binop_add54.4', '$binop_add62.7']
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=70, inst=CALL(arg=2, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack ['$null$38.1', '$38load_global.0', '$binop_add54.4', '$binop_add62.7']
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=80, inst=GET_ITER(arg=None, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack ['$70call.8']
2023-11-07 09:01:25,478 [DEBUG] end state. edges=[Edge(pc=82, stack=('$80get_iter.9',), blockstack=(), npush=0)]
2023-11-07 09:01:25,478 [DEBUG] pending: deque([State(pc_initial=82 nstack_initial=1)])
2023-11-07 09:01:25,478 [DEBUG] stack: ['$phi82.0']
2023-11-07 09:01:25,478 [DEBUG] state.pc_initial: State(pc_initial=82 nstack_initial=1)
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=82, inst=FOR_ITER(arg=122, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack ['$phi82.0']
2023-11-07 09:01:25,478 [DEBUG] end state. edges=[Edge(pc=328, stack=(), blockstack=(), npush=0), Edge(pc=84, stack=('$phi82.0', '$82for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:25,478 [DEBUG] pending: deque([State(pc_initial=328 nstack_initial=0), State(pc_initial=84 nstack_initial=2)])
2023-11-07 09:01:25,478 [DEBUG] stack: []
2023-11-07 09:01:25,478 [DEBUG] state.pc_initial: State(pc_initial=328 nstack_initial=0)
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=328, inst=LOAD_CONST(arg=2, lineno=75)
2023-11-07 09:01:25,478 [DEBUG] stack []
2023-11-07 09:01:25,478 [DEBUG] dispatch pc=330, inst=RETURN_VALUE(arg=None, lineno=75)
2023-11-07 09:01:25,479 [DEBUG] stack ['$const328.0']
2023-11-07 09:01:25,479 [DEBUG] end state. edges=[]
2023-11-07 09:01:25,479 [DEBUG] pending: deque([State(pc_initial=84 nstack_initial=2)])
2023-11-07 09:01:25,479 [DEBUG] stack: ['$phi84.0', '$phi84.1']
2023-11-07 09:01:25,479 [DEBUG] state.pc_initial: State(pc_initial=84 nstack_initial=2)
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=84, inst=STORE_FAST(arg=4, lineno=75)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0', '$phi84.1']
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=86, inst=LOAD_FAST(arg=1, lineno=76)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0']
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=88, inst=LOAD_FAST(arg=4, lineno=76)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0', '$R86.2']
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=76)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0', '$R86.2', '$i88.3']
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=100, inst=STORE_FAST(arg=5, lineno=76)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0', '$90binary_subscr.4']
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=102, inst=PUSH_NULL(arg=None, lineno=77)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0']
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=104, inst=LOAD_DEREF(arg=8, lineno=77)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0', '$null$102.5']
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=106, inst=LOAD_FAST(arg=0, lineno=77)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0', '$null$102.5', '$104load_deref.6']
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=108, inst=LOAD_FAST(arg=5, lineno=77)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0', '$null$102.5', '$104load_deref.6', '$A106.7']
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=110, inst=PRECALL(arg=2, lineno=77)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0', '$null$102.5', '$104load_deref.6', '$A106.7', '$k108.8']
2023-11-07 09:01:25,479 [DEBUG] dispatch pc=114, inst=CALL(arg=2, lineno=77)
2023-11-07 09:01:25,479 [DEBUG] stack ['$phi84.0', '$null$102.5', '$104load_deref.6', '$A106.7', '$k108.8']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=124, inst=STORE_FAST(arg=6, lineno=77)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi84.0', '$114call.9']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=126, inst=LOAD_FAST(arg=4, lineno=79)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi84.0']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=128, inst=STORE_FAST(arg=7, lineno=79)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi84.0', '$i126.10']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=130, inst=LOAD_FAST(arg=7, lineno=80)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi84.0']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=132, inst=LOAD_FAST(arg=2, lineno=80)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi84.0', '$j130.11']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=134, inst=COMPARE_OP(arg=4, lineno=80)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi84.0', '$j130.11', '$low132.12']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=140, inst=POP_JUMP_FORWARD_IF_FALSE(arg=87, lineno=80)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi84.0', '$134compare_op.13']
2023-11-07 09:01:25,480 [DEBUG] end state. edges=[Edge(pc=142, stack=('$phi84.0',), blockstack=(), npush=0), Edge(pc=316, stack=('$phi84.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,480 [DEBUG] pending: deque([State(pc_initial=142 nstack_initial=1), State(pc_initial=316 nstack_initial=1)])
2023-11-07 09:01:25,480 [DEBUG] stack: ['$phi142.0']
2023-11-07 09:01:25,480 [DEBUG] state.pc_initial: State(pc_initial=142 nstack_initial=1)
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=142, inst=PUSH_NULL(arg=None, lineno=80)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi142.0']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=144, inst=LOAD_DEREF(arg=9, lineno=80)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi142.0', '$null$142.1']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=146, inst=LOAD_FAST(arg=6, lineno=80)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=148, inst=PUSH_NULL(arg=None, lineno=80)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=150, inst=LOAD_DEREF(arg=8, lineno=80)
2023-11-07 09:01:25,480 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$null$148.4']
2023-11-07 09:01:25,480 [DEBUG] dispatch pc=152, inst=LOAD_FAST(arg=0, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$null$148.4', '$150load_deref.5']
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=154, inst=LOAD_FAST(arg=1, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$null$148.4', '$150load_deref.5', '$A152.6']
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=156, inst=LOAD_FAST(arg=7, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$null$148.4', '$150load_deref.5', '$A152.6', '$R154.7']
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=158, inst=LOAD_CONST(arg=3, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$null$148.4', '$150load_deref.5', '$A152.6', '$R154.7', '$j156.8']
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=160, inst=BINARY_OP(arg=10, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$null$148.4', '$150load_deref.5', '$A152.6', '$R154.7', '$j156.8', '$const158.9']
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$null$148.4', '$150load_deref.5', '$A152.6', '$R154.7', '$binop_sub160.10']
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=174, inst=PRECALL(arg=2, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$null$148.4', '$150load_deref.5', '$A152.6', '$164binary_subscr.11']
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=178, inst=CALL(arg=2, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$null$148.4', '$150load_deref.5', '$A152.6', '$164binary_subscr.11']
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=188, inst=PRECALL(arg=2, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$178call.12']
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=192, inst=CALL(arg=2, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$null$142.1', '$144load_deref.2', '$v146.3', '$178call.12']
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=202, inst=POP_JUMP_FORWARD_IF_FALSE(arg=56, lineno=80)
2023-11-07 09:01:25,481 [DEBUG] stack ['$phi142.0', '$192call.13']
2023-11-07 09:01:25,481 [DEBUG] end state. edges=[Edge(pc=204, stack=('$phi142.0',), blockstack=(), npush=0), Edge(pc=316, stack=('$phi142.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,481 [DEBUG] pending: deque([State(pc_initial=316 nstack_initial=1), State(pc_initial=204 nstack_initial=1), State(pc_initial=316 nstack_initial=1)])
2023-11-07 09:01:25,481 [DEBUG] stack: ['$phi316.0']
2023-11-07 09:01:25,481 [DEBUG] state.pc_initial: State(pc_initial=316 nstack_initial=1)
2023-11-07 09:01:25,481 [DEBUG] dispatch pc=316, inst=LOAD_FAST(arg=5, lineno=84)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi316.0']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=318, inst=LOAD_FAST(arg=1, lineno=84)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi316.0', '$k316.1']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=320, inst=LOAD_FAST(arg=7, lineno=84)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi316.0', '$k316.1', '$R318.2']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=322, inst=STORE_SUBSCR(arg=None, lineno=84)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi316.0', '$k316.1', '$R318.2', '$j320.3']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=326, inst=JUMP_BACKWARD(arg=123, lineno=84)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi316.0']
2023-11-07 09:01:25,482 [DEBUG] end state. edges=[Edge(pc=82, stack=('$phi316.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,482 [DEBUG] pending: deque([State(pc_initial=204 nstack_initial=1), State(pc_initial=316 nstack_initial=1), State(pc_initial=82 nstack_initial=1)])
2023-11-07 09:01:25,482 [DEBUG] stack: ['$phi204.0']
2023-11-07 09:01:25,482 [DEBUG] state.pc_initial: State(pc_initial=204 nstack_initial=1)
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=204, inst=LOAD_FAST(arg=1, lineno=82)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi204.0']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=206, inst=LOAD_FAST(arg=7, lineno=82)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi204.0', '$R204.1']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=208, inst=LOAD_CONST(arg=3, lineno=82)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi204.0', '$R204.1', '$j206.2']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=210, inst=BINARY_OP(arg=10, lineno=82)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi204.0', '$R204.1', '$j206.2', '$const208.3']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=214, inst=BINARY_SUBSCR(arg=None, lineno=82)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi204.0', '$R204.1', '$binop_sub210.4']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=224, inst=LOAD_FAST(arg=1, lineno=82)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi204.0', '$214binary_subscr.5']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=226, inst=LOAD_FAST(arg=7, lineno=82)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi204.0', '$214binary_subscr.5', '$R224.6']
2023-11-07 09:01:25,482 [DEBUG] dispatch pc=228, inst=STORE_SUBSCR(arg=None, lineno=82)
2023-11-07 09:01:25,482 [DEBUG] stack ['$phi204.0', '$214binary_subscr.5', '$R224.6', '$j226.7']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=232, inst=LOAD_FAST(arg=7, lineno=83)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi204.0']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=234, inst=LOAD_CONST(arg=3, lineno=83)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi204.0', '$j232.8']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=236, inst=BINARY_OP(arg=23, lineno=83)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi204.0', '$j232.8', '$const234.9']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=240, inst=STORE_FAST(arg=7, lineno=83)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi204.0', '$binop_isub236.10']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=242, inst=LOAD_FAST(arg=7, lineno=80)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi204.0']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=244, inst=LOAD_FAST(arg=2, lineno=80)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi204.0', '$j242.11']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=246, inst=COMPARE_OP(arg=4, lineno=80)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi204.0', '$j242.11', '$low244.12']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=252, inst=POP_JUMP_FORWARD_IF_FALSE(arg=31, lineno=80)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi204.0', '$246compare_op.13']
2023-11-07 09:01:25,483 [DEBUG] end state. edges=[Edge(pc=254, stack=('$phi204.0',), blockstack=(), npush=0), Edge(pc=316, stack=('$phi204.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,483 [DEBUG] pending: deque([State(pc_initial=316 nstack_initial=1), State(pc_initial=82 nstack_initial=1), State(pc_initial=254 nstack_initial=1), State(pc_initial=316 nstack_initial=1)])
2023-11-07 09:01:25,483 [DEBUG] pending: deque([State(pc_initial=82 nstack_initial=1), State(pc_initial=254 nstack_initial=1), State(pc_initial=316 nstack_initial=1)])
2023-11-07 09:01:25,483 [DEBUG] pending: deque([State(pc_initial=254 nstack_initial=1), State(pc_initial=316 nstack_initial=1)])
2023-11-07 09:01:25,483 [DEBUG] stack: ['$phi254.0']
2023-11-07 09:01:25,483 [DEBUG] state.pc_initial: State(pc_initial=254 nstack_initial=1)
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=254, inst=PUSH_NULL(arg=None, lineno=80)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi254.0']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=256, inst=LOAD_DEREF(arg=9, lineno=80)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi254.0', '$null$254.1']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=258, inst=LOAD_FAST(arg=6, lineno=80)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=260, inst=PUSH_NULL(arg=None, lineno=80)
2023-11-07 09:01:25,483 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3']
2023-11-07 09:01:25,483 [DEBUG] dispatch pc=262, inst=LOAD_DEREF(arg=8, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$null$260.4']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=264, inst=LOAD_FAST(arg=0, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$null$260.4', '$262load_deref.5']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=266, inst=LOAD_FAST(arg=1, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$null$260.4', '$262load_deref.5', '$A264.6']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=268, inst=LOAD_FAST(arg=7, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$null$260.4', '$262load_deref.5', '$A264.6', '$R266.7']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=270, inst=LOAD_CONST(arg=3, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$null$260.4', '$262load_deref.5', '$A264.6', '$R266.7', '$j268.8']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=272, inst=BINARY_OP(arg=10, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$null$260.4', '$262load_deref.5', '$A264.6', '$R266.7', '$j268.8', '$const270.9']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=276, inst=BINARY_SUBSCR(arg=None, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$null$260.4', '$262load_deref.5', '$A264.6', '$R266.7', '$binop_sub272.10']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=286, inst=PRECALL(arg=2, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$null$260.4', '$262load_deref.5', '$A264.6', '$276binary_subscr.11']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=290, inst=CALL(arg=2, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$null$260.4', '$262load_deref.5', '$A264.6', '$276binary_subscr.11']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=300, inst=PRECALL(arg=2, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$290call.12']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=304, inst=CALL(arg=2, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$null$254.1', '$256load_deref.2', '$v258.3', '$290call.12']
2023-11-07 09:01:25,484 [DEBUG] dispatch pc=314, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=56, lineno=80)
2023-11-07 09:01:25,484 [DEBUG] stack ['$phi254.0', '$304call.13']
2023-11-07 09:01:25,484 [DEBUG] end state. edges=[Edge(pc=316, stack=('$phi254.0',), blockstack=(), npush=0), Edge(pc=204, stack=('$phi254.0',), blockstack=(), npush=0)]
2023-11-07 09:01:25,484 [DEBUG] pending: deque([State(pc_initial=316 nstack_initial=1), State(pc_initial=316 nstack_initial=1), State(pc_initial=204 nstack_initial=1)])
2023-11-07 09:01:25,484 [DEBUG] pending: deque([State(pc_initial=316 nstack_initial=1), State(pc_initial=204 nstack_initial=1)])
2023-11-07 09:01:25,484 [DEBUG] pending: deque([State(pc_initial=204 nstack_initial=1)])
2023-11-07 09:01:25,484 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:25,485 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=82 nstack_initial=1): {'$phi82.0'},
             State(pc_initial=84 nstack_initial=2): {'$phi84.1'},
             State(pc_initial=142 nstack_initial=1): set(),
             State(pc_initial=204 nstack_initial=1): set(),
             State(pc_initial=254 nstack_initial=1): set(),
             State(pc_initial=316 nstack_initial=1): set(),
             State(pc_initial=328 nstack_initial=0): set()})
2023-11-07 09:01:25,485 [DEBUG] defmap: {'$phi82.0': State(pc_initial=38 nstack_initial=0),
 '$phi84.1': State(pc_initial=82 nstack_initial=1)}
2023-11-07 09:01:25,485 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi204.0': {('$phi142.0',
                            State(pc_initial=142 nstack_initial=1)),
                           ('$phi254.0',
                            State(pc_initial=254 nstack_initial=1))},
             '$phi254.0': {('$phi204.0',
                            State(pc_initial=204 nstack_initial=1))},
             '$phi316.0': {('$phi142.0',
                            State(pc_initial=142 nstack_initial=1)),
                           ('$phi204.0',
                            State(pc_initial=204 nstack_initial=1)),
                           ('$phi254.0',
                            State(pc_initial=254 nstack_initial=1)),
                           ('$phi84.0', State(pc_initial=84 nstack_initial=2))},
             '$phi82.0': {('$80get_iter.9',
                           State(pc_initial=38 nstack_initial=0)),
                          ('$phi316.0',
                           State(pc_initial=316 nstack_initial=1))},
             '$phi84.0': {('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
2023-11-07 09:01:25,485 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi204.0': {('$phi204.0',
                            State(pc_initial=204 nstack_initial=1)),
                           ('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi254.0': {('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi316.0': {('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi82.0': {('$80get_iter.9',
                           State(pc_initial=38 nstack_initial=0)),
                          ('$phi82.0', State(pc_initial=82 nstack_initial=1))},
             '$phi84.0': {('$80get_iter.9',
                           State(pc_initial=38 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
2023-11-07 09:01:25,485 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$80get_iter.9',
                            State(pc_initial=38 nstack_initial=0))},
             '$phi204.0': {('$80get_iter.9',
                            State(pc_initial=38 nstack_initial=0))},
             '$phi254.0': {('$80get_iter.9',
                            State(pc_initial=38 nstack_initial=0))},
             '$phi316.0': {('$80get_iter.9',
                            State(pc_initial=38 nstack_initial=0))},
             '$phi82.0': {('$80get_iter.9',
                           State(pc_initial=38 nstack_initial=0))},
             '$phi84.0': {('$80get_iter.9',
                           State(pc_initial=38 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
2023-11-07 09:01:25,485 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$80get_iter.9',
                            State(pc_initial=38 nstack_initial=0))},
             '$phi204.0': {('$80get_iter.9',
                            State(pc_initial=38 nstack_initial=0))},
             '$phi254.0': {('$80get_iter.9',
                            State(pc_initial=38 nstack_initial=0))},
             '$phi316.0': {('$80get_iter.9',
                            State(pc_initial=38 nstack_initial=0))},
             '$phi82.0': {('$80get_iter.9',
                           State(pc_initial=38 nstack_initial=0))},
             '$phi84.0': {('$80get_iter.9',
                           State(pc_initial=38 nstack_initial=0))},
             '$phi84.1': {('$82for_iter.2',
                           State(pc_initial=82 nstack_initial=1))}})
2023-11-07 09:01:25,485 [DEBUG] keep phismap: {'$phi82.0': {('$80get_iter.9', State(pc_initial=38 nstack_initial=0))},
 '$phi84.1': {('$82for_iter.2', State(pc_initial=82 nstack_initial=1))}}
2023-11-07 09:01:25,485 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=38 nstack_initial=0): {'$phi82.0': '$80get_iter.9'},
             State(pc_initial=82 nstack_initial=1): {'$phi84.1': '$82for_iter.2'}})
2023-11-07 09:01:25,485 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$low6.0'}), (8, {'res': '$const8.1'}), (10, {'lhs': '$low6.0', 'rhs': '$const8.1', 'res': '$10compare_op.2'}), (12, {}), (14, {}), (16, {'pred': '$10compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 22: ()})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$assertion_error18.0'}), (20, {'exc': '$assertion_error18.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$high22.0'}), (24, {'res': '$low24.1'}), (26, {'lhs': '$high22.0', 'rhs': '$low24.1', 'res': '$26compare_op.2'}), (28, {}), (30, {}), (32, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$const34.0'}), (36, {'retval': '$const34.0', 'castval': '$36return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'idx': 0, 'res': '$38load_global.0'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {'res': '$low50.2'}), (52, {'res': '$const52.3'}), (54, {'op': '+', 'lhs': '$low50.2', 'rhs': '$const52.3', 'res': '$binop_add54.4'}), (56, {}), (58, {'res': '$high58.5'}), (60, {'res': '$const60.6'}), (62, {'op': '+', 'lhs': '$high58.5', 'rhs': '$const60.6', 'res': '$binop_add62.7'}), (64, {}), (66, {}), (68, {}), (70, {'func': '$38load_global.0', 'args': ['$binop_add54.4', '$binop_add62.7'], 'kw_names': None, 'res': '$70call.8'}), (72, {}), (74, {}), (76, {}), (78, {}), (80, {'value': '$70call.8', 'res': '$80get_iter.9'})), outgoing_phis={'$phi82.0': '$80get_iter.9'}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$80get_iter.9',)})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=82 nstack_initial=1):
AdaptBlockInfo(insts=((82, {'iterator': '$phi82.0', 'pair': '$82for_iter.1', 'indval': '$82for_iter.2', 'pred': '$82for_iter.3'}),), outgoing_phis={'$phi84.1': '$82for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={328: (), 84: ('$phi82.0', '$82for_iter.2')})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=84 nstack_initial=2):
AdaptBlockInfo(insts=((84, {'value': '$phi84.1'}), (86, {'res': '$R86.2'}), (88, {'res': '$i88.3'}), (90, {'index': '$i88.3', 'target': '$R86.2', 'res': '$90binary_subscr.4'}), (92, {}), (94, {}), (96, {}), (98, {}), (100, {'value': '$90binary_subscr.4'}), (102, {}), (104, {'res': '$104load_deref.6'}), (106, {'res': '$A106.7'}), (108, {'res': '$k108.8'}), (110, {}), (112, {}), (114, {'func': '$104load_deref.6', 'args': ['$A106.7', '$k108.8'], 'kw_names': None, 'res': '$114call.9'}), (116, {}), (118, {}), (120, {}), (122, {}), (124, {'value': '$114call.9'}), (126, {'res': '$i126.10'}), (128, {'value': '$i126.10'}), (130, {'res': '$j130.11'}), (132, {'res': '$low132.12'}), (134, {'lhs': '$j130.11', 'rhs': '$low132.12', 'res': '$134compare_op.13'}), (136, {}), (138, {}), (140, {'pred': '$134compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: ('$phi84.0',), 316: ('$phi84.0',)})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=142 nstack_initial=1):
AdaptBlockInfo(insts=((142, {}), (144, {'res': '$144load_deref.2'}), (146, {'res': '$v146.3'}), (148, {}), (150, {'res': '$150load_deref.5'}), (152, {'res': '$A152.6'}), (154, {'res': '$R154.7'}), (156, {'res': '$j156.8'}), (158, {'res': '$const158.9'}), (160, {'op': '-', 'lhs': '$j156.8', 'rhs': '$const158.9', 'res': '$binop_sub160.10'}), (162, {}), (164, {'index': '$binop_sub160.10', 'target': '$R154.7', 'res': '$164binary_subscr.11'}), (166, {}), (168, {}), (170, {}), (172, {}), (174, {}), (176, {}), (178, {'func': '$150load_deref.5', 'args': ['$A152.6', '$164binary_subscr.11'], 'kw_names': None, 'res': '$178call.12'}), (180, {}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {'func': '$144load_deref.2', 'args': ['$v146.3', '$178call.12'], 'kw_names': None, 'res': '$192call.13'}), (194, {}), (196, {}), (198, {}), (200, {}), (202, {'pred': '$192call.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={204: ('$phi142.0',), 316: ('$phi142.0',)})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=204 nstack_initial=1):
AdaptBlockInfo(insts=((204, {'res': '$R204.1'}), (206, {'res': '$j206.2'}), (208, {'res': '$const208.3'}), (210, {'op': '-', 'lhs': '$j206.2', 'rhs': '$const208.3', 'res': '$binop_sub210.4'}), (212, {}), (214, {'index': '$binop_sub210.4', 'target': '$R204.1', 'res': '$214binary_subscr.5'}), (216, {}), (218, {}), (220, {}), (222, {}), (224, {'res': '$R224.6'}), (226, {'res': '$j226.7'}), (228, {'target': '$R224.6', 'index': '$j226.7', 'value': '$214binary_subscr.5'}), (230, {}), (232, {'res': '$j232.8'}), (234, {'res': '$const234.9'}), (236, {'op': '-=', 'lhs': '$j232.8', 'rhs': '$const234.9', 'res': '$binop_isub236.10'}), (238, {}), (240, {'value': '$binop_isub236.10'}), (242, {'res': '$j242.11'}), (244, {'res': '$low244.12'}), (246, {'lhs': '$j242.11', 'rhs': '$low244.12', 'res': '$246compare_op.13'}), (248, {}), (250, {}), (252, {'pred': '$246compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={254: ('$phi204.0',), 316: ('$phi204.0',)})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=254 nstack_initial=1):
AdaptBlockInfo(insts=((254, {}), (256, {'res': '$256load_deref.2'}), (258, {'res': '$v258.3'}), (260, {}), (262, {'res': '$262load_deref.5'}), (264, {'res': '$A264.6'}), (266, {'res': '$R266.7'}), (268, {'res': '$j268.8'}), (270, {'res': '$const270.9'}), (272, {'op': '-', 'lhs': '$j268.8', 'rhs': '$const270.9', 'res': '$binop_sub272.10'}), (274, {}), (276, {'index': '$binop_sub272.10', 'target': '$R266.7', 'res': '$276binary_subscr.11'}), (278, {}), (280, {}), (282, {}), (284, {}), (286, {}), (288, {}), (290, {'func': '$262load_deref.5', 'args': ['$A264.6', '$276binary_subscr.11'], 'kw_names': None, 'res': '$290call.12'}), (292, {}), (294, {}), (296, {}), (298, {}), (300, {}), (302, {}), (304, {'func': '$256load_deref.2', 'args': ['$v258.3', '$290call.12'], 'kw_names': None, 'res': '$304call.13'}), (306, {}), (308, {}), (310, {}), (312, {}), (314, {'pred': '$304call.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={316: ('$phi254.0',), 204: ('$phi254.0',)})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=316 nstack_initial=1):
AdaptBlockInfo(insts=((316, {'res': '$k316.1'}), (318, {'res': '$R318.2'}), (320, {'res': '$j320.3'}), (322, {'target': '$R318.2', 'index': '$j320.3', 'value': '$k316.1'}), (324, {}), (326, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={82: ('$phi316.0',)})
2023-11-07 09:01:25,485 [DEBUG] block_infos State(pc_initial=328 nstack_initial=0):
AdaptBlockInfo(insts=((328, {'res': '$const328.0'}), (330, {'retval': '$const328.0', 'castval': '$330return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:25,488 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    R = arg(1, name=R)                       ['R']
    low = arg(2, name=low)                   ['low']
    high = arg(3, name=high)                 ['high']
    $const8.1 = const(int, 0)                ['$const8.1']
    $10compare_op.2 = low >= $const8.1       ['$10compare_op.2', '$const8.1', 'low']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:71),), kws=(), vararg=None, varkwarg=None, target=None) ['$10compare_op.2', '$16pred', 'bool16']
    branch $16pred, 22, 18                   ['$16pred']
label 18:
    $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>) ['$assertion_error18.0']
    raise $assertion_error18.0               ['$assertion_error18.0']
label 22:
    $26compare_op.2 = high <= low            ['$26compare_op.2', 'high', 'low']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:72),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$32pred', 'bool32']
    branch $32pred, 34, 38                   ['$32pred']
label 34:
    $const34.0 = const(NoneType, None)       ['$const34.0']
    $36return_value.1 = cast(value=$const34.0) ['$36return_value.1', '$const34.0']
    return $36return_value.1                 ['$36return_value.1']
label 38:
    $38load_global.0 = global(range: <class 'range'>) ['$38load_global.0']
    $const52.3 = const(int, 1)               ['$const52.3']
    $binop_add54.4 = low + $const52.3        ['$binop_add54.4', '$const52.3', 'low']
    $const60.6 = const(int, 1)               ['$const60.6']
    $binop_add62.7 = high + $const60.6       ['$binop_add62.7', '$const60.6', 'high']
    $70call.8 = call $38load_global.0($binop_add54.4, $binop_add62.7, func=$38load_global.0, args=[Var($binop_add54.4, quicksort.py:75), Var($binop_add62.7, quicksort.py:75)], kws=(), vararg=None, varkwarg=None, target=None) ['$38load_global.0', '$70call.8', '$binop_add54.4', '$binop_add62.7']
    $80get_iter.9 = getiter(value=$70call.8) ['$70call.8', '$80get_iter.9']
    $phi82.0 = $80get_iter.9                 ['$80get_iter.9', '$phi82.0']
    jump 82                                  []
label 82:
    $82for_iter.1 = iternext(value=$phi82.0) ['$82for_iter.1', '$phi82.0']
    $82for_iter.2 = pair_first(value=$82for_iter.1) ['$82for_iter.1', '$82for_iter.2']
    $82for_iter.3 = pair_second(value=$82for_iter.1) ['$82for_iter.1', '$82for_iter.3']
    $phi84.1 = $82for_iter.2                 ['$82for_iter.2', '$phi84.1']
    branch $82for_iter.3, 84, 328            ['$82for_iter.3']
label 84:
    i = $phi84.1                             ['$phi84.1', 'i']
    k = getitem(value=R, index=i, fn=<built-in function getitem>) ['R', 'i', 'k']
    $104load_deref.6 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$104load_deref.6']
    v = call $104load_deref.6(A, k, func=$104load_deref.6, args=[Var(A, quicksort.py:66), Var(k, quicksort.py:76)], kws=(), vararg=None, varkwarg=None, target=None) ['$104load_deref.6', 'A', 'k', 'v']
    j = i                                    ['i', 'j']
    $134compare_op.13 = j > low              ['$134compare_op.13', 'j', 'low']
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140($134compare_op.13, func=bool140, args=(Var($134compare_op.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.13', '$140pred', 'bool140']
    branch $140pred, 142, 316                ['$140pred']
label 142:
    $144load_deref.2 = freevar(LT: <function lt_floats at 0x169820c20>) ['$144load_deref.2']
    $150load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$150load_deref.5']
    $const158.9 = const(int, 1)              ['$const158.9']
    $binop_sub160.10 = j - $const158.9       ['$binop_sub160.10', '$const158.9', 'j']
    $164binary_subscr.11 = getitem(value=R, index=$binop_sub160.10, fn=<built-in function getitem>) ['$164binary_subscr.11', '$binop_sub160.10', 'R']
    $178call.12 = call $150load_deref.5(A, $164binary_subscr.11, func=$150load_deref.5, args=[Var(A, quicksort.py:66), Var($164binary_subscr.11, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$150load_deref.5', '$164binary_subscr.11', '$178call.12', 'A']
    $192call.13 = call $144load_deref.2(v, $178call.12, func=$144load_deref.2, args=[Var(v, quicksort.py:77), Var($178call.12, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$144load_deref.2', '$178call.12', '$192call.13', 'v']
    bool202 = global(bool: <class 'bool'>)   ['bool202']
    $202pred = call bool202($192call.13, func=bool202, args=(Var($192call.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None) ['$192call.13', '$202pred', 'bool202']
    branch $202pred, 204, 316                ['$202pred']
label 204:
    $const208.3 = const(int, 1)              ['$const208.3']
    $binop_sub210.4 = j - $const208.3        ['$binop_sub210.4', '$const208.3', 'j']
    $214binary_subscr.5 = getitem(value=R, index=$binop_sub210.4, fn=<built-in function getitem>) ['$214binary_subscr.5', '$binop_sub210.4', 'R']
    R[j] = $214binary_subscr.5               ['$214binary_subscr.5', 'R', 'j']
    $const234.9 = const(int, 1)              ['$const234.9']
    $binop_isub236.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const234.9, static_lhs=Undefined, static_rhs=Undefined) ['$binop_isub236.10', '$const234.9', 'j']
    j = $binop_isub236.10                    ['$binop_isub236.10', 'j']
    $246compare_op.13 = j > low              ['$246compare_op.13', 'j', 'low']
    bool252 = global(bool: <class 'bool'>)   ['bool252']
    $252pred = call bool252($246compare_op.13, func=bool252, args=(Var($246compare_op.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None) ['$246compare_op.13', '$252pred', 'bool252']
    branch $252pred, 254, 316                ['$252pred']
label 254:
    $256load_deref.2 = freevar(LT: <function lt_floats at 0x169820c20>) ['$256load_deref.2']
    $262load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>) ['$262load_deref.5']
    $const270.9 = const(int, 1)              ['$const270.9']
    $binop_sub272.10 = j - $const270.9       ['$binop_sub272.10', '$const270.9', 'j']
    $276binary_subscr.11 = getitem(value=R, index=$binop_sub272.10, fn=<built-in function getitem>) ['$276binary_subscr.11', '$binop_sub272.10', 'R']
    $290call.12 = call $262load_deref.5(A, $276binary_subscr.11, func=$262load_deref.5, args=[Var(A, quicksort.py:66), Var($276binary_subscr.11, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$262load_deref.5', '$276binary_subscr.11', '$290call.12', 'A']
    $304call.13 = call $256load_deref.2(v, $290call.12, func=$256load_deref.2, args=[Var(v, quicksort.py:77), Var($290call.12, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None) ['$256load_deref.2', '$290call.12', '$304call.13', 'v']
    bool314 = global(bool: <class 'bool'>)   ['bool314']
    $314pred = call bool314($304call.13, func=bool314, args=(Var($304call.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None) ['$304call.13', '$314pred', 'bool314']
    branch $314pred, 204, 316                ['$314pred']
label 316:
    R[j] = k                                 ['R', 'j', 'k']
    jump 82                                  []
label 328:
    $const328.0 = const(NoneType, None)      ['$const328.0']
    $330return_value.1 = cast(value=$const328.0) ['$330return_value.1', '$const328.0']
    return $330return_value.1                ['$330return_value.1']

2023-11-07 09:01:25,495 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:25,495 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,495 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,495 [DEBUG] on stmt: R = arg(1, name=R)
2023-11-07 09:01:25,495 [DEBUG] on stmt: low = arg(2, name=low)
2023-11-07 09:01:25,495 [DEBUG] on stmt: high = arg(3, name=high)
2023-11-07 09:01:25,495 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-11-07 09:01:25,495 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-11-07 09:01:25,495 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,495 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,495 [DEBUG] on stmt: branch $16pred, 22, 18
2023-11-07 09:01:25,495 [DEBUG] ==== SSA block analysis pass on 18
2023-11-07 09:01:25,495 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,495 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,495 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,495 [DEBUG] ==== SSA block analysis pass on 22
2023-11-07 09:01:25,495 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,495 [DEBUG] on stmt: $26compare_op.2 = high <= low
2023-11-07 09:01:25,495 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,495 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:72),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,495 [DEBUG] on stmt: branch $32pred, 34, 38
2023-11-07 09:01:25,495 [DEBUG] ==== SSA block analysis pass on 34
2023-11-07 09:01:25,495 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,495 [DEBUG] on stmt: $const34.0 = const(NoneType, None)
2023-11-07 09:01:25,495 [DEBUG] on stmt: $36return_value.1 = cast(value=$const34.0)
2023-11-07 09:01:25,495 [DEBUG] on stmt: return $36return_value.1
2023-11-07 09:01:25,495 [DEBUG] ==== SSA block analysis pass on 38
2023-11-07 09:01:25,495 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,495 [DEBUG] on stmt: $38load_global.0 = global(range: <class 'range'>)
2023-11-07 09:01:25,495 [DEBUG] on stmt: $const52.3 = const(int, 1)
2023-11-07 09:01:25,495 [DEBUG] on stmt: $binop_add54.4 = low + $const52.3
2023-11-07 09:01:25,495 [DEBUG] on stmt: $const60.6 = const(int, 1)
2023-11-07 09:01:25,495 [DEBUG] on stmt: $binop_add62.7 = high + $const60.6
2023-11-07 09:01:25,495 [DEBUG] on stmt: $70call.8 = call $38load_global.0($binop_add54.4, $binop_add62.7, func=$38load_global.0, args=[Var($binop_add54.4, quicksort.py:75), Var($binop_add62.7, quicksort.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,495 [DEBUG] on stmt: $80get_iter.9 = getiter(value=$70call.8)
2023-11-07 09:01:25,495 [DEBUG] on stmt: $phi82.0 = $80get_iter.9
2023-11-07 09:01:25,495 [DEBUG] on stmt: jump 82
2023-11-07 09:01:25,495 [DEBUG] ==== SSA block analysis pass on 82
2023-11-07 09:01:25,495 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,496 [DEBUG] on stmt: $82for_iter.1 = iternext(value=$phi82.0)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $phi84.1 = $82for_iter.2
2023-11-07 09:01:25,496 [DEBUG] on stmt: branch $82for_iter.3, 84, 328
2023-11-07 09:01:25,496 [DEBUG] ==== SSA block analysis pass on 84
2023-11-07 09:01:25,496 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,496 [DEBUG] on stmt: i = $phi84.1
2023-11-07 09:01:25,496 [DEBUG] on stmt: k = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $104load_deref.6 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,496 [DEBUG] on stmt: v = call $104load_deref.6(A, k, func=$104load_deref.6, args=[Var(A, quicksort.py:66), Var(k, quicksort.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,496 [DEBUG] on stmt: j = i
2023-11-07 09:01:25,496 [DEBUG] on stmt: $134compare_op.13 = j > low
2023-11-07 09:01:25,496 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $140pred = call bool140($134compare_op.13, func=bool140, args=(Var($134compare_op.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,496 [DEBUG] on stmt: branch $140pred, 142, 316
2023-11-07 09:01:25,496 [DEBUG] ==== SSA block analysis pass on 142
2023-11-07 09:01:25,496 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,496 [DEBUG] on stmt: $144load_deref.2 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $150load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $const158.9 = const(int, 1)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $binop_sub160.10 = j - $const158.9
2023-11-07 09:01:25,496 [DEBUG] on stmt: $164binary_subscr.11 = getitem(value=R, index=$binop_sub160.10, fn=<built-in function getitem>)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $178call.12 = call $150load_deref.5(A, $164binary_subscr.11, func=$150load_deref.5, args=[Var(A, quicksort.py:66), Var($164binary_subscr.11, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $192call.13 = call $144load_deref.2(v, $178call.12, func=$144load_deref.2, args=[Var(v, quicksort.py:77), Var($178call.12, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,496 [DEBUG] on stmt: bool202 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $202pred = call bool202($192call.13, func=bool202, args=(Var($192call.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,496 [DEBUG] on stmt: branch $202pred, 204, 316
2023-11-07 09:01:25,496 [DEBUG] ==== SSA block analysis pass on 204
2023-11-07 09:01:25,496 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,496 [DEBUG] on stmt: $const208.3 = const(int, 1)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $binop_sub210.4 = j - $const208.3
2023-11-07 09:01:25,496 [DEBUG] on stmt: $214binary_subscr.5 = getitem(value=R, index=$binop_sub210.4, fn=<built-in function getitem>)
2023-11-07 09:01:25,496 [DEBUG] on stmt: R[j] = $214binary_subscr.5
2023-11-07 09:01:25,496 [DEBUG] on stmt: $const234.9 = const(int, 1)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $binop_isub236.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const234.9, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,496 [DEBUG] on stmt: j = $binop_isub236.10
2023-11-07 09:01:25,496 [DEBUG] on stmt: $246compare_op.13 = j > low
2023-11-07 09:01:25,496 [DEBUG] on stmt: bool252 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,496 [DEBUG] on stmt: $252pred = call bool252($246compare_op.13, func=bool252, args=(Var($246compare_op.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,496 [DEBUG] on stmt: branch $252pred, 254, 316
2023-11-07 09:01:25,496 [DEBUG] ==== SSA block analysis pass on 254
2023-11-07 09:01:25,496 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,497 [DEBUG] on stmt: $256load_deref.2 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,497 [DEBUG] on stmt: $262load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,497 [DEBUG] on stmt: $const270.9 = const(int, 1)
2023-11-07 09:01:25,497 [DEBUG] on stmt: $binop_sub272.10 = j - $const270.9
2023-11-07 09:01:25,497 [DEBUG] on stmt: $276binary_subscr.11 = getitem(value=R, index=$binop_sub272.10, fn=<built-in function getitem>)
2023-11-07 09:01:25,497 [DEBUG] on stmt: $290call.12 = call $262load_deref.5(A, $276binary_subscr.11, func=$262load_deref.5, args=[Var(A, quicksort.py:66), Var($276binary_subscr.11, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,497 [DEBUG] on stmt: $304call.13 = call $256load_deref.2(v, $290call.12, func=$256load_deref.2, args=[Var(v, quicksort.py:77), Var($290call.12, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,497 [DEBUG] on stmt: bool314 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,497 [DEBUG] on stmt: $314pred = call bool314($304call.13, func=bool314, args=(Var($304call.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,497 [DEBUG] on stmt: branch $314pred, 204, 316
2023-11-07 09:01:25,497 [DEBUG] ==== SSA block analysis pass on 316
2023-11-07 09:01:25,497 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,497 [DEBUG] on stmt: R[j] = k
2023-11-07 09:01:25,497 [DEBUG] on stmt: jump 82
2023-11-07 09:01:25,497 [DEBUG] ==== SSA block analysis pass on 328
2023-11-07 09:01:25,497 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280ccf1d0>
2023-11-07 09:01:25,497 [DEBUG] on stmt: $const328.0 = const(NoneType, None)
2023-11-07 09:01:25,497 [DEBUG] on stmt: $330return_value.1 = cast(value=$const328.0)
2023-11-07 09:01:25,497 [DEBUG] on stmt: return $330return_value.1
2023-11-07 09:01:25,498 [DEBUG] defs defaultdict(<class 'list'>,
            {'$104load_deref.6': [<numba.core.ir.Assign object at 0x281d7ef10>],
             '$10compare_op.2': [<numba.core.ir.Assign object at 0x280497ed0>],
             '$134compare_op.13': [<numba.core.ir.Assign object at 0x281d8cd10>],
             '$140pred': [<numba.core.ir.Assign object at 0x281d8d090>],
             '$144load_deref.2': [<numba.core.ir.Assign object at 0x281d8f590>],
             '$150load_deref.5': [<numba.core.ir.Assign object at 0x281d8f1d0>],
             '$164binary_subscr.11': [<numba.core.ir.Assign object at 0x281d8f4d0>],
             '$16pred': [<numba.core.ir.Assign object at 0x280eaaf10>],
             '$178call.12': [<numba.core.ir.Assign object at 0x281d8fa90>],
             '$192call.13': [<numba.core.ir.Assign object at 0x281d8f610>],
             '$202pred': [<numba.core.ir.Assign object at 0x281d8ed10>],
             '$214binary_subscr.5': [<numba.core.ir.Assign object at 0x281d8cbd0>],
             '$246compare_op.13': [<numba.core.ir.Assign object at 0x281d99a90>],
             '$252pred': [<numba.core.ir.Assign object at 0x281d99250>],
             '$256load_deref.2': [<numba.core.ir.Assign object at 0x281d9bed0>],
             '$262load_deref.5': [<numba.core.ir.Assign object at 0x281d9b950>],
             '$26compare_op.2': [<numba.core.ir.Assign object at 0x281d48290>],
             '$276binary_subscr.11': [<numba.core.ir.Assign object at 0x281d9a190>],
             '$290call.12': [<numba.core.ir.Assign object at 0x281d9a3d0>],
             '$304call.13': [<numba.core.ir.Assign object at 0x281d9be50>],
             '$314pred': [<numba.core.ir.Assign object at 0x281d9a750>],
             '$32pred': [<numba.core.ir.Assign object at 0x281d49810>],
             '$330return_value.1': [<numba.core.ir.Assign object at 0x281d3fb10>],
             '$36return_value.1': [<numba.core.ir.Assign object at 0x281d49d50>],
             '$38load_global.0': [<numba.core.ir.Assign object at 0x281d491d0>],
             '$70call.8': [<numba.core.ir.Assign object at 0x281d7d450>],
             '$80get_iter.9': [<numba.core.ir.Assign object at 0x281d7dc10>],
             '$82for_iter.1': [<numba.core.ir.Assign object at 0x281d7d5d0>],
             '$82for_iter.2': [<numba.core.ir.Assign object at 0x281d7ecd0>],
             '$82for_iter.3': [<numba.core.ir.Assign object at 0x281d7ff50>],
             '$assertion_error18.0': [<numba.core.ir.Assign object at 0x280e6f3d0>],
             '$binop_add54.4': [<numba.core.ir.Assign object at 0x281d4b990>],
             '$binop_add62.7': [<numba.core.ir.Assign object at 0x281d7f050>],
             '$binop_isub236.10': [<numba.core.ir.Assign object at 0x281d9b190>],
             '$binop_sub160.10': [<numba.core.ir.Assign object at 0x281d8fc90>],
             '$binop_sub210.4': [<numba.core.ir.Assign object at 0x281d8cb90>],
             '$binop_sub272.10': [<numba.core.ir.Assign object at 0x281d9b850>],
             '$const158.9': [<numba.core.ir.Assign object at 0x281d8e990>],
             '$const208.3': [<numba.core.ir.Assign object at 0x281d8f2d0>],
             '$const234.9': [<numba.core.ir.Assign object at 0x281d98f10>],
             '$const270.9': [<numba.core.ir.Assign object at 0x281d98b90>],
             '$const328.0': [<numba.core.ir.Assign object at 0x281d3c910>],
             '$const34.0': [<numba.core.ir.Assign object at 0x281d49150>],
             '$const52.3': [<numba.core.ir.Assign object at 0x281d48f10>],
             '$const60.6': [<numba.core.ir.Assign object at 0x281d7d550>],
             '$const8.1': [<numba.core.ir.Assign object at 0x17ef091d0>],
             '$phi82.0': [<numba.core.ir.Assign object at 0x281d7cf50>],
             '$phi84.1': [<numba.core.ir.Assign object at 0x281d7ef50>],
             'A': [<numba.core.ir.Assign object at 0x280cff310>],
             'R': [<numba.core.ir.Assign object at 0x2802d21d0>],
             'bool140': [<numba.core.ir.Assign object at 0x281d8fb90>],
             'bool16': [<numba.core.ir.Assign object at 0x280eaa310>],
             'bool202': [<numba.core.ir.Assign object at 0x281d8ea10>],
             'bool252': [<numba.core.ir.Assign object at 0x281d98390>],
             'bool314': [<numba.core.ir.Assign object at 0x281d9bbd0>],
             'bool32': [<numba.core.ir.Assign object at 0x281d48dd0>],
             'high': [<numba.core.ir.Assign object at 0x280e600d0>],
             'i': [<numba.core.ir.Assign object at 0x281d7c510>],
             'j': [<numba.core.ir.Assign object at 0x281d7f3d0>,
                   <numba.core.ir.Assign object at 0x281d9b590>],
             'k': [<numba.core.ir.Assign object at 0x281d7f510>],
             'low': [<numba.core.ir.Assign object at 0x280e63d50>],
             'v': [<numba.core.ir.Assign object at 0x281d7e410>]})
2023-11-07 09:01:25,498 [DEBUG] SSA violators {'j'}
2023-11-07 09:01:25,498 [DEBUG] Fix SSA violator on var j
2023-11-07 09:01:25,498 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,498 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,498 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,498 [DEBUG] on stmt: R = arg(1, name=R)
2023-11-07 09:01:25,498 [DEBUG] on stmt: low = arg(2, name=low)
2023-11-07 09:01:25,498 [DEBUG] on stmt: high = arg(3, name=high)
2023-11-07 09:01:25,498 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-11-07 09:01:25,498 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-11-07 09:01:25,498 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,498 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,498 [DEBUG] on stmt: branch $16pred, 22, 18
2023-11-07 09:01:25,498 [DEBUG] ==== SSA block rewrite pass on 18
2023-11-07 09:01:25,498 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,498 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,498 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,498 [DEBUG] ==== SSA block rewrite pass on 22
2023-11-07 09:01:25,498 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,498 [DEBUG] on stmt: $26compare_op.2 = high <= low
2023-11-07 09:01:25,498 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,498 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:72),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,498 [DEBUG] on stmt: branch $32pred, 34, 38
2023-11-07 09:01:25,498 [DEBUG] ==== SSA block rewrite pass on 34
2023-11-07 09:01:25,499 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,499 [DEBUG] on stmt: $const34.0 = const(NoneType, None)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $36return_value.1 = cast(value=$const34.0)
2023-11-07 09:01:25,499 [DEBUG] on stmt: return $36return_value.1
2023-11-07 09:01:25,499 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,499 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,499 [DEBUG] on stmt: $38load_global.0 = global(range: <class 'range'>)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $const52.3 = const(int, 1)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $binop_add54.4 = low + $const52.3
2023-11-07 09:01:25,499 [DEBUG] on stmt: $const60.6 = const(int, 1)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $binop_add62.7 = high + $const60.6
2023-11-07 09:01:25,499 [DEBUG] on stmt: $70call.8 = call $38load_global.0($binop_add54.4, $binop_add62.7, func=$38load_global.0, args=[Var($binop_add54.4, quicksort.py:75), Var($binop_add62.7, quicksort.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $80get_iter.9 = getiter(value=$70call.8)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $phi82.0 = $80get_iter.9
2023-11-07 09:01:25,499 [DEBUG] on stmt: jump 82
2023-11-07 09:01:25,499 [DEBUG] ==== SSA block rewrite pass on 82
2023-11-07 09:01:25,499 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,499 [DEBUG] on stmt: $82for_iter.1 = iternext(value=$phi82.0)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $phi84.1 = $82for_iter.2
2023-11-07 09:01:25,499 [DEBUG] on stmt: branch $82for_iter.3, 84, 328
2023-11-07 09:01:25,499 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:25,499 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,499 [DEBUG] on stmt: i = $phi84.1
2023-11-07 09:01:25,499 [DEBUG] on stmt: k = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $104load_deref.6 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,499 [DEBUG] on stmt: v = call $104load_deref.6(A, k, func=$104load_deref.6, args=[Var(A, quicksort.py:66), Var(k, quicksort.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,499 [DEBUG] on stmt: j = i
2023-11-07 09:01:25,499 [DEBUG] first assign: j
2023-11-07 09:01:25,499 [DEBUG] replaced with: j = i
2023-11-07 09:01:25,499 [DEBUG] on stmt: $134compare_op.13 = j > low
2023-11-07 09:01:25,499 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $140pred = call bool140($134compare_op.13, func=bool140, args=(Var($134compare_op.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,499 [DEBUG] on stmt: branch $140pred, 142, 316
2023-11-07 09:01:25,499 [DEBUG] ==== SSA block rewrite pass on 142
2023-11-07 09:01:25,499 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,499 [DEBUG] on stmt: $144load_deref.2 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $150load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $const158.9 = const(int, 1)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $binop_sub160.10 = j - $const158.9
2023-11-07 09:01:25,499 [DEBUG] on stmt: $164binary_subscr.11 = getitem(value=R, index=$binop_sub160.10, fn=<built-in function getitem>)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $178call.12 = call $150load_deref.5(A, $164binary_subscr.11, func=$150load_deref.5, args=[Var(A, quicksort.py:66), Var($164binary_subscr.11, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,499 [DEBUG] on stmt: $192call.13 = call $144load_deref.2(v, $178call.12, func=$144load_deref.2, args=[Var(v, quicksort.py:77), Var($178call.12, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,500 [DEBUG] on stmt: bool202 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $202pred = call bool202($192call.13, func=bool202, args=(Var($192call.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,500 [DEBUG] on stmt: branch $202pred, 204, 316
2023-11-07 09:01:25,500 [DEBUG] ==== SSA block rewrite pass on 204
2023-11-07 09:01:25,500 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,500 [DEBUG] on stmt: $const208.3 = const(int, 1)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $binop_sub210.4 = j - $const208.3
2023-11-07 09:01:25,500 [DEBUG] on stmt: $214binary_subscr.5 = getitem(value=R, index=$binop_sub210.4, fn=<built-in function getitem>)
2023-11-07 09:01:25,500 [DEBUG] on stmt: R[j] = $214binary_subscr.5
2023-11-07 09:01:25,500 [DEBUG] on stmt: $const234.9 = const(int, 1)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $binop_isub236.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const234.9, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,500 [DEBUG] on stmt: j = $binop_isub236.10
2023-11-07 09:01:25,500 [DEBUG] replaced with: j.1 = $binop_isub236.10
2023-11-07 09:01:25,500 [DEBUG] on stmt: $246compare_op.13 = j > low
2023-11-07 09:01:25,500 [DEBUG] on stmt: bool252 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $252pred = call bool252($246compare_op.13, func=bool252, args=(Var($246compare_op.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,500 [DEBUG] on stmt: branch $252pred, 254, 316
2023-11-07 09:01:25,500 [DEBUG] ==== SSA block rewrite pass on 254
2023-11-07 09:01:25,500 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,500 [DEBUG] on stmt: $256load_deref.2 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $262load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $const270.9 = const(int, 1)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $binop_sub272.10 = j - $const270.9
2023-11-07 09:01:25,500 [DEBUG] on stmt: $276binary_subscr.11 = getitem(value=R, index=$binop_sub272.10, fn=<built-in function getitem>)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $290call.12 = call $262load_deref.5(A, $276binary_subscr.11, func=$262load_deref.5, args=[Var(A, quicksort.py:66), Var($276binary_subscr.11, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $304call.13 = call $256load_deref.2(v, $290call.12, func=$256load_deref.2, args=[Var(v, quicksort.py:77), Var($290call.12, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,500 [DEBUG] on stmt: bool314 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $314pred = call bool314($304call.13, func=bool314, args=(Var($304call.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,500 [DEBUG] on stmt: branch $314pred, 204, 316
2023-11-07 09:01:25,500 [DEBUG] ==== SSA block rewrite pass on 316
2023-11-07 09:01:25,500 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,500 [DEBUG] on stmt: R[j] = k
2023-11-07 09:01:25,500 [DEBUG] on stmt: jump 82
2023-11-07 09:01:25,500 [DEBUG] ==== SSA block rewrite pass on 328
2023-11-07 09:01:25,500 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x280df2ed0>
2023-11-07 09:01:25,500 [DEBUG] on stmt: $const328.0 = const(NoneType, None)
2023-11-07 09:01:25,500 [DEBUG] on stmt: $330return_value.1 = cast(value=$const328.0)
2023-11-07 09:01:25,500 [DEBUG] on stmt: return $330return_value.1
2023-11-07 09:01:25,500 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {84: [<numba.core.ir.Assign object at 0x280df06d0>],
             204: [<numba.core.ir.Assign object at 0x280df18d0>]})
2023-11-07 09:01:25,500 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:25,500 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,501 [DEBUG] on stmt: A = arg(0, name=A)
2023-11-07 09:01:25,501 [DEBUG] on stmt: R = arg(1, name=R)
2023-11-07 09:01:25,501 [DEBUG] on stmt: low = arg(2, name=low)
2023-11-07 09:01:25,501 [DEBUG] on stmt: high = arg(3, name=high)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-11-07 09:01:25,501 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:71),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,501 [DEBUG] on stmt: branch $16pred, 22, 18
2023-11-07 09:01:25,501 [DEBUG] ==== SSA block rewrite pass on 18
2023-11-07 09:01:25,501 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,501 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-11-07 09:01:25,501 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-11-07 09:01:25,501 [DEBUG] ==== SSA block rewrite pass on 22
2023-11-07 09:01:25,501 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,501 [DEBUG] on stmt: $26compare_op.2 = high <= low
2023-11-07 09:01:25,501 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:72),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,501 [DEBUG] on stmt: branch $32pred, 34, 38
2023-11-07 09:01:25,501 [DEBUG] ==== SSA block rewrite pass on 34
2023-11-07 09:01:25,501 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,501 [DEBUG] on stmt: $const34.0 = const(NoneType, None)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $36return_value.1 = cast(value=$const34.0)
2023-11-07 09:01:25,501 [DEBUG] on stmt: return $36return_value.1
2023-11-07 09:01:25,501 [DEBUG] ==== SSA block rewrite pass on 38
2023-11-07 09:01:25,501 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,501 [DEBUG] on stmt: $38load_global.0 = global(range: <class 'range'>)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $const52.3 = const(int, 1)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $binop_add54.4 = low + $const52.3
2023-11-07 09:01:25,501 [DEBUG] on stmt: $const60.6 = const(int, 1)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $binop_add62.7 = high + $const60.6
2023-11-07 09:01:25,501 [DEBUG] on stmt: $70call.8 = call $38load_global.0($binop_add54.4, $binop_add62.7, func=$38load_global.0, args=[Var($binop_add54.4, quicksort.py:75), Var($binop_add62.7, quicksort.py:75)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $80get_iter.9 = getiter(value=$70call.8)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $phi82.0 = $80get_iter.9
2023-11-07 09:01:25,501 [DEBUG] on stmt: jump 82
2023-11-07 09:01:25,501 [DEBUG] ==== SSA block rewrite pass on 82
2023-11-07 09:01:25,501 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,501 [DEBUG] on stmt: $82for_iter.1 = iternext(value=$phi82.0)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $82for_iter.2 = pair_first(value=$82for_iter.1)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $82for_iter.3 = pair_second(value=$82for_iter.1)
2023-11-07 09:01:25,501 [DEBUG] on stmt: $phi84.1 = $82for_iter.2
2023-11-07 09:01:25,501 [DEBUG] on stmt: branch $82for_iter.3, 84, 328
2023-11-07 09:01:25,501 [DEBUG] ==== SSA block rewrite pass on 84
2023-11-07 09:01:25,502 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,502 [DEBUG] on stmt: i = $phi84.1
2023-11-07 09:01:25,502 [DEBUG] on stmt: k = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:25,502 [DEBUG] on stmt: $104load_deref.6 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,502 [DEBUG] on stmt: v = call $104load_deref.6(A, k, func=$104load_deref.6, args=[Var(A, quicksort.py:66), Var(k, quicksort.py:76)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,502 [DEBUG] on stmt: j = i
2023-11-07 09:01:25,502 [DEBUG] on stmt: $134compare_op.13 = j > low
2023-11-07 09:01:25,502 [DEBUG] find_def var='j' stmt=$134compare_op.13 = j > low
2023-11-07 09:01:25,502 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,502 [DEBUG] on stmt: $140pred = call bool140($134compare_op.13, func=bool140, args=(Var($134compare_op.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,502 [DEBUG] on stmt: branch $140pred, 142, 316
2023-11-07 09:01:25,502 [DEBUG] ==== SSA block rewrite pass on 142
2023-11-07 09:01:25,502 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,502 [DEBUG] on stmt: $144load_deref.2 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,502 [DEBUG] on stmt: $150load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,502 [DEBUG] on stmt: $const158.9 = const(int, 1)
2023-11-07 09:01:25,502 [DEBUG] on stmt: $binop_sub160.10 = j - $const158.9
2023-11-07 09:01:25,502 [DEBUG] find_def var='j' stmt=$binop_sub160.10 = j - $const158.9
2023-11-07 09:01:25,502 [DEBUG] find_def_from_top label 142
2023-11-07 09:01:25,502 [DEBUG] idom 84 from label 142
2023-11-07 09:01:25,502 [DEBUG] find_def_from_bottom label 84
2023-11-07 09:01:25,502 [DEBUG] on stmt: $164binary_subscr.11 = getitem(value=R, index=$binop_sub160.10, fn=<built-in function getitem>)
2023-11-07 09:01:25,502 [DEBUG] on stmt: $178call.12 = call $150load_deref.5(A, $164binary_subscr.11, func=$150load_deref.5, args=[Var(A, quicksort.py:66), Var($164binary_subscr.11, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,502 [DEBUG] on stmt: $192call.13 = call $144load_deref.2(v, $178call.12, func=$144load_deref.2, args=[Var(v, quicksort.py:77), Var($178call.12, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,502 [DEBUG] on stmt: bool202 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,502 [DEBUG] on stmt: $202pred = call bool202($192call.13, func=bool202, args=(Var($192call.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,502 [DEBUG] on stmt: branch $202pred, 204, 316
2023-11-07 09:01:25,502 [DEBUG] ==== SSA block rewrite pass on 204
2023-11-07 09:01:25,502 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,502 [DEBUG] on stmt: $const208.3 = const(int, 1)
2023-11-07 09:01:25,502 [DEBUG] on stmt: $binop_sub210.4 = j - $const208.3
2023-11-07 09:01:25,502 [DEBUG] find_def var='j' stmt=$binop_sub210.4 = j - $const208.3
2023-11-07 09:01:25,502 [DEBUG] find_def_from_top label 204
2023-11-07 09:01:25,502 [DEBUG] insert phi node j.2 = phi(incoming_values=[], incoming_blocks=[]) at 204
2023-11-07 09:01:25,502 [DEBUG] find_def_from_bottom label 142
2023-11-07 09:01:25,502 [DEBUG] find_def_from_top label 142
2023-11-07 09:01:25,502 [DEBUG] idom 84 from label 142
2023-11-07 09:01:25,502 [DEBUG] find_def_from_bottom label 84
2023-11-07 09:01:25,502 [DEBUG] incoming_def j = i
2023-11-07 09:01:25,502 [DEBUG] find_def_from_bottom label 254
2023-11-07 09:01:25,502 [DEBUG] find_def_from_top label 254
2023-11-07 09:01:25,502 [DEBUG] idom 204 from label 254
2023-11-07 09:01:25,502 [DEBUG] find_def_from_bottom label 204
2023-11-07 09:01:25,502 [DEBUG] incoming_def j.1 = $binop_isub236.10
2023-11-07 09:01:25,502 [DEBUG] replaced with: $binop_sub210.4 = j.2 - $const208.3
2023-11-07 09:01:25,502 [DEBUG] on stmt: $214binary_subscr.5 = getitem(value=R, index=$binop_sub210.4, fn=<built-in function getitem>)
2023-11-07 09:01:25,502 [DEBUG] on stmt: R[j] = $214binary_subscr.5
2023-11-07 09:01:25,502 [DEBUG] find_def var='j' stmt=R[j] = $214binary_subscr.5
2023-11-07 09:01:25,503 [DEBUG] replaced with: R[j.2] = $214binary_subscr.5
2023-11-07 09:01:25,503 [DEBUG] on stmt: $const234.9 = const(int, 1)
2023-11-07 09:01:25,503 [DEBUG] on stmt: $binop_isub236.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const234.9, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,503 [DEBUG] find_def var='j' stmt=$binop_isub236.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const234.9, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,503 [DEBUG] replaced with: $binop_isub236.10 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.2, rhs=$const234.9, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:25,503 [DEBUG] on stmt: j.1 = $binop_isub236.10
2023-11-07 09:01:25,503 [DEBUG] on stmt: $246compare_op.13 = j > low
2023-11-07 09:01:25,503 [DEBUG] find_def var='j' stmt=$246compare_op.13 = j > low
2023-11-07 09:01:25,503 [DEBUG] replaced with: $246compare_op.13 = j.1 > low
2023-11-07 09:01:25,503 [DEBUG] on stmt: bool252 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,503 [DEBUG] on stmt: $252pred = call bool252($246compare_op.13, func=bool252, args=(Var($246compare_op.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,503 [DEBUG] on stmt: branch $252pred, 254, 316
2023-11-07 09:01:25,503 [DEBUG] ==== SSA block rewrite pass on 254
2023-11-07 09:01:25,503 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,503 [DEBUG] on stmt: $256load_deref.2 = freevar(LT: <function lt_floats at 0x169820c20>)
2023-11-07 09:01:25,503 [DEBUG] on stmt: $262load_deref.5 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x282a0e0c0>)
2023-11-07 09:01:25,503 [DEBUG] on stmt: $const270.9 = const(int, 1)
2023-11-07 09:01:25,503 [DEBUG] on stmt: $binop_sub272.10 = j - $const270.9
2023-11-07 09:01:25,503 [DEBUG] find_def var='j' stmt=$binop_sub272.10 = j - $const270.9
2023-11-07 09:01:25,503 [DEBUG] find_def_from_top label 254
2023-11-07 09:01:25,503 [DEBUG] idom 204 from label 254
2023-11-07 09:01:25,503 [DEBUG] find_def_from_bottom label 204
2023-11-07 09:01:25,503 [DEBUG] replaced with: $binop_sub272.10 = j.1 - $const270.9
2023-11-07 09:01:25,503 [DEBUG] on stmt: $276binary_subscr.11 = getitem(value=R, index=$binop_sub272.10, fn=<built-in function getitem>)
2023-11-07 09:01:25,503 [DEBUG] on stmt: $290call.12 = call $262load_deref.5(A, $276binary_subscr.11, func=$262load_deref.5, args=[Var(A, quicksort.py:66), Var($276binary_subscr.11, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,503 [DEBUG] on stmt: $304call.13 = call $256load_deref.2(v, $290call.12, func=$256load_deref.2, args=[Var(v, quicksort.py:77), Var($290call.12, quicksort.py:80)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,503 [DEBUG] on stmt: bool314 = global(bool: <class 'bool'>)
2023-11-07 09:01:25,503 [DEBUG] on stmt: $314pred = call bool314($304call.13, func=bool314, args=(Var($304call.13, quicksort.py:80),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:25,503 [DEBUG] on stmt: branch $314pred, 204, 316
2023-11-07 09:01:25,503 [DEBUG] ==== SSA block rewrite pass on 316
2023-11-07 09:01:25,503 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,503 [DEBUG] on stmt: R[j] = k
2023-11-07 09:01:25,503 [DEBUG] find_def var='j' stmt=R[j] = k
2023-11-07 09:01:25,503 [DEBUG] find_def_from_top label 316
2023-11-07 09:01:25,503 [DEBUG] insert phi node j.3 = phi(incoming_values=[], incoming_blocks=[]) at 316
2023-11-07 09:01:25,503 [DEBUG] find_def_from_bottom label 204
2023-11-07 09:01:25,503 [DEBUG] incoming_def j.1 = $binop_isub236.10
2023-11-07 09:01:25,503 [DEBUG] find_def_from_bottom label 84
2023-11-07 09:01:25,503 [DEBUG] incoming_def j = i
2023-11-07 09:01:25,503 [DEBUG] find_def_from_bottom label 142
2023-11-07 09:01:25,503 [DEBUG] find_def_from_top label 142
2023-11-07 09:01:25,503 [DEBUG] idom 84 from label 142
2023-11-07 09:01:25,503 [DEBUG] find_def_from_bottom label 84
2023-11-07 09:01:25,503 [DEBUG] incoming_def j = i
2023-11-07 09:01:25,503 [DEBUG] find_def_from_bottom label 254
2023-11-07 09:01:25,503 [DEBUG] find_def_from_top label 254
2023-11-07 09:01:25,503 [DEBUG] idom 204 from label 254
2023-11-07 09:01:25,503 [DEBUG] find_def_from_bottom label 204
2023-11-07 09:01:25,503 [DEBUG] incoming_def j.1 = $binop_isub236.10
2023-11-07 09:01:25,503 [DEBUG] replaced with: R[j.3] = k
2023-11-07 09:01:25,504 [DEBUG] on stmt: jump 82
2023-11-07 09:01:25,504 [DEBUG] ==== SSA block rewrite pass on 328
2023-11-07 09:01:25,504 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x280c797d0>
2023-11-07 09:01:25,504 [DEBUG] on stmt: $const328.0 = const(NoneType, None)
2023-11-07 09:01:25,504 [DEBUG] on stmt: $330return_value.1 = cast(value=$const328.0)
2023-11-07 09:01:25,504 [DEBUG] on stmt: return $330return_value.1
2023-11-07 09:01:26,016 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=141)
           2	RESUME(arg=0, lineno=141)
           4	LOAD_GLOBAL(arg=1, lineno=189)
          16	LOAD_ATTR(arg=1, lineno=189)
          26	LOAD_FAST(arg=1, lineno=189)
          28	PRECALL(arg=1, lineno=189)
          32	CALL(arg=1, lineno=189)
          42	LOAD_FAST(arg=4, lineno=189)
          44	BINARY_OP(arg=5, lineno=189)
          48	STORE_FAST(arg=5, lineno=189)
          50	LOAD_GLOBAL(arg=1, lineno=190)
          62	LOAD_ATTR(arg=2, lineno=190)
          72	LOAD_FAST(arg=0, lineno=190)
          74	LOAD_ATTR(arg=3, lineno=190)
          84	LOAD_CONST(arg=1, lineno=190)
          86	BINARY_SUBSCR(arg=None, lineno=190)
          96	LOAD_GLOBAL(arg=0, lineno=190)
         108	LOAD_ATTR(arg=4, lineno=190)
         118	KW_NAMES(arg=2, lineno=190)
         120	PRECALL(arg=2, lineno=190)
         124	CALL(arg=2, lineno=190)
         134	STORE_FAST(arg=6, lineno=190)
         136	LOAD_GLOBAL(arg=1, lineno=191)
         148	LOAD_ATTR(arg=2, lineno=191)
         158	LOAD_FAST(arg=0, lineno=191)
         160	LOAD_ATTR(arg=3, lineno=191)
         170	LOAD_CONST(arg=1, lineno=191)
         172	BINARY_SUBSCR(arg=None, lineno=191)
         182	LOAD_GLOBAL(arg=0, lineno=191)
         194	LOAD_ATTR(arg=4, lineno=191)
         204	KW_NAMES(arg=2, lineno=191)
         206	PRECALL(arg=2, lineno=191)
         210	CALL(arg=2, lineno=191)
         220	STORE_FAST(arg=7, lineno=191)
         222	LOAD_GLOBAL(arg=1, lineno=193)
         234	LOAD_ATTR(arg=5, lineno=193)
         244	LOAD_FAST(arg=0, lineno=193)
         246	PRECALL(arg=1, lineno=193)
         250	CALL(arg=1, lineno=193)
         260	STORE_FAST(arg=8, lineno=193)
         262	LOAD_GLOBAL(arg=13, lineno=195)
         274	LOAD_FAST(arg=0, lineno=195)
         276	LOAD_ATTR(arg=3, lineno=195)
         286	LOAD_CONST(arg=1, lineno=195)
         288	BINARY_SUBSCR(arg=None, lineno=195)
         298	PRECALL(arg=1, lineno=195)
         302	CALL(arg=1, lineno=195)
         312	GET_ITER(arg=None, lineno=195)
>        314	NOP(arg=1, lineno=195)
         316	FOR_ITER(arg=504, lineno=195)
         318	STORE_FAST(arg=9, lineno=195)
         320	LOAD_CONST(arg=3, lineno=196)
         322	STORE_FAST(arg=10, lineno=196)
         324	LOAD_GLOBAL(arg=14, lineno=197)
         336	STORE_FAST(arg=11, lineno=197)
         338	LOAD_CONST(arg=4, lineno=198)
         340	STORE_FAST(arg=12, lineno=198)
         342	LOAD_FAST(arg=0, lineno=201)
         344	LOAD_FAST(arg=9, lineno=201)
         346	BINARY_SUBSCR(arg=None, lineno=201)
         356	STORE_FAST(arg=13, lineno=201)
         358	LOAD_FAST(arg=13, lineno=202)
         360	LOAD_FAST(arg=13, lineno=202)
         362	LOAD_CONST(arg=3, lineno=202)
         364	COMPARE_OP(arg=4, lineno=202)
         370	BINARY_SUBSCR(arg=None, lineno=202)
         380	STORE_FAST(arg=14, lineno=202)
         382	LOAD_FAST(arg=14, lineno=203)
         384	LOAD_ATTR(arg=3, lineno=203)
         394	LOAD_CONST(arg=1, lineno=203)
         396	BINARY_SUBSCR(arg=None, lineno=203)
         406	LOAD_FAST(arg=3, lineno=203)
         408	COMPARE_OP(arg=5, lineno=203)
         414	POP_JUMP_FORWARD_IF_FALSE(arg=122, lineno=203)
         416	LOAD_GLOBAL(arg=17, lineno=204)
         428	LOAD_GLOBAL(arg=1, lineno=204)
         440	LOAD_ATTR(arg=9, lineno=204)
         450	LOAD_FAST(arg=3, lineno=204)
         452	PRECALL(arg=1, lineno=204)
         456	CALL(arg=1, lineno=204)
         466	PRECALL(arg=1, lineno=204)
         470	CALL(arg=1, lineno=204)
         480	STORE_FAST(arg=15, lineno=204)
         482	LOAD_FAST(arg=3, lineno=205)
         484	LOAD_FAST(arg=15, lineno=205)
         486	BINARY_OP(arg=10, lineno=205)
         490	STORE_FAST(arg=16, lineno=205)
         492	LOAD_FAST(arg=15, lineno=206)
         494	LOAD_CONST(arg=1, lineno=206)
         496	COMPARE_OP(arg=4, lineno=206)
         502	POP_JUMP_FORWARD_IF_FALSE(arg=63, lineno=206)
         504	LOAD_FAST(arg=14, lineno=207)
         506	LOAD_FAST(arg=15, lineno=207)
         508	LOAD_CONST(arg=5, lineno=207)
         510	BINARY_OP(arg=10, lineno=207)
         514	BINARY_SUBSCR(arg=None, lineno=207)
         524	LOAD_FAST(arg=6, lineno=207)
         526	LOAD_FAST(arg=9, lineno=207)
         528	STORE_SUBSCR(arg=None, lineno=207)
         532	LOAD_FAST(arg=16, lineno=208)
         534	LOAD_GLOBAL(arg=20, lineno=208)
         546	COMPARE_OP(arg=4, lineno=208)
         552	POP_JUMP_FORWARD_IF_FALSE(arg=37, lineno=208)
         554	LOAD_FAST(arg=6, lineno=209)
         556	LOAD_FAST(arg=9, lineno=209)
         558	COPY(arg=2, lineno=209)
         560	COPY(arg=2, lineno=209)
         562	BINARY_SUBSCR(arg=None, lineno=209)
         572	LOAD_FAST(arg=16, lineno=209)
         574	LOAD_FAST(arg=14, lineno=210)
         576	LOAD_FAST(arg=15, lineno=210)
         578	BINARY_SUBSCR(arg=None, lineno=210)
         588	LOAD_FAST(arg=14, lineno=210)
         590	LOAD_FAST(arg=15, lineno=210)
         592	LOAD_CONST(arg=5, lineno=210)
         594	BINARY_OP(arg=10, lineno=210)
         598	BINARY_SUBSCR(arg=None, lineno=210)
         608	BINARY_OP(arg=10, lineno=210)
         612	BINARY_OP(arg=5, lineno=209)
         616	BINARY_OP(arg=13, lineno=209)
         620	SWAP(arg=3, lineno=209)
         622	SWAP(arg=2, lineno=209)
         624	STORE_SUBSCR(arg=None, lineno=209)
>        628	JUMP_FORWARD(arg=55, lineno=209)
>        630	LOAD_FAST(arg=16, lineno=213)
         632	LOAD_FAST(arg=14, lineno=213)
         634	LOAD_CONST(arg=1, lineno=213)
         636	BINARY_SUBSCR(arg=None, lineno=213)
         646	BINARY_OP(arg=5, lineno=213)
         650	LOAD_FAST(arg=6, lineno=213)
         652	LOAD_FAST(arg=9, lineno=213)
         654	STORE_SUBSCR(arg=None, lineno=213)
         658	JUMP_FORWARD(arg=40, lineno=213)
>        660	LOAD_FAST(arg=14, lineno=214)
         662	LOAD_ATTR(arg=3, lineno=214)
         672	LOAD_CONST(arg=1, lineno=214)
         674	BINARY_SUBSCR(arg=None, lineno=214)
         684	LOAD_CONST(arg=1, lineno=214)
         686	COMPARE_OP(arg=4, lineno=214)
         692	POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=214)
         694	LOAD_GLOBAL(arg=1, lineno=215)
         706	LOAD_ATTR(arg=11, lineno=215)
         716	LOAD_FAST(arg=14, lineno=215)
         718	PRECALL(arg=1, lineno=215)
         722	CALL(arg=1, lineno=215)
         732	LOAD_FAST(arg=6, lineno=215)
         734	LOAD_FAST(arg=9, lineno=215)
         736	STORE_SUBSCR(arg=None, lineno=215)
>        740	LOAD_GLOBAL(arg=13, lineno=217)
         752	LOAD_FAST(arg=2, lineno=217)
         754	PRECALL(arg=1, lineno=217)
         758	CALL(arg=1, lineno=217)
         768	GET_ITER(arg=None, lineno=217)
>        770	FOR_ITER(arg=170, lineno=217)
         772	STORE_FAST(arg=17, lineno=217)
         774	LOAD_CONST(arg=3, lineno=219)
         776	STORE_FAST(arg=18, lineno=219)
         778	LOAD_GLOBAL(arg=13, lineno=220)
         790	LOAD_CONST(arg=5, lineno=220)
         792	LOAD_FAST(arg=0, lineno=220)
         794	LOAD_ATTR(arg=3, lineno=220)
         804	LOAD_CONST(arg=5, lineno=220)
         806	BINARY_SUBSCR(arg=None, lineno=220)
         816	PRECALL(arg=2, lineno=220)
         820	CALL(arg=2, lineno=220)
         830	GET_ITER(arg=None, lineno=220)
>        832	FOR_ITER(arg=60, lineno=220)
         834	STORE_FAST(arg=19, lineno=220)
         836	LOAD_FAST(arg=0, lineno=221)
         838	LOAD_FAST(arg=9, lineno=221)
         840	LOAD_FAST(arg=19, lineno=221)
         842	BUILD_TUPLE(arg=2, lineno=221)
         844	BINARY_SUBSCR(arg=None, lineno=221)
         854	LOAD_FAST(arg=6, lineno=221)
         856	LOAD_FAST(arg=9, lineno=221)
         858	BINARY_SUBSCR(arg=None, lineno=221)
         868	BINARY_OP(arg=10, lineno=221)
         872	STORE_FAST(arg=20, lineno=221)
         874	LOAD_FAST(arg=20, lineno=222)
         876	LOAD_CONST(arg=1, lineno=222)
         878	COMPARE_OP(arg=4, lineno=222)
         884	POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=222)
         886	LOAD_FAST(arg=18, lineno=223)
         888	LOAD_GLOBAL(arg=1, lineno=223)
         900	LOAD_ATTR(arg=12, lineno=223)
         910	LOAD_FAST(arg=20, lineno=223)
         912	LOAD_FAST(arg=12, lineno=223)
         914	BINARY_OP(arg=11, lineno=223)
         918	UNARY_NEGATIVE(arg=None, lineno=223)
         920	PRECALL(arg=1, lineno=223)
         924	CALL(arg=1, lineno=223)
         934	BINARY_OP(arg=13, lineno=223)
         938	STORE_FAST(arg=18, lineno=223)
         940	JUMP_BACKWARD(arg=55, lineno=223)
>        942	LOAD_FAST(arg=18, lineno=225)
         944	LOAD_CONST(arg=4, lineno=225)
         946	BINARY_OP(arg=13, lineno=225)
         950	STORE_FAST(arg=18, lineno=225)
         952	JUMP_BACKWARD(arg=61, lineno=225)
>        954	LOAD_GLOBAL(arg=1, lineno=227)
         966	LOAD_ATTR(arg=13, lineno=227)
         976	LOAD_FAST(arg=18, lineno=227)
         978	LOAD_FAST(arg=5, lineno=227)
         980	BINARY_OP(arg=10, lineno=227)
         984	PRECALL(arg=1, lineno=227)
         988	CALL(arg=1, lineno=227)
         998	LOAD_GLOBAL(arg=20, lineno=227)
        1010	COMPARE_OP(arg=0, lineno=227)
        1016	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=227)
        1018	POP_TOP(arg=None, lineno=228)
        1020	JUMP_FORWARD(arg=45, lineno=228)
>       1022	LOAD_FAST(arg=18, lineno=230)
        1024	LOAD_FAST(arg=5, lineno=230)
        1026	COMPARE_OP(arg=4, lineno=230)
        1032	POP_JUMP_FORWARD_IF_FALSE(arg=11, lineno=230)
        1034	LOAD_FAST(arg=12, lineno=231)
        1036	STORE_FAST(arg=11, lineno=231)
        1038	LOAD_FAST(arg=10, lineno=232)
        1040	LOAD_FAST(arg=11, lineno=232)
        1042	BINARY_OP(arg=0, lineno=232)
        1046	LOAD_CONST(arg=6, lineno=232)
        1048	BINARY_OP(arg=11, lineno=232)
        1052	STORE_FAST(arg=12, lineno=232)
        1054	JUMP_BACKWARD(arg=143, lineno=232)
>       1056	LOAD_FAST(arg=12, lineno=234)
        1058	STORE_FAST(arg=10, lineno=234)
        1060	LOAD_FAST(arg=11, lineno=235)
        1062	LOAD_GLOBAL(arg=14, lineno=235)
        1074	COMPARE_OP(arg=2, lineno=235)
        1080	POP_JUMP_FORWARD_IF_FALSE(arg=6, lineno=235)
        1082	LOAD_FAST(arg=12, lineno=236)
        1084	LOAD_CONST(arg=7, lineno=236)
        1086	BINARY_OP(arg=18, lineno=236)
        1090	STORE_FAST(arg=12, lineno=236)
        1092	JUMP_BACKWARD(arg=162, lineno=236)
>       1094	LOAD_FAST(arg=10, lineno=238)
        1096	LOAD_FAST(arg=11, lineno=238)
        1098	BINARY_OP(arg=0, lineno=238)
        1102	LOAD_CONST(arg=6, lineno=238)
        1104	BINARY_OP(arg=11, lineno=238)
        1108	STORE_FAST(arg=12, lineno=238)
        1110	JUMP_BACKWARD(arg=171, lineno=238)
>       1112	LOAD_FAST(arg=12, lineno=240)
        1114	LOAD_FAST(arg=7, lineno=240)
        1116	LOAD_FAST(arg=9, lineno=240)
        1118	STORE_SUBSCR(arg=None, lineno=240)
        1122	LOAD_FAST(arg=6, lineno=243)
        1124	LOAD_FAST(arg=9, lineno=243)
        1126	BINARY_SUBSCR(arg=None, lineno=243)
        1136	LOAD_CONST(arg=3, lineno=243)
        1138	COMPARE_OP(arg=4, lineno=243)
        1144	POP_JUMP_FORWARD_IF_FALSE(arg=55, lineno=243)
        1146	LOAD_GLOBAL(arg=1, lineno=244)
        1158	LOAD_ATTR(arg=5, lineno=244)
        1168	LOAD_FAST(arg=13, lineno=244)
        1170	PRECALL(arg=1, lineno=244)
        1174	CALL(arg=1, lineno=244)
        1184	STORE_FAST(arg=21, lineno=244)
        1186	LOAD_FAST(arg=7, lineno=245)
        1188	LOAD_FAST(arg=9, lineno=245)
        1190	BINARY_SUBSCR(arg=None, lineno=245)
        1200	LOAD_GLOBAL(arg=28, lineno=245)
        1212	LOAD_FAST(arg=21, lineno=245)
        1214	BINARY_OP(arg=5, lineno=245)
        1218	COMPARE_OP(arg=0, lineno=245)
        1224	POP_JUMP_FORWARD_IF_FALSE(arg=13, lineno=245)
        1226	LOAD_GLOBAL(arg=28, lineno=246)
        1238	LOAD_FAST(arg=21, lineno=246)
        1240	BINARY_OP(arg=5, lineno=246)
        1244	LOAD_FAST(arg=7, lineno=246)
        1246	LOAD_FAST(arg=9, lineno=246)
        1248	STORE_SUBSCR(arg=None, lineno=246)
>       1252	NOP(arg=1, lineno=246)
        1254	JUMP_BACKWARD(arg=471, lineno=246)
>       1256	LOAD_FAST(arg=7, lineno=248)
        1258	LOAD_FAST(arg=9, lineno=248)
        1260	BINARY_SUBSCR(arg=None, lineno=248)
        1270	LOAD_GLOBAL(arg=28, lineno=248)
        1282	LOAD_FAST(arg=8, lineno=248)
        1284	BINARY_OP(arg=5, lineno=248)
        1288	COMPARE_OP(arg=0, lineno=248)
        1294	POP_JUMP_FORWARD_IF_FALSE(arg=13, lineno=248)
        1296	LOAD_GLOBAL(arg=28, lineno=249)
        1308	LOAD_FAST(arg=8, lineno=249)
        1310	BINARY_OP(arg=5, lineno=249)
        1314	LOAD_FAST(arg=7, lineno=249)
        1316	LOAD_FAST(arg=9, lineno=249)
        1318	STORE_SUBSCR(arg=None, lineno=249)
>       1322	NOP(arg=1, lineno=249)
        1324	JUMP_BACKWARD(arg=506, lineno=249)
>       1326	LOAD_FAST(arg=7, lineno=251)
        1328	LOAD_FAST(arg=6, lineno=251)
        1330	BUILD_TUPLE(arg=2, lineno=251)
        1332	RETURN_VALUE(arg=None, lineno=251)
2023-11-07 09:01:26,016 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,016 [DEBUG] stack: []
2023-11-07 09:01:26,016 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=141)
2023-11-07 09:01:26,016 [DEBUG] stack []
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=141)
2023-11-07 09:01:26,016 [DEBUG] stack []
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=189)
2023-11-07 09:01:26,016 [DEBUG] stack []
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=189)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=189)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$4.1', '$16load_attr.2']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=28, inst=PRECALL(arg=1, lineno=189)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$k26.3']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=32, inst=CALL(arg=1, lineno=189)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$k26.3']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=42, inst=LOAD_FAST(arg=4, lineno=189)
2023-11-07 09:01:26,016 [DEBUG] stack ['$32call.4']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=44, inst=BINARY_OP(arg=5, lineno=189)
2023-11-07 09:01:26,016 [DEBUG] stack ['$32call.4', '$bandwidth42.5']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=48, inst=STORE_FAST(arg=5, lineno=189)
2023-11-07 09:01:26,016 [DEBUG] stack ['$binop_mul44.6']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=50, inst=LOAD_GLOBAL(arg=1, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack []
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=62, inst=LOAD_ATTR(arg=2, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$50.8', '$50load_global.7']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$50.8', '$62load_attr.9']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=74, inst=LOAD_ATTR(arg=3, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$50.8', '$62load_attr.9', '$distances72.10']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=84, inst=LOAD_CONST(arg=1, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$50.8', '$62load_attr.9', '$74load_attr.11']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=86, inst=BINARY_SUBSCR(arg=None, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$50.8', '$62load_attr.9', '$74load_attr.11', '$const84.12']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=96, inst=LOAD_GLOBAL(arg=0, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$50.8', '$62load_attr.9', '$86binary_subscr.13']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=108, inst=LOAD_ATTR(arg=4, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$50.8', '$62load_attr.9', '$86binary_subscr.13', '$96load_global.14']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=118, inst=KW_NAMES(arg=2, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$50.8', '$62load_attr.9', '$86binary_subscr.13', '$108load_attr.15']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=120, inst=PRECALL(arg=2, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$50.8', '$62load_attr.9', '$86binary_subscr.13', '$108load_attr.15']
2023-11-07 09:01:26,016 [DEBUG] dispatch pc=124, inst=CALL(arg=2, lineno=190)
2023-11-07 09:01:26,016 [DEBUG] stack ['$null$50.8', '$62load_attr.9', '$86binary_subscr.13', '$108load_attr.15']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=134, inst=STORE_FAST(arg=6, lineno=190)
2023-11-07 09:01:26,017 [DEBUG] stack ['$124call.16']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=136, inst=LOAD_GLOBAL(arg=1, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack []
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=148, inst=LOAD_ATTR(arg=2, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$136.18', '$136load_global.17']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=158, inst=LOAD_FAST(arg=0, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$136.18', '$148load_attr.19']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=160, inst=LOAD_ATTR(arg=3, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$136.18', '$148load_attr.19', '$distances158.20']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=170, inst=LOAD_CONST(arg=1, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$136.18', '$148load_attr.19', '$160load_attr.21']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=172, inst=BINARY_SUBSCR(arg=None, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$136.18', '$148load_attr.19', '$160load_attr.21', '$const170.22']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=182, inst=LOAD_GLOBAL(arg=0, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$136.18', '$148load_attr.19', '$172binary_subscr.23']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=194, inst=LOAD_ATTR(arg=4, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$136.18', '$148load_attr.19', '$172binary_subscr.23', '$182load_global.24']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=204, inst=KW_NAMES(arg=2, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$136.18', '$148load_attr.19', '$172binary_subscr.23', '$194load_attr.25']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=206, inst=PRECALL(arg=2, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$136.18', '$148load_attr.19', '$172binary_subscr.23', '$194load_attr.25']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=210, inst=CALL(arg=2, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$136.18', '$148load_attr.19', '$172binary_subscr.23', '$194load_attr.25']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=220, inst=STORE_FAST(arg=7, lineno=191)
2023-11-07 09:01:26,017 [DEBUG] stack ['$210call.26']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=222, inst=LOAD_GLOBAL(arg=1, lineno=193)
2023-11-07 09:01:26,017 [DEBUG] stack []
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=234, inst=LOAD_ATTR(arg=5, lineno=193)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$222.28', '$222load_global.27']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=244, inst=LOAD_FAST(arg=0, lineno=193)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$222.28', '$234load_attr.29']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=246, inst=PRECALL(arg=1, lineno=193)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$222.28', '$234load_attr.29', '$distances244.30']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=250, inst=CALL(arg=1, lineno=193)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$222.28', '$234load_attr.29', '$distances244.30']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=260, inst=STORE_FAST(arg=8, lineno=193)
2023-11-07 09:01:26,017 [DEBUG] stack ['$250call.31']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=262, inst=LOAD_GLOBAL(arg=13, lineno=195)
2023-11-07 09:01:26,017 [DEBUG] stack []
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=274, inst=LOAD_FAST(arg=0, lineno=195)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$262.33', '$262load_global.32']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=276, inst=LOAD_ATTR(arg=3, lineno=195)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$262.33', '$262load_global.32', '$distances274.34']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=286, inst=LOAD_CONST(arg=1, lineno=195)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$262.33', '$262load_global.32', '$276load_attr.35']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=288, inst=BINARY_SUBSCR(arg=None, lineno=195)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$262.33', '$262load_global.32', '$276load_attr.35', '$const286.36']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=298, inst=PRECALL(arg=1, lineno=195)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$262.33', '$262load_global.32', '$288binary_subscr.37']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=302, inst=CALL(arg=1, lineno=195)
2023-11-07 09:01:26,017 [DEBUG] stack ['$null$262.33', '$262load_global.32', '$288binary_subscr.37']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=312, inst=GET_ITER(arg=None, lineno=195)
2023-11-07 09:01:26,017 [DEBUG] stack ['$302call.38']
2023-11-07 09:01:26,017 [DEBUG] end state. edges=[Edge(pc=314, stack=('$312get_iter.39',), blockstack=(), npush=0)]
2023-11-07 09:01:26,017 [DEBUG] pending: deque([State(pc_initial=314 nstack_initial=1)])
2023-11-07 09:01:26,017 [DEBUG] stack: ['$phi314.0']
2023-11-07 09:01:26,017 [DEBUG] state.pc_initial: State(pc_initial=314 nstack_initial=1)
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=314, inst=NOP(arg=1, lineno=195)
2023-11-07 09:01:26,017 [DEBUG] stack ['$phi314.0']
2023-11-07 09:01:26,017 [DEBUG] end state. edges=[Edge(pc=316, stack=('$phi314.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,017 [DEBUG] pending: deque([State(pc_initial=316 nstack_initial=1)])
2023-11-07 09:01:26,017 [DEBUG] stack: ['$phi316.0']
2023-11-07 09:01:26,017 [DEBUG] state.pc_initial: State(pc_initial=316 nstack_initial=1)
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=316, inst=FOR_ITER(arg=504, lineno=195)
2023-11-07 09:01:26,017 [DEBUG] stack ['$phi316.0']
2023-11-07 09:01:26,017 [DEBUG] end state. edges=[Edge(pc=1326, stack=(), blockstack=(), npush=0), Edge(pc=318, stack=('$phi316.0', '$316for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,017 [DEBUG] pending: deque([State(pc_initial=1326 nstack_initial=0), State(pc_initial=318 nstack_initial=2)])
2023-11-07 09:01:26,017 [DEBUG] stack: []
2023-11-07 09:01:26,017 [DEBUG] state.pc_initial: State(pc_initial=1326 nstack_initial=0)
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=1326, inst=LOAD_FAST(arg=7, lineno=251)
2023-11-07 09:01:26,017 [DEBUG] stack []
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=1328, inst=LOAD_FAST(arg=6, lineno=251)
2023-11-07 09:01:26,017 [DEBUG] stack ['$result1326.0']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=1330, inst=BUILD_TUPLE(arg=2, lineno=251)
2023-11-07 09:01:26,017 [DEBUG] stack ['$result1326.0', '$rho1328.1']
2023-11-07 09:01:26,017 [DEBUG] dispatch pc=1332, inst=RETURN_VALUE(arg=None, lineno=251)
2023-11-07 09:01:26,017 [DEBUG] stack ['$1330build_tuple.2']
2023-11-07 09:01:26,017 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,018 [DEBUG] pending: deque([State(pc_initial=318 nstack_initial=2)])
2023-11-07 09:01:26,018 [DEBUG] stack: ['$phi318.0', '$phi318.1']
2023-11-07 09:01:26,018 [DEBUG] state.pc_initial: State(pc_initial=318 nstack_initial=2)
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=318, inst=STORE_FAST(arg=9, lineno=195)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$phi318.1']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=320, inst=LOAD_CONST(arg=3, lineno=196)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=322, inst=STORE_FAST(arg=10, lineno=196)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$const320.2']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=324, inst=LOAD_GLOBAL(arg=14, lineno=197)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=336, inst=STORE_FAST(arg=11, lineno=197)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$324load_global.3']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=338, inst=LOAD_CONST(arg=4, lineno=198)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=340, inst=STORE_FAST(arg=12, lineno=198)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$const338.4']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=342, inst=LOAD_FAST(arg=0, lineno=201)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=344, inst=LOAD_FAST(arg=9, lineno=201)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$distances342.5']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=346, inst=BINARY_SUBSCR(arg=None, lineno=201)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$distances342.5', '$i344.6']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=356, inst=STORE_FAST(arg=13, lineno=201)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$346binary_subscr.7']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=358, inst=LOAD_FAST(arg=13, lineno=202)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=360, inst=LOAD_FAST(arg=13, lineno=202)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$ith_distances358.8']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=362, inst=LOAD_CONST(arg=3, lineno=202)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$ith_distances358.8', '$ith_distances360.9']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=364, inst=COMPARE_OP(arg=4, lineno=202)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$ith_distances358.8', '$ith_distances360.9', '$const362.10']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=370, inst=BINARY_SUBSCR(arg=None, lineno=202)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$ith_distances358.8', '$364compare_op.11']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=380, inst=STORE_FAST(arg=14, lineno=202)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$370binary_subscr.12']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=382, inst=LOAD_FAST(arg=14, lineno=203)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=384, inst=LOAD_ATTR(arg=3, lineno=203)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$non_zero_dists382.13']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=394, inst=LOAD_CONST(arg=1, lineno=203)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$384load_attr.14']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=396, inst=BINARY_SUBSCR(arg=None, lineno=203)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$384load_attr.14', '$const394.15']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=406, inst=LOAD_FAST(arg=3, lineno=203)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$396binary_subscr.16']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=408, inst=COMPARE_OP(arg=5, lineno=203)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$396binary_subscr.16', '$local_connectivity406.17']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=414, inst=POP_JUMP_FORWARD_IF_FALSE(arg=122, lineno=203)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi318.0', '$408compare_op.18']
2023-11-07 09:01:26,018 [DEBUG] end state. edges=[Edge(pc=416, stack=('$phi318.0',), blockstack=(), npush=0), Edge(pc=660, stack=('$phi318.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,018 [DEBUG] pending: deque([State(pc_initial=416 nstack_initial=1), State(pc_initial=660 nstack_initial=1)])
2023-11-07 09:01:26,018 [DEBUG] stack: ['$phi416.0']
2023-11-07 09:01:26,018 [DEBUG] state.pc_initial: State(pc_initial=416 nstack_initial=1)
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=416, inst=LOAD_GLOBAL(arg=17, lineno=204)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=428, inst=LOAD_GLOBAL(arg=1, lineno=204)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0', '$null$416.2', '$416load_global.1']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=440, inst=LOAD_ATTR(arg=9, lineno=204)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0', '$null$416.2', '$416load_global.1', '$null$428.4', '$428load_global.3']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=450, inst=LOAD_FAST(arg=3, lineno=204)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0', '$null$416.2', '$416load_global.1', '$null$428.4', '$440load_attr.5']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=452, inst=PRECALL(arg=1, lineno=204)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0', '$null$416.2', '$416load_global.1', '$null$428.4', '$440load_attr.5', '$local_connectivity450.6']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=456, inst=CALL(arg=1, lineno=204)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0', '$null$416.2', '$416load_global.1', '$null$428.4', '$440load_attr.5', '$local_connectivity450.6']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=466, inst=PRECALL(arg=1, lineno=204)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0', '$null$416.2', '$416load_global.1', '$456call.7']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=470, inst=CALL(arg=1, lineno=204)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0', '$null$416.2', '$416load_global.1', '$456call.7']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=480, inst=STORE_FAST(arg=15, lineno=204)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0', '$470call.8']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=482, inst=LOAD_FAST(arg=3, lineno=205)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=484, inst=LOAD_FAST(arg=15, lineno=205)
2023-11-07 09:01:26,018 [DEBUG] stack ['$phi416.0', '$local_connectivity482.9']
2023-11-07 09:01:26,018 [DEBUG] dispatch pc=486, inst=BINARY_OP(arg=10, lineno=205)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi416.0', '$local_connectivity482.9', '$index484.10']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=490, inst=STORE_FAST(arg=16, lineno=205)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi416.0', '$binop_sub486.11']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=492, inst=LOAD_FAST(arg=15, lineno=206)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi416.0']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=494, inst=LOAD_CONST(arg=1, lineno=206)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi416.0', '$index492.12']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=496, inst=COMPARE_OP(arg=4, lineno=206)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi416.0', '$index492.12', '$const494.13']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=502, inst=POP_JUMP_FORWARD_IF_FALSE(arg=63, lineno=206)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi416.0', '$496compare_op.14']
2023-11-07 09:01:26,019 [DEBUG] end state. edges=[Edge(pc=504, stack=('$phi416.0',), blockstack=(), npush=0), Edge(pc=630, stack=('$phi416.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,019 [DEBUG] pending: deque([State(pc_initial=660 nstack_initial=1), State(pc_initial=504 nstack_initial=1), State(pc_initial=630 nstack_initial=1)])
2023-11-07 09:01:26,019 [DEBUG] stack: ['$phi660.0']
2023-11-07 09:01:26,019 [DEBUG] state.pc_initial: State(pc_initial=660 nstack_initial=1)
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=660, inst=LOAD_FAST(arg=14, lineno=214)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi660.0']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=662, inst=LOAD_ATTR(arg=3, lineno=214)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi660.0', '$non_zero_dists660.1']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=672, inst=LOAD_CONST(arg=1, lineno=214)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi660.0', '$662load_attr.2']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=674, inst=BINARY_SUBSCR(arg=None, lineno=214)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi660.0', '$662load_attr.2', '$const672.3']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=684, inst=LOAD_CONST(arg=1, lineno=214)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi660.0', '$674binary_subscr.4']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=686, inst=COMPARE_OP(arg=4, lineno=214)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi660.0', '$674binary_subscr.4', '$const684.5']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=692, inst=POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=214)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi660.0', '$686compare_op.6']
2023-11-07 09:01:26,019 [DEBUG] end state. edges=[Edge(pc=694, stack=('$phi660.0',), blockstack=(), npush=0), Edge(pc=740, stack=('$phi660.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,019 [DEBUG] pending: deque([State(pc_initial=504 nstack_initial=1), State(pc_initial=630 nstack_initial=1), State(pc_initial=694 nstack_initial=1), State(pc_initial=740 nstack_initial=1)])
2023-11-07 09:01:26,019 [DEBUG] stack: ['$phi504.0']
2023-11-07 09:01:26,019 [DEBUG] state.pc_initial: State(pc_initial=504 nstack_initial=1)
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=504, inst=LOAD_FAST(arg=14, lineno=207)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=506, inst=LOAD_FAST(arg=15, lineno=207)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0', '$non_zero_dists504.1']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=508, inst=LOAD_CONST(arg=5, lineno=207)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0', '$non_zero_dists504.1', '$index506.2']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=510, inst=BINARY_OP(arg=10, lineno=207)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0', '$non_zero_dists504.1', '$index506.2', '$const508.3']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=514, inst=BINARY_SUBSCR(arg=None, lineno=207)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0', '$non_zero_dists504.1', '$binop_sub510.4']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=524, inst=LOAD_FAST(arg=6, lineno=207)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0', '$514binary_subscr.5']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=526, inst=LOAD_FAST(arg=9, lineno=207)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0', '$514binary_subscr.5', '$rho524.6']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=528, inst=STORE_SUBSCR(arg=None, lineno=207)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0', '$514binary_subscr.5', '$rho524.6', '$i526.7']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=532, inst=LOAD_FAST(arg=16, lineno=208)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=534, inst=LOAD_GLOBAL(arg=20, lineno=208)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0', '$interpolation532.8']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=546, inst=COMPARE_OP(arg=4, lineno=208)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0', '$interpolation532.8', '$534load_global.9']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=552, inst=POP_JUMP_FORWARD_IF_FALSE(arg=37, lineno=208)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi504.0', '$546compare_op.10']
2023-11-07 09:01:26,019 [DEBUG] end state. edges=[Edge(pc=554, stack=('$phi504.0',), blockstack=(), npush=0), Edge(pc=628, stack=('$phi504.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,019 [DEBUG] pending: deque([State(pc_initial=630 nstack_initial=1), State(pc_initial=694 nstack_initial=1), State(pc_initial=740 nstack_initial=1), State(pc_initial=554 nstack_initial=1), State(pc_initial=628 nstack_initial=1)])
2023-11-07 09:01:26,019 [DEBUG] stack: ['$phi630.0']
2023-11-07 09:01:26,019 [DEBUG] state.pc_initial: State(pc_initial=630 nstack_initial=1)
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=630, inst=LOAD_FAST(arg=16, lineno=213)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi630.0']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=632, inst=LOAD_FAST(arg=14, lineno=213)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi630.0', '$interpolation630.1']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=634, inst=LOAD_CONST(arg=1, lineno=213)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi630.0', '$interpolation630.1', '$non_zero_dists632.2']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=636, inst=BINARY_SUBSCR(arg=None, lineno=213)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi630.0', '$interpolation630.1', '$non_zero_dists632.2', '$const634.3']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=646, inst=BINARY_OP(arg=5, lineno=213)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi630.0', '$interpolation630.1', '$636binary_subscr.4']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=650, inst=LOAD_FAST(arg=6, lineno=213)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi630.0', '$binop_mul646.5']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=652, inst=LOAD_FAST(arg=9, lineno=213)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi630.0', '$binop_mul646.5', '$rho650.6']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=654, inst=STORE_SUBSCR(arg=None, lineno=213)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi630.0', '$binop_mul646.5', '$rho650.6', '$i652.7']
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=658, inst=JUMP_FORWARD(arg=40, lineno=213)
2023-11-07 09:01:26,019 [DEBUG] stack ['$phi630.0']
2023-11-07 09:01:26,019 [DEBUG] end state. edges=[Edge(pc=740, stack=('$phi630.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,019 [DEBUG] pending: deque([State(pc_initial=694 nstack_initial=1), State(pc_initial=740 nstack_initial=1), State(pc_initial=554 nstack_initial=1), State(pc_initial=628 nstack_initial=1), State(pc_initial=740 nstack_initial=1)])
2023-11-07 09:01:26,019 [DEBUG] stack: ['$phi694.0']
2023-11-07 09:01:26,019 [DEBUG] state.pc_initial: State(pc_initial=694 nstack_initial=1)
2023-11-07 09:01:26,019 [DEBUG] dispatch pc=694, inst=LOAD_GLOBAL(arg=1, lineno=215)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi694.0']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=706, inst=LOAD_ATTR(arg=11, lineno=215)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi694.0', '$null$694.2', '$694load_global.1']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=716, inst=LOAD_FAST(arg=14, lineno=215)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi694.0', '$null$694.2', '$706load_attr.3']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=718, inst=PRECALL(arg=1, lineno=215)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi694.0', '$null$694.2', '$706load_attr.3', '$non_zero_dists716.4']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=722, inst=CALL(arg=1, lineno=215)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi694.0', '$null$694.2', '$706load_attr.3', '$non_zero_dists716.4']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=732, inst=LOAD_FAST(arg=6, lineno=215)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi694.0', '$722call.5']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=734, inst=LOAD_FAST(arg=9, lineno=215)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi694.0', '$722call.5', '$rho732.6']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=736, inst=STORE_SUBSCR(arg=None, lineno=215)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi694.0', '$722call.5', '$rho732.6', '$i734.7']
2023-11-07 09:01:26,020 [DEBUG] end state. edges=[Edge(pc=740, stack=('$phi694.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,020 [DEBUG] pending: deque([State(pc_initial=740 nstack_initial=1), State(pc_initial=554 nstack_initial=1), State(pc_initial=628 nstack_initial=1), State(pc_initial=740 nstack_initial=1), State(pc_initial=740 nstack_initial=1)])
2023-11-07 09:01:26,020 [DEBUG] stack: ['$phi740.0']
2023-11-07 09:01:26,020 [DEBUG] state.pc_initial: State(pc_initial=740 nstack_initial=1)
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=740, inst=LOAD_GLOBAL(arg=13, lineno=217)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi740.0']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=752, inst=LOAD_FAST(arg=2, lineno=217)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi740.0', '$null$740.2', '$740load_global.1']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=754, inst=PRECALL(arg=1, lineno=217)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi740.0', '$null$740.2', '$740load_global.1', '$n_iter752.3']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=758, inst=CALL(arg=1, lineno=217)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi740.0', '$null$740.2', '$740load_global.1', '$n_iter752.3']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=768, inst=GET_ITER(arg=None, lineno=217)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi740.0', '$758call.4']
2023-11-07 09:01:26,020 [DEBUG] end state. edges=[Edge(pc=770, stack=('$phi740.0', '$768get_iter.5'), blockstack=(), npush=0)]
2023-11-07 09:01:26,020 [DEBUG] pending: deque([State(pc_initial=554 nstack_initial=1), State(pc_initial=628 nstack_initial=1), State(pc_initial=740 nstack_initial=1), State(pc_initial=740 nstack_initial=1), State(pc_initial=770 nstack_initial=2)])
2023-11-07 09:01:26,020 [DEBUG] stack: ['$phi554.0']
2023-11-07 09:01:26,020 [DEBUG] state.pc_initial: State(pc_initial=554 nstack_initial=1)
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=554, inst=LOAD_FAST(arg=6, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=556, inst=LOAD_FAST(arg=9, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=558, inst=COPY(arg=2, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=560, inst=COPY(arg=2, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$rho554.1']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=562, inst=BINARY_SUBSCR(arg=None, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$rho554.1', '$i556.2']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=572, inst=LOAD_FAST(arg=16, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=574, inst=LOAD_FAST(arg=14, lineno=210)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$interpolation572.4']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=576, inst=LOAD_FAST(arg=15, lineno=210)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$interpolation572.4', '$non_zero_dists574.5']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=578, inst=BINARY_SUBSCR(arg=None, lineno=210)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$interpolation572.4', '$non_zero_dists574.5', '$index576.6']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=588, inst=LOAD_FAST(arg=14, lineno=210)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$interpolation572.4', '$578binary_subscr.7']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=590, inst=LOAD_FAST(arg=15, lineno=210)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$interpolation572.4', '$578binary_subscr.7', '$non_zero_dists588.8']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=592, inst=LOAD_CONST(arg=5, lineno=210)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$interpolation572.4', '$578binary_subscr.7', '$non_zero_dists588.8', '$index590.9']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=594, inst=BINARY_OP(arg=10, lineno=210)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$interpolation572.4', '$578binary_subscr.7', '$non_zero_dists588.8', '$index590.9', '$const592.10']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=598, inst=BINARY_SUBSCR(arg=None, lineno=210)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$interpolation572.4', '$578binary_subscr.7', '$non_zero_dists588.8', '$binop_sub594.11']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=608, inst=BINARY_OP(arg=10, lineno=210)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$interpolation572.4', '$578binary_subscr.7', '$598binary_subscr.12']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=612, inst=BINARY_OP(arg=5, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$interpolation572.4', '$binop_sub608.13']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=616, inst=BINARY_OP(arg=13, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$562binary_subscr.3', '$binop_mul612.14']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=620, inst=SWAP(arg=3, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$rho554.1', '$i556.2', '$binop_iadd616.15']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=622, inst=SWAP(arg=2, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$binop_iadd616.15', '$i556.2', '$rho554.1']
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=624, inst=STORE_SUBSCR(arg=None, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi554.0', '$binop_iadd616.15', '$rho554.1', '$i556.2']
2023-11-07 09:01:26,020 [DEBUG] end state. edges=[Edge(pc=628, stack=('$phi554.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,020 [DEBUG] pending: deque([State(pc_initial=628 nstack_initial=1), State(pc_initial=740 nstack_initial=1), State(pc_initial=740 nstack_initial=1), State(pc_initial=770 nstack_initial=2), State(pc_initial=628 nstack_initial=1)])
2023-11-07 09:01:26,020 [DEBUG] stack: ['$phi628.0']
2023-11-07 09:01:26,020 [DEBUG] state.pc_initial: State(pc_initial=628 nstack_initial=1)
2023-11-07 09:01:26,020 [DEBUG] dispatch pc=628, inst=JUMP_FORWARD(arg=55, lineno=209)
2023-11-07 09:01:26,020 [DEBUG] stack ['$phi628.0']
2023-11-07 09:01:26,020 [DEBUG] end state. edges=[Edge(pc=740, stack=('$phi628.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,020 [DEBUG] pending: deque([State(pc_initial=740 nstack_initial=1), State(pc_initial=740 nstack_initial=1), State(pc_initial=770 nstack_initial=2), State(pc_initial=628 nstack_initial=1), State(pc_initial=740 nstack_initial=1)])
2023-11-07 09:01:26,020 [DEBUG] pending: deque([State(pc_initial=740 nstack_initial=1), State(pc_initial=770 nstack_initial=2), State(pc_initial=628 nstack_initial=1), State(pc_initial=740 nstack_initial=1)])
2023-11-07 09:01:26,020 [DEBUG] pending: deque([State(pc_initial=770 nstack_initial=2), State(pc_initial=628 nstack_initial=1), State(pc_initial=740 nstack_initial=1)])
2023-11-07 09:01:26,021 [DEBUG] stack: ['$phi770.0', '$phi770.1']
2023-11-07 09:01:26,021 [DEBUG] state.pc_initial: State(pc_initial=770 nstack_initial=2)
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=770, inst=FOR_ITER(arg=170, lineno=217)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi770.0', '$phi770.1']
2023-11-07 09:01:26,021 [DEBUG] end state. edges=[Edge(pc=1112, stack=('$phi770.0',), blockstack=(), npush=0), Edge(pc=772, stack=('$phi770.0', '$phi770.1', '$770for_iter.3'), blockstack=(), npush=0)]
2023-11-07 09:01:26,021 [DEBUG] pending: deque([State(pc_initial=628 nstack_initial=1), State(pc_initial=740 nstack_initial=1), State(pc_initial=1112 nstack_initial=1), State(pc_initial=772 nstack_initial=3)])
2023-11-07 09:01:26,021 [DEBUG] pending: deque([State(pc_initial=740 nstack_initial=1), State(pc_initial=1112 nstack_initial=1), State(pc_initial=772 nstack_initial=3)])
2023-11-07 09:01:26,021 [DEBUG] pending: deque([State(pc_initial=1112 nstack_initial=1), State(pc_initial=772 nstack_initial=3)])
2023-11-07 09:01:26,021 [DEBUG] stack: ['$phi1112.0']
2023-11-07 09:01:26,021 [DEBUG] state.pc_initial: State(pc_initial=1112 nstack_initial=1)
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1112, inst=LOAD_FAST(arg=12, lineno=240)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1112.0']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1114, inst=LOAD_FAST(arg=7, lineno=240)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1112.0', '$mid1112.1']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1116, inst=LOAD_FAST(arg=9, lineno=240)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1112.0', '$mid1112.1', '$result1114.2']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1118, inst=STORE_SUBSCR(arg=None, lineno=240)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1112.0', '$mid1112.1', '$result1114.2', '$i1116.3']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1122, inst=LOAD_FAST(arg=6, lineno=243)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1112.0']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1124, inst=LOAD_FAST(arg=9, lineno=243)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1112.0', '$rho1122.4']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1126, inst=BINARY_SUBSCR(arg=None, lineno=243)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1112.0', '$rho1122.4', '$i1124.5']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1136, inst=LOAD_CONST(arg=3, lineno=243)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1112.0', '$1126binary_subscr.6']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1138, inst=COMPARE_OP(arg=4, lineno=243)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1112.0', '$1126binary_subscr.6', '$const1136.7']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1144, inst=POP_JUMP_FORWARD_IF_FALSE(arg=55, lineno=243)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1112.0', '$1138compare_op.8']
2023-11-07 09:01:26,021 [DEBUG] end state. edges=[Edge(pc=1146, stack=('$phi1112.0',), blockstack=(), npush=0), Edge(pc=1256, stack=('$phi1112.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,021 [DEBUG] pending: deque([State(pc_initial=772 nstack_initial=3), State(pc_initial=1146 nstack_initial=1), State(pc_initial=1256 nstack_initial=1)])
2023-11-07 09:01:26,021 [DEBUG] stack: ['$phi772.0', '$phi772.1', '$phi772.2']
2023-11-07 09:01:26,021 [DEBUG] state.pc_initial: State(pc_initial=772 nstack_initial=3)
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=772, inst=STORE_FAST(arg=17, lineno=217)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1', '$phi772.2']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=774, inst=LOAD_CONST(arg=3, lineno=219)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=776, inst=STORE_FAST(arg=18, lineno=219)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1', '$const774.3']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=778, inst=LOAD_GLOBAL(arg=13, lineno=220)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=790, inst=LOAD_CONST(arg=5, lineno=220)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1', '$null$778.5', '$778load_global.4']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=792, inst=LOAD_FAST(arg=0, lineno=220)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1', '$null$778.5', '$778load_global.4', '$const790.6']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=794, inst=LOAD_ATTR(arg=3, lineno=220)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1', '$null$778.5', '$778load_global.4', '$const790.6', '$distances792.7']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=804, inst=LOAD_CONST(arg=5, lineno=220)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1', '$null$778.5', '$778load_global.4', '$const790.6', '$794load_attr.8']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=806, inst=BINARY_SUBSCR(arg=None, lineno=220)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1', '$null$778.5', '$778load_global.4', '$const790.6', '$794load_attr.8', '$const804.9']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=816, inst=PRECALL(arg=2, lineno=220)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1', '$null$778.5', '$778load_global.4', '$const790.6', '$806binary_subscr.10']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=820, inst=CALL(arg=2, lineno=220)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1', '$null$778.5', '$778load_global.4', '$const790.6', '$806binary_subscr.10']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=830, inst=GET_ITER(arg=None, lineno=220)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi772.0', '$phi772.1', '$820call.11']
2023-11-07 09:01:26,021 [DEBUG] end state. edges=[Edge(pc=832, stack=('$phi772.0', '$phi772.1', '$830get_iter.12'), blockstack=(), npush=0)]
2023-11-07 09:01:26,021 [DEBUG] pending: deque([State(pc_initial=1146 nstack_initial=1), State(pc_initial=1256 nstack_initial=1), State(pc_initial=832 nstack_initial=3)])
2023-11-07 09:01:26,021 [DEBUG] stack: ['$phi1146.0']
2023-11-07 09:01:26,021 [DEBUG] state.pc_initial: State(pc_initial=1146 nstack_initial=1)
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1146, inst=LOAD_GLOBAL(arg=1, lineno=244)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1146.0']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1158, inst=LOAD_ATTR(arg=5, lineno=244)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1146.0', '$null$1146.2', '$1146load_global.1']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1168, inst=LOAD_FAST(arg=13, lineno=244)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1146.0', '$null$1146.2', '$1158load_attr.3']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1170, inst=PRECALL(arg=1, lineno=244)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1146.0', '$null$1146.2', '$1158load_attr.3', '$ith_distances1168.4']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1174, inst=CALL(arg=1, lineno=244)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1146.0', '$null$1146.2', '$1158load_attr.3', '$ith_distances1168.4']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1184, inst=STORE_FAST(arg=21, lineno=244)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1146.0', '$1174call.5']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1186, inst=LOAD_FAST(arg=7, lineno=245)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1146.0']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1188, inst=LOAD_FAST(arg=9, lineno=245)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1146.0', '$result1186.6']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1190, inst=BINARY_SUBSCR(arg=None, lineno=245)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1146.0', '$result1186.6', '$i1188.7']
2023-11-07 09:01:26,021 [DEBUG] dispatch pc=1200, inst=LOAD_GLOBAL(arg=28, lineno=245)
2023-11-07 09:01:26,021 [DEBUG] stack ['$phi1146.0', '$1190binary_subscr.8']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1212, inst=LOAD_FAST(arg=21, lineno=245)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1146.0', '$1190binary_subscr.8', '$1200load_global.9']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1214, inst=BINARY_OP(arg=5, lineno=245)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1146.0', '$1190binary_subscr.8', '$1200load_global.9', '$mean_ith_distances1212.10']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1218, inst=COMPARE_OP(arg=0, lineno=245)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1146.0', '$1190binary_subscr.8', '$binop_mul1214.11']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1224, inst=POP_JUMP_FORWARD_IF_FALSE(arg=13, lineno=245)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1146.0', '$1218compare_op.12']
2023-11-07 09:01:26,022 [DEBUG] end state. edges=[Edge(pc=1226, stack=('$phi1146.0',), blockstack=(), npush=0), Edge(pc=1252, stack=('$phi1146.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,022 [DEBUG] pending: deque([State(pc_initial=1256 nstack_initial=1), State(pc_initial=832 nstack_initial=3), State(pc_initial=1226 nstack_initial=1), State(pc_initial=1252 nstack_initial=1)])
2023-11-07 09:01:26,022 [DEBUG] stack: ['$phi1256.0']
2023-11-07 09:01:26,022 [DEBUG] state.pc_initial: State(pc_initial=1256 nstack_initial=1)
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1256, inst=LOAD_FAST(arg=7, lineno=248)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1256.0']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1258, inst=LOAD_FAST(arg=9, lineno=248)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1256.0', '$result1256.1']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1260, inst=BINARY_SUBSCR(arg=None, lineno=248)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1256.0', '$result1256.1', '$i1258.2']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1270, inst=LOAD_GLOBAL(arg=28, lineno=248)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1256.0', '$1260binary_subscr.3']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1282, inst=LOAD_FAST(arg=8, lineno=248)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1256.0', '$1260binary_subscr.3', '$1270load_global.4']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1284, inst=BINARY_OP(arg=5, lineno=248)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1256.0', '$1260binary_subscr.3', '$1270load_global.4', '$mean_distances1282.5']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1288, inst=COMPARE_OP(arg=0, lineno=248)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1256.0', '$1260binary_subscr.3', '$binop_mul1284.6']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1294, inst=POP_JUMP_FORWARD_IF_FALSE(arg=13, lineno=248)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1256.0', '$1288compare_op.7']
2023-11-07 09:01:26,022 [DEBUG] end state. edges=[Edge(pc=1296, stack=('$phi1256.0',), blockstack=(), npush=0), Edge(pc=1322, stack=('$phi1256.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,022 [DEBUG] pending: deque([State(pc_initial=832 nstack_initial=3), State(pc_initial=1226 nstack_initial=1), State(pc_initial=1252 nstack_initial=1), State(pc_initial=1296 nstack_initial=1), State(pc_initial=1322 nstack_initial=1)])
2023-11-07 09:01:26,022 [DEBUG] stack: ['$phi832.0', '$phi832.1', '$phi832.2']
2023-11-07 09:01:26,022 [DEBUG] state.pc_initial: State(pc_initial=832 nstack_initial=3)
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=832, inst=FOR_ITER(arg=60, lineno=220)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi832.0', '$phi832.1', '$phi832.2']
2023-11-07 09:01:26,022 [DEBUG] end state. edges=[Edge(pc=954, stack=('$phi832.0', '$phi832.1'), blockstack=(), npush=0), Edge(pc=834, stack=('$phi832.0', '$phi832.1', '$phi832.2', '$832for_iter.4'), blockstack=(), npush=0)]
2023-11-07 09:01:26,022 [DEBUG] pending: deque([State(pc_initial=1226 nstack_initial=1), State(pc_initial=1252 nstack_initial=1), State(pc_initial=1296 nstack_initial=1), State(pc_initial=1322 nstack_initial=1), State(pc_initial=954 nstack_initial=2), State(pc_initial=834 nstack_initial=4)])
2023-11-07 09:01:26,022 [DEBUG] stack: ['$phi1226.0']
2023-11-07 09:01:26,022 [DEBUG] state.pc_initial: State(pc_initial=1226 nstack_initial=1)
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1226, inst=LOAD_GLOBAL(arg=28, lineno=246)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1226.0']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1238, inst=LOAD_FAST(arg=21, lineno=246)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1226.0', '$1226load_global.1']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1240, inst=BINARY_OP(arg=5, lineno=246)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1226.0', '$1226load_global.1', '$mean_ith_distances1238.2']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1244, inst=LOAD_FAST(arg=7, lineno=246)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1226.0', '$binop_mul1240.3']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1246, inst=LOAD_FAST(arg=9, lineno=246)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1226.0', '$binop_mul1240.3', '$result1244.4']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1248, inst=STORE_SUBSCR(arg=None, lineno=246)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1226.0', '$binop_mul1240.3', '$result1244.4', '$i1246.5']
2023-11-07 09:01:26,022 [DEBUG] end state. edges=[Edge(pc=1252, stack=('$phi1226.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,022 [DEBUG] pending: deque([State(pc_initial=1252 nstack_initial=1), State(pc_initial=1296 nstack_initial=1), State(pc_initial=1322 nstack_initial=1), State(pc_initial=954 nstack_initial=2), State(pc_initial=834 nstack_initial=4), State(pc_initial=1252 nstack_initial=1)])
2023-11-07 09:01:26,022 [DEBUG] stack: ['$phi1252.0']
2023-11-07 09:01:26,022 [DEBUG] state.pc_initial: State(pc_initial=1252 nstack_initial=1)
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1252, inst=NOP(arg=1, lineno=246)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1252.0']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1254, inst=JUMP_BACKWARD(arg=471, lineno=246)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1252.0']
2023-11-07 09:01:26,022 [DEBUG] end state. edges=[Edge(pc=314, stack=('$phi1252.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,022 [DEBUG] pending: deque([State(pc_initial=1296 nstack_initial=1), State(pc_initial=1322 nstack_initial=1), State(pc_initial=954 nstack_initial=2), State(pc_initial=834 nstack_initial=4), State(pc_initial=1252 nstack_initial=1), State(pc_initial=314 nstack_initial=1)])
2023-11-07 09:01:26,022 [DEBUG] stack: ['$phi1296.0']
2023-11-07 09:01:26,022 [DEBUG] state.pc_initial: State(pc_initial=1296 nstack_initial=1)
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1296, inst=LOAD_GLOBAL(arg=28, lineno=249)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1296.0']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1308, inst=LOAD_FAST(arg=8, lineno=249)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1296.0', '$1296load_global.1']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1310, inst=BINARY_OP(arg=5, lineno=249)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1296.0', '$1296load_global.1', '$mean_distances1308.2']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1314, inst=LOAD_FAST(arg=7, lineno=249)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1296.0', '$binop_mul1310.3']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1316, inst=LOAD_FAST(arg=9, lineno=249)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1296.0', '$binop_mul1310.3', '$result1314.4']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1318, inst=STORE_SUBSCR(arg=None, lineno=249)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1296.0', '$binop_mul1310.3', '$result1314.4', '$i1316.5']
2023-11-07 09:01:26,022 [DEBUG] end state. edges=[Edge(pc=1322, stack=('$phi1296.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,022 [DEBUG] pending: deque([State(pc_initial=1322 nstack_initial=1), State(pc_initial=954 nstack_initial=2), State(pc_initial=834 nstack_initial=4), State(pc_initial=1252 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=1322 nstack_initial=1)])
2023-11-07 09:01:26,022 [DEBUG] stack: ['$phi1322.0']
2023-11-07 09:01:26,022 [DEBUG] state.pc_initial: State(pc_initial=1322 nstack_initial=1)
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1322, inst=NOP(arg=1, lineno=249)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1322.0']
2023-11-07 09:01:26,022 [DEBUG] dispatch pc=1324, inst=JUMP_BACKWARD(arg=506, lineno=249)
2023-11-07 09:01:26,022 [DEBUG] stack ['$phi1322.0']
2023-11-07 09:01:26,022 [DEBUG] end state. edges=[Edge(pc=314, stack=('$phi1322.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,023 [DEBUG] pending: deque([State(pc_initial=954 nstack_initial=2), State(pc_initial=834 nstack_initial=4), State(pc_initial=1252 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=1322 nstack_initial=1), State(pc_initial=314 nstack_initial=1)])
2023-11-07 09:01:26,023 [DEBUG] stack: ['$phi954.0', '$phi954.1']
2023-11-07 09:01:26,023 [DEBUG] state.pc_initial: State(pc_initial=954 nstack_initial=2)
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=954, inst=LOAD_GLOBAL(arg=1, lineno=227)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi954.0', '$phi954.1']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=966, inst=LOAD_ATTR(arg=13, lineno=227)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi954.0', '$phi954.1', '$null$954.3', '$954load_global.2']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=976, inst=LOAD_FAST(arg=18, lineno=227)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi954.0', '$phi954.1', '$null$954.3', '$966load_attr.4']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=978, inst=LOAD_FAST(arg=5, lineno=227)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi954.0', '$phi954.1', '$null$954.3', '$966load_attr.4', '$psum976.5']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=980, inst=BINARY_OP(arg=10, lineno=227)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi954.0', '$phi954.1', '$null$954.3', '$966load_attr.4', '$psum976.5', '$target978.6']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=984, inst=PRECALL(arg=1, lineno=227)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi954.0', '$phi954.1', '$null$954.3', '$966load_attr.4', '$binop_sub980.7']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=988, inst=CALL(arg=1, lineno=227)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi954.0', '$phi954.1', '$null$954.3', '$966load_attr.4', '$binop_sub980.7']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=998, inst=LOAD_GLOBAL(arg=20, lineno=227)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi954.0', '$phi954.1', '$988call.8']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=1010, inst=COMPARE_OP(arg=0, lineno=227)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi954.0', '$phi954.1', '$988call.8', '$998load_global.9']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=1016, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=227)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi954.0', '$phi954.1', '$1010compare_op.10']
2023-11-07 09:01:26,023 [DEBUG] end state. edges=[Edge(pc=1018, stack=('$phi954.0', '$phi954.1'), blockstack=(), npush=0), Edge(pc=1022, stack=('$phi954.0', '$phi954.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,023 [DEBUG] pending: deque([State(pc_initial=834 nstack_initial=4), State(pc_initial=1252 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=1322 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=1018 nstack_initial=2), State(pc_initial=1022 nstack_initial=2)])
2023-11-07 09:01:26,023 [DEBUG] stack: ['$phi834.0', '$phi834.1', '$phi834.2', '$phi834.3']
2023-11-07 09:01:26,023 [DEBUG] state.pc_initial: State(pc_initial=834 nstack_initial=4)
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=834, inst=STORE_FAST(arg=19, lineno=220)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$phi834.3']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=836, inst=LOAD_FAST(arg=0, lineno=221)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=838, inst=LOAD_FAST(arg=9, lineno=221)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$distances836.4']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=840, inst=LOAD_FAST(arg=19, lineno=221)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$distances836.4', '$i838.5']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=842, inst=BUILD_TUPLE(arg=2, lineno=221)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$distances836.4', '$i838.5', '$j840.6']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=844, inst=BINARY_SUBSCR(arg=None, lineno=221)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$distances836.4', '$842build_tuple.7']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=854, inst=LOAD_FAST(arg=6, lineno=221)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$844binary_subscr.8']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=856, inst=LOAD_FAST(arg=9, lineno=221)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$844binary_subscr.8', '$rho854.9']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=858, inst=BINARY_SUBSCR(arg=None, lineno=221)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$844binary_subscr.8', '$rho854.9', '$i856.10']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=868, inst=BINARY_OP(arg=10, lineno=221)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$844binary_subscr.8', '$858binary_subscr.11']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=872, inst=STORE_FAST(arg=20, lineno=221)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$binop_sub868.12']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=874, inst=LOAD_FAST(arg=20, lineno=222)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=876, inst=LOAD_CONST(arg=1, lineno=222)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$d874.13']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=878, inst=COMPARE_OP(arg=4, lineno=222)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$d874.13', '$const876.14']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=884, inst=POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=222)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi834.0', '$phi834.1', '$phi834.2', '$878compare_op.15']
2023-11-07 09:01:26,023 [DEBUG] end state. edges=[Edge(pc=886, stack=('$phi834.0', '$phi834.1', '$phi834.2'), blockstack=(), npush=0), Edge(pc=942, stack=('$phi834.0', '$phi834.1', '$phi834.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,023 [DEBUG] pending: deque([State(pc_initial=1252 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=1322 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=1018 nstack_initial=2), State(pc_initial=1022 nstack_initial=2), State(pc_initial=886 nstack_initial=3), State(pc_initial=942 nstack_initial=3)])
2023-11-07 09:01:26,023 [DEBUG] pending: deque([State(pc_initial=314 nstack_initial=1), State(pc_initial=1322 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=1018 nstack_initial=2), State(pc_initial=1022 nstack_initial=2), State(pc_initial=886 nstack_initial=3), State(pc_initial=942 nstack_initial=3)])
2023-11-07 09:01:26,023 [DEBUG] pending: deque([State(pc_initial=1322 nstack_initial=1), State(pc_initial=314 nstack_initial=1), State(pc_initial=1018 nstack_initial=2), State(pc_initial=1022 nstack_initial=2), State(pc_initial=886 nstack_initial=3), State(pc_initial=942 nstack_initial=3)])
2023-11-07 09:01:26,023 [DEBUG] pending: deque([State(pc_initial=314 nstack_initial=1), State(pc_initial=1018 nstack_initial=2), State(pc_initial=1022 nstack_initial=2), State(pc_initial=886 nstack_initial=3), State(pc_initial=942 nstack_initial=3)])
2023-11-07 09:01:26,023 [DEBUG] pending: deque([State(pc_initial=1018 nstack_initial=2), State(pc_initial=1022 nstack_initial=2), State(pc_initial=886 nstack_initial=3), State(pc_initial=942 nstack_initial=3)])
2023-11-07 09:01:26,023 [DEBUG] stack: ['$phi1018.0', '$phi1018.1']
2023-11-07 09:01:26,023 [DEBUG] state.pc_initial: State(pc_initial=1018 nstack_initial=2)
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=1018, inst=POP_TOP(arg=None, lineno=228)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi1018.0', '$phi1018.1']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=1020, inst=JUMP_FORWARD(arg=45, lineno=228)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi1018.0']
2023-11-07 09:01:26,023 [DEBUG] end state. edges=[Edge(pc=1112, stack=('$phi1018.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,023 [DEBUG] pending: deque([State(pc_initial=1022 nstack_initial=2), State(pc_initial=886 nstack_initial=3), State(pc_initial=942 nstack_initial=3), State(pc_initial=1112 nstack_initial=1)])
2023-11-07 09:01:26,023 [DEBUG] stack: ['$phi1022.0', '$phi1022.1']
2023-11-07 09:01:26,023 [DEBUG] state.pc_initial: State(pc_initial=1022 nstack_initial=2)
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=1022, inst=LOAD_FAST(arg=18, lineno=230)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi1022.0', '$phi1022.1']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=1024, inst=LOAD_FAST(arg=5, lineno=230)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi1022.0', '$phi1022.1', '$psum1022.2']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=1026, inst=COMPARE_OP(arg=4, lineno=230)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi1022.0', '$phi1022.1', '$psum1022.2', '$target1024.3']
2023-11-07 09:01:26,023 [DEBUG] dispatch pc=1032, inst=POP_JUMP_FORWARD_IF_FALSE(arg=11, lineno=230)
2023-11-07 09:01:26,023 [DEBUG] stack ['$phi1022.0', '$phi1022.1', '$1026compare_op.4']
2023-11-07 09:01:26,023 [DEBUG] end state. edges=[Edge(pc=1034, stack=('$phi1022.0', '$phi1022.1'), blockstack=(), npush=0), Edge(pc=1056, stack=('$phi1022.0', '$phi1022.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,024 [DEBUG] pending: deque([State(pc_initial=886 nstack_initial=3), State(pc_initial=942 nstack_initial=3), State(pc_initial=1112 nstack_initial=1), State(pc_initial=1034 nstack_initial=2), State(pc_initial=1056 nstack_initial=2)])
2023-11-07 09:01:26,024 [DEBUG] stack: ['$phi886.0', '$phi886.1', '$phi886.2']
2023-11-07 09:01:26,024 [DEBUG] state.pc_initial: State(pc_initial=886 nstack_initial=3)
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=886, inst=LOAD_FAST(arg=18, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=888, inst=LOAD_GLOBAL(arg=1, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2', '$psum886.3']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=900, inst=LOAD_ATTR(arg=12, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2', '$psum886.3', '$null$888.5', '$888load_global.4']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=910, inst=LOAD_FAST(arg=20, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2', '$psum886.3', '$null$888.5', '$900load_attr.6']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=912, inst=LOAD_FAST(arg=12, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2', '$psum886.3', '$null$888.5', '$900load_attr.6', '$d910.7']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=914, inst=BINARY_OP(arg=11, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2', '$psum886.3', '$null$888.5', '$900load_attr.6', '$d910.7', '$mid912.8']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=918, inst=UNARY_NEGATIVE(arg=None, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2', '$psum886.3', '$null$888.5', '$900load_attr.6', '$binop_truediv914.9']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=920, inst=PRECALL(arg=1, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2', '$psum886.3', '$null$888.5', '$900load_attr.6', '$918unary_negative.10']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=924, inst=CALL(arg=1, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2', '$psum886.3', '$null$888.5', '$900load_attr.6', '$918unary_negative.10']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=934, inst=BINARY_OP(arg=13, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2', '$psum886.3', '$924call.11']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=938, inst=STORE_FAST(arg=18, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2', '$binop_iadd934.12']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=940, inst=JUMP_BACKWARD(arg=55, lineno=223)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi886.0', '$phi886.1', '$phi886.2']
2023-11-07 09:01:26,024 [DEBUG] end state. edges=[Edge(pc=832, stack=('$phi886.0', '$phi886.1', '$phi886.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,024 [DEBUG] pending: deque([State(pc_initial=942 nstack_initial=3), State(pc_initial=1112 nstack_initial=1), State(pc_initial=1034 nstack_initial=2), State(pc_initial=1056 nstack_initial=2), State(pc_initial=832 nstack_initial=3)])
2023-11-07 09:01:26,024 [DEBUG] stack: ['$phi942.0', '$phi942.1', '$phi942.2']
2023-11-07 09:01:26,024 [DEBUG] state.pc_initial: State(pc_initial=942 nstack_initial=3)
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=942, inst=LOAD_FAST(arg=18, lineno=225)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi942.0', '$phi942.1', '$phi942.2']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=944, inst=LOAD_CONST(arg=4, lineno=225)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi942.0', '$phi942.1', '$phi942.2', '$psum942.3']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=946, inst=BINARY_OP(arg=13, lineno=225)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi942.0', '$phi942.1', '$phi942.2', '$psum942.3', '$const944.4']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=950, inst=STORE_FAST(arg=18, lineno=225)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi942.0', '$phi942.1', '$phi942.2', '$binop_iadd946.5']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=952, inst=JUMP_BACKWARD(arg=61, lineno=225)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi942.0', '$phi942.1', '$phi942.2']
2023-11-07 09:01:26,024 [DEBUG] end state. edges=[Edge(pc=832, stack=('$phi942.0', '$phi942.1', '$phi942.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,024 [DEBUG] pending: deque([State(pc_initial=1112 nstack_initial=1), State(pc_initial=1034 nstack_initial=2), State(pc_initial=1056 nstack_initial=2), State(pc_initial=832 nstack_initial=3), State(pc_initial=832 nstack_initial=3)])
2023-11-07 09:01:26,024 [DEBUG] pending: deque([State(pc_initial=1034 nstack_initial=2), State(pc_initial=1056 nstack_initial=2), State(pc_initial=832 nstack_initial=3), State(pc_initial=832 nstack_initial=3)])
2023-11-07 09:01:26,024 [DEBUG] stack: ['$phi1034.0', '$phi1034.1']
2023-11-07 09:01:26,024 [DEBUG] state.pc_initial: State(pc_initial=1034 nstack_initial=2)
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1034, inst=LOAD_FAST(arg=12, lineno=231)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1034.0', '$phi1034.1']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1036, inst=STORE_FAST(arg=11, lineno=231)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1034.0', '$phi1034.1', '$mid1034.2']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1038, inst=LOAD_FAST(arg=10, lineno=232)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1034.0', '$phi1034.1']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1040, inst=LOAD_FAST(arg=11, lineno=232)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1034.0', '$phi1034.1', '$lo1038.3']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1042, inst=BINARY_OP(arg=0, lineno=232)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1034.0', '$phi1034.1', '$lo1038.3', '$hi1040.4']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1046, inst=LOAD_CONST(arg=6, lineno=232)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1034.0', '$phi1034.1', '$binop_add1042.5']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1048, inst=BINARY_OP(arg=11, lineno=232)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1034.0', '$phi1034.1', '$binop_add1042.5', '$const1046.6']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1052, inst=STORE_FAST(arg=12, lineno=232)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1034.0', '$phi1034.1', '$binop_truediv1048.7']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1054, inst=JUMP_BACKWARD(arg=143, lineno=232)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1034.0', '$phi1034.1']
2023-11-07 09:01:26,024 [DEBUG] end state. edges=[Edge(pc=770, stack=('$phi1034.0', '$phi1034.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,024 [DEBUG] pending: deque([State(pc_initial=1056 nstack_initial=2), State(pc_initial=832 nstack_initial=3), State(pc_initial=832 nstack_initial=3), State(pc_initial=770 nstack_initial=2)])
2023-11-07 09:01:26,024 [DEBUG] stack: ['$phi1056.0', '$phi1056.1']
2023-11-07 09:01:26,024 [DEBUG] state.pc_initial: State(pc_initial=1056 nstack_initial=2)
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1056, inst=LOAD_FAST(arg=12, lineno=234)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1056.0', '$phi1056.1']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1058, inst=STORE_FAST(arg=10, lineno=234)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1056.0', '$phi1056.1', '$mid1056.2']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1060, inst=LOAD_FAST(arg=11, lineno=235)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1056.0', '$phi1056.1']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1062, inst=LOAD_GLOBAL(arg=14, lineno=235)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1056.0', '$phi1056.1', '$hi1060.3']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1074, inst=COMPARE_OP(arg=2, lineno=235)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1056.0', '$phi1056.1', '$hi1060.3', '$1062load_global.4']
2023-11-07 09:01:26,024 [DEBUG] dispatch pc=1080, inst=POP_JUMP_FORWARD_IF_FALSE(arg=6, lineno=235)
2023-11-07 09:01:26,024 [DEBUG] stack ['$phi1056.0', '$phi1056.1', '$1074compare_op.5']
2023-11-07 09:01:26,024 [DEBUG] end state. edges=[Edge(pc=1082, stack=('$phi1056.0', '$phi1056.1'), blockstack=(), npush=0), Edge(pc=1094, stack=('$phi1056.0', '$phi1056.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,024 [DEBUG] pending: deque([State(pc_initial=832 nstack_initial=3), State(pc_initial=832 nstack_initial=3), State(pc_initial=770 nstack_initial=2), State(pc_initial=1082 nstack_initial=2), State(pc_initial=1094 nstack_initial=2)])
2023-11-07 09:01:26,024 [DEBUG] pending: deque([State(pc_initial=832 nstack_initial=3), State(pc_initial=770 nstack_initial=2), State(pc_initial=1082 nstack_initial=2), State(pc_initial=1094 nstack_initial=2)])
2023-11-07 09:01:26,025 [DEBUG] pending: deque([State(pc_initial=770 nstack_initial=2), State(pc_initial=1082 nstack_initial=2), State(pc_initial=1094 nstack_initial=2)])
2023-11-07 09:01:26,025 [DEBUG] pending: deque([State(pc_initial=1082 nstack_initial=2), State(pc_initial=1094 nstack_initial=2)])
2023-11-07 09:01:26,025 [DEBUG] stack: ['$phi1082.0', '$phi1082.1']
2023-11-07 09:01:26,025 [DEBUG] state.pc_initial: State(pc_initial=1082 nstack_initial=2)
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1082, inst=LOAD_FAST(arg=12, lineno=236)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1082.0', '$phi1082.1']
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1084, inst=LOAD_CONST(arg=7, lineno=236)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1082.0', '$phi1082.1', '$mid1082.2']
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1086, inst=BINARY_OP(arg=18, lineno=236)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1082.0', '$phi1082.1', '$mid1082.2', '$const1084.3']
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1090, inst=STORE_FAST(arg=12, lineno=236)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1082.0', '$phi1082.1', '$binop_imul1086.4']
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1092, inst=JUMP_BACKWARD(arg=162, lineno=236)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1082.0', '$phi1082.1']
2023-11-07 09:01:26,025 [DEBUG] end state. edges=[Edge(pc=770, stack=('$phi1082.0', '$phi1082.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,025 [DEBUG] pending: deque([State(pc_initial=1094 nstack_initial=2), State(pc_initial=770 nstack_initial=2)])
2023-11-07 09:01:26,025 [DEBUG] stack: ['$phi1094.0', '$phi1094.1']
2023-11-07 09:01:26,025 [DEBUG] state.pc_initial: State(pc_initial=1094 nstack_initial=2)
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1094, inst=LOAD_FAST(arg=10, lineno=238)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1094.0', '$phi1094.1']
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1096, inst=LOAD_FAST(arg=11, lineno=238)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1094.0', '$phi1094.1', '$lo1094.2']
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1098, inst=BINARY_OP(arg=0, lineno=238)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1094.0', '$phi1094.1', '$lo1094.2', '$hi1096.3']
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1102, inst=LOAD_CONST(arg=6, lineno=238)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1094.0', '$phi1094.1', '$binop_add1098.4']
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1104, inst=BINARY_OP(arg=11, lineno=238)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1094.0', '$phi1094.1', '$binop_add1098.4', '$const1102.5']
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1108, inst=STORE_FAST(arg=12, lineno=238)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1094.0', '$phi1094.1', '$binop_truediv1104.6']
2023-11-07 09:01:26,025 [DEBUG] dispatch pc=1110, inst=JUMP_BACKWARD(arg=171, lineno=238)
2023-11-07 09:01:26,025 [DEBUG] stack ['$phi1094.0', '$phi1094.1']
2023-11-07 09:01:26,025 [DEBUG] end state. edges=[Edge(pc=770, stack=('$phi1094.0', '$phi1094.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,025 [DEBUG] pending: deque([State(pc_initial=770 nstack_initial=2), State(pc_initial=770 nstack_initial=2)])
2023-11-07 09:01:26,025 [DEBUG] pending: deque([State(pc_initial=770 nstack_initial=2)])
2023-11-07 09:01:26,025 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,025 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=314 nstack_initial=1): set(),
             State(pc_initial=316 nstack_initial=1): {'$phi316.0'},
             State(pc_initial=318 nstack_initial=2): {'$phi318.1'},
             State(pc_initial=416 nstack_initial=1): set(),
             State(pc_initial=504 nstack_initial=1): set(),
             State(pc_initial=554 nstack_initial=1): set(),
             State(pc_initial=628 nstack_initial=1): set(),
             State(pc_initial=630 nstack_initial=1): set(),
             State(pc_initial=660 nstack_initial=1): set(),
             State(pc_initial=694 nstack_initial=1): set(),
             State(pc_initial=740 nstack_initial=1): set(),
             State(pc_initial=770 nstack_initial=2): {'$phi770.1'},
             State(pc_initial=772 nstack_initial=3): {'$phi772.2'},
             State(pc_initial=832 nstack_initial=3): {'$phi832.2'},
             State(pc_initial=834 nstack_initial=4): {'$phi834.3'},
             State(pc_initial=886 nstack_initial=3): set(),
             State(pc_initial=942 nstack_initial=3): set(),
             State(pc_initial=954 nstack_initial=2): set(),
             State(pc_initial=1018 nstack_initial=2): set(),
             State(pc_initial=1022 nstack_initial=2): set(),
             State(pc_initial=1034 nstack_initial=2): set(),
             State(pc_initial=1056 nstack_initial=2): set(),
             State(pc_initial=1082 nstack_initial=2): set(),
             State(pc_initial=1094 nstack_initial=2): set(),
             State(pc_initial=1112 nstack_initial=1): set(),
             State(pc_initial=1146 nstack_initial=1): set(),
             State(pc_initial=1226 nstack_initial=1): set(),
             State(pc_initial=1252 nstack_initial=1): set(),
             State(pc_initial=1256 nstack_initial=1): set(),
             State(pc_initial=1296 nstack_initial=1): set(),
             State(pc_initial=1322 nstack_initial=1): set(),
             State(pc_initial=1326 nstack_initial=0): set()})
2023-11-07 09:01:26,025 [DEBUG] defmap: {'$phi314.0': State(pc_initial=0 nstack_initial=0),
 '$phi318.1': State(pc_initial=316 nstack_initial=1),
 '$phi770.1': State(pc_initial=740 nstack_initial=1),
 '$phi772.2': State(pc_initial=770 nstack_initial=2),
 '$phi832.2': State(pc_initial=772 nstack_initial=3),
 '$phi834.3': State(pc_initial=832 nstack_initial=3)}
2023-11-07 09:01:26,025 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi1018.0': {('$phi954.0',
                             State(pc_initial=954 nstack_initial=2))},
             '$phi1018.1': {('$phi954.1',
                             State(pc_initial=954 nstack_initial=2))},
             '$phi1022.0': {('$phi954.0',
                             State(pc_initial=954 nstack_initial=2))},
             '$phi1022.1': {('$phi954.1',
                             State(pc_initial=954 nstack_initial=2))},
             '$phi1034.0': {('$phi1022.0',
                             State(pc_initial=1022 nstack_initial=2))},
             '$phi1034.1': {('$phi1022.1',
                             State(pc_initial=1022 nstack_initial=2))},
             '$phi1056.0': {('$phi1022.0',
                             State(pc_initial=1022 nstack_initial=2))},
             '$phi1056.1': {('$phi1022.1',
                             State(pc_initial=1022 nstack_initial=2))},
             '$phi1082.0': {('$phi1056.0',
                             State(pc_initial=1056 nstack_initial=2))},
             '$phi1082.1': {('$phi1056.1',
                             State(pc_initial=1056 nstack_initial=2))},
             '$phi1094.0': {('$phi1056.0',
                             State(pc_initial=1056 nstack_initial=2))},
             '$phi1094.1': {('$phi1056.1',
                             State(pc_initial=1056 nstack_initial=2))},
             '$phi1112.0': {('$phi1018.0',
                             State(pc_initial=1018 nstack_initial=2)),
                            ('$phi770.0',
                             State(pc_initial=770 nstack_initial=2))},
             '$phi1146.0': {('$phi1112.0',
                             State(pc_initial=1112 nstack_initial=1))},
             '$phi1226.0': {('$phi1146.0',
                             State(pc_initial=1146 nstack_initial=1))},
             '$phi1252.0': {('$phi1146.0',
                             State(pc_initial=1146 nstack_initial=1)),
                            ('$phi1226.0',
                             State(pc_initial=1226 nstack_initial=1))},
             '$phi1256.0': {('$phi1112.0',
                             State(pc_initial=1112 nstack_initial=1))},
             '$phi1296.0': {('$phi1256.0',
                             State(pc_initial=1256 nstack_initial=1))},
             '$phi1322.0': {('$phi1256.0',
                             State(pc_initial=1256 nstack_initial=1)),
                            ('$phi1296.0',
                             State(pc_initial=1296 nstack_initial=1))},
             '$phi314.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1252.0',
                            State(pc_initial=1252 nstack_initial=1)),
                           ('$phi1322.0',
                            State(pc_initial=1322 nstack_initial=1))},
             '$phi316.0': {('$phi314.0',
                            State(pc_initial=314 nstack_initial=1))},
             '$phi318.0': {('$phi316.0',
                            State(pc_initial=316 nstack_initial=1))},
             '$phi318.1': {('$316for_iter.2',
                            State(pc_initial=316 nstack_initial=1))},
             '$phi416.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=2))},
             '$phi504.0': {('$phi416.0',
                            State(pc_initial=416 nstack_initial=1))},
             '$phi554.0': {('$phi504.0',
                            State(pc_initial=504 nstack_initial=1))},
             '$phi628.0': {('$phi504.0',
                            State(pc_initial=504 nstack_initial=1)),
                           ('$phi554.0',
                            State(pc_initial=554 nstack_initial=1))},
             '$phi630.0': {('$phi416.0',
                            State(pc_initial=416 nstack_initial=1))},
             '$phi660.0': {('$phi318.0',
                            State(pc_initial=318 nstack_initial=2))},
             '$phi694.0': {('$phi660.0',
                            State(pc_initial=660 nstack_initial=1))},
             '$phi740.0': {('$phi628.0',
                            State(pc_initial=628 nstack_initial=1)),
                           ('$phi630.0',
                            State(pc_initial=630 nstack_initial=1)),
                           ('$phi660.0',
                            State(pc_initial=660 nstack_initial=1)),
                           ('$phi694.0',
                            State(pc_initial=694 nstack_initial=1))},
             '$phi770.0': {('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi770.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi1034.1',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.1',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.1',
                            State(pc_initial=1094 nstack_initial=2))},
             '$phi772.0': {('$phi770.0',
                            State(pc_initial=770 nstack_initial=2))},
             '$phi772.1': {('$phi770.1',
                            State(pc_initial=770 nstack_initial=2))},
             '$phi772.2': {('$770for_iter.3',
                            State(pc_initial=770 nstack_initial=2))},
             '$phi832.0': {('$phi772.0',
                            State(pc_initial=772 nstack_initial=3)),
                           ('$phi886.0',
                            State(pc_initial=886 nstack_initial=3)),
                           ('$phi942.0',
                            State(pc_initial=942 nstack_initial=3))},
             '$phi832.1': {('$phi772.1',
                            State(pc_initial=772 nstack_initial=3)),
                           ('$phi886.1',
                            State(pc_initial=886 nstack_initial=3)),
                           ('$phi942.1',
                            State(pc_initial=942 nstack_initial=3))},
             '$phi832.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3)),
                           ('$phi886.2',
                            State(pc_initial=886 nstack_initial=3)),
                           ('$phi942.2',
                            State(pc_initial=942 nstack_initial=3))},
             '$phi834.0': {('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi834.1': {('$phi832.1',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi834.2': {('$phi832.2',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi834.3': {('$832for_iter.4',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi886.0': {('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi886.1': {('$phi834.1',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi886.2': {('$phi834.2',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi942.0': {('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi942.1': {('$phi834.1',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi942.2': {('$phi834.2',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi954.0': {('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi954.1': {('$phi832.1',
                            State(pc_initial=832 nstack_initial=3))}})
2023-11-07 09:01:26,026 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi1018.0': {('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1018.1': {('$phi832.1',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1022.0': {('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1022.1': {('$phi832.1',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1034.0': {('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1034.1': {('$phi832.1',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1056.0': {('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1056.1': {('$phi832.1',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1082.0': {('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1082.1': {('$phi832.1',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1094.0': {('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1094.1': {('$phi832.1',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1112.0': {('$phi1034.0',
                             State(pc_initial=1034 nstack_initial=2)),
                            ('$phi1082.0',
                             State(pc_initial=1082 nstack_initial=2)),
                            ('$phi1094.0',
                             State(pc_initial=1094 nstack_initial=2)),
                            ('$phi740.0',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1146.0': {('$phi1034.0',
                             State(pc_initial=1034 nstack_initial=2)),
                            ('$phi1082.0',
                             State(pc_initial=1082 nstack_initial=2)),
                            ('$phi1094.0',
                             State(pc_initial=1094 nstack_initial=2)),
                            ('$phi740.0',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1226.0': {('$phi1034.0',
                             State(pc_initial=1034 nstack_initial=2)),
                            ('$phi1082.0',
                             State(pc_initial=1082 nstack_initial=2)),
                            ('$phi1094.0',
                             State(pc_initial=1094 nstack_initial=2)),
                            ('$phi740.0',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1252.0': {('$phi1034.0',
                             State(pc_initial=1034 nstack_initial=2)),
                            ('$phi1082.0',
                             State(pc_initial=1082 nstack_initial=2)),
                            ('$phi1094.0',
                             State(pc_initial=1094 nstack_initial=2)),
                            ('$phi740.0',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1256.0': {('$phi1034.0',
                             State(pc_initial=1034 nstack_initial=2)),
                            ('$phi1082.0',
                             State(pc_initial=1082 nstack_initial=2)),
                            ('$phi1094.0',
                             State(pc_initial=1094 nstack_initial=2)),
                            ('$phi740.0',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1296.0': {('$phi1034.0',
                             State(pc_initial=1034 nstack_initial=2)),
                            ('$phi1082.0',
                             State(pc_initial=1082 nstack_initial=2)),
                            ('$phi1094.0',
                             State(pc_initial=1094 nstack_initial=2)),
                            ('$phi740.0',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi1322.0': {('$phi1034.0',
                             State(pc_initial=1034 nstack_initial=2)),
                            ('$phi1082.0',
                             State(pc_initial=1082 nstack_initial=2)),
                            ('$phi1094.0',
                             State(pc_initial=1094 nstack_initial=2)),
                            ('$phi740.0',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi832.0',
                             State(pc_initial=832 nstack_initial=3))},
             '$phi314.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi316.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi318.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi318.1': {('$316for_iter.2',
                            State(pc_initial=316 nstack_initial=1))},
             '$phi416.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi504.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi554.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi628.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi630.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi660.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi694.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi740.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi1034.0',
                            State(pc_initial=1034 nstack_initial=2)),
                           ('$phi1082.0',
                            State(pc_initial=1082 nstack_initial=2)),
                           ('$phi1094.0',
                            State(pc_initial=1094 nstack_initial=2)),
                           ('$phi740.0',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi770.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi770.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.1',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi772.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi772.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.1',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi772.2': {('$770for_iter.3',
                            State(pc_initial=770 nstack_initial=2))},
             '$phi832.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi832.0',
                            State(pc_initial=832 nstack_initial=3)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi832.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi832.1',
                            State(pc_initial=832 nstack_initial=3)),
                           ('$phi834.1',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi832.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3)),
                           ('$phi834.2',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi834.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi834.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi834.1',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi834.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3)),
                           ('$phi834.2',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi834.3': {('$832for_iter.4',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi886.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi886.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi886.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi942.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi942.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi942.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi954.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi954.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi834.1',
                            State(pc_initial=834 nstack_initial=4))}})
2023-11-07 09:01:26,027 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi1018.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1018.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi834.1',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1022.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1022.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi834.1',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1034.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1034.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi834.1',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1056.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1056.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi834.1',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1082.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1082.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi834.1',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1094.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1094.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1)),
                            ('$phi834.1',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1112.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1146.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1226.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1252.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1256.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1296.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi1322.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0)),
                            ('$phi834.0',
                             State(pc_initial=834 nstack_initial=4))},
             '$phi314.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi316.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi318.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi318.1': {('$316for_iter.2',
                            State(pc_initial=316 nstack_initial=1))},
             '$phi416.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi504.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi554.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi628.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi630.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi660.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi694.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi740.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi770.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi770.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi834.1',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi772.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi834.0',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi772.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1)),
                           ('$phi834.1',
                            State(pc_initial=834 nstack_initial=4))},
             '$phi772.2': {('$770for_iter.3',
                            State(pc_initial=770 nstack_initial=2))},
             '$phi832.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi832.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi832.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi834.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi834.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi834.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi834.3': {('$832for_iter.4',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi886.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi886.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi886.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi942.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi942.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi942.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi954.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi954.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))}})
2023-11-07 09:01:26,027 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi1018.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1018.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1022.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1022.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1034.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1034.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1056.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1056.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1082.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1082.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1094.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1094.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1112.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1146.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1226.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1252.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1256.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1296.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1322.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi314.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi316.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi318.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi318.1': {('$316for_iter.2',
                            State(pc_initial=316 nstack_initial=1))},
             '$phi416.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi504.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi554.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi628.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi630.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi660.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi694.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi740.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi770.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi770.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi772.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi772.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi772.2': {('$770for_iter.3',
                            State(pc_initial=770 nstack_initial=2))},
             '$phi832.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi832.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi832.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi834.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi834.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi834.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi834.3': {('$832for_iter.4',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi886.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi886.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi886.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi942.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi942.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi942.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi954.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi954.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))}})
2023-11-07 09:01:26,028 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi1018.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1018.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1022.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1022.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1034.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1034.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1056.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1056.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1082.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1082.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1094.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1094.1': {('$768get_iter.5',
                             State(pc_initial=740 nstack_initial=1))},
             '$phi1112.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1146.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1226.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1252.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1256.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1296.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi1322.0': {('$312get_iter.39',
                             State(pc_initial=0 nstack_initial=0))},
             '$phi314.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi316.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi318.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi318.1': {('$316for_iter.2',
                            State(pc_initial=316 nstack_initial=1))},
             '$phi416.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi504.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi554.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi628.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi630.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi660.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi694.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi740.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi770.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi770.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi772.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi772.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi772.2': {('$770for_iter.3',
                            State(pc_initial=770 nstack_initial=2))},
             '$phi832.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi832.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi832.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi834.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi834.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi834.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi834.3': {('$832for_iter.4',
                            State(pc_initial=832 nstack_initial=3))},
             '$phi886.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi886.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi886.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi942.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi942.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))},
             '$phi942.2': {('$830get_iter.12',
                            State(pc_initial=772 nstack_initial=3))},
             '$phi954.0': {('$312get_iter.39',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi954.1': {('$768get_iter.5',
                            State(pc_initial=740 nstack_initial=1))}})
2023-11-07 09:01:26,028 [DEBUG] keep phismap: {'$phi316.0': {('$312get_iter.39', State(pc_initial=0 nstack_initial=0))},
 '$phi318.1': {('$316for_iter.2', State(pc_initial=316 nstack_initial=1))},
 '$phi770.1': {('$768get_iter.5', State(pc_initial=740 nstack_initial=1))},
 '$phi772.2': {('$770for_iter.3', State(pc_initial=770 nstack_initial=2))},
 '$phi832.2': {('$830get_iter.12', State(pc_initial=772 nstack_initial=3))},
 '$phi834.3': {('$832for_iter.4', State(pc_initial=832 nstack_initial=3))}}
2023-11-07 09:01:26,028 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi316.0': '$312get_iter.39'},
             State(pc_initial=316 nstack_initial=1): {'$phi318.1': '$316for_iter.2'},
             State(pc_initial=740 nstack_initial=1): {'$phi770.1': '$768get_iter.5'},
             State(pc_initial=770 nstack_initial=2): {'$phi772.2': '$770for_iter.3'},
             State(pc_initial=772 nstack_initial=3): {'$phi832.2': '$830get_iter.12'},
             State(pc_initial=832 nstack_initial=3): {'$phi834.3': '$832for_iter.4'}})
2023-11-07 09:01:26,028 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,028 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$k26.3'}), (28, {}), (30, {}), (32, {'func': '$16load_attr.2', 'args': ['$k26.3'], 'kw_names': None, 'res': '$32call.4'}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {'res': '$bandwidth42.5'}), (44, {'op': '*', 'lhs': '$32call.4', 'rhs': '$bandwidth42.5', 'res': '$binop_mul44.6'}), (46, {}), (48, {'value': '$binop_mul44.6'}), (50, {'idx': 0, 'res': '$50load_global.7'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {'item': '$50load_global.7', 'res': '$62load_attr.9'}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {'res': '$distances72.10'}), (74, {'item': '$distances72.10', 'res': '$74load_attr.11'}), (76, {}), (78, {}), (80, {}), (82, {}), (84, {'res': '$const84.12'}), (86, {'index': '$const84.12', 'target': '$74load_attr.11', 'res': '$86binary_subscr.13'}), (88, {}), (90, {}), (92, {}), (94, {}), (96, {'idx': 0, 'res': '$96load_global.14'}), (98, {}), (100, {}), (102, {}), (104, {}), (106, {}), (108, {'item': '$96load_global.14', 'res': '$108load_attr.15'}), (110, {}), (112, {}), (114, {}), (116, {}), (120, {}), (122, {}), (124, {'func': '$62load_attr.9', 'args': ['$86binary_subscr.13', '$108load_attr.15'], 'kw_names': 2, 'res': '$124call.16'}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'value': '$124call.16'}), (136, {'idx': 0, 'res': '$136load_global.17'}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {}), (148, {'item': '$136load_global.17', 'res': '$148load_attr.19'}), (150, {}), (152, {}), (154, {}), (156, {}), (158, {'res': '$distances158.20'}), (160, {'item': '$distances158.20', 'res': '$160load_attr.21'}), (162, {}), (164, {}), (166, {}), (168, {}), (170, {'res': '$const170.22'}), (172, {'index': '$const170.22', 'target': '$160load_attr.21', 'res': '$172binary_subscr.23'}), (174, {}), (176, {}), (178, {}), (180, {}), (182, {'idx': 0, 'res': '$182load_global.24'}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {}), (194, {'item': '$182load_global.24', 'res': '$194load_attr.25'}), (196, {}), (198, {}), (200, {}), (202, {}), (206, {}), (208, {}), (210, {'func': '$148load_attr.19', 'args': ['$172binary_subscr.23', '$194load_attr.25'], 'kw_names': 2, 'res': '$210call.26'}), (212, {}), (214, {}), (216, {}), (218, {}), (220, {'value': '$210call.26'}), (222, {'idx': 0, 'res': '$222load_global.27'}), (224, {}), (226, {}), (228, {}), (230, {}), (232, {}), (234, {'item': '$222load_global.27', 'res': '$234load_attr.29'}), (236, {}), (238, {}), (240, {}), (242, {}), (244, {'res': '$distances244.30'}), (246, {}), (248, {}), (250, {'func': '$234load_attr.29', 'args': ['$distances244.30'], 'kw_names': None, 'res': '$250call.31'}), (252, {}), (254, {}), (256, {}), (258, {}), (260, {'value': '$250call.31'}), (262, {'idx': 6, 'res': '$262load_global.32'}), (264, {}), (266, {}), (268, {}), (270, {}), (272, {}), (274, {'res': '$distances274.34'}), (276, {'item': '$distances274.34', 'res': '$276load_attr.35'}), (278, {}), (280, {}), (282, {}), (284, {}), (286, {'res': '$const286.36'}), (288, {'index': '$const286.36', 'target': '$276load_attr.35', 'res': '$288binary_subscr.37'}), (290, {}), (292, {}), (294, {}), (296, {}), (298, {}), (300, {}), (302, {'func': '$262load_global.32', 'args': ['$288binary_subscr.37'], 'kw_names': None, 'res': '$302call.38'}), (304, {}), (306, {}), (308, {}), (310, {}), (312, {'value': '$302call.38', 'res': '$312get_iter.39'})), outgoing_phis={'$phi316.0': '$312get_iter.39'}, blockstack=(), active_try_block=None, outgoing_edgepushed={314: ('$312get_iter.39',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=314 nstack_initial=1):
AdaptBlockInfo(insts=((314, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={316: ('$phi314.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=316 nstack_initial=1):
AdaptBlockInfo(insts=((316, {'iterator': '$phi316.0', 'pair': '$316for_iter.1', 'indval': '$316for_iter.2', 'pred': '$316for_iter.3'}),), outgoing_phis={'$phi318.1': '$316for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={1326: (), 318: ('$phi316.0', '$316for_iter.2')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=318 nstack_initial=2):
AdaptBlockInfo(insts=((318, {'value': '$phi318.1'}), (320, {'res': '$const320.2'}), (322, {'value': '$const320.2'}), (324, {'idx': 7, 'res': '$324load_global.3'}), (326, {}), (328, {}), (330, {}), (332, {}), (334, {}), (336, {'value': '$324load_global.3'}), (338, {'res': '$const338.4'}), (340, {'value': '$const338.4'}), (342, {'res': '$distances342.5'}), (344, {'res': '$i344.6'}), (346, {'index': '$i344.6', 'target': '$distances342.5', 'res': '$346binary_subscr.7'}), (348, {}), (350, {}), (352, {}), (354, {}), (356, {'value': '$346binary_subscr.7'}), (358, {'res': '$ith_distances358.8'}), (360, {'res': '$ith_distances360.9'}), (362, {'res': '$const362.10'}), (364, {'lhs': '$ith_distances360.9', 'rhs': '$const362.10', 'res': '$364compare_op.11'}), (366, {}), (368, {}), (370, {'index': '$364compare_op.11', 'target': '$ith_distances358.8', 'res': '$370binary_subscr.12'}), (372, {}), (374, {}), (376, {}), (378, {}), (380, {'value': '$370binary_subscr.12'}), (382, {'res': '$non_zero_dists382.13'}), (384, {'item': '$non_zero_dists382.13', 'res': '$384load_attr.14'}), (386, {}), (388, {}), (390, {}), (392, {}), (394, {'res': '$const394.15'}), (396, {'index': '$const394.15', 'target': '$384load_attr.14', 'res': '$396binary_subscr.16'}), (398, {}), (400, {}), (402, {}), (404, {}), (406, {'res': '$local_connectivity406.17'}), (408, {'lhs': '$396binary_subscr.16', 'rhs': '$local_connectivity406.17', 'res': '$408compare_op.18'}), (410, {}), (412, {}), (414, {'pred': '$408compare_op.18'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={416: ('$phi318.0',), 660: ('$phi318.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=416 nstack_initial=1):
AdaptBlockInfo(insts=((416, {'idx': 8, 'res': '$416load_global.1'}), (418, {}), (420, {}), (422, {}), (424, {}), (426, {}), (428, {'idx': 0, 'res': '$428load_global.3'}), (430, {}), (432, {}), (434, {}), (436, {}), (438, {}), (440, {'item': '$428load_global.3', 'res': '$440load_attr.5'}), (442, {}), (444, {}), (446, {}), (448, {}), (450, {'res': '$local_connectivity450.6'}), (452, {}), (454, {}), (456, {'func': '$440load_attr.5', 'args': ['$local_connectivity450.6'], 'kw_names': None, 'res': '$456call.7'}), (458, {}), (460, {}), (462, {}), (464, {}), (466, {}), (468, {}), (470, {'func': '$416load_global.1', 'args': ['$456call.7'], 'kw_names': None, 'res': '$470call.8'}), (472, {}), (474, {}), (476, {}), (478, {}), (480, {'value': '$470call.8'}), (482, {'res': '$local_connectivity482.9'}), (484, {'res': '$index484.10'}), (486, {'op': '-', 'lhs': '$local_connectivity482.9', 'rhs': '$index484.10', 'res': '$binop_sub486.11'}), (488, {}), (490, {'value': '$binop_sub486.11'}), (492, {'res': '$index492.12'}), (494, {'res': '$const494.13'}), (496, {'lhs': '$index492.12', 'rhs': '$const494.13', 'res': '$496compare_op.14'}), (498, {}), (500, {}), (502, {'pred': '$496compare_op.14'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={504: ('$phi416.0',), 630: ('$phi416.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=504 nstack_initial=1):
AdaptBlockInfo(insts=((504, {'res': '$non_zero_dists504.1'}), (506, {'res': '$index506.2'}), (508, {'res': '$const508.3'}), (510, {'op': '-', 'lhs': '$index506.2', 'rhs': '$const508.3', 'res': '$binop_sub510.4'}), (512, {}), (514, {'index': '$binop_sub510.4', 'target': '$non_zero_dists504.1', 'res': '$514binary_subscr.5'}), (516, {}), (518, {}), (520, {}), (522, {}), (524, {'res': '$rho524.6'}), (526, {'res': '$i526.7'}), (528, {'target': '$rho524.6', 'index': '$i526.7', 'value': '$514binary_subscr.5'}), (530, {}), (532, {'res': '$interpolation532.8'}), (534, {'idx': 10, 'res': '$534load_global.9'}), (536, {}), (538, {}), (540, {}), (542, {}), (544, {}), (546, {'lhs': '$interpolation532.8', 'rhs': '$534load_global.9', 'res': '$546compare_op.10'}), (548, {}), (550, {}), (552, {'pred': '$546compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={554: ('$phi504.0',), 628: ('$phi504.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=554 nstack_initial=1):
AdaptBlockInfo(insts=((554, {'res': '$rho554.1'}), (556, {'res': '$i556.2'}), (562, {'index': '$i556.2', 'target': '$rho554.1', 'res': '$562binary_subscr.3'}), (564, {}), (566, {}), (568, {}), (570, {}), (572, {'res': '$interpolation572.4'}), (574, {'res': '$non_zero_dists574.5'}), (576, {'res': '$index576.6'}), (578, {'index': '$index576.6', 'target': '$non_zero_dists574.5', 'res': '$578binary_subscr.7'}), (580, {}), (582, {}), (584, {}), (586, {}), (588, {'res': '$non_zero_dists588.8'}), (590, {'res': '$index590.9'}), (592, {'res': '$const592.10'}), (594, {'op': '-', 'lhs': '$index590.9', 'rhs': '$const592.10', 'res': '$binop_sub594.11'}), (596, {}), (598, {'index': '$binop_sub594.11', 'target': '$non_zero_dists588.8', 'res': '$598binary_subscr.12'}), (600, {}), (602, {}), (604, {}), (606, {}), (608, {'op': '-', 'lhs': '$578binary_subscr.7', 'rhs': '$598binary_subscr.12', 'res': '$binop_sub608.13'}), (610, {}), (612, {'op': '*', 'lhs': '$interpolation572.4', 'rhs': '$binop_sub608.13', 'res': '$binop_mul612.14'}), (614, {}), (616, {'op': '+=', 'lhs': '$562binary_subscr.3', 'rhs': '$binop_mul612.14', 'res': '$binop_iadd616.15'}), (618, {}), (624, {'target': '$rho554.1', 'index': '$i556.2', 'value': '$binop_iadd616.15'}), (626, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={628: ('$phi554.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=628 nstack_initial=1):
AdaptBlockInfo(insts=((628, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={740: ('$phi628.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=630 nstack_initial=1):
AdaptBlockInfo(insts=((630, {'res': '$interpolation630.1'}), (632, {'res': '$non_zero_dists632.2'}), (634, {'res': '$const634.3'}), (636, {'index': '$const634.3', 'target': '$non_zero_dists632.2', 'res': '$636binary_subscr.4'}), (638, {}), (640, {}), (642, {}), (644, {}), (646, {'op': '*', 'lhs': '$interpolation630.1', 'rhs': '$636binary_subscr.4', 'res': '$binop_mul646.5'}), (648, {}), (650, {'res': '$rho650.6'}), (652, {'res': '$i652.7'}), (654, {'target': '$rho650.6', 'index': '$i652.7', 'value': '$binop_mul646.5'}), (656, {}), (658, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={740: ('$phi630.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=660 nstack_initial=1):
AdaptBlockInfo(insts=((660, {'res': '$non_zero_dists660.1'}), (662, {'item': '$non_zero_dists660.1', 'res': '$662load_attr.2'}), (664, {}), (666, {}), (668, {}), (670, {}), (672, {'res': '$const672.3'}), (674, {'index': '$const672.3', 'target': '$662load_attr.2', 'res': '$674binary_subscr.4'}), (676, {}), (678, {}), (680, {}), (682, {}), (684, {'res': '$const684.5'}), (686, {'lhs': '$674binary_subscr.4', 'rhs': '$const684.5', 'res': '$686compare_op.6'}), (688, {}), (690, {}), (692, {'pred': '$686compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={694: ('$phi660.0',), 740: ('$phi660.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=694 nstack_initial=1):
AdaptBlockInfo(insts=((694, {'idx': 0, 'res': '$694load_global.1'}), (696, {}), (698, {}), (700, {}), (702, {}), (704, {}), (706, {'item': '$694load_global.1', 'res': '$706load_attr.3'}), (708, {}), (710, {}), (712, {}), (714, {}), (716, {'res': '$non_zero_dists716.4'}), (718, {}), (720, {}), (722, {'func': '$706load_attr.3', 'args': ['$non_zero_dists716.4'], 'kw_names': None, 'res': '$722call.5'}), (724, {}), (726, {}), (728, {}), (730, {}), (732, {'res': '$rho732.6'}), (734, {'res': '$i734.7'}), (736, {'target': '$rho732.6', 'index': '$i734.7', 'value': '$722call.5'}), (738, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={740: ('$phi694.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=740 nstack_initial=1):
AdaptBlockInfo(insts=((740, {'idx': 6, 'res': '$740load_global.1'}), (742, {}), (744, {}), (746, {}), (748, {}), (750, {}), (752, {'res': '$n_iter752.3'}), (754, {}), (756, {}), (758, {'func': '$740load_global.1', 'args': ['$n_iter752.3'], 'kw_names': None, 'res': '$758call.4'}), (760, {}), (762, {}), (764, {}), (766, {}), (768, {'value': '$758call.4', 'res': '$768get_iter.5'})), outgoing_phis={'$phi770.1': '$768get_iter.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={770: ('$phi740.0', '$768get_iter.5')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=770 nstack_initial=2):
AdaptBlockInfo(insts=((770, {'iterator': '$phi770.1', 'pair': '$770for_iter.2', 'indval': '$770for_iter.3', 'pred': '$770for_iter.4'}),), outgoing_phis={'$phi772.2': '$770for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={1112: ('$phi770.0',), 772: ('$phi770.0', '$phi770.1', '$770for_iter.3')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=772 nstack_initial=3):
AdaptBlockInfo(insts=((772, {'value': '$phi772.2'}), (774, {'res': '$const774.3'}), (776, {'value': '$const774.3'}), (778, {'idx': 6, 'res': '$778load_global.4'}), (780, {}), (782, {}), (784, {}), (786, {}), (788, {}), (790, {'res': '$const790.6'}), (792, {'res': '$distances792.7'}), (794, {'item': '$distances792.7', 'res': '$794load_attr.8'}), (796, {}), (798, {}), (800, {}), (802, {}), (804, {'res': '$const804.9'}), (806, {'index': '$const804.9', 'target': '$794load_attr.8', 'res': '$806binary_subscr.10'}), (808, {}), (810, {}), (812, {}), (814, {}), (816, {}), (818, {}), (820, {'func': '$778load_global.4', 'args': ['$const790.6', '$806binary_subscr.10'], 'kw_names': None, 'res': '$820call.11'}), (822, {}), (824, {}), (826, {}), (828, {}), (830, {'value': '$820call.11', 'res': '$830get_iter.12'})), outgoing_phis={'$phi832.2': '$830get_iter.12'}, blockstack=(), active_try_block=None, outgoing_edgepushed={832: ('$phi772.0', '$phi772.1', '$830get_iter.12')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=832 nstack_initial=3):
AdaptBlockInfo(insts=((832, {'iterator': '$phi832.2', 'pair': '$832for_iter.3', 'indval': '$832for_iter.4', 'pred': '$832for_iter.5'}),), outgoing_phis={'$phi834.3': '$832for_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={954: ('$phi832.0', '$phi832.1'), 834: ('$phi832.0', '$phi832.1', '$phi832.2', '$832for_iter.4')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=834 nstack_initial=4):
AdaptBlockInfo(insts=((834, {'value': '$phi834.3'}), (836, {'res': '$distances836.4'}), (838, {'res': '$i838.5'}), (840, {'res': '$j840.6'}), (842, {'items': ['$i838.5', '$j840.6'], 'res': '$842build_tuple.7'}), (844, {'index': '$842build_tuple.7', 'target': '$distances836.4', 'res': '$844binary_subscr.8'}), (846, {}), (848, {}), (850, {}), (852, {}), (854, {'res': '$rho854.9'}), (856, {'res': '$i856.10'}), (858, {'index': '$i856.10', 'target': '$rho854.9', 'res': '$858binary_subscr.11'}), (860, {}), (862, {}), (864, {}), (866, {}), (868, {'op': '-', 'lhs': '$844binary_subscr.8', 'rhs': '$858binary_subscr.11', 'res': '$binop_sub868.12'}), (870, {}), (872, {'value': '$binop_sub868.12'}), (874, {'res': '$d874.13'}), (876, {'res': '$const876.14'}), (878, {'lhs': '$d874.13', 'rhs': '$const876.14', 'res': '$878compare_op.15'}), (880, {}), (882, {}), (884, {'pred': '$878compare_op.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={886: ('$phi834.0', '$phi834.1', '$phi834.2'), 942: ('$phi834.0', '$phi834.1', '$phi834.2')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=886 nstack_initial=3):
AdaptBlockInfo(insts=((886, {'res': '$psum886.3'}), (888, {'idx': 0, 'res': '$888load_global.4'}), (890, {}), (892, {}), (894, {}), (896, {}), (898, {}), (900, {'item': '$888load_global.4', 'res': '$900load_attr.6'}), (902, {}), (904, {}), (906, {}), (908, {}), (910, {'res': '$d910.7'}), (912, {'res': '$mid912.8'}), (914, {'op': '/', 'lhs': '$d910.7', 'rhs': '$mid912.8', 'res': '$binop_truediv914.9'}), (916, {}), (918, {'value': '$binop_truediv914.9', 'res': '$918unary_negative.10'}), (920, {}), (922, {}), (924, {'func': '$900load_attr.6', 'args': ['$918unary_negative.10'], 'kw_names': None, 'res': '$924call.11'}), (926, {}), (928, {}), (930, {}), (932, {}), (934, {'op': '+=', 'lhs': '$psum886.3', 'rhs': '$924call.11', 'res': '$binop_iadd934.12'}), (936, {}), (938, {'value': '$binop_iadd934.12'}), (940, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={832: ('$phi886.0', '$phi886.1', '$phi886.2')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=942 nstack_initial=3):
AdaptBlockInfo(insts=((942, {'res': '$psum942.3'}), (944, {'res': '$const944.4'}), (946, {'op': '+=', 'lhs': '$psum942.3', 'rhs': '$const944.4', 'res': '$binop_iadd946.5'}), (948, {}), (950, {'value': '$binop_iadd946.5'}), (952, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={832: ('$phi942.0', '$phi942.1', '$phi942.2')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=954 nstack_initial=2):
AdaptBlockInfo(insts=((954, {'idx': 0, 'res': '$954load_global.2'}), (956, {}), (958, {}), (960, {}), (962, {}), (964, {}), (966, {'item': '$954load_global.2', 'res': '$966load_attr.4'}), (968, {}), (970, {}), (972, {}), (974, {}), (976, {'res': '$psum976.5'}), (978, {'res': '$target978.6'}), (980, {'op': '-', 'lhs': '$psum976.5', 'rhs': '$target978.6', 'res': '$binop_sub980.7'}), (982, {}), (984, {}), (986, {}), (988, {'func': '$966load_attr.4', 'args': ['$binop_sub980.7'], 'kw_names': None, 'res': '$988call.8'}), (990, {}), (992, {}), (994, {}), (996, {}), (998, {'idx': 10, 'res': '$998load_global.9'}), (1000, {}), (1002, {}), (1004, {}), (1006, {}), (1008, {}), (1010, {'lhs': '$988call.8', 'rhs': '$998load_global.9', 'res': '$1010compare_op.10'}), (1012, {}), (1014, {}), (1016, {'pred': '$1010compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1018: ('$phi954.0', '$phi954.1'), 1022: ('$phi954.0', '$phi954.1')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1018 nstack_initial=2):
AdaptBlockInfo(insts=((1020, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1112: ('$phi1018.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1022 nstack_initial=2):
AdaptBlockInfo(insts=((1022, {'res': '$psum1022.2'}), (1024, {'res': '$target1024.3'}), (1026, {'lhs': '$psum1022.2', 'rhs': '$target1024.3', 'res': '$1026compare_op.4'}), (1028, {}), (1030, {}), (1032, {'pred': '$1026compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1034: ('$phi1022.0', '$phi1022.1'), 1056: ('$phi1022.0', '$phi1022.1')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1034 nstack_initial=2):
AdaptBlockInfo(insts=((1034, {'res': '$mid1034.2'}), (1036, {'value': '$mid1034.2'}), (1038, {'res': '$lo1038.3'}), (1040, {'res': '$hi1040.4'}), (1042, {'op': '+', 'lhs': '$lo1038.3', 'rhs': '$hi1040.4', 'res': '$binop_add1042.5'}), (1044, {}), (1046, {'res': '$const1046.6'}), (1048, {'op': '/', 'lhs': '$binop_add1042.5', 'rhs': '$const1046.6', 'res': '$binop_truediv1048.7'}), (1050, {}), (1052, {'value': '$binop_truediv1048.7'}), (1054, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={770: ('$phi1034.0', '$phi1034.1')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1056 nstack_initial=2):
AdaptBlockInfo(insts=((1056, {'res': '$mid1056.2'}), (1058, {'value': '$mid1056.2'}), (1060, {'res': '$hi1060.3'}), (1062, {'idx': 7, 'res': '$1062load_global.4'}), (1064, {}), (1066, {}), (1068, {}), (1070, {}), (1072, {}), (1074, {'lhs': '$hi1060.3', 'rhs': '$1062load_global.4', 'res': '$1074compare_op.5'}), (1076, {}), (1078, {}), (1080, {'pred': '$1074compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1082: ('$phi1056.0', '$phi1056.1'), 1094: ('$phi1056.0', '$phi1056.1')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1082 nstack_initial=2):
AdaptBlockInfo(insts=((1082, {'res': '$mid1082.2'}), (1084, {'res': '$const1084.3'}), (1086, {'op': '*=', 'lhs': '$mid1082.2', 'rhs': '$const1084.3', 'res': '$binop_imul1086.4'}), (1088, {}), (1090, {'value': '$binop_imul1086.4'}), (1092, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={770: ('$phi1082.0', '$phi1082.1')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1094 nstack_initial=2):
AdaptBlockInfo(insts=((1094, {'res': '$lo1094.2'}), (1096, {'res': '$hi1096.3'}), (1098, {'op': '+', 'lhs': '$lo1094.2', 'rhs': '$hi1096.3', 'res': '$binop_add1098.4'}), (1100, {}), (1102, {'res': '$const1102.5'}), (1104, {'op': '/', 'lhs': '$binop_add1098.4', 'rhs': '$const1102.5', 'res': '$binop_truediv1104.6'}), (1106, {}), (1108, {'value': '$binop_truediv1104.6'}), (1110, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={770: ('$phi1094.0', '$phi1094.1')})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1112 nstack_initial=1):
AdaptBlockInfo(insts=((1112, {'res': '$mid1112.1'}), (1114, {'res': '$result1114.2'}), (1116, {'res': '$i1116.3'}), (1118, {'target': '$result1114.2', 'index': '$i1116.3', 'value': '$mid1112.1'}), (1120, {}), (1122, {'res': '$rho1122.4'}), (1124, {'res': '$i1124.5'}), (1126, {'index': '$i1124.5', 'target': '$rho1122.4', 'res': '$1126binary_subscr.6'}), (1128, {}), (1130, {}), (1132, {}), (1134, {}), (1136, {'res': '$const1136.7'}), (1138, {'lhs': '$1126binary_subscr.6', 'rhs': '$const1136.7', 'res': '$1138compare_op.8'}), (1140, {}), (1142, {}), (1144, {'pred': '$1138compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1146: ('$phi1112.0',), 1256: ('$phi1112.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1146 nstack_initial=1):
AdaptBlockInfo(insts=((1146, {'idx': 0, 'res': '$1146load_global.1'}), (1148, {}), (1150, {}), (1152, {}), (1154, {}), (1156, {}), (1158, {'item': '$1146load_global.1', 'res': '$1158load_attr.3'}), (1160, {}), (1162, {}), (1164, {}), (1166, {}), (1168, {'res': '$ith_distances1168.4'}), (1170, {}), (1172, {}), (1174, {'func': '$1158load_attr.3', 'args': ['$ith_distances1168.4'], 'kw_names': None, 'res': '$1174call.5'}), (1176, {}), (1178, {}), (1180, {}), (1182, {}), (1184, {'value': '$1174call.5'}), (1186, {'res': '$result1186.6'}), (1188, {'res': '$i1188.7'}), (1190, {'index': '$i1188.7', 'target': '$result1186.6', 'res': '$1190binary_subscr.8'}), (1192, {}), (1194, {}), (1196, {}), (1198, {}), (1200, {'idx': 14, 'res': '$1200load_global.9'}), (1202, {}), (1204, {}), (1206, {}), (1208, {}), (1210, {}), (1212, {'res': '$mean_ith_distances1212.10'}), (1214, {'op': '*', 'lhs': '$1200load_global.9', 'rhs': '$mean_ith_distances1212.10', 'res': '$binop_mul1214.11'}), (1216, {}), (1218, {'lhs': '$1190binary_subscr.8', 'rhs': '$binop_mul1214.11', 'res': '$1218compare_op.12'}), (1220, {}), (1222, {}), (1224, {'pred': '$1218compare_op.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1226: ('$phi1146.0',), 1252: ('$phi1146.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1226 nstack_initial=1):
AdaptBlockInfo(insts=((1226, {'idx': 14, 'res': '$1226load_global.1'}), (1228, {}), (1230, {}), (1232, {}), (1234, {}), (1236, {}), (1238, {'res': '$mean_ith_distances1238.2'}), (1240, {'op': '*', 'lhs': '$1226load_global.1', 'rhs': '$mean_ith_distances1238.2', 'res': '$binop_mul1240.3'}), (1242, {}), (1244, {'res': '$result1244.4'}), (1246, {'res': '$i1246.5'}), (1248, {'target': '$result1244.4', 'index': '$i1246.5', 'value': '$binop_mul1240.3'}), (1250, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1252: ('$phi1226.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1252 nstack_initial=1):
AdaptBlockInfo(insts=((1252, {}), (1254, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={314: ('$phi1252.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1256 nstack_initial=1):
AdaptBlockInfo(insts=((1256, {'res': '$result1256.1'}), (1258, {'res': '$i1258.2'}), (1260, {'index': '$i1258.2', 'target': '$result1256.1', 'res': '$1260binary_subscr.3'}), (1262, {}), (1264, {}), (1266, {}), (1268, {}), (1270, {'idx': 14, 'res': '$1270load_global.4'}), (1272, {}), (1274, {}), (1276, {}), (1278, {}), (1280, {}), (1282, {'res': '$mean_distances1282.5'}), (1284, {'op': '*', 'lhs': '$1270load_global.4', 'rhs': '$mean_distances1282.5', 'res': '$binop_mul1284.6'}), (1286, {}), (1288, {'lhs': '$1260binary_subscr.3', 'rhs': '$binop_mul1284.6', 'res': '$1288compare_op.7'}), (1290, {}), (1292, {}), (1294, {'pred': '$1288compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1296: ('$phi1256.0',), 1322: ('$phi1256.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1296 nstack_initial=1):
AdaptBlockInfo(insts=((1296, {'idx': 14, 'res': '$1296load_global.1'}), (1298, {}), (1300, {}), (1302, {}), (1304, {}), (1306, {}), (1308, {'res': '$mean_distances1308.2'}), (1310, {'op': '*', 'lhs': '$1296load_global.1', 'rhs': '$mean_distances1308.2', 'res': '$binop_mul1310.3'}), (1312, {}), (1314, {'res': '$result1314.4'}), (1316, {'res': '$i1316.5'}), (1318, {'target': '$result1314.4', 'index': '$i1316.5', 'value': '$binop_mul1310.3'}), (1320, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={1322: ('$phi1296.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1322 nstack_initial=1):
AdaptBlockInfo(insts=((1322, {}), (1324, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={314: ('$phi1322.0',)})
2023-11-07 09:01:26,029 [DEBUG] block_infos State(pc_initial=1326 nstack_initial=0):
AdaptBlockInfo(insts=((1326, {'res': '$result1326.0'}), (1328, {'res': '$rho1328.1'}), (1330, {'items': ['$result1326.0', '$rho1328.1'], 'res': '$1330build_tuple.2'}), (1332, {'retval': '$1330build_tuple.2', 'castval': '$1332return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,032 [DEBUG] label 0:
    distances = arg(0, name=distances)       ['distances']
    k = arg(1, name=k)                       ['k']
    n_iter = arg(2, name=n_iter)             ['n_iter']
    local_connectivity = arg(3, name=local_connectivity) ['local_connectivity']
    bandwidth = arg(4, name=bandwidth)       ['bandwidth']
    $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=log2) ['$16load_attr.2', '$4load_global.0']
    $32call.4 = call $16load_attr.2(k, func=$16load_attr.2, args=[Var(k, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_attr.2', '$32call.4', 'k']
    target = $32call.4 * bandwidth           ['$32call.4', 'bandwidth', 'target']
    $50load_global.7 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$50load_global.7']
    $62load_attr.9 = getattr(value=$50load_global.7, attr=zeros) ['$50load_global.7', '$62load_attr.9']
    $74load_attr.11 = getattr(value=distances, attr=shape) ['$74load_attr.11', 'distances']
    $const84.12 = const(int, 0)              ['$const84.12']
    $86binary_subscr.13 = getitem(value=$74load_attr.11, index=$const84.12, fn=<built-in function getitem>) ['$74load_attr.11', '$86binary_subscr.13', '$const84.12']
    $96load_global.14 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$96load_global.14']
    $108load_attr.15 = getattr(value=$96load_global.14, attr=float32) ['$108load_attr.15', '$96load_global.14']
    rho = call $62load_attr.9($86binary_subscr.13, func=$62load_attr.9, args=[Var($86binary_subscr.13, umap_.py:190)], kws=[('dtype', Var($108load_attr.15, umap_.py:190))], vararg=None, varkwarg=None, target=None) ['$108load_attr.15', '$62load_attr.9', '$86binary_subscr.13', 'rho']
    $136load_global.17 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$136load_global.17']
    $148load_attr.19 = getattr(value=$136load_global.17, attr=zeros) ['$136load_global.17', '$148load_attr.19']
    $160load_attr.21 = getattr(value=distances, attr=shape) ['$160load_attr.21', 'distances']
    $const170.22 = const(int, 0)             ['$const170.22']
    $172binary_subscr.23 = getitem(value=$160load_attr.21, index=$const170.22, fn=<built-in function getitem>) ['$160load_attr.21', '$172binary_subscr.23', '$const170.22']
    $182load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$182load_global.24']
    $194load_attr.25 = getattr(value=$182load_global.24, attr=float32) ['$182load_global.24', '$194load_attr.25']
    result = call $148load_attr.19($172binary_subscr.23, func=$148load_attr.19, args=[Var($172binary_subscr.23, umap_.py:191)], kws=[('dtype', Var($194load_attr.25, umap_.py:191))], vararg=None, varkwarg=None, target=None) ['$148load_attr.19', '$172binary_subscr.23', '$194load_attr.25', 'result']
    $222load_global.27 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$222load_global.27']
    $234load_attr.29 = getattr(value=$222load_global.27, attr=mean) ['$222load_global.27', '$234load_attr.29']
    mean_distances = call $234load_attr.29(distances, func=$234load_attr.29, args=[Var(distances, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None) ['$234load_attr.29', 'distances', 'mean_distances']
    $262load_global.32 = global(range: <class 'range'>) ['$262load_global.32']
    $276load_attr.35 = getattr(value=distances, attr=shape) ['$276load_attr.35', 'distances']
    $const286.36 = const(int, 0)             ['$const286.36']
    $288binary_subscr.37 = getitem(value=$276load_attr.35, index=$const286.36, fn=<built-in function getitem>) ['$276load_attr.35', '$288binary_subscr.37', '$const286.36']
    $302call.38 = call $262load_global.32($288binary_subscr.37, func=$262load_global.32, args=[Var($288binary_subscr.37, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None) ['$262load_global.32', '$288binary_subscr.37', '$302call.38']
    $312get_iter.39 = getiter(value=$302call.38) ['$302call.38', '$312get_iter.39']
    $phi316.0 = $312get_iter.39              ['$312get_iter.39', '$phi316.0']
    jump 314                                 []
label 314:
    jump 316                                 []
label 316:
    $316for_iter.1 = iternext(value=$phi316.0) ['$316for_iter.1', '$phi316.0']
    $316for_iter.2 = pair_first(value=$316for_iter.1) ['$316for_iter.1', '$316for_iter.2']
    $316for_iter.3 = pair_second(value=$316for_iter.1) ['$316for_iter.1', '$316for_iter.3']
    $phi318.1 = $316for_iter.2               ['$316for_iter.2', '$phi318.1']
    branch $316for_iter.3, 318, 1326         ['$316for_iter.3']
label 318:
    i = $phi318.1                            ['$phi318.1', 'i']
    lo = const(float, 0.0)                   ['lo']
    hi = global(NPY_INFINITY: inf)           ['hi']
    mid = const(float, 1.0)                  ['mid']
    ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>) ['distances', 'i', 'ith_distances']
    $const362.10 = const(float, 0.0)         ['$const362.10']
    $364compare_op.11 = ith_distances > $const362.10 ['$364compare_op.11', '$const362.10', 'ith_distances']
    non_zero_dists = getitem(value=ith_distances, index=$364compare_op.11, fn=<built-in function getitem>) ['$364compare_op.11', 'ith_distances', 'non_zero_dists']
    $384load_attr.14 = getattr(value=non_zero_dists, attr=shape) ['$384load_attr.14', 'non_zero_dists']
    $const394.15 = const(int, 0)             ['$const394.15']
    $396binary_subscr.16 = getitem(value=$384load_attr.14, index=$const394.15, fn=<built-in function getitem>) ['$384load_attr.14', '$396binary_subscr.16', '$const394.15']
    $408compare_op.18 = $396binary_subscr.16 >= local_connectivity ['$396binary_subscr.16', '$408compare_op.18', 'local_connectivity']
    bool414 = global(bool: <class 'bool'>)   ['bool414']
    $414pred = call bool414($408compare_op.18, func=bool414, args=(Var($408compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None) ['$408compare_op.18', '$414pred', 'bool414']
    branch $414pred, 416, 660                ['$414pred']
label 416:
    $416load_global.1 = global(int: <class 'int'>) ['$416load_global.1']
    $428load_global.3 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$428load_global.3']
    $440load_attr.5 = getattr(value=$428load_global.3, attr=floor) ['$428load_global.3', '$440load_attr.5']
    $456call.7 = call $440load_attr.5(local_connectivity, func=$440load_attr.5, args=[Var(local_connectivity, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None) ['$440load_attr.5', '$456call.7', 'local_connectivity']
    index = call $416load_global.1($456call.7, func=$416load_global.1, args=[Var($456call.7, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None) ['$416load_global.1', '$456call.7', 'index']
    interpolation = local_connectivity - index ['index', 'interpolation', 'local_connectivity']
    $const494.13 = const(int, 0)             ['$const494.13']
    $496compare_op.14 = index > $const494.13 ['$496compare_op.14', '$const494.13', 'index']
    bool502 = global(bool: <class 'bool'>)   ['bool502']
    $502pred = call bool502($496compare_op.14, func=bool502, args=(Var($496compare_op.14, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None) ['$496compare_op.14', '$502pred', 'bool502']
    branch $502pred, 504, 630                ['$502pred']
label 504:
    $const508.3 = const(int, 1)              ['$const508.3']
    $binop_sub510.4 = index - $const508.3    ['$binop_sub510.4', '$const508.3', 'index']
    $514binary_subscr.5 = getitem(value=non_zero_dists, index=$binop_sub510.4, fn=<built-in function getitem>) ['$514binary_subscr.5', '$binop_sub510.4', 'non_zero_dists']
    rho[i] = $514binary_subscr.5             ['$514binary_subscr.5', 'i', 'rho']
    $534load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05) ['$534load_global.9']
    $546compare_op.10 = interpolation > $534load_global.9 ['$534load_global.9', '$546compare_op.10', 'interpolation']
    bool552 = global(bool: <class 'bool'>)   ['bool552']
    $552pred = call bool552($546compare_op.10, func=bool552, args=(Var($546compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None) ['$546compare_op.10', '$552pred', 'bool552']
    branch $552pred, 554, 628                ['$552pred']
label 554:
    $562binary_subscr.3 = getitem(value=rho, index=i, fn=<built-in function getitem>) ['$562binary_subscr.3', 'i', 'rho']
    $578binary_subscr.7 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>) ['$578binary_subscr.7', 'index', 'non_zero_dists']
    $const592.10 = const(int, 1)             ['$const592.10']
    $binop_sub594.11 = index - $const592.10  ['$binop_sub594.11', '$const592.10', 'index']
    $598binary_subscr.12 = getitem(value=non_zero_dists, index=$binop_sub594.11, fn=<built-in function getitem>) ['$598binary_subscr.12', '$binop_sub594.11', 'non_zero_dists']
    $binop_sub608.13 = $578binary_subscr.7 - $598binary_subscr.12 ['$578binary_subscr.7', '$598binary_subscr.12', '$binop_sub608.13']
    $binop_mul612.14 = interpolation * $binop_sub608.13 ['$binop_mul612.14', '$binop_sub608.13', 'interpolation']
    $binop_iadd616.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$562binary_subscr.3, rhs=$binop_mul612.14, static_lhs=Undefined, static_rhs=Undefined) ['$562binary_subscr.3', '$binop_iadd616.15', '$binop_mul612.14']
    rho[i] = $binop_iadd616.15               ['$binop_iadd616.15', 'i', 'rho']
    jump 628                                 []
label 628:
    jump 740                                 []
label 630:
    $const634.3 = const(int, 0)              ['$const634.3']
    $636binary_subscr.4 = getitem(value=non_zero_dists, index=$const634.3, fn=<built-in function getitem>) ['$636binary_subscr.4', '$const634.3', 'non_zero_dists']
    $binop_mul646.5 = interpolation * $636binary_subscr.4 ['$636binary_subscr.4', '$binop_mul646.5', 'interpolation']
    rho[i] = $binop_mul646.5                 ['$binop_mul646.5', 'i', 'rho']
    jump 740                                 []
label 660:
    $662load_attr.2 = getattr(value=non_zero_dists, attr=shape) ['$662load_attr.2', 'non_zero_dists']
    $const672.3 = const(int, 0)              ['$const672.3']
    $674binary_subscr.4 = getitem(value=$662load_attr.2, index=$const672.3, fn=<built-in function getitem>) ['$662load_attr.2', '$674binary_subscr.4', '$const672.3']
    $const684.5 = const(int, 0)              ['$const684.5']
    $686compare_op.6 = $674binary_subscr.4 > $const684.5 ['$674binary_subscr.4', '$686compare_op.6', '$const684.5']
    bool692 = global(bool: <class 'bool'>)   ['bool692']
    $692pred = call bool692($686compare_op.6, func=bool692, args=(Var($686compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None) ['$686compare_op.6', '$692pred', 'bool692']
    branch $692pred, 694, 740                ['$692pred']
label 694:
    $694load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$694load_global.1']
    $706load_attr.3 = getattr(value=$694load_global.1, attr=max) ['$694load_global.1', '$706load_attr.3']
    $722call.5 = call $706load_attr.3(non_zero_dists, func=$706load_attr.3, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None) ['$706load_attr.3', '$722call.5', 'non_zero_dists']
    rho[i] = $722call.5                      ['$722call.5', 'i', 'rho']
    jump 740                                 []
label 740:
    $740load_global.1 = global(range: <class 'range'>) ['$740load_global.1']
    $758call.4 = call $740load_global.1(n_iter, func=$740load_global.1, args=[Var(n_iter, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None) ['$740load_global.1', '$758call.4', 'n_iter']
    $768get_iter.5 = getiter(value=$758call.4) ['$758call.4', '$768get_iter.5']
    $phi770.1 = $768get_iter.5               ['$768get_iter.5', '$phi770.1']
    jump 770                                 []
label 770:
    $770for_iter.2 = iternext(value=$phi770.1) ['$770for_iter.2', '$phi770.1']
    $770for_iter.3 = pair_first(value=$770for_iter.2) ['$770for_iter.2', '$770for_iter.3']
    $770for_iter.4 = pair_second(value=$770for_iter.2) ['$770for_iter.2', '$770for_iter.4']
    $phi772.2 = $770for_iter.3               ['$770for_iter.3', '$phi772.2']
    branch $770for_iter.4, 772, 1112         ['$770for_iter.4']
label 772:
    n = $phi772.2                            ['$phi772.2', 'n']
    psum = const(float, 0.0)                 ['psum']
    $778load_global.4 = global(range: <class 'range'>) ['$778load_global.4']
    $const790.6 = const(int, 1)              ['$const790.6']
    $794load_attr.8 = getattr(value=distances, attr=shape) ['$794load_attr.8', 'distances']
    $const804.9 = const(int, 1)              ['$const804.9']
    $806binary_subscr.10 = getitem(value=$794load_attr.8, index=$const804.9, fn=<built-in function getitem>) ['$794load_attr.8', '$806binary_subscr.10', '$const804.9']
    $820call.11 = call $778load_global.4($const790.6, $806binary_subscr.10, func=$778load_global.4, args=[Var($const790.6, umap_.py:220), Var($806binary_subscr.10, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None) ['$778load_global.4', '$806binary_subscr.10', '$820call.11', '$const790.6']
    $830get_iter.12 = getiter(value=$820call.11) ['$820call.11', '$830get_iter.12']
    $phi832.2 = $830get_iter.12              ['$830get_iter.12', '$phi832.2']
    jump 832                                 []
label 832:
    $832for_iter.3 = iternext(value=$phi832.2) ['$832for_iter.3', '$phi832.2']
    $832for_iter.4 = pair_first(value=$832for_iter.3) ['$832for_iter.3', '$832for_iter.4']
    $832for_iter.5 = pair_second(value=$832for_iter.3) ['$832for_iter.3', '$832for_iter.5']
    $phi834.3 = $832for_iter.4               ['$832for_iter.4', '$phi834.3']
    branch $832for_iter.5, 834, 954          ['$832for_iter.5']
label 834:
    j = $phi834.3                            ['$phi834.3', 'j']
    $842build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)]) ['$842build_tuple.7', 'i', 'j']
    $844binary_subscr.8 = getitem(value=distances, index=$842build_tuple.7, fn=<built-in function getitem>) ['$842build_tuple.7', '$844binary_subscr.8', 'distances']
    $858binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>) ['$858binary_subscr.11', 'i', 'rho']
    d = $844binary_subscr.8 - $858binary_subscr.11 ['$844binary_subscr.8', '$858binary_subscr.11', 'd']
    $const876.14 = const(int, 0)             ['$const876.14']
    $878compare_op.15 = d > $const876.14     ['$878compare_op.15', '$const876.14', 'd']
    bool884 = global(bool: <class 'bool'>)   ['bool884']
    $884pred = call bool884($878compare_op.15, func=bool884, args=(Var($878compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None) ['$878compare_op.15', '$884pred', 'bool884']
    branch $884pred, 886, 942                ['$884pred']
label 886:
    $888load_global.4 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$888load_global.4']
    $900load_attr.6 = getattr(value=$888load_global.4, attr=exp) ['$888load_global.4', '$900load_attr.6']
    $binop_truediv914.9 = d / mid            ['$binop_truediv914.9', 'd', 'mid']
    $918unary_negative.10 = unary(fn=<built-in function neg>, value=$binop_truediv914.9) ['$918unary_negative.10', '$binop_truediv914.9']
    $924call.11 = call $900load_attr.6($918unary_negative.10, func=$900load_attr.6, args=[Var($918unary_negative.10, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None) ['$900load_attr.6', '$918unary_negative.10', '$924call.11']
    $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined) ['$924call.11', '$binop_iadd934.12', 'psum']
    psum = $binop_iadd934.12                 ['$binop_iadd934.12', 'psum']
    jump 832                                 []
label 942:
    $const944.4 = const(float, 1.0)          ['$const944.4']
    $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd946.5', '$const944.4', 'psum']
    psum = $binop_iadd946.5                  ['$binop_iadd946.5', 'psum']
    jump 832                                 []
label 954:
    $954load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$954load_global.2']
    $966load_attr.4 = getattr(value=$954load_global.2, attr=fabs) ['$954load_global.2', '$966load_attr.4']
    $binop_sub980.7 = psum - target          ['$binop_sub980.7', 'psum', 'target']
    $988call.8 = call $966load_attr.4($binop_sub980.7, func=$966load_attr.4, args=[Var($binop_sub980.7, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None) ['$966load_attr.4', '$988call.8', '$binop_sub980.7']
    $998load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05) ['$998load_global.9']
    $1010compare_op.10 = $988call.8 < $998load_global.9 ['$1010compare_op.10', '$988call.8', '$998load_global.9']
    bool1016 = global(bool: <class 'bool'>)  ['bool1016']
    $1016pred = call bool1016($1010compare_op.10, func=bool1016, args=(Var($1010compare_op.10, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None) ['$1010compare_op.10', '$1016pred', 'bool1016']
    branch $1016pred, 1018, 1022             ['$1016pred']
label 1018:
    jump 1112                                []
label 1022:
    $1026compare_op.4 = psum > target        ['$1026compare_op.4', 'psum', 'target']
    bool1032 = global(bool: <class 'bool'>)  ['bool1032']
    $1032pred = call bool1032($1026compare_op.4, func=bool1032, args=(Var($1026compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None) ['$1026compare_op.4', '$1032pred', 'bool1032']
    branch $1032pred, 1034, 1056             ['$1032pred']
label 1034:
    hi = mid                                 ['hi', 'mid']
    $binop_add1042.5 = lo + hi               ['$binop_add1042.5', 'hi', 'lo']
    $const1046.6 = const(float, 2.0)         ['$const1046.6']
    mid = $binop_add1042.5 / $const1046.6    ['$binop_add1042.5', '$const1046.6', 'mid']
    jump 770                                 []
label 1056:
    lo = mid                                 ['lo', 'mid']
    $1062load_global.4 = global(NPY_INFINITY: inf) ['$1062load_global.4']
    $1074compare_op.5 = hi == $1062load_global.4 ['$1062load_global.4', '$1074compare_op.5', 'hi']
    bool1080 = global(bool: <class 'bool'>)  ['bool1080']
    $1080pred = call bool1080($1074compare_op.5, func=bool1080, args=(Var($1074compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None) ['$1074compare_op.5', '$1080pred', 'bool1080']
    branch $1080pred, 1082, 1094             ['$1080pred']
label 1082:
    $const1084.3 = const(int, 2)             ['$const1084.3']
    $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul1086.4', '$const1084.3', 'mid']
    mid = $binop_imul1086.4                  ['$binop_imul1086.4', 'mid']
    jump 770                                 []
label 1094:
    $binop_add1098.4 = lo + hi               ['$binop_add1098.4', 'hi', 'lo']
    $const1102.5 = const(float, 2.0)         ['$const1102.5']
    mid = $binop_add1098.4 / $const1102.5    ['$binop_add1098.4', '$const1102.5', 'mid']
    jump 770                                 []
label 1112:
    result[i] = mid                          ['i', 'mid', 'result']
    $1126binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>) ['$1126binary_subscr.6', 'i', 'rho']
    $const1136.7 = const(float, 0.0)         ['$const1136.7']
    $1138compare_op.8 = $1126binary_subscr.6 > $const1136.7 ['$1126binary_subscr.6', '$1138compare_op.8', '$const1136.7']
    bool1144 = global(bool: <class 'bool'>)  ['bool1144']
    $1144pred = call bool1144($1138compare_op.8, func=bool1144, args=(Var($1138compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None) ['$1138compare_op.8', '$1144pred', 'bool1144']
    branch $1144pred, 1146, 1256             ['$1144pred']
label 1146:
    $1146load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$1146load_global.1']
    $1158load_attr.3 = getattr(value=$1146load_global.1, attr=mean) ['$1146load_global.1', '$1158load_attr.3']
    mean_ith_distances = call $1158load_attr.3(ith_distances, func=$1158load_attr.3, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None) ['$1158load_attr.3', 'ith_distances', 'mean_ith_distances']
    $1190binary_subscr.8 = getitem(value=result, index=i, fn=<built-in function getitem>) ['$1190binary_subscr.8', 'i', 'result']
    $1200load_global.9 = global(MIN_K_DIST_SCALE: 0.001) ['$1200load_global.9']
    $binop_mul1214.11 = $1200load_global.9 * mean_ith_distances ['$1200load_global.9', '$binop_mul1214.11', 'mean_ith_distances']
    $1218compare_op.12 = $1190binary_subscr.8 < $binop_mul1214.11 ['$1190binary_subscr.8', '$1218compare_op.12', '$binop_mul1214.11']
    bool1224 = global(bool: <class 'bool'>)  ['bool1224']
    $1224pred = call bool1224($1218compare_op.12, func=bool1224, args=(Var($1218compare_op.12, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None) ['$1218compare_op.12', '$1224pred', 'bool1224']
    branch $1224pred, 1226, 1252             ['$1224pred']
label 1226:
    $1226load_global.1 = global(MIN_K_DIST_SCALE: 0.001) ['$1226load_global.1']
    $binop_mul1240.3 = $1226load_global.1 * mean_ith_distances ['$1226load_global.1', '$binop_mul1240.3', 'mean_ith_distances']
    result[i] = $binop_mul1240.3             ['$binop_mul1240.3', 'i', 'result']
    jump 1252                                []
label 1252:
    jump 314                                 []
label 1256:
    $1260binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>) ['$1260binary_subscr.3', 'i', 'result']
    $1270load_global.4 = global(MIN_K_DIST_SCALE: 0.001) ['$1270load_global.4']
    $binop_mul1284.6 = $1270load_global.4 * mean_distances ['$1270load_global.4', '$binop_mul1284.6', 'mean_distances']
    $1288compare_op.7 = $1260binary_subscr.3 < $binop_mul1284.6 ['$1260binary_subscr.3', '$1288compare_op.7', '$binop_mul1284.6']
    bool1294 = global(bool: <class 'bool'>)  ['bool1294']
    $1294pred = call bool1294($1288compare_op.7, func=bool1294, args=(Var($1288compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None) ['$1288compare_op.7', '$1294pred', 'bool1294']
    branch $1294pred, 1296, 1322             ['$1294pred']
label 1296:
    $1296load_global.1 = global(MIN_K_DIST_SCALE: 0.001) ['$1296load_global.1']
    $binop_mul1310.3 = $1296load_global.1 * mean_distances ['$1296load_global.1', '$binop_mul1310.3', 'mean_distances']
    result[i] = $binop_mul1310.3             ['$binop_mul1310.3', 'i', 'result']
    jump 1322                                []
label 1322:
    jump 314                                 []
label 1326:
    $1330build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)]) ['$1330build_tuple.2', 'result', 'rho']
    $1332return_value.3 = cast(value=$1330build_tuple.2) ['$1330build_tuple.2', '$1332return_value.3']
    return $1332return_value.3               ['$1332return_value.3']

2023-11-07 09:01:26,048 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,048 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,048 [DEBUG] on stmt: distances = arg(0, name=distances)
2023-11-07 09:01:26,048 [DEBUG] on stmt: k = arg(1, name=k)
2023-11-07 09:01:26,048 [DEBUG] on stmt: n_iter = arg(2, name=n_iter)
2023-11-07 09:01:26,048 [DEBUG] on stmt: local_connectivity = arg(3, name=local_connectivity)
2023-11-07 09:01:26,048 [DEBUG] on stmt: bandwidth = arg(4, name=bandwidth)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=log2)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $32call.4 = call $16load_attr.2(k, func=$16load_attr.2, args=[Var(k, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,048 [DEBUG] on stmt: target = $32call.4 * bandwidth
2023-11-07 09:01:26,048 [DEBUG] on stmt: $50load_global.7 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $62load_attr.9 = getattr(value=$50load_global.7, attr=zeros)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $74load_attr.11 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $const84.12 = const(int, 0)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $86binary_subscr.13 = static_getitem(value=$74load_attr.11, index=0, index_var=$const84.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $96load_global.14 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $108load_attr.15 = getattr(value=$96load_global.14, attr=float32)
2023-11-07 09:01:26,048 [DEBUG] on stmt: rho = call $62load_attr.9($86binary_subscr.13, func=$62load_attr.9, args=[Var($86binary_subscr.13, umap_.py:190)], kws=[('dtype', Var($108load_attr.15, umap_.py:190))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $136load_global.17 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $148load_attr.19 = getattr(value=$136load_global.17, attr=zeros)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $160load_attr.21 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $const170.22 = const(int, 0)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $172binary_subscr.23 = static_getitem(value=$160load_attr.21, index=0, index_var=$const170.22, fn=<built-in function getitem>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $182load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $194load_attr.25 = getattr(value=$182load_global.24, attr=float32)
2023-11-07 09:01:26,048 [DEBUG] on stmt: result = call $148load_attr.19($172binary_subscr.23, func=$148load_attr.19, args=[Var($172binary_subscr.23, umap_.py:191)], kws=[('dtype', Var($194load_attr.25, umap_.py:191))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $222load_global.27 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $234load_attr.29 = getattr(value=$222load_global.27, attr=mean)
2023-11-07 09:01:26,048 [DEBUG] on stmt: mean_distances = call $234load_attr.29(distances, func=$234load_attr.29, args=[Var(distances, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $262load_global.32 = global(range: <class 'range'>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $276load_attr.35 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $const286.36 = const(int, 0)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $288binary_subscr.37 = static_getitem(value=$276load_attr.35, index=0, index_var=$const286.36, fn=<built-in function getitem>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $302call.38 = call $262load_global.32($288binary_subscr.37, func=$262load_global.32, args=[Var($288binary_subscr.37, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $312get_iter.39 = getiter(value=$302call.38)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $phi316.0 = $312get_iter.39
2023-11-07 09:01:26,048 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,048 [DEBUG] ==== SSA block analysis pass on 314
2023-11-07 09:01:26,048 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,048 [DEBUG] on stmt: jump 316
2023-11-07 09:01:26,048 [DEBUG] ==== SSA block analysis pass on 316
2023-11-07 09:01:26,048 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,048 [DEBUG] on stmt: $316for_iter.1 = iternext(value=$phi316.0)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $316for_iter.2 = pair_first(value=$316for_iter.1)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $316for_iter.3 = pair_second(value=$316for_iter.1)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $phi318.1 = $316for_iter.2
2023-11-07 09:01:26,048 [DEBUG] on stmt: branch $316for_iter.3, 318, 1326
2023-11-07 09:01:26,048 [DEBUG] ==== SSA block analysis pass on 318
2023-11-07 09:01:26,048 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,048 [DEBUG] on stmt: i = $phi318.1
2023-11-07 09:01:26,048 [DEBUG] on stmt: lo = const(float, 0.0)
2023-11-07 09:01:26,048 [DEBUG] on stmt: hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,048 [DEBUG] on stmt: mid = const(float, 1.0)
2023-11-07 09:01:26,048 [DEBUG] on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $const362.10 = const(float, 0.0)
2023-11-07 09:01:26,048 [DEBUG] on stmt: $364compare_op.11 = ith_distances > $const362.10
2023-11-07 09:01:26,049 [DEBUG] on stmt: non_zero_dists = getitem(value=ith_distances, index=$364compare_op.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $384load_attr.14 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $const394.15 = const(int, 0)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $396binary_subscr.16 = static_getitem(value=$384load_attr.14, index=0, index_var=$const394.15, fn=<built-in function getitem>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $408compare_op.18 = $396binary_subscr.16 >= local_connectivity
2023-11-07 09:01:26,049 [DEBUG] on stmt: bool414 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $414pred = call bool414($408compare_op.18, func=bool414, args=(Var($408compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,049 [DEBUG] on stmt: branch $414pred, 416, 660
2023-11-07 09:01:26,049 [DEBUG] ==== SSA block analysis pass on 416
2023-11-07 09:01:26,049 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,049 [DEBUG] on stmt: $416load_global.1 = global(int: <class 'int'>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $428load_global.3 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $440load_attr.5 = getattr(value=$428load_global.3, attr=floor)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $456call.7 = call $440load_attr.5(local_connectivity, func=$440load_attr.5, args=[Var(local_connectivity, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,049 [DEBUG] on stmt: index = call $416load_global.1($456call.7, func=$416load_global.1, args=[Var($456call.7, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,049 [DEBUG] on stmt: interpolation = local_connectivity - index
2023-11-07 09:01:26,049 [DEBUG] on stmt: $const494.13 = const(int, 0)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $496compare_op.14 = index > $const494.13
2023-11-07 09:01:26,049 [DEBUG] on stmt: bool502 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $502pred = call bool502($496compare_op.14, func=bool502, args=(Var($496compare_op.14, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,049 [DEBUG] on stmt: branch $502pred, 504, 630
2023-11-07 09:01:26,049 [DEBUG] ==== SSA block analysis pass on 504
2023-11-07 09:01:26,049 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,049 [DEBUG] on stmt: $const508.3 = const(int, 1)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $binop_sub510.4 = index - $const508.3
2023-11-07 09:01:26,049 [DEBUG] on stmt: $514binary_subscr.5 = getitem(value=non_zero_dists, index=$binop_sub510.4, fn=<built-in function getitem>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: rho[i] = $514binary_subscr.5
2023-11-07 09:01:26,049 [DEBUG] on stmt: $534load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $546compare_op.10 = interpolation > $534load_global.9
2023-11-07 09:01:26,049 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $552pred = call bool552($546compare_op.10, func=bool552, args=(Var($546compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,049 [DEBUG] on stmt: branch $552pred, 554, 628
2023-11-07 09:01:26,049 [DEBUG] ==== SSA block analysis pass on 554
2023-11-07 09:01:26,049 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,049 [DEBUG] on stmt: $562binary_subscr.3 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $578binary_subscr.7 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $const592.10 = const(int, 1)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $binop_sub594.11 = index - $const592.10
2023-11-07 09:01:26,049 [DEBUG] on stmt: $598binary_subscr.12 = getitem(value=non_zero_dists, index=$binop_sub594.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $binop_sub608.13 = $578binary_subscr.7 - $598binary_subscr.12
2023-11-07 09:01:26,049 [DEBUG] on stmt: $binop_mul612.14 = interpolation * $binop_sub608.13
2023-11-07 09:01:26,049 [DEBUG] on stmt: $binop_iadd616.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$562binary_subscr.3, rhs=$binop_mul612.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,049 [DEBUG] on stmt: rho[i] = $binop_iadd616.15
2023-11-07 09:01:26,049 [DEBUG] on stmt: jump 628
2023-11-07 09:01:26,049 [DEBUG] ==== SSA block analysis pass on 628
2023-11-07 09:01:26,049 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,049 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,049 [DEBUG] ==== SSA block analysis pass on 630
2023-11-07 09:01:26,049 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,049 [DEBUG] on stmt: $const634.3 = const(int, 0)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $636binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const634.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $binop_mul646.5 = interpolation * $636binary_subscr.4
2023-11-07 09:01:26,049 [DEBUG] on stmt: rho[i] = $binop_mul646.5
2023-11-07 09:01:26,049 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,049 [DEBUG] ==== SSA block analysis pass on 660
2023-11-07 09:01:26,049 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,049 [DEBUG] on stmt: $662load_attr.2 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $const672.3 = const(int, 0)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $674binary_subscr.4 = static_getitem(value=$662load_attr.2, index=0, index_var=$const672.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $const684.5 = const(int, 0)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $686compare_op.6 = $674binary_subscr.4 > $const684.5
2023-11-07 09:01:26,049 [DEBUG] on stmt: bool692 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $692pred = call bool692($686compare_op.6, func=bool692, args=(Var($686compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,049 [DEBUG] on stmt: branch $692pred, 694, 740
2023-11-07 09:01:26,049 [DEBUG] ==== SSA block analysis pass on 694
2023-11-07 09:01:26,049 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,049 [DEBUG] on stmt: $694load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $706load_attr.3 = getattr(value=$694load_global.1, attr=max)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $722call.5 = call $706load_attr.3(non_zero_dists, func=$706load_attr.3, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,049 [DEBUG] on stmt: rho[i] = $722call.5
2023-11-07 09:01:26,049 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,049 [DEBUG] ==== SSA block analysis pass on 740
2023-11-07 09:01:26,049 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,049 [DEBUG] on stmt: $740load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $758call.4 = call $740load_global.1(n_iter, func=$740load_global.1, args=[Var(n_iter, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $768get_iter.5 = getiter(value=$758call.4)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $phi770.1 = $768get_iter.5
2023-11-07 09:01:26,049 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,049 [DEBUG] ==== SSA block analysis pass on 770
2023-11-07 09:01:26,049 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,049 [DEBUG] on stmt: $770for_iter.2 = iternext(value=$phi770.1)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $770for_iter.3 = pair_first(value=$770for_iter.2)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $770for_iter.4 = pair_second(value=$770for_iter.2)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $phi772.2 = $770for_iter.3
2023-11-07 09:01:26,049 [DEBUG] on stmt: branch $770for_iter.4, 772, 1112
2023-11-07 09:01:26,049 [DEBUG] ==== SSA block analysis pass on 772
2023-11-07 09:01:26,049 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,049 [DEBUG] on stmt: n = $phi772.2
2023-11-07 09:01:26,049 [DEBUG] on stmt: psum = const(float, 0.0)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $778load_global.4 = global(range: <class 'range'>)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $const790.6 = const(int, 1)
2023-11-07 09:01:26,049 [DEBUG] on stmt: $794load_attr.8 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $const804.9 = const(int, 1)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $806binary_subscr.10 = static_getitem(value=$794load_attr.8, index=1, index_var=$const804.9, fn=<built-in function getitem>)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $820call.11 = call $778load_global.4($const790.6, $806binary_subscr.10, func=$778load_global.4, args=[Var($const790.6, umap_.py:220), Var($806binary_subscr.10, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $830get_iter.12 = getiter(value=$820call.11)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $phi832.2 = $830get_iter.12
2023-11-07 09:01:26,050 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 832
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: $832for_iter.3 = iternext(value=$phi832.2)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $832for_iter.4 = pair_first(value=$832for_iter.3)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $832for_iter.5 = pair_second(value=$832for_iter.3)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $phi834.3 = $832for_iter.4
2023-11-07 09:01:26,050 [DEBUG] on stmt: branch $832for_iter.5, 834, 954
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 834
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: j = $phi834.3
2023-11-07 09:01:26,050 [DEBUG] on stmt: $842build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
2023-11-07 09:01:26,050 [DEBUG] on stmt: $844binary_subscr.8 = getitem(value=distances, index=$842build_tuple.7, fn=<built-in function getitem>)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $858binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,050 [DEBUG] on stmt: d = $844binary_subscr.8 - $858binary_subscr.11
2023-11-07 09:01:26,050 [DEBUG] on stmt: $const876.14 = const(int, 0)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $878compare_op.15 = d > $const876.14
2023-11-07 09:01:26,050 [DEBUG] on stmt: bool884 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $884pred = call bool884($878compare_op.15, func=bool884, args=(Var($878compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,050 [DEBUG] on stmt: branch $884pred, 886, 942
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 886
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: $888load_global.4 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $900load_attr.6 = getattr(value=$888load_global.4, attr=exp)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $binop_truediv914.9 = d / mid
2023-11-07 09:01:26,050 [DEBUG] on stmt: $918unary_negative.10 = unary(fn=<built-in function neg>, value=$binop_truediv914.9)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $924call.11 = call $900load_attr.6($918unary_negative.10, func=$900load_attr.6, args=[Var($918unary_negative.10, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,050 [DEBUG] on stmt: psum = $binop_iadd934.12
2023-11-07 09:01:26,050 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 942
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: $const944.4 = const(float, 1.0)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,050 [DEBUG] on stmt: psum = $binop_iadd946.5
2023-11-07 09:01:26,050 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 954
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: $954load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $966load_attr.4 = getattr(value=$954load_global.2, attr=fabs)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $binop_sub980.7 = psum - target
2023-11-07 09:01:26,050 [DEBUG] on stmt: $988call.8 = call $966load_attr.4($binop_sub980.7, func=$966load_attr.4, args=[Var($binop_sub980.7, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $998load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $1010compare_op.10 = $988call.8 < $998load_global.9
2023-11-07 09:01:26,050 [DEBUG] on stmt: bool1016 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $1016pred = call bool1016($1010compare_op.10, func=bool1016, args=(Var($1010compare_op.10, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,050 [DEBUG] on stmt: branch $1016pred, 1018, 1022
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 1018
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: jump 1112
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 1022
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: $1026compare_op.4 = psum > target
2023-11-07 09:01:26,050 [DEBUG] on stmt: bool1032 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $1032pred = call bool1032($1026compare_op.4, func=bool1032, args=(Var($1026compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,050 [DEBUG] on stmt: branch $1032pred, 1034, 1056
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 1034
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: hi = mid
2023-11-07 09:01:26,050 [DEBUG] on stmt: $binop_add1042.5 = lo + hi
2023-11-07 09:01:26,050 [DEBUG] on stmt: $const1046.6 = const(float, 2.0)
2023-11-07 09:01:26,050 [DEBUG] on stmt: mid = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,050 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 1056
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: lo = mid
2023-11-07 09:01:26,050 [DEBUG] on stmt: $1062load_global.4 = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $1074compare_op.5 = hi == $1062load_global.4
2023-11-07 09:01:26,050 [DEBUG] on stmt: bool1080 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $1080pred = call bool1080($1074compare_op.5, func=bool1080, args=(Var($1074compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,050 [DEBUG] on stmt: branch $1080pred, 1082, 1094
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 1082
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: $const1084.3 = const(int, 2)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,050 [DEBUG] on stmt: mid = $binop_imul1086.4
2023-11-07 09:01:26,050 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 1094
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: $binop_add1098.4 = lo + hi
2023-11-07 09:01:26,050 [DEBUG] on stmt: $const1102.5 = const(float, 2.0)
2023-11-07 09:01:26,050 [DEBUG] on stmt: mid = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,050 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,050 [DEBUG] ==== SSA block analysis pass on 1112
2023-11-07 09:01:26,050 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,050 [DEBUG] on stmt: result[i] = mid
2023-11-07 09:01:26,050 [DEBUG] on stmt: $1126binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $const1136.7 = const(float, 0.0)
2023-11-07 09:01:26,050 [DEBUG] on stmt: $1138compare_op.8 = $1126binary_subscr.6 > $const1136.7
2023-11-07 09:01:26,051 [DEBUG] on stmt: bool1144 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1144pred = call bool1144($1138compare_op.8, func=bool1144, args=(Var($1138compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,051 [DEBUG] on stmt: branch $1144pred, 1146, 1256
2023-11-07 09:01:26,051 [DEBUG] ==== SSA block analysis pass on 1146
2023-11-07 09:01:26,051 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1146load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1158load_attr.3 = getattr(value=$1146load_global.1, attr=mean)
2023-11-07 09:01:26,051 [DEBUG] on stmt: mean_ith_distances = call $1158load_attr.3(ith_distances, func=$1158load_attr.3, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1190binary_subscr.8 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1200load_global.9 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $binop_mul1214.11 = $1200load_global.9 * mean_ith_distances
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1218compare_op.12 = $1190binary_subscr.8 < $binop_mul1214.11
2023-11-07 09:01:26,051 [DEBUG] on stmt: bool1224 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1224pred = call bool1224($1218compare_op.12, func=bool1224, args=(Var($1218compare_op.12, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,051 [DEBUG] on stmt: branch $1224pred, 1226, 1252
2023-11-07 09:01:26,051 [DEBUG] ==== SSA block analysis pass on 1226
2023-11-07 09:01:26,051 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1226load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $binop_mul1240.3 = $1226load_global.1 * mean_ith_distances
2023-11-07 09:01:26,051 [DEBUG] on stmt: result[i] = $binop_mul1240.3
2023-11-07 09:01:26,051 [DEBUG] on stmt: jump 1252
2023-11-07 09:01:26,051 [DEBUG] ==== SSA block analysis pass on 1252
2023-11-07 09:01:26,051 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,051 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,051 [DEBUG] ==== SSA block analysis pass on 1256
2023-11-07 09:01:26,051 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1260binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1270load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $binop_mul1284.6 = $1270load_global.4 * mean_distances
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1288compare_op.7 = $1260binary_subscr.3 < $binop_mul1284.6
2023-11-07 09:01:26,051 [DEBUG] on stmt: bool1294 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1294pred = call bool1294($1288compare_op.7, func=bool1294, args=(Var($1288compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,051 [DEBUG] on stmt: branch $1294pred, 1296, 1322
2023-11-07 09:01:26,051 [DEBUG] ==== SSA block analysis pass on 1296
2023-11-07 09:01:26,051 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1296load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,051 [DEBUG] on stmt: $binop_mul1310.3 = $1296load_global.1 * mean_distances
2023-11-07 09:01:26,051 [DEBUG] on stmt: result[i] = $binop_mul1310.3
2023-11-07 09:01:26,051 [DEBUG] on stmt: jump 1322
2023-11-07 09:01:26,051 [DEBUG] ==== SSA block analysis pass on 1322
2023-11-07 09:01:26,051 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,051 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,051 [DEBUG] ==== SSA block analysis pass on 1326
2023-11-07 09:01:26,051 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1330build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
2023-11-07 09:01:26,051 [DEBUG] on stmt: $1332return_value.3 = cast(value=$1330build_tuple.2)
2023-11-07 09:01:26,051 [DEBUG] on stmt: return $1332return_value.3
2023-11-07 09:01:26,051 [DEBUG] ==== SSA block analysis pass on 1327
2023-11-07 09:01:26,051 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,051 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,051 [DEBUG] ==== SSA block analysis pass on 1328
2023-11-07 09:01:26,051 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,051 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,051 [DEBUG] ==== SSA block analysis pass on 1329
2023-11-07 09:01:26,051 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282739f10>
2023-11-07 09:01:26,051 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,052 [DEBUG] defs defaultdict(<class 'list'>,
            {'$1010compare_op.10': [<numba.core.ir.Assign object at 0x282751c10>],
             '$1016pred': [<numba.core.ir.Assign object at 0x282751f50>],
             '$1026compare_op.4': [<numba.core.ir.Assign object at 0x282752690>],
             '$1032pred': [<numba.core.ir.Assign object at 0x282752ad0>],
             '$1062load_global.4': [<numba.core.ir.Assign object at 0x282753dd0>],
             '$1074compare_op.5': [<numba.core.ir.Assign object at 0x282754050>],
             '$1080pred': [<numba.core.ir.Assign object at 0x282754490>],
             '$108load_attr.15': [<numba.core.ir.Assign object at 0x2841f3350>],
             '$1126binary_subscr.6': [<numba.core.ir.Assign object at 0x282756250>],
             '$1138compare_op.8': [<numba.core.ir.Assign object at 0x282756650>],
             '$1144pred': [<numba.core.ir.Assign object at 0x2827569d0>],
             '$1146load_global.1': [<numba.core.ir.Assign object at 0x282756b90>],
             '$1158load_attr.3': [<numba.core.ir.Assign object at 0x282756dd0>],
             '$1190binary_subscr.8': [<numba.core.ir.Assign object at 0x282757890>],
             '$1200load_global.9': [<numba.core.ir.Assign object at 0x282757ad0>],
             '$1218compare_op.12': [<numba.core.ir.Assign object at 0x282758110>],
             '$1224pred': [<numba.core.ir.Assign object at 0x2827584d0>],
             '$1226load_global.1': [<numba.core.ir.Assign object at 0x282758650>],
             '$1260binary_subscr.3': [<numba.core.ir.Assign object at 0x2827594d0>],
             '$1270load_global.4': [<numba.core.ir.Assign object at 0x282759710>],
             '$1288compare_op.7': [<numba.core.ir.Assign object at 0x282759cd0>],
             '$1294pred': [<numba.core.ir.Assign object at 0x28275a050>],
             '$1296load_global.1': [<numba.core.ir.Assign object at 0x28275a1d0>],
             '$1330build_tuple.2': [<numba.core.ir.Assign object at 0x28275b010>],
             '$1332return_value.3': [<numba.core.ir.Assign object at 0x28275b210>],
             '$136load_global.17': [<numba.core.ir.Assign object at 0x282713ad0>],
             '$148load_attr.19': [<numba.core.ir.Assign object at 0x282711390>],
             '$160load_attr.21': [<numba.core.ir.Assign object at 0x282711150>],
             '$16load_attr.2': [<numba.core.ir.Assign object at 0x2825d9350>],
             '$172binary_subscr.23': [<numba.core.ir.Assign object at 0x282502290>],
             '$182load_global.24': [<numba.core.ir.Assign object at 0x2827118d0>],
             '$194load_attr.25': [<numba.core.ir.Assign object at 0x282735c10>],
             '$222load_global.27': [<numba.core.ir.Assign object at 0x2827361d0>],
             '$234load_attr.29': [<numba.core.ir.Assign object at 0x282736390>],
             '$262load_global.32': [<numba.core.ir.Assign object at 0x282736b10>],
             '$276load_attr.35': [<numba.core.ir.Assign object at 0x282736ed0>],
             '$288binary_subscr.37': [<numba.core.ir.Assign object at 0x282501610>],
             '$302call.38': [<numba.core.ir.Assign object at 0x2827374d0>],
             '$312get_iter.39': [<numba.core.ir.Assign object at 0x2827376d0>],
             '$316for_iter.1': [<numba.core.ir.Assign object at 0x282737890>],
             '$316for_iter.2': [<numba.core.ir.Assign object at 0x282737a10>],
             '$316for_iter.3': [<numba.core.ir.Assign object at 0x282737b90>],
             '$32call.4': [<numba.core.ir.Assign object at 0x2825424d0>],
             '$364compare_op.11': [<numba.core.ir.Assign object at 0x282739690>],
             '$384load_attr.14': [<numba.core.ir.Assign object at 0x282739dd0>],
             '$396binary_subscr.16': [<numba.core.ir.Assign object at 0x282502350>],
             '$408compare_op.18': [<numba.core.ir.Assign object at 0x28273a610>],
             '$414pred': [<numba.core.ir.Assign object at 0x28273aa10>],
             '$416load_global.1': [<numba.core.ir.Assign object at 0x2827392d0>],
             '$428load_global.3': [<numba.core.ir.Assign object at 0x28273ac90>],
             '$440load_attr.5': [<numba.core.ir.Assign object at 0x28273afd0>],
             '$456call.7': [<numba.core.ir.Assign object at 0x28273b390>],
             '$496compare_op.14': [<numba.core.ir.Assign object at 0x28273c350>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x2825d9190>],
             '$502pred': [<numba.core.ir.Assign object at 0x28273c750>],
             '$50load_global.7': [<numba.core.ir.Assign object at 0x28270fd10>],
             '$514binary_subscr.5': [<numba.core.ir.Assign object at 0x28273d010>],
             '$534load_global.9': [<numba.core.ir.Assign object at 0x28273d850>],
             '$546compare_op.10': [<numba.core.ir.Assign object at 0x28273dbd0>],
             '$552pred': [<numba.core.ir.Assign object at 0x28273dfd0>],
             '$562binary_subscr.3': [<numba.core.ir.Assign object at 0x28273e490>],
             '$578binary_subscr.7': [<numba.core.ir.Assign object at 0x28273ebd0>],
             '$598binary_subscr.12': [<numba.core.ir.Assign object at 0x28273f4d0>],
             '$62load_attr.9': [<numba.core.ir.Assign object at 0x28270ecd0>],
             '$636binary_subscr.4': [<numba.core.ir.Assign object at 0x282503010>],
             '$662load_attr.2': [<numba.core.ir.Assign object at 0x282740fd0>],
             '$674binary_subscr.4': [<numba.core.ir.Assign object at 0x2841f2cd0>],
             '$686compare_op.6': [<numba.core.ir.Assign object at 0x2827417d0>],
             '$692pred': [<numba.core.ir.Assign object at 0x282741b90>],
             '$694load_global.1': [<numba.core.ir.Assign object at 0x282741dd0>],
             '$706load_attr.3': [<numba.core.ir.Assign object at 0x282741f90>],
             '$722call.5': [<numba.core.ir.Assign object at 0x2827423d0>],
             '$740load_global.1': [<numba.core.ir.Assign object at 0x282742a50>],
             '$74load_attr.11': [<numba.core.ir.Assign object at 0x2841f3bd0>],
             '$758call.4': [<numba.core.ir.Assign object at 0x282742e10>],
             '$768get_iter.5': [<numba.core.ir.Assign object at 0x282743050>],
             '$770for_iter.2': [<numba.core.ir.Assign object at 0x282743410>],
             '$770for_iter.3': [<numba.core.ir.Assign object at 0x282743590>],
             '$770for_iter.4': [<numba.core.ir.Assign object at 0x282743710>],
             '$778load_global.4': [<numba.core.ir.Assign object at 0x282743ed0>],
             '$794load_attr.8': [<numba.core.ir.Assign object at 0x28274c510>],
             '$806binary_subscr.10': [<numba.core.ir.Assign object at 0x2841f29d0>],
             '$820call.11': [<numba.core.ir.Assign object at 0x28274cb50>],
             '$830get_iter.12': [<numba.core.ir.Assign object at 0x28274cdd0>],
             '$832for_iter.3': [<numba.core.ir.Assign object at 0x28274d110>],
             '$832for_iter.4': [<numba.core.ir.Assign object at 0x28274d290>],
             '$832for_iter.5': [<numba.core.ir.Assign object at 0x28274d410>],
             '$842build_tuple.7': [<numba.core.ir.Assign object at 0x28274ded0>],
             '$844binary_subscr.8': [<numba.core.ir.Assign object at 0x28274e0d0>],
             '$858binary_subscr.11': [<numba.core.ir.Assign object at 0x28274e6d0>],
             '$86binary_subscr.13': [<numba.core.ir.Assign object at 0x282500a90>],
             '$878compare_op.15': [<numba.core.ir.Assign object at 0x28274ef50>],
             '$884pred': [<numba.core.ir.Assign object at 0x28274f310>],
             '$888load_global.4': [<numba.core.ir.Assign object at 0x28274f550>],
             '$900load_attr.6': [<numba.core.ir.Assign object at 0x28274f790>],
             '$918unary_negative.10': [<numba.core.ir.Assign object at 0x28274ff90>],
             '$924call.11': [<numba.core.ir.Assign object at 0x282750250>],
             '$954load_global.2': [<numba.core.ir.Assign object at 0x282750e90>],
             '$966load_attr.4': [<numba.core.ir.Assign object at 0x282751090>],
             '$96load_global.14': [<numba.core.ir.Assign object at 0x2841f3f10>],
             '$988call.8': [<numba.core.ir.Assign object at 0x282751850>],
             '$998load_global.9': [<numba.core.ir.Assign object at 0x282751a10>],
             '$binop_add1042.5': [<numba.core.ir.Assign object at 0x2827532d0>],
             '$binop_add1098.4': [<numba.core.ir.Assign object at 0x282755210>],
             '$binop_iadd616.15': [<numba.core.ir.Assign object at 0x28273fb10>],
             '$binop_iadd934.12': [<numba.core.ir.Assign object at 0x282750450>],
             '$binop_iadd946.5': [<numba.core.ir.Assign object at 0x282750ad0>],
             '$binop_imul1086.4': [<numba.core.ir.Assign object at 0x282754a10>],
             '$binop_mul1214.11': [<numba.core.ir.Assign object at 0x282757ed0>],
             '$binop_mul1240.3': [<numba.core.ir.Assign object at 0x282758a10>],
             '$binop_mul1284.6': [<numba.core.ir.Assign object at 0x282759ad0>],
             '$binop_mul1310.3': [<numba.core.ir.Assign object at 0x28275a550>],
             '$binop_mul612.14': [<numba.core.ir.Assign object at 0x28273f8d0>],
             '$binop_mul646.5': [<numba.core.ir.Assign object at 0x282740650>],
             '$binop_sub510.4': [<numba.core.ir.Assign object at 0x28273cdd0>],
             '$binop_sub594.11': [<numba.core.ir.Assign object at 0x28273f290>],
             '$binop_sub608.13': [<numba.core.ir.Assign object at 0x28273f6d0>],
             '$binop_sub980.7': [<numba.core.ir.Assign object at 0x2827515d0>],
             '$binop_truediv914.9': [<numba.core.ir.Assign object at 0x28274fd90>],
             '$const1046.6': [<numba.core.ir.Assign object at 0x2827534d0>],
             '$const1084.3': [<numba.core.ir.Assign object at 0x282754850>],
             '$const1102.5': [<numba.core.ir.Assign object at 0x2827553d0>],
             '$const1136.7': [<numba.core.ir.Assign object at 0x282756450>],
             '$const170.22': [<numba.core.ir.Assign object at 0x2827116d0>],
             '$const286.36': [<numba.core.ir.Assign object at 0x282737090>],
             '$const362.10': [<numba.core.ir.Assign object at 0x282739490>],
             '$const394.15': [<numba.core.ir.Assign object at 0x28273a050>],
             '$const494.13': [<numba.core.ir.Assign object at 0x28273c150>],
             '$const508.3': [<numba.core.ir.Assign object at 0x28273cbd0>],
             '$const592.10': [<numba.core.ir.Assign object at 0x28273f090>],
             '$const634.3': [<numba.core.ir.Assign object at 0x282740250>],
             '$const672.3': [<numba.core.ir.Assign object at 0x282741190>],
             '$const684.5': [<numba.core.ir.Assign object at 0x2827415d0>],
             '$const790.6': [<numba.core.ir.Assign object at 0x28274c110>],
             '$const804.9': [<numba.core.ir.Assign object at 0x28274c690>],
             '$const84.12': [<numba.core.ir.Assign object at 0x2841f2090>],
             '$const876.14': [<numba.core.ir.Assign object at 0x28274ed50>],
             '$const944.4': [<numba.core.ir.Assign object at 0x282750890>],
             '$phi316.0': [<numba.core.ir.Assign object at 0x28270cf10>],
             '$phi318.1': [<numba.core.ir.Assign object at 0x282737c10>],
             '$phi770.1': [<numba.core.ir.Assign object at 0x282742f10>],
             '$phi772.2': [<numba.core.ir.Assign object at 0x2827437d0>],
             '$phi832.2': [<numba.core.ir.Assign object at 0x28273cc90>],
             '$phi834.3': [<numba.core.ir.Assign object at 0x28274d4d0>],
             'bandwidth': [<numba.core.ir.Assign object at 0x1712a5250>],
             'bool1016': [<numba.core.ir.Assign object at 0x282751dd0>],
             'bool1032': [<numba.core.ir.Assign object at 0x282752910>],
             'bool1080': [<numba.core.ir.Assign object at 0x2827542d0>],
             'bool1144': [<numba.core.ir.Assign object at 0x282756810>],
             'bool1224': [<numba.core.ir.Assign object at 0x282758310>],
             'bool1294': [<numba.core.ir.Assign object at 0x282759e90>],
             'bool414': [<numba.core.ir.Assign object at 0x28273a850>],
             'bool502': [<numba.core.ir.Assign object at 0x28273c590>],
             'bool552': [<numba.core.ir.Assign object at 0x28273de10>],
             'bool692': [<numba.core.ir.Assign object at 0x2827419d0>],
             'bool884': [<numba.core.ir.Assign object at 0x28274f150>],
             'd': [<numba.core.ir.Assign object at 0x28274e890>],
             'distances': [<numba.core.ir.Assign object at 0x282729b90>],
             'hi': [<numba.core.ir.Assign object at 0x2827383d0>,
                    <numba.core.ir.Assign object at 0x282752e10>],
             'i': [<numba.core.ir.Assign object at 0x282737ed0>],
             'index': [<numba.core.ir.Assign object at 0x28273b5d0>],
             'interpolation': [<numba.core.ir.Assign object at 0x28273bc50>],
             'ith_distances': [<numba.core.ir.Assign object at 0x282738d90>],
             'j': [<numba.core.ir.Assign object at 0x28274d790>],
             'k': [<numba.core.ir.Assign object at 0x28272b550>],
             'lo': [<numba.core.ir.Assign object at 0x2827380d0>,
                    <numba.core.ir.Assign object at 0x282753b10>],
             'local_connectivity': [<numba.core.ir.Assign object at 0x28026a510>],
             'mean_distances': [<numba.core.ir.Assign object at 0x2827366d0>],
             'mean_ith_distances': [<numba.core.ir.Assign object at 0x282757150>],
             'mid': [<numba.core.ir.Assign object at 0x282738710>,
                     <numba.core.ir.Assign object at 0x282753710>,
                     <numba.core.ir.Assign object at 0x282754a90>,
                     <numba.core.ir.Assign object at 0x2827555d0>],
             'n': [<numba.core.ir.Assign object at 0x282743a50>],
             'n_iter': [<numba.core.ir.Assign object at 0x282729f90>],
             'non_zero_dists': [<numba.core.ir.Assign object at 0x282739890>],
             'psum': [<numba.core.ir.Assign object at 0x282743bd0>,
                      <numba.core.ir.Assign object at 0x282750490>,
                      <numba.core.ir.Assign object at 0x282750c10>],
             'result': [<numba.core.ir.Assign object at 0x282735e10>],
             'rho': [<numba.core.ir.Assign object at 0x2841f0890>],
             'target': [<numba.core.ir.Assign object at 0x28270d1d0>]})
2023-11-07 09:01:26,052 [DEBUG] SSA violators {'lo', 'hi', 'psum', 'mid'}
2023-11-07 09:01:26,052 [DEBUG] Fix SSA violator on var lo
2023-11-07 09:01:26,052 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,052 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,052 [DEBUG] on stmt: distances = arg(0, name=distances)
2023-11-07 09:01:26,052 [DEBUG] on stmt: k = arg(1, name=k)
2023-11-07 09:01:26,052 [DEBUG] on stmt: n_iter = arg(2, name=n_iter)
2023-11-07 09:01:26,052 [DEBUG] on stmt: local_connectivity = arg(3, name=local_connectivity)
2023-11-07 09:01:26,052 [DEBUG] on stmt: bandwidth = arg(4, name=bandwidth)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=log2)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $32call.4 = call $16load_attr.2(k, func=$16load_attr.2, args=[Var(k, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,052 [DEBUG] on stmt: target = $32call.4 * bandwidth
2023-11-07 09:01:26,052 [DEBUG] on stmt: $50load_global.7 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $62load_attr.9 = getattr(value=$50load_global.7, attr=zeros)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $74load_attr.11 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $const84.12 = const(int, 0)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $86binary_subscr.13 = static_getitem(value=$74load_attr.11, index=0, index_var=$const84.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $96load_global.14 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $108load_attr.15 = getattr(value=$96load_global.14, attr=float32)
2023-11-07 09:01:26,052 [DEBUG] on stmt: rho = call $62load_attr.9($86binary_subscr.13, func=$62load_attr.9, args=[Var($86binary_subscr.13, umap_.py:190)], kws=[('dtype', Var($108load_attr.15, umap_.py:190))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $136load_global.17 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $148load_attr.19 = getattr(value=$136load_global.17, attr=zeros)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $160load_attr.21 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $const170.22 = const(int, 0)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $172binary_subscr.23 = static_getitem(value=$160load_attr.21, index=0, index_var=$const170.22, fn=<built-in function getitem>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $182load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $194load_attr.25 = getattr(value=$182load_global.24, attr=float32)
2023-11-07 09:01:26,052 [DEBUG] on stmt: result = call $148load_attr.19($172binary_subscr.23, func=$148load_attr.19, args=[Var($172binary_subscr.23, umap_.py:191)], kws=[('dtype', Var($194load_attr.25, umap_.py:191))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $222load_global.27 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $234load_attr.29 = getattr(value=$222load_global.27, attr=mean)
2023-11-07 09:01:26,052 [DEBUG] on stmt: mean_distances = call $234load_attr.29(distances, func=$234load_attr.29, args=[Var(distances, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $262load_global.32 = global(range: <class 'range'>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $276load_attr.35 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $const286.36 = const(int, 0)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $288binary_subscr.37 = static_getitem(value=$276load_attr.35, index=0, index_var=$const286.36, fn=<built-in function getitem>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $302call.38 = call $262load_global.32($288binary_subscr.37, func=$262load_global.32, args=[Var($288binary_subscr.37, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $312get_iter.39 = getiter(value=$302call.38)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $phi316.0 = $312get_iter.39
2023-11-07 09:01:26,052 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,052 [DEBUG] ==== SSA block rewrite pass on 314
2023-11-07 09:01:26,052 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,052 [DEBUG] on stmt: jump 316
2023-11-07 09:01:26,052 [DEBUG] ==== SSA block rewrite pass on 316
2023-11-07 09:01:26,052 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,052 [DEBUG] on stmt: $316for_iter.1 = iternext(value=$phi316.0)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $316for_iter.2 = pair_first(value=$316for_iter.1)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $316for_iter.3 = pair_second(value=$316for_iter.1)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $phi318.1 = $316for_iter.2
2023-11-07 09:01:26,052 [DEBUG] on stmt: branch $316for_iter.3, 318, 1326
2023-11-07 09:01:26,052 [DEBUG] ==== SSA block rewrite pass on 318
2023-11-07 09:01:26,052 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,052 [DEBUG] on stmt: i = $phi318.1
2023-11-07 09:01:26,052 [DEBUG] on stmt: lo = const(float, 0.0)
2023-11-07 09:01:26,052 [DEBUG] first assign: lo
2023-11-07 09:01:26,052 [DEBUG] replaced with: lo = const(float, 0.0)
2023-11-07 09:01:26,052 [DEBUG] on stmt: hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,052 [DEBUG] on stmt: mid = const(float, 1.0)
2023-11-07 09:01:26,052 [DEBUG] on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $const362.10 = const(float, 0.0)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $364compare_op.11 = ith_distances > $const362.10
2023-11-07 09:01:26,052 [DEBUG] on stmt: non_zero_dists = getitem(value=ith_distances, index=$364compare_op.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $384load_attr.14 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $const394.15 = const(int, 0)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $396binary_subscr.16 = static_getitem(value=$384load_attr.14, index=0, index_var=$const394.15, fn=<built-in function getitem>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $408compare_op.18 = $396binary_subscr.16 >= local_connectivity
2023-11-07 09:01:26,052 [DEBUG] on stmt: bool414 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,052 [DEBUG] on stmt: $414pred = call bool414($408compare_op.18, func=bool414, args=(Var($408compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,053 [DEBUG] on stmt: branch $414pred, 416, 660
2023-11-07 09:01:26,053 [DEBUG] ==== SSA block rewrite pass on 416
2023-11-07 09:01:26,053 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,053 [DEBUG] on stmt: $416load_global.1 = global(int: <class 'int'>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $428load_global.3 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $440load_attr.5 = getattr(value=$428load_global.3, attr=floor)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $456call.7 = call $440load_attr.5(local_connectivity, func=$440load_attr.5, args=[Var(local_connectivity, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,053 [DEBUG] on stmt: index = call $416load_global.1($456call.7, func=$416load_global.1, args=[Var($456call.7, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,053 [DEBUG] on stmt: interpolation = local_connectivity - index
2023-11-07 09:01:26,053 [DEBUG] on stmt: $const494.13 = const(int, 0)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $496compare_op.14 = index > $const494.13
2023-11-07 09:01:26,053 [DEBUG] on stmt: bool502 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $502pred = call bool502($496compare_op.14, func=bool502, args=(Var($496compare_op.14, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,053 [DEBUG] on stmt: branch $502pred, 504, 630
2023-11-07 09:01:26,053 [DEBUG] ==== SSA block rewrite pass on 504
2023-11-07 09:01:26,053 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,053 [DEBUG] on stmt: $const508.3 = const(int, 1)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $binop_sub510.4 = index - $const508.3
2023-11-07 09:01:26,053 [DEBUG] on stmt: $514binary_subscr.5 = getitem(value=non_zero_dists, index=$binop_sub510.4, fn=<built-in function getitem>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: rho[i] = $514binary_subscr.5
2023-11-07 09:01:26,053 [DEBUG] on stmt: $534load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $546compare_op.10 = interpolation > $534load_global.9
2023-11-07 09:01:26,053 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $552pred = call bool552($546compare_op.10, func=bool552, args=(Var($546compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,053 [DEBUG] on stmt: branch $552pred, 554, 628
2023-11-07 09:01:26,053 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,053 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,053 [DEBUG] on stmt: $562binary_subscr.3 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $578binary_subscr.7 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $const592.10 = const(int, 1)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $binop_sub594.11 = index - $const592.10
2023-11-07 09:01:26,053 [DEBUG] on stmt: $598binary_subscr.12 = getitem(value=non_zero_dists, index=$binop_sub594.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $binop_sub608.13 = $578binary_subscr.7 - $598binary_subscr.12
2023-11-07 09:01:26,053 [DEBUG] on stmt: $binop_mul612.14 = interpolation * $binop_sub608.13
2023-11-07 09:01:26,053 [DEBUG] on stmt: $binop_iadd616.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$562binary_subscr.3, rhs=$binop_mul612.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,053 [DEBUG] on stmt: rho[i] = $binop_iadd616.15
2023-11-07 09:01:26,053 [DEBUG] on stmt: jump 628
2023-11-07 09:01:26,053 [DEBUG] ==== SSA block rewrite pass on 628
2023-11-07 09:01:26,053 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,053 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,053 [DEBUG] ==== SSA block rewrite pass on 630
2023-11-07 09:01:26,053 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,053 [DEBUG] on stmt: $const634.3 = const(int, 0)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $636binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const634.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $binop_mul646.5 = interpolation * $636binary_subscr.4
2023-11-07 09:01:26,053 [DEBUG] on stmt: rho[i] = $binop_mul646.5
2023-11-07 09:01:26,053 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,053 [DEBUG] ==== SSA block rewrite pass on 660
2023-11-07 09:01:26,053 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,053 [DEBUG] on stmt: $662load_attr.2 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $const672.3 = const(int, 0)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $674binary_subscr.4 = static_getitem(value=$662load_attr.2, index=0, index_var=$const672.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $const684.5 = const(int, 0)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $686compare_op.6 = $674binary_subscr.4 > $const684.5
2023-11-07 09:01:26,053 [DEBUG] on stmt: bool692 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $692pred = call bool692($686compare_op.6, func=bool692, args=(Var($686compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,053 [DEBUG] on stmt: branch $692pred, 694, 740
2023-11-07 09:01:26,053 [DEBUG] ==== SSA block rewrite pass on 694
2023-11-07 09:01:26,053 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,053 [DEBUG] on stmt: $694load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $706load_attr.3 = getattr(value=$694load_global.1, attr=max)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $722call.5 = call $706load_attr.3(non_zero_dists, func=$706load_attr.3, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,053 [DEBUG] on stmt: rho[i] = $722call.5
2023-11-07 09:01:26,053 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,053 [DEBUG] ==== SSA block rewrite pass on 740
2023-11-07 09:01:26,053 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,053 [DEBUG] on stmt: $740load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $758call.4 = call $740load_global.1(n_iter, func=$740load_global.1, args=[Var(n_iter, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $768get_iter.5 = getiter(value=$758call.4)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $phi770.1 = $768get_iter.5
2023-11-07 09:01:26,053 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,053 [DEBUG] ==== SSA block rewrite pass on 770
2023-11-07 09:01:26,053 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,053 [DEBUG] on stmt: $770for_iter.2 = iternext(value=$phi770.1)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $770for_iter.3 = pair_first(value=$770for_iter.2)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $770for_iter.4 = pair_second(value=$770for_iter.2)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $phi772.2 = $770for_iter.3
2023-11-07 09:01:26,053 [DEBUG] on stmt: branch $770for_iter.4, 772, 1112
2023-11-07 09:01:26,053 [DEBUG] ==== SSA block rewrite pass on 772
2023-11-07 09:01:26,053 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,053 [DEBUG] on stmt: n = $phi772.2
2023-11-07 09:01:26,053 [DEBUG] on stmt: psum = const(float, 0.0)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $778load_global.4 = global(range: <class 'range'>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $const790.6 = const(int, 1)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $794load_attr.8 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $const804.9 = const(int, 1)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $806binary_subscr.10 = static_getitem(value=$794load_attr.8, index=1, index_var=$const804.9, fn=<built-in function getitem>)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $820call.11 = call $778load_global.4($const790.6, $806binary_subscr.10, func=$778load_global.4, args=[Var($const790.6, umap_.py:220), Var($806binary_subscr.10, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $830get_iter.12 = getiter(value=$820call.11)
2023-11-07 09:01:26,053 [DEBUG] on stmt: $phi832.2 = $830get_iter.12
2023-11-07 09:01:26,053 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 832
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: $832for_iter.3 = iternext(value=$phi832.2)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $832for_iter.4 = pair_first(value=$832for_iter.3)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $832for_iter.5 = pair_second(value=$832for_iter.3)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $phi834.3 = $832for_iter.4
2023-11-07 09:01:26,054 [DEBUG] on stmt: branch $832for_iter.5, 834, 954
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 834
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: j = $phi834.3
2023-11-07 09:01:26,054 [DEBUG] on stmt: $842build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
2023-11-07 09:01:26,054 [DEBUG] on stmt: $844binary_subscr.8 = getitem(value=distances, index=$842build_tuple.7, fn=<built-in function getitem>)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $858binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,054 [DEBUG] on stmt: d = $844binary_subscr.8 - $858binary_subscr.11
2023-11-07 09:01:26,054 [DEBUG] on stmt: $const876.14 = const(int, 0)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $878compare_op.15 = d > $const876.14
2023-11-07 09:01:26,054 [DEBUG] on stmt: bool884 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $884pred = call bool884($878compare_op.15, func=bool884, args=(Var($878compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,054 [DEBUG] on stmt: branch $884pred, 886, 942
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 886
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: $888load_global.4 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $900load_attr.6 = getattr(value=$888load_global.4, attr=exp)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $binop_truediv914.9 = d / mid
2023-11-07 09:01:26,054 [DEBUG] on stmt: $918unary_negative.10 = unary(fn=<built-in function neg>, value=$binop_truediv914.9)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $924call.11 = call $900load_attr.6($918unary_negative.10, func=$900load_attr.6, args=[Var($918unary_negative.10, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,054 [DEBUG] on stmt: psum = $binop_iadd934.12
2023-11-07 09:01:26,054 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 942
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: $const944.4 = const(float, 1.0)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,054 [DEBUG] on stmt: psum = $binop_iadd946.5
2023-11-07 09:01:26,054 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 954
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: $954load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $966load_attr.4 = getattr(value=$954load_global.2, attr=fabs)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $binop_sub980.7 = psum - target
2023-11-07 09:01:26,054 [DEBUG] on stmt: $988call.8 = call $966load_attr.4($binop_sub980.7, func=$966load_attr.4, args=[Var($binop_sub980.7, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $998load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1010compare_op.10 = $988call.8 < $998load_global.9
2023-11-07 09:01:26,054 [DEBUG] on stmt: bool1016 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1016pred = call bool1016($1010compare_op.10, func=bool1016, args=(Var($1010compare_op.10, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,054 [DEBUG] on stmt: branch $1016pred, 1018, 1022
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 1018
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: jump 1112
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 1022
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1026compare_op.4 = psum > target
2023-11-07 09:01:26,054 [DEBUG] on stmt: bool1032 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1032pred = call bool1032($1026compare_op.4, func=bool1032, args=(Var($1026compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,054 [DEBUG] on stmt: branch $1032pred, 1034, 1056
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 1034
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: hi = mid
2023-11-07 09:01:26,054 [DEBUG] on stmt: $binop_add1042.5 = lo + hi
2023-11-07 09:01:26,054 [DEBUG] on stmt: $const1046.6 = const(float, 2.0)
2023-11-07 09:01:26,054 [DEBUG] on stmt: mid = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,054 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 1056
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: lo = mid
2023-11-07 09:01:26,054 [DEBUG] replaced with: lo.1 = mid
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1062load_global.4 = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1074compare_op.5 = hi == $1062load_global.4
2023-11-07 09:01:26,054 [DEBUG] on stmt: bool1080 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1080pred = call bool1080($1074compare_op.5, func=bool1080, args=(Var($1074compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,054 [DEBUG] on stmt: branch $1080pred, 1082, 1094
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 1082
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: $const1084.3 = const(int, 2)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,054 [DEBUG] on stmt: mid = $binop_imul1086.4
2023-11-07 09:01:26,054 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 1094
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: $binop_add1098.4 = lo + hi
2023-11-07 09:01:26,054 [DEBUG] on stmt: $const1102.5 = const(float, 2.0)
2023-11-07 09:01:26,054 [DEBUG] on stmt: mid = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,054 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 1112
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: result[i] = mid
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1126binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $const1136.7 = const(float, 0.0)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1138compare_op.8 = $1126binary_subscr.6 > $const1136.7
2023-11-07 09:01:26,054 [DEBUG] on stmt: bool1144 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1144pred = call bool1144($1138compare_op.8, func=bool1144, args=(Var($1138compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,054 [DEBUG] on stmt: branch $1144pred, 1146, 1256
2023-11-07 09:01:26,054 [DEBUG] ==== SSA block rewrite pass on 1146
2023-11-07 09:01:26,054 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,054 [DEBUG] on stmt: $1146load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1158load_attr.3 = getattr(value=$1146load_global.1, attr=mean)
2023-11-07 09:01:26,055 [DEBUG] on stmt: mean_ith_distances = call $1158load_attr.3(ith_distances, func=$1158load_attr.3, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1190binary_subscr.8 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1200load_global.9 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $binop_mul1214.11 = $1200load_global.9 * mean_ith_distances
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1218compare_op.12 = $1190binary_subscr.8 < $binop_mul1214.11
2023-11-07 09:01:26,055 [DEBUG] on stmt: bool1224 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1224pred = call bool1224($1218compare_op.12, func=bool1224, args=(Var($1218compare_op.12, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,055 [DEBUG] on stmt: branch $1224pred, 1226, 1252
2023-11-07 09:01:26,055 [DEBUG] ==== SSA block rewrite pass on 1226
2023-11-07 09:01:26,055 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1226load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $binop_mul1240.3 = $1226load_global.1 * mean_ith_distances
2023-11-07 09:01:26,055 [DEBUG] on stmt: result[i] = $binop_mul1240.3
2023-11-07 09:01:26,055 [DEBUG] on stmt: jump 1252
2023-11-07 09:01:26,055 [DEBUG] ==== SSA block rewrite pass on 1252
2023-11-07 09:01:26,055 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,055 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,055 [DEBUG] ==== SSA block rewrite pass on 1256
2023-11-07 09:01:26,055 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1260binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1270load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $binop_mul1284.6 = $1270load_global.4 * mean_distances
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1288compare_op.7 = $1260binary_subscr.3 < $binop_mul1284.6
2023-11-07 09:01:26,055 [DEBUG] on stmt: bool1294 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1294pred = call bool1294($1288compare_op.7, func=bool1294, args=(Var($1288compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,055 [DEBUG] on stmt: branch $1294pred, 1296, 1322
2023-11-07 09:01:26,055 [DEBUG] ==== SSA block rewrite pass on 1296
2023-11-07 09:01:26,055 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1296load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $binop_mul1310.3 = $1296load_global.1 * mean_distances
2023-11-07 09:01:26,055 [DEBUG] on stmt: result[i] = $binop_mul1310.3
2023-11-07 09:01:26,055 [DEBUG] on stmt: jump 1322
2023-11-07 09:01:26,055 [DEBUG] ==== SSA block rewrite pass on 1322
2023-11-07 09:01:26,055 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,055 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,055 [DEBUG] ==== SSA block rewrite pass on 1326
2023-11-07 09:01:26,055 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1330build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
2023-11-07 09:01:26,055 [DEBUG] on stmt: $1332return_value.3 = cast(value=$1330build_tuple.2)
2023-11-07 09:01:26,055 [DEBUG] on stmt: return $1332return_value.3
2023-11-07 09:01:26,055 [DEBUG] ==== SSA block rewrite pass on 1327
2023-11-07 09:01:26,055 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,055 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,055 [DEBUG] ==== SSA block rewrite pass on 1328
2023-11-07 09:01:26,055 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,055 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,055 [DEBUG] ==== SSA block rewrite pass on 1329
2023-11-07 09:01:26,055 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825cf850>
2023-11-07 09:01:26,055 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,055 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {318: [<numba.core.ir.Assign object at 0x2825ce1d0>],
             1056: [<numba.core.ir.Assign object at 0x2825cc2d0>]})
2023-11-07 09:01:26,055 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,055 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,055 [DEBUG] on stmt: distances = arg(0, name=distances)
2023-11-07 09:01:26,055 [DEBUG] on stmt: k = arg(1, name=k)
2023-11-07 09:01:26,055 [DEBUG] on stmt: n_iter = arg(2, name=n_iter)
2023-11-07 09:01:26,055 [DEBUG] on stmt: local_connectivity = arg(3, name=local_connectivity)
2023-11-07 09:01:26,055 [DEBUG] on stmt: bandwidth = arg(4, name=bandwidth)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=log2)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $32call.4 = call $16load_attr.2(k, func=$16load_attr.2, args=[Var(k, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,055 [DEBUG] on stmt: target = $32call.4 * bandwidth
2023-11-07 09:01:26,055 [DEBUG] on stmt: $50load_global.7 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $62load_attr.9 = getattr(value=$50load_global.7, attr=zeros)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $74load_attr.11 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $const84.12 = const(int, 0)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $86binary_subscr.13 = static_getitem(value=$74load_attr.11, index=0, index_var=$const84.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $96load_global.14 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $108load_attr.15 = getattr(value=$96load_global.14, attr=float32)
2023-11-07 09:01:26,055 [DEBUG] on stmt: rho = call $62load_attr.9($86binary_subscr.13, func=$62load_attr.9, args=[Var($86binary_subscr.13, umap_.py:190)], kws=[('dtype', Var($108load_attr.15, umap_.py:190))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $136load_global.17 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $148load_attr.19 = getattr(value=$136load_global.17, attr=zeros)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $160load_attr.21 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $const170.22 = const(int, 0)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $172binary_subscr.23 = static_getitem(value=$160load_attr.21, index=0, index_var=$const170.22, fn=<built-in function getitem>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $182load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $194load_attr.25 = getattr(value=$182load_global.24, attr=float32)
2023-11-07 09:01:26,055 [DEBUG] on stmt: result = call $148load_attr.19($172binary_subscr.23, func=$148load_attr.19, args=[Var($172binary_subscr.23, umap_.py:191)], kws=[('dtype', Var($194load_attr.25, umap_.py:191))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $222load_global.27 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $234load_attr.29 = getattr(value=$222load_global.27, attr=mean)
2023-11-07 09:01:26,055 [DEBUG] on stmt: mean_distances = call $234load_attr.29(distances, func=$234load_attr.29, args=[Var(distances, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $262load_global.32 = global(range: <class 'range'>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $276load_attr.35 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $const286.36 = const(int, 0)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $288binary_subscr.37 = static_getitem(value=$276load_attr.35, index=0, index_var=$const286.36, fn=<built-in function getitem>)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $302call.38 = call $262load_global.32($288binary_subscr.37, func=$262load_global.32, args=[Var($288binary_subscr.37, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $312get_iter.39 = getiter(value=$302call.38)
2023-11-07 09:01:26,055 [DEBUG] on stmt: $phi316.0 = $312get_iter.39
2023-11-07 09:01:26,056 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,056 [DEBUG] ==== SSA block rewrite pass on 314
2023-11-07 09:01:26,056 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,056 [DEBUG] on stmt: jump 316
2023-11-07 09:01:26,056 [DEBUG] ==== SSA block rewrite pass on 316
2023-11-07 09:01:26,056 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,056 [DEBUG] on stmt: $316for_iter.1 = iternext(value=$phi316.0)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $316for_iter.2 = pair_first(value=$316for_iter.1)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $316for_iter.3 = pair_second(value=$316for_iter.1)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $phi318.1 = $316for_iter.2
2023-11-07 09:01:26,056 [DEBUG] on stmt: branch $316for_iter.3, 318, 1326
2023-11-07 09:01:26,056 [DEBUG] ==== SSA block rewrite pass on 318
2023-11-07 09:01:26,056 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,056 [DEBUG] on stmt: i = $phi318.1
2023-11-07 09:01:26,056 [DEBUG] on stmt: lo = const(float, 0.0)
2023-11-07 09:01:26,056 [DEBUG] on stmt: hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,056 [DEBUG] on stmt: mid = const(float, 1.0)
2023-11-07 09:01:26,056 [DEBUG] on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $const362.10 = const(float, 0.0)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $364compare_op.11 = ith_distances > $const362.10
2023-11-07 09:01:26,056 [DEBUG] on stmt: non_zero_dists = getitem(value=ith_distances, index=$364compare_op.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $384load_attr.14 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $const394.15 = const(int, 0)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $396binary_subscr.16 = static_getitem(value=$384load_attr.14, index=0, index_var=$const394.15, fn=<built-in function getitem>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $408compare_op.18 = $396binary_subscr.16 >= local_connectivity
2023-11-07 09:01:26,056 [DEBUG] on stmt: bool414 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $414pred = call bool414($408compare_op.18, func=bool414, args=(Var($408compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,056 [DEBUG] on stmt: branch $414pred, 416, 660
2023-11-07 09:01:26,056 [DEBUG] ==== SSA block rewrite pass on 416
2023-11-07 09:01:26,056 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,056 [DEBUG] on stmt: $416load_global.1 = global(int: <class 'int'>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $428load_global.3 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $440load_attr.5 = getattr(value=$428load_global.3, attr=floor)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $456call.7 = call $440load_attr.5(local_connectivity, func=$440load_attr.5, args=[Var(local_connectivity, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,056 [DEBUG] on stmt: index = call $416load_global.1($456call.7, func=$416load_global.1, args=[Var($456call.7, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,056 [DEBUG] on stmt: interpolation = local_connectivity - index
2023-11-07 09:01:26,056 [DEBUG] on stmt: $const494.13 = const(int, 0)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $496compare_op.14 = index > $const494.13
2023-11-07 09:01:26,056 [DEBUG] on stmt: bool502 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $502pred = call bool502($496compare_op.14, func=bool502, args=(Var($496compare_op.14, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,056 [DEBUG] on stmt: branch $502pred, 504, 630
2023-11-07 09:01:26,056 [DEBUG] ==== SSA block rewrite pass on 504
2023-11-07 09:01:26,056 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,056 [DEBUG] on stmt: $const508.3 = const(int, 1)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $binop_sub510.4 = index - $const508.3
2023-11-07 09:01:26,056 [DEBUG] on stmt: $514binary_subscr.5 = getitem(value=non_zero_dists, index=$binop_sub510.4, fn=<built-in function getitem>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: rho[i] = $514binary_subscr.5
2023-11-07 09:01:26,056 [DEBUG] on stmt: $534load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $546compare_op.10 = interpolation > $534load_global.9
2023-11-07 09:01:26,056 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $552pred = call bool552($546compare_op.10, func=bool552, args=(Var($546compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,056 [DEBUG] on stmt: branch $552pred, 554, 628
2023-11-07 09:01:26,056 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,056 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,056 [DEBUG] on stmt: $562binary_subscr.3 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $578binary_subscr.7 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $const592.10 = const(int, 1)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $binop_sub594.11 = index - $const592.10
2023-11-07 09:01:26,056 [DEBUG] on stmt: $598binary_subscr.12 = getitem(value=non_zero_dists, index=$binop_sub594.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $binop_sub608.13 = $578binary_subscr.7 - $598binary_subscr.12
2023-11-07 09:01:26,056 [DEBUG] on stmt: $binop_mul612.14 = interpolation * $binop_sub608.13
2023-11-07 09:01:26,056 [DEBUG] on stmt: $binop_iadd616.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$562binary_subscr.3, rhs=$binop_mul612.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,056 [DEBUG] on stmt: rho[i] = $binop_iadd616.15
2023-11-07 09:01:26,056 [DEBUG] on stmt: jump 628
2023-11-07 09:01:26,056 [DEBUG] ==== SSA block rewrite pass on 628
2023-11-07 09:01:26,056 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,056 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,056 [DEBUG] ==== SSA block rewrite pass on 630
2023-11-07 09:01:26,056 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,056 [DEBUG] on stmt: $const634.3 = const(int, 0)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $636binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const634.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $binop_mul646.5 = interpolation * $636binary_subscr.4
2023-11-07 09:01:26,056 [DEBUG] on stmt: rho[i] = $binop_mul646.5
2023-11-07 09:01:26,056 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,056 [DEBUG] ==== SSA block rewrite pass on 660
2023-11-07 09:01:26,056 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,056 [DEBUG] on stmt: $662load_attr.2 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $const672.3 = const(int, 0)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $674binary_subscr.4 = static_getitem(value=$662load_attr.2, index=0, index_var=$const672.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $const684.5 = const(int, 0)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $686compare_op.6 = $674binary_subscr.4 > $const684.5
2023-11-07 09:01:26,056 [DEBUG] on stmt: bool692 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,056 [DEBUG] on stmt: $692pred = call bool692($686compare_op.6, func=bool692, args=(Var($686compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,056 [DEBUG] on stmt: branch $692pred, 694, 740
2023-11-07 09:01:26,056 [DEBUG] ==== SSA block rewrite pass on 694
2023-11-07 09:01:26,056 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,056 [DEBUG] on stmt: $694load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $706load_attr.3 = getattr(value=$694load_global.1, attr=max)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $722call.5 = call $706load_attr.3(non_zero_dists, func=$706load_attr.3, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,057 [DEBUG] on stmt: rho[i] = $722call.5
2023-11-07 09:01:26,057 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 740
2023-11-07 09:01:26,057 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,057 [DEBUG] on stmt: $740load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $758call.4 = call $740load_global.1(n_iter, func=$740load_global.1, args=[Var(n_iter, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $768get_iter.5 = getiter(value=$758call.4)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $phi770.1 = $768get_iter.5
2023-11-07 09:01:26,057 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 770
2023-11-07 09:01:26,057 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,057 [DEBUG] on stmt: $770for_iter.2 = iternext(value=$phi770.1)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $770for_iter.3 = pair_first(value=$770for_iter.2)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $770for_iter.4 = pair_second(value=$770for_iter.2)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $phi772.2 = $770for_iter.3
2023-11-07 09:01:26,057 [DEBUG] on stmt: branch $770for_iter.4, 772, 1112
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 772
2023-11-07 09:01:26,057 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,057 [DEBUG] on stmt: n = $phi772.2
2023-11-07 09:01:26,057 [DEBUG] on stmt: psum = const(float, 0.0)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $778load_global.4 = global(range: <class 'range'>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $const790.6 = const(int, 1)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $794load_attr.8 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $const804.9 = const(int, 1)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $806binary_subscr.10 = static_getitem(value=$794load_attr.8, index=1, index_var=$const804.9, fn=<built-in function getitem>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $820call.11 = call $778load_global.4($const790.6, $806binary_subscr.10, func=$778load_global.4, args=[Var($const790.6, umap_.py:220), Var($806binary_subscr.10, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $830get_iter.12 = getiter(value=$820call.11)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $phi832.2 = $830get_iter.12
2023-11-07 09:01:26,057 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 832
2023-11-07 09:01:26,057 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,057 [DEBUG] on stmt: $832for_iter.3 = iternext(value=$phi832.2)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $832for_iter.4 = pair_first(value=$832for_iter.3)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $832for_iter.5 = pair_second(value=$832for_iter.3)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $phi834.3 = $832for_iter.4
2023-11-07 09:01:26,057 [DEBUG] on stmt: branch $832for_iter.5, 834, 954
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 834
2023-11-07 09:01:26,057 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,057 [DEBUG] on stmt: j = $phi834.3
2023-11-07 09:01:26,057 [DEBUG] on stmt: $842build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
2023-11-07 09:01:26,057 [DEBUG] on stmt: $844binary_subscr.8 = getitem(value=distances, index=$842build_tuple.7, fn=<built-in function getitem>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $858binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: d = $844binary_subscr.8 - $858binary_subscr.11
2023-11-07 09:01:26,057 [DEBUG] on stmt: $const876.14 = const(int, 0)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $878compare_op.15 = d > $const876.14
2023-11-07 09:01:26,057 [DEBUG] on stmt: bool884 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $884pred = call bool884($878compare_op.15, func=bool884, args=(Var($878compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,057 [DEBUG] on stmt: branch $884pred, 886, 942
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 886
2023-11-07 09:01:26,057 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,057 [DEBUG] on stmt: $888load_global.4 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $900load_attr.6 = getattr(value=$888load_global.4, attr=exp)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $binop_truediv914.9 = d / mid
2023-11-07 09:01:26,057 [DEBUG] on stmt: $918unary_negative.10 = unary(fn=<built-in function neg>, value=$binop_truediv914.9)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $924call.11 = call $900load_attr.6($918unary_negative.10, func=$900load_attr.6, args=[Var($918unary_negative.10, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,057 [DEBUG] on stmt: psum = $binop_iadd934.12
2023-11-07 09:01:26,057 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 942
2023-11-07 09:01:26,057 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,057 [DEBUG] on stmt: $const944.4 = const(float, 1.0)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,057 [DEBUG] on stmt: psum = $binop_iadd946.5
2023-11-07 09:01:26,057 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 954
2023-11-07 09:01:26,057 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,057 [DEBUG] on stmt: $954load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $966load_attr.4 = getattr(value=$954load_global.2, attr=fabs)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $binop_sub980.7 = psum - target
2023-11-07 09:01:26,057 [DEBUG] on stmt: $988call.8 = call $966load_attr.4($binop_sub980.7, func=$966load_attr.4, args=[Var($binop_sub980.7, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $998load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $1010compare_op.10 = $988call.8 < $998load_global.9
2023-11-07 09:01:26,057 [DEBUG] on stmt: bool1016 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $1016pred = call bool1016($1010compare_op.10, func=bool1016, args=(Var($1010compare_op.10, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,057 [DEBUG] on stmt: branch $1016pred, 1018, 1022
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 1018
2023-11-07 09:01:26,057 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,057 [DEBUG] on stmt: jump 1112
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 1022
2023-11-07 09:01:26,057 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,057 [DEBUG] on stmt: $1026compare_op.4 = psum > target
2023-11-07 09:01:26,057 [DEBUG] on stmt: bool1032 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,057 [DEBUG] on stmt: $1032pred = call bool1032($1026compare_op.4, func=bool1032, args=(Var($1026compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,057 [DEBUG] on stmt: branch $1032pred, 1034, 1056
2023-11-07 09:01:26,057 [DEBUG] ==== SSA block rewrite pass on 1034
2023-11-07 09:01:26,058 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,058 [DEBUG] on stmt: hi = mid
2023-11-07 09:01:26,058 [DEBUG] on stmt: $binop_add1042.5 = lo + hi
2023-11-07 09:01:26,058 [DEBUG] find_def var='lo' stmt=$binop_add1042.5 = lo + hi
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 1034
2023-11-07 09:01:26,058 [DEBUG] idom 1022 from label 1034
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 1022
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 1022
2023-11-07 09:01:26,058 [DEBUG] idom 954 from label 1022
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 954
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,058 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,058 [DEBUG] idom 772 from label 832
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 772
2023-11-07 09:01:26,058 [DEBUG] idom 770 from label 772
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 770
2023-11-07 09:01:26,058 [DEBUG] insert phi node lo.2 = phi(incoming_values=[], incoming_blocks=[]) at 770
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 1328
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 1328
2023-11-07 09:01:26,058 [DEBUG] insert phi node lo.3 = phi(incoming_values=[], incoming_blocks=[]) at 1328
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 1034
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 1034
2023-11-07 09:01:26,058 [DEBUG] idom 1022 from label 1034
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 1022
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 1022
2023-11-07 09:01:26,058 [DEBUG] idom 954 from label 1022
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 954
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,058 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,058 [DEBUG] idom 772 from label 832
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 772
2023-11-07 09:01:26,058 [DEBUG] idom 770 from label 772
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,058 [DEBUG] incoming_def lo.2 = phi(incoming_values=[], incoming_blocks=[])
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 1082
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 1082
2023-11-07 09:01:26,058 [DEBUG] idom 1056 from label 1082
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 1056
2023-11-07 09:01:26,058 [DEBUG] incoming_def lo.1 = mid
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 1094
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 1094
2023-11-07 09:01:26,058 [DEBUG] idom 1056 from label 1094
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 1056
2023-11-07 09:01:26,058 [DEBUG] incoming_def lo.1 = mid
2023-11-07 09:01:26,058 [DEBUG] incoming_def lo.3 = phi(incoming_values=[Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234), Var(lo.1, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 740
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 740
2023-11-07 09:01:26,058 [DEBUG] idom 318 from label 740
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 318
2023-11-07 09:01:26,058 [DEBUG] incoming_def lo = const(float, 0.0)
2023-11-07 09:01:26,058 [DEBUG] replaced with: $binop_add1042.5 = lo.2 + hi
2023-11-07 09:01:26,058 [DEBUG] on stmt: $const1046.6 = const(float, 2.0)
2023-11-07 09:01:26,058 [DEBUG] on stmt: mid = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,058 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,058 [DEBUG] ==== SSA block rewrite pass on 1056
2023-11-07 09:01:26,058 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,058 [DEBUG] on stmt: lo.1 = mid
2023-11-07 09:01:26,058 [DEBUG] on stmt: $1062load_global.4 = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,058 [DEBUG] on stmt: $1074compare_op.5 = hi == $1062load_global.4
2023-11-07 09:01:26,058 [DEBUG] on stmt: bool1080 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,058 [DEBUG] on stmt: $1080pred = call bool1080($1074compare_op.5, func=bool1080, args=(Var($1074compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,058 [DEBUG] on stmt: branch $1080pred, 1082, 1094
2023-11-07 09:01:26,058 [DEBUG] ==== SSA block rewrite pass on 1082
2023-11-07 09:01:26,058 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,058 [DEBUG] on stmt: $const1084.3 = const(int, 2)
2023-11-07 09:01:26,058 [DEBUG] on stmt: $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,058 [DEBUG] on stmt: mid = $binop_imul1086.4
2023-11-07 09:01:26,058 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,058 [DEBUG] ==== SSA block rewrite pass on 1094
2023-11-07 09:01:26,058 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,058 [DEBUG] on stmt: $binop_add1098.4 = lo + hi
2023-11-07 09:01:26,058 [DEBUG] find_def var='lo' stmt=$binop_add1098.4 = lo + hi
2023-11-07 09:01:26,058 [DEBUG] find_def_from_top label 1094
2023-11-07 09:01:26,058 [DEBUG] idom 1056 from label 1094
2023-11-07 09:01:26,058 [DEBUG] find_def_from_bottom label 1056
2023-11-07 09:01:26,058 [DEBUG] replaced with: $binop_add1098.4 = lo.1 + hi
2023-11-07 09:01:26,058 [DEBUG] on stmt: $const1102.5 = const(float, 2.0)
2023-11-07 09:01:26,058 [DEBUG] on stmt: mid = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,058 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,058 [DEBUG] ==== SSA block rewrite pass on 1112
2023-11-07 09:01:26,058 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,058 [DEBUG] on stmt: result[i] = mid
2023-11-07 09:01:26,058 [DEBUG] on stmt: $1126binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,058 [DEBUG] on stmt: $const1136.7 = const(float, 0.0)
2023-11-07 09:01:26,058 [DEBUG] on stmt: $1138compare_op.8 = $1126binary_subscr.6 > $const1136.7
2023-11-07 09:01:26,058 [DEBUG] on stmt: bool1144 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1144pred = call bool1144($1138compare_op.8, func=bool1144, args=(Var($1138compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,059 [DEBUG] on stmt: branch $1144pred, 1146, 1256
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 1146
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1146load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1158load_attr.3 = getattr(value=$1146load_global.1, attr=mean)
2023-11-07 09:01:26,059 [DEBUG] on stmt: mean_ith_distances = call $1158load_attr.3(ith_distances, func=$1158load_attr.3, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1190binary_subscr.8 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1200load_global.9 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $binop_mul1214.11 = $1200load_global.9 * mean_ith_distances
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1218compare_op.12 = $1190binary_subscr.8 < $binop_mul1214.11
2023-11-07 09:01:26,059 [DEBUG] on stmt: bool1224 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1224pred = call bool1224($1218compare_op.12, func=bool1224, args=(Var($1218compare_op.12, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,059 [DEBUG] on stmt: branch $1224pred, 1226, 1252
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 1226
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1226load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $binop_mul1240.3 = $1226load_global.1 * mean_ith_distances
2023-11-07 09:01:26,059 [DEBUG] on stmt: result[i] = $binop_mul1240.3
2023-11-07 09:01:26,059 [DEBUG] on stmt: jump 1252
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 1252
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,059 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 1256
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1260binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1270load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $binop_mul1284.6 = $1270load_global.4 * mean_distances
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1288compare_op.7 = $1260binary_subscr.3 < $binop_mul1284.6
2023-11-07 09:01:26,059 [DEBUG] on stmt: bool1294 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1294pred = call bool1294($1288compare_op.7, func=bool1294, args=(Var($1288compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,059 [DEBUG] on stmt: branch $1294pred, 1296, 1322
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 1296
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1296load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $binop_mul1310.3 = $1296load_global.1 * mean_distances
2023-11-07 09:01:26,059 [DEBUG] on stmt: result[i] = $binop_mul1310.3
2023-11-07 09:01:26,059 [DEBUG] on stmt: jump 1322
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 1322
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,059 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 1326
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1330build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
2023-11-07 09:01:26,059 [DEBUG] on stmt: $1332return_value.3 = cast(value=$1330build_tuple.2)
2023-11-07 09:01:26,059 [DEBUG] on stmt: return $1332return_value.3
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 1327
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,059 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 1328
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,059 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 1329
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825cee90>
2023-11-07 09:01:26,059 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,059 [DEBUG] Fix SSA violator on var hi
2023-11-07 09:01:26,059 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,059 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,059 [DEBUG] on stmt: distances = arg(0, name=distances)
2023-11-07 09:01:26,059 [DEBUG] on stmt: k = arg(1, name=k)
2023-11-07 09:01:26,059 [DEBUG] on stmt: n_iter = arg(2, name=n_iter)
2023-11-07 09:01:26,059 [DEBUG] on stmt: local_connectivity = arg(3, name=local_connectivity)
2023-11-07 09:01:26,059 [DEBUG] on stmt: bandwidth = arg(4, name=bandwidth)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=log2)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $32call.4 = call $16load_attr.2(k, func=$16load_attr.2, args=[Var(k, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,059 [DEBUG] on stmt: target = $32call.4 * bandwidth
2023-11-07 09:01:26,059 [DEBUG] on stmt: $50load_global.7 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $62load_attr.9 = getattr(value=$50load_global.7, attr=zeros)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $74load_attr.11 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $const84.12 = const(int, 0)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $86binary_subscr.13 = static_getitem(value=$74load_attr.11, index=0, index_var=$const84.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $96load_global.14 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $108load_attr.15 = getattr(value=$96load_global.14, attr=float32)
2023-11-07 09:01:26,059 [DEBUG] on stmt: rho = call $62load_attr.9($86binary_subscr.13, func=$62load_attr.9, args=[Var($86binary_subscr.13, umap_.py:190)], kws=[('dtype', Var($108load_attr.15, umap_.py:190))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $136load_global.17 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $148load_attr.19 = getattr(value=$136load_global.17, attr=zeros)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $160load_attr.21 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $const170.22 = const(int, 0)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $172binary_subscr.23 = static_getitem(value=$160load_attr.21, index=0, index_var=$const170.22, fn=<built-in function getitem>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $182load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $194load_attr.25 = getattr(value=$182load_global.24, attr=float32)
2023-11-07 09:01:26,059 [DEBUG] on stmt: result = call $148load_attr.19($172binary_subscr.23, func=$148load_attr.19, args=[Var($172binary_subscr.23, umap_.py:191)], kws=[('dtype', Var($194load_attr.25, umap_.py:191))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $222load_global.27 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $234load_attr.29 = getattr(value=$222load_global.27, attr=mean)
2023-11-07 09:01:26,059 [DEBUG] on stmt: mean_distances = call $234load_attr.29(distances, func=$234load_attr.29, args=[Var(distances, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $262load_global.32 = global(range: <class 'range'>)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $276load_attr.35 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,059 [DEBUG] on stmt: $const286.36 = const(int, 0)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $288binary_subscr.37 = static_getitem(value=$276load_attr.35, index=0, index_var=$const286.36, fn=<built-in function getitem>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $302call.38 = call $262load_global.32($288binary_subscr.37, func=$262load_global.32, args=[Var($288binary_subscr.37, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $312get_iter.39 = getiter(value=$302call.38)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $phi316.0 = $312get_iter.39
2023-11-07 09:01:26,060 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,060 [DEBUG] ==== SSA block rewrite pass on 314
2023-11-07 09:01:26,060 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,060 [DEBUG] on stmt: jump 316
2023-11-07 09:01:26,060 [DEBUG] ==== SSA block rewrite pass on 316
2023-11-07 09:01:26,060 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,060 [DEBUG] on stmt: $316for_iter.1 = iternext(value=$phi316.0)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $316for_iter.2 = pair_first(value=$316for_iter.1)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $316for_iter.3 = pair_second(value=$316for_iter.1)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $phi318.1 = $316for_iter.2
2023-11-07 09:01:26,060 [DEBUG] on stmt: branch $316for_iter.3, 318, 1326
2023-11-07 09:01:26,060 [DEBUG] ==== SSA block rewrite pass on 318
2023-11-07 09:01:26,060 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,060 [DEBUG] on stmt: i = $phi318.1
2023-11-07 09:01:26,060 [DEBUG] on stmt: lo = const(float, 0.0)
2023-11-07 09:01:26,060 [DEBUG] on stmt: hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,060 [DEBUG] first assign: hi
2023-11-07 09:01:26,060 [DEBUG] replaced with: hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,060 [DEBUG] on stmt: mid = const(float, 1.0)
2023-11-07 09:01:26,060 [DEBUG] on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $const362.10 = const(float, 0.0)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $364compare_op.11 = ith_distances > $const362.10
2023-11-07 09:01:26,060 [DEBUG] on stmt: non_zero_dists = getitem(value=ith_distances, index=$364compare_op.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $384load_attr.14 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $const394.15 = const(int, 0)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $396binary_subscr.16 = static_getitem(value=$384load_attr.14, index=0, index_var=$const394.15, fn=<built-in function getitem>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $408compare_op.18 = $396binary_subscr.16 >= local_connectivity
2023-11-07 09:01:26,060 [DEBUG] on stmt: bool414 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $414pred = call bool414($408compare_op.18, func=bool414, args=(Var($408compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,060 [DEBUG] on stmt: branch $414pred, 416, 660
2023-11-07 09:01:26,060 [DEBUG] ==== SSA block rewrite pass on 416
2023-11-07 09:01:26,060 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,060 [DEBUG] on stmt: $416load_global.1 = global(int: <class 'int'>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $428load_global.3 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $440load_attr.5 = getattr(value=$428load_global.3, attr=floor)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $456call.7 = call $440load_attr.5(local_connectivity, func=$440load_attr.5, args=[Var(local_connectivity, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,060 [DEBUG] on stmt: index = call $416load_global.1($456call.7, func=$416load_global.1, args=[Var($456call.7, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,060 [DEBUG] on stmt: interpolation = local_connectivity - index
2023-11-07 09:01:26,060 [DEBUG] on stmt: $const494.13 = const(int, 0)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $496compare_op.14 = index > $const494.13
2023-11-07 09:01:26,060 [DEBUG] on stmt: bool502 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $502pred = call bool502($496compare_op.14, func=bool502, args=(Var($496compare_op.14, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,060 [DEBUG] on stmt: branch $502pred, 504, 630
2023-11-07 09:01:26,060 [DEBUG] ==== SSA block rewrite pass on 504
2023-11-07 09:01:26,060 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,060 [DEBUG] on stmt: $const508.3 = const(int, 1)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $binop_sub510.4 = index - $const508.3
2023-11-07 09:01:26,060 [DEBUG] on stmt: $514binary_subscr.5 = getitem(value=non_zero_dists, index=$binop_sub510.4, fn=<built-in function getitem>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: rho[i] = $514binary_subscr.5
2023-11-07 09:01:26,060 [DEBUG] on stmt: $534load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $546compare_op.10 = interpolation > $534load_global.9
2023-11-07 09:01:26,060 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $552pred = call bool552($546compare_op.10, func=bool552, args=(Var($546compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,060 [DEBUG] on stmt: branch $552pred, 554, 628
2023-11-07 09:01:26,060 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,060 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,060 [DEBUG] on stmt: $562binary_subscr.3 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $578binary_subscr.7 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $const592.10 = const(int, 1)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $binop_sub594.11 = index - $const592.10
2023-11-07 09:01:26,060 [DEBUG] on stmt: $598binary_subscr.12 = getitem(value=non_zero_dists, index=$binop_sub594.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $binop_sub608.13 = $578binary_subscr.7 - $598binary_subscr.12
2023-11-07 09:01:26,060 [DEBUG] on stmt: $binop_mul612.14 = interpolation * $binop_sub608.13
2023-11-07 09:01:26,060 [DEBUG] on stmt: $binop_iadd616.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$562binary_subscr.3, rhs=$binop_mul612.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,060 [DEBUG] on stmt: rho[i] = $binop_iadd616.15
2023-11-07 09:01:26,060 [DEBUG] on stmt: jump 628
2023-11-07 09:01:26,060 [DEBUG] ==== SSA block rewrite pass on 628
2023-11-07 09:01:26,060 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,060 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,060 [DEBUG] ==== SSA block rewrite pass on 630
2023-11-07 09:01:26,060 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,060 [DEBUG] on stmt: $const634.3 = const(int, 0)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $636binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const634.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $binop_mul646.5 = interpolation * $636binary_subscr.4
2023-11-07 09:01:26,060 [DEBUG] on stmt: rho[i] = $binop_mul646.5
2023-11-07 09:01:26,060 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,060 [DEBUG] ==== SSA block rewrite pass on 660
2023-11-07 09:01:26,060 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,060 [DEBUG] on stmt: $662load_attr.2 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $const672.3 = const(int, 0)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $674binary_subscr.4 = static_getitem(value=$662load_attr.2, index=0, index_var=$const672.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $const684.5 = const(int, 0)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $686compare_op.6 = $674binary_subscr.4 > $const684.5
2023-11-07 09:01:26,060 [DEBUG] on stmt: bool692 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $692pred = call bool692($686compare_op.6, func=bool692, args=(Var($686compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,060 [DEBUG] on stmt: branch $692pred, 694, 740
2023-11-07 09:01:26,060 [DEBUG] ==== SSA block rewrite pass on 694
2023-11-07 09:01:26,060 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,060 [DEBUG] on stmt: $694load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $706load_attr.3 = getattr(value=$694load_global.1, attr=max)
2023-11-07 09:01:26,060 [DEBUG] on stmt: $722call.5 = call $706load_attr.3(non_zero_dists, func=$706load_attr.3, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,061 [DEBUG] on stmt: rho[i] = $722call.5
2023-11-07 09:01:26,061 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 740
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: $740load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $758call.4 = call $740load_global.1(n_iter, func=$740load_global.1, args=[Var(n_iter, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $768get_iter.5 = getiter(value=$758call.4)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $phi770.1 = $768get_iter.5
2023-11-07 09:01:26,061 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 770
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: lo.2 = phi(incoming_values=[Var(lo.3, umap_.py:231), Var(lo, umap_.py:196)], incoming_blocks=[1328, 740])
2023-11-07 09:01:26,061 [DEBUG] on stmt: $770for_iter.2 = iternext(value=$phi770.1)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $770for_iter.3 = pair_first(value=$770for_iter.2)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $770for_iter.4 = pair_second(value=$770for_iter.2)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $phi772.2 = $770for_iter.3
2023-11-07 09:01:26,061 [DEBUG] on stmt: branch $770for_iter.4, 772, 1112
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 772
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: n = $phi772.2
2023-11-07 09:01:26,061 [DEBUG] on stmt: psum = const(float, 0.0)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $778load_global.4 = global(range: <class 'range'>)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $const790.6 = const(int, 1)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $794load_attr.8 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $const804.9 = const(int, 1)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $806binary_subscr.10 = static_getitem(value=$794load_attr.8, index=1, index_var=$const804.9, fn=<built-in function getitem>)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $820call.11 = call $778load_global.4($const790.6, $806binary_subscr.10, func=$778load_global.4, args=[Var($const790.6, umap_.py:220), Var($806binary_subscr.10, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $830get_iter.12 = getiter(value=$820call.11)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $phi832.2 = $830get_iter.12
2023-11-07 09:01:26,061 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 832
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: $832for_iter.3 = iternext(value=$phi832.2)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $832for_iter.4 = pair_first(value=$832for_iter.3)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $832for_iter.5 = pair_second(value=$832for_iter.3)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $phi834.3 = $832for_iter.4
2023-11-07 09:01:26,061 [DEBUG] on stmt: branch $832for_iter.5, 834, 954
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 834
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: j = $phi834.3
2023-11-07 09:01:26,061 [DEBUG] on stmt: $842build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
2023-11-07 09:01:26,061 [DEBUG] on stmt: $844binary_subscr.8 = getitem(value=distances, index=$842build_tuple.7, fn=<built-in function getitem>)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $858binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,061 [DEBUG] on stmt: d = $844binary_subscr.8 - $858binary_subscr.11
2023-11-07 09:01:26,061 [DEBUG] on stmt: $const876.14 = const(int, 0)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $878compare_op.15 = d > $const876.14
2023-11-07 09:01:26,061 [DEBUG] on stmt: bool884 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $884pred = call bool884($878compare_op.15, func=bool884, args=(Var($878compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,061 [DEBUG] on stmt: branch $884pred, 886, 942
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 886
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: $888load_global.4 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $900load_attr.6 = getattr(value=$888load_global.4, attr=exp)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $binop_truediv914.9 = d / mid
2023-11-07 09:01:26,061 [DEBUG] on stmt: $918unary_negative.10 = unary(fn=<built-in function neg>, value=$binop_truediv914.9)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $924call.11 = call $900load_attr.6($918unary_negative.10, func=$900load_attr.6, args=[Var($918unary_negative.10, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,061 [DEBUG] on stmt: psum = $binop_iadd934.12
2023-11-07 09:01:26,061 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 942
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: $const944.4 = const(float, 1.0)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,061 [DEBUG] on stmt: psum = $binop_iadd946.5
2023-11-07 09:01:26,061 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 954
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: $954load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $966load_attr.4 = getattr(value=$954load_global.2, attr=fabs)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $binop_sub980.7 = psum - target
2023-11-07 09:01:26,061 [DEBUG] on stmt: $988call.8 = call $966load_attr.4($binop_sub980.7, func=$966load_attr.4, args=[Var($binop_sub980.7, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $998load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $1010compare_op.10 = $988call.8 < $998load_global.9
2023-11-07 09:01:26,061 [DEBUG] on stmt: bool1016 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $1016pred = call bool1016($1010compare_op.10, func=bool1016, args=(Var($1010compare_op.10, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,061 [DEBUG] on stmt: branch $1016pred, 1018, 1022
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 1018
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: jump 1112
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 1022
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: $1026compare_op.4 = psum > target
2023-11-07 09:01:26,061 [DEBUG] on stmt: bool1032 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,061 [DEBUG] on stmt: $1032pred = call bool1032($1026compare_op.4, func=bool1032, args=(Var($1026compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,061 [DEBUG] on stmt: branch $1032pred, 1034, 1056
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 1034
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: hi = mid
2023-11-07 09:01:26,061 [DEBUG] replaced with: hi.1 = mid
2023-11-07 09:01:26,061 [DEBUG] on stmt: $binop_add1042.5 = lo.2 + hi
2023-11-07 09:01:26,061 [DEBUG] on stmt: $const1046.6 = const(float, 2.0)
2023-11-07 09:01:26,061 [DEBUG] on stmt: mid = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,061 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,061 [DEBUG] ==== SSA block rewrite pass on 1056
2023-11-07 09:01:26,061 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,061 [DEBUG] on stmt: lo.1 = mid
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1062load_global.4 = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1074compare_op.5 = hi == $1062load_global.4
2023-11-07 09:01:26,062 [DEBUG] on stmt: bool1080 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1080pred = call bool1080($1074compare_op.5, func=bool1080, args=(Var($1074compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,062 [DEBUG] on stmt: branch $1080pred, 1082, 1094
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1082
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: $const1084.3 = const(int, 2)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,062 [DEBUG] on stmt: mid = $binop_imul1086.4
2023-11-07 09:01:26,062 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1094
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: $binop_add1098.4 = lo.1 + hi
2023-11-07 09:01:26,062 [DEBUG] on stmt: $const1102.5 = const(float, 2.0)
2023-11-07 09:01:26,062 [DEBUG] on stmt: mid = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,062 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1112
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: result[i] = mid
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1126binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $const1136.7 = const(float, 0.0)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1138compare_op.8 = $1126binary_subscr.6 > $const1136.7
2023-11-07 09:01:26,062 [DEBUG] on stmt: bool1144 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1144pred = call bool1144($1138compare_op.8, func=bool1144, args=(Var($1138compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,062 [DEBUG] on stmt: branch $1144pred, 1146, 1256
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1146
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1146load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1158load_attr.3 = getattr(value=$1146load_global.1, attr=mean)
2023-11-07 09:01:26,062 [DEBUG] on stmt: mean_ith_distances = call $1158load_attr.3(ith_distances, func=$1158load_attr.3, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1190binary_subscr.8 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1200load_global.9 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $binop_mul1214.11 = $1200load_global.9 * mean_ith_distances
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1218compare_op.12 = $1190binary_subscr.8 < $binop_mul1214.11
2023-11-07 09:01:26,062 [DEBUG] on stmt: bool1224 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1224pred = call bool1224($1218compare_op.12, func=bool1224, args=(Var($1218compare_op.12, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,062 [DEBUG] on stmt: branch $1224pred, 1226, 1252
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1226
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1226load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $binop_mul1240.3 = $1226load_global.1 * mean_ith_distances
2023-11-07 09:01:26,062 [DEBUG] on stmt: result[i] = $binop_mul1240.3
2023-11-07 09:01:26,062 [DEBUG] on stmt: jump 1252
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1252
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1256
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1260binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1270load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $binop_mul1284.6 = $1270load_global.4 * mean_distances
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1288compare_op.7 = $1260binary_subscr.3 < $binop_mul1284.6
2023-11-07 09:01:26,062 [DEBUG] on stmt: bool1294 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1294pred = call bool1294($1288compare_op.7, func=bool1294, args=(Var($1288compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,062 [DEBUG] on stmt: branch $1294pred, 1296, 1322
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1296
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1296load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $binop_mul1310.3 = $1296load_global.1 * mean_distances
2023-11-07 09:01:26,062 [DEBUG] on stmt: result[i] = $binop_mul1310.3
2023-11-07 09:01:26,062 [DEBUG] on stmt: jump 1322
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1322
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1326
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1330build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
2023-11-07 09:01:26,062 [DEBUG] on stmt: $1332return_value.3 = cast(value=$1330build_tuple.2)
2023-11-07 09:01:26,062 [DEBUG] on stmt: return $1332return_value.3
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1327
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1328
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: lo.3 = phi(incoming_values=[Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234), Var(lo.1, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,062 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 1329
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28255e6d0>
2023-11-07 09:01:26,062 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,062 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {318: [<numba.core.ir.Assign object at 0x2825cdc50>],
             1034: [<numba.core.ir.Assign object at 0x2825cdf50>]})
2023-11-07 09:01:26,062 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,062 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,062 [DEBUG] on stmt: distances = arg(0, name=distances)
2023-11-07 09:01:26,062 [DEBUG] on stmt: k = arg(1, name=k)
2023-11-07 09:01:26,062 [DEBUG] on stmt: n_iter = arg(2, name=n_iter)
2023-11-07 09:01:26,062 [DEBUG] on stmt: local_connectivity = arg(3, name=local_connectivity)
2023-11-07 09:01:26,062 [DEBUG] on stmt: bandwidth = arg(4, name=bandwidth)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=log2)
2023-11-07 09:01:26,062 [DEBUG] on stmt: $32call.4 = call $16load_attr.2(k, func=$16load_attr.2, args=[Var(k, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,062 [DEBUG] on stmt: target = $32call.4 * bandwidth
2023-11-07 09:01:26,062 [DEBUG] on stmt: $50load_global.7 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $62load_attr.9 = getattr(value=$50load_global.7, attr=zeros)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $74load_attr.11 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $const84.12 = const(int, 0)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $86binary_subscr.13 = static_getitem(value=$74load_attr.11, index=0, index_var=$const84.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $96load_global.14 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $108load_attr.15 = getattr(value=$96load_global.14, attr=float32)
2023-11-07 09:01:26,063 [DEBUG] on stmt: rho = call $62load_attr.9($86binary_subscr.13, func=$62load_attr.9, args=[Var($86binary_subscr.13, umap_.py:190)], kws=[('dtype', Var($108load_attr.15, umap_.py:190))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $136load_global.17 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $148load_attr.19 = getattr(value=$136load_global.17, attr=zeros)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $160load_attr.21 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $const170.22 = const(int, 0)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $172binary_subscr.23 = static_getitem(value=$160load_attr.21, index=0, index_var=$const170.22, fn=<built-in function getitem>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $182load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $194load_attr.25 = getattr(value=$182load_global.24, attr=float32)
2023-11-07 09:01:26,063 [DEBUG] on stmt: result = call $148load_attr.19($172binary_subscr.23, func=$148load_attr.19, args=[Var($172binary_subscr.23, umap_.py:191)], kws=[('dtype', Var($194load_attr.25, umap_.py:191))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $222load_global.27 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $234load_attr.29 = getattr(value=$222load_global.27, attr=mean)
2023-11-07 09:01:26,063 [DEBUG] on stmt: mean_distances = call $234load_attr.29(distances, func=$234load_attr.29, args=[Var(distances, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $262load_global.32 = global(range: <class 'range'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $276load_attr.35 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $const286.36 = const(int, 0)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $288binary_subscr.37 = static_getitem(value=$276load_attr.35, index=0, index_var=$const286.36, fn=<built-in function getitem>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $302call.38 = call $262load_global.32($288binary_subscr.37, func=$262load_global.32, args=[Var($288binary_subscr.37, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $312get_iter.39 = getiter(value=$302call.38)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $phi316.0 = $312get_iter.39
2023-11-07 09:01:26,063 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,063 [DEBUG] ==== SSA block rewrite pass on 314
2023-11-07 09:01:26,063 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,063 [DEBUG] on stmt: jump 316
2023-11-07 09:01:26,063 [DEBUG] ==== SSA block rewrite pass on 316
2023-11-07 09:01:26,063 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,063 [DEBUG] on stmt: $316for_iter.1 = iternext(value=$phi316.0)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $316for_iter.2 = pair_first(value=$316for_iter.1)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $316for_iter.3 = pair_second(value=$316for_iter.1)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $phi318.1 = $316for_iter.2
2023-11-07 09:01:26,063 [DEBUG] on stmt: branch $316for_iter.3, 318, 1326
2023-11-07 09:01:26,063 [DEBUG] ==== SSA block rewrite pass on 318
2023-11-07 09:01:26,063 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,063 [DEBUG] on stmt: i = $phi318.1
2023-11-07 09:01:26,063 [DEBUG] on stmt: lo = const(float, 0.0)
2023-11-07 09:01:26,063 [DEBUG] on stmt: hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,063 [DEBUG] on stmt: mid = const(float, 1.0)
2023-11-07 09:01:26,063 [DEBUG] on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $const362.10 = const(float, 0.0)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $364compare_op.11 = ith_distances > $const362.10
2023-11-07 09:01:26,063 [DEBUG] on stmt: non_zero_dists = getitem(value=ith_distances, index=$364compare_op.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $384load_attr.14 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $const394.15 = const(int, 0)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $396binary_subscr.16 = static_getitem(value=$384load_attr.14, index=0, index_var=$const394.15, fn=<built-in function getitem>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $408compare_op.18 = $396binary_subscr.16 >= local_connectivity
2023-11-07 09:01:26,063 [DEBUG] on stmt: bool414 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $414pred = call bool414($408compare_op.18, func=bool414, args=(Var($408compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,063 [DEBUG] on stmt: branch $414pred, 416, 660
2023-11-07 09:01:26,063 [DEBUG] ==== SSA block rewrite pass on 416
2023-11-07 09:01:26,063 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,063 [DEBUG] on stmt: $416load_global.1 = global(int: <class 'int'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $428load_global.3 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $440load_attr.5 = getattr(value=$428load_global.3, attr=floor)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $456call.7 = call $440load_attr.5(local_connectivity, func=$440load_attr.5, args=[Var(local_connectivity, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,063 [DEBUG] on stmt: index = call $416load_global.1($456call.7, func=$416load_global.1, args=[Var($456call.7, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,063 [DEBUG] on stmt: interpolation = local_connectivity - index
2023-11-07 09:01:26,063 [DEBUG] on stmt: $const494.13 = const(int, 0)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $496compare_op.14 = index > $const494.13
2023-11-07 09:01:26,063 [DEBUG] on stmt: bool502 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $502pred = call bool502($496compare_op.14, func=bool502, args=(Var($496compare_op.14, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,063 [DEBUG] on stmt: branch $502pred, 504, 630
2023-11-07 09:01:26,063 [DEBUG] ==== SSA block rewrite pass on 504
2023-11-07 09:01:26,063 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,063 [DEBUG] on stmt: $const508.3 = const(int, 1)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $binop_sub510.4 = index - $const508.3
2023-11-07 09:01:26,063 [DEBUG] on stmt: $514binary_subscr.5 = getitem(value=non_zero_dists, index=$binop_sub510.4, fn=<built-in function getitem>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: rho[i] = $514binary_subscr.5
2023-11-07 09:01:26,063 [DEBUG] on stmt: $534load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $546compare_op.10 = interpolation > $534load_global.9
2023-11-07 09:01:26,063 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $552pred = call bool552($546compare_op.10, func=bool552, args=(Var($546compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,063 [DEBUG] on stmt: branch $552pred, 554, 628
2023-11-07 09:01:26,063 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,063 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,063 [DEBUG] on stmt: $562binary_subscr.3 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $578binary_subscr.7 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $const592.10 = const(int, 1)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $binop_sub594.11 = index - $const592.10
2023-11-07 09:01:26,063 [DEBUG] on stmt: $598binary_subscr.12 = getitem(value=non_zero_dists, index=$binop_sub594.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,063 [DEBUG] on stmt: $binop_sub608.13 = $578binary_subscr.7 - $598binary_subscr.12
2023-11-07 09:01:26,063 [DEBUG] on stmt: $binop_mul612.14 = interpolation * $binop_sub608.13
2023-11-07 09:01:26,063 [DEBUG] on stmt: $binop_iadd616.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$562binary_subscr.3, rhs=$binop_mul612.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,063 [DEBUG] on stmt: rho[i] = $binop_iadd616.15
2023-11-07 09:01:26,063 [DEBUG] on stmt: jump 628
2023-11-07 09:01:26,063 [DEBUG] ==== SSA block rewrite pass on 628
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 630
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: $const634.3 = const(int, 0)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $636binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const634.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $binop_mul646.5 = interpolation * $636binary_subscr.4
2023-11-07 09:01:26,064 [DEBUG] on stmt: rho[i] = $binop_mul646.5
2023-11-07 09:01:26,064 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 660
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: $662load_attr.2 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $const672.3 = const(int, 0)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $674binary_subscr.4 = static_getitem(value=$662load_attr.2, index=0, index_var=$const672.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $const684.5 = const(int, 0)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $686compare_op.6 = $674binary_subscr.4 > $const684.5
2023-11-07 09:01:26,064 [DEBUG] on stmt: bool692 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $692pred = call bool692($686compare_op.6, func=bool692, args=(Var($686compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,064 [DEBUG] on stmt: branch $692pred, 694, 740
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 694
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: $694load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $706load_attr.3 = getattr(value=$694load_global.1, attr=max)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $722call.5 = call $706load_attr.3(non_zero_dists, func=$706load_attr.3, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,064 [DEBUG] on stmt: rho[i] = $722call.5
2023-11-07 09:01:26,064 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 740
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: $740load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $758call.4 = call $740load_global.1(n_iter, func=$740load_global.1, args=[Var(n_iter, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $768get_iter.5 = getiter(value=$758call.4)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $phi770.1 = $768get_iter.5
2023-11-07 09:01:26,064 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 770
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: lo.2 = phi(incoming_values=[Var(lo.3, umap_.py:231), Var(lo, umap_.py:196)], incoming_blocks=[1328, 740])
2023-11-07 09:01:26,064 [DEBUG] on stmt: $770for_iter.2 = iternext(value=$phi770.1)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $770for_iter.3 = pair_first(value=$770for_iter.2)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $770for_iter.4 = pair_second(value=$770for_iter.2)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $phi772.2 = $770for_iter.3
2023-11-07 09:01:26,064 [DEBUG] on stmt: branch $770for_iter.4, 772, 1112
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 772
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: n = $phi772.2
2023-11-07 09:01:26,064 [DEBUG] on stmt: psum = const(float, 0.0)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $778load_global.4 = global(range: <class 'range'>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $const790.6 = const(int, 1)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $794load_attr.8 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $const804.9 = const(int, 1)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $806binary_subscr.10 = static_getitem(value=$794load_attr.8, index=1, index_var=$const804.9, fn=<built-in function getitem>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $820call.11 = call $778load_global.4($const790.6, $806binary_subscr.10, func=$778load_global.4, args=[Var($const790.6, umap_.py:220), Var($806binary_subscr.10, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $830get_iter.12 = getiter(value=$820call.11)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $phi832.2 = $830get_iter.12
2023-11-07 09:01:26,064 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 832
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: $832for_iter.3 = iternext(value=$phi832.2)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $832for_iter.4 = pair_first(value=$832for_iter.3)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $832for_iter.5 = pair_second(value=$832for_iter.3)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $phi834.3 = $832for_iter.4
2023-11-07 09:01:26,064 [DEBUG] on stmt: branch $832for_iter.5, 834, 954
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 834
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: j = $phi834.3
2023-11-07 09:01:26,064 [DEBUG] on stmt: $842build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
2023-11-07 09:01:26,064 [DEBUG] on stmt: $844binary_subscr.8 = getitem(value=distances, index=$842build_tuple.7, fn=<built-in function getitem>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $858binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: d = $844binary_subscr.8 - $858binary_subscr.11
2023-11-07 09:01:26,064 [DEBUG] on stmt: $const876.14 = const(int, 0)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $878compare_op.15 = d > $const876.14
2023-11-07 09:01:26,064 [DEBUG] on stmt: bool884 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $884pred = call bool884($878compare_op.15, func=bool884, args=(Var($878compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,064 [DEBUG] on stmt: branch $884pred, 886, 942
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 886
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: $888load_global.4 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $900load_attr.6 = getattr(value=$888load_global.4, attr=exp)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $binop_truediv914.9 = d / mid
2023-11-07 09:01:26,064 [DEBUG] on stmt: $918unary_negative.10 = unary(fn=<built-in function neg>, value=$binop_truediv914.9)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $924call.11 = call $900load_attr.6($918unary_negative.10, func=$900load_attr.6, args=[Var($918unary_negative.10, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,064 [DEBUG] on stmt: psum = $binop_iadd934.12
2023-11-07 09:01:26,064 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 942
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: $const944.4 = const(float, 1.0)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,064 [DEBUG] on stmt: psum = $binop_iadd946.5
2023-11-07 09:01:26,064 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,064 [DEBUG] ==== SSA block rewrite pass on 954
2023-11-07 09:01:26,064 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,064 [DEBUG] on stmt: $954load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $966load_attr.4 = getattr(value=$954load_global.2, attr=fabs)
2023-11-07 09:01:26,064 [DEBUG] on stmt: $binop_sub980.7 = psum - target
2023-11-07 09:01:26,065 [DEBUG] on stmt: $988call.8 = call $966load_attr.4($binop_sub980.7, func=$966load_attr.4, args=[Var($binop_sub980.7, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,065 [DEBUG] on stmt: $998load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,065 [DEBUG] on stmt: $1010compare_op.10 = $988call.8 < $998load_global.9
2023-11-07 09:01:26,065 [DEBUG] on stmt: bool1016 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,065 [DEBUG] on stmt: $1016pred = call bool1016($1010compare_op.10, func=bool1016, args=(Var($1010compare_op.10, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,065 [DEBUG] on stmt: branch $1016pred, 1018, 1022
2023-11-07 09:01:26,065 [DEBUG] ==== SSA block rewrite pass on 1018
2023-11-07 09:01:26,065 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,065 [DEBUG] on stmt: jump 1112
2023-11-07 09:01:26,065 [DEBUG] ==== SSA block rewrite pass on 1022
2023-11-07 09:01:26,065 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,065 [DEBUG] on stmt: $1026compare_op.4 = psum > target
2023-11-07 09:01:26,065 [DEBUG] on stmt: bool1032 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,065 [DEBUG] on stmt: $1032pred = call bool1032($1026compare_op.4, func=bool1032, args=(Var($1026compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,065 [DEBUG] on stmt: branch $1032pred, 1034, 1056
2023-11-07 09:01:26,065 [DEBUG] ==== SSA block rewrite pass on 1034
2023-11-07 09:01:26,065 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,065 [DEBUG] on stmt: hi.1 = mid
2023-11-07 09:01:26,065 [DEBUG] on stmt: $binop_add1042.5 = lo.2 + hi
2023-11-07 09:01:26,065 [DEBUG] find_def var='hi' stmt=$binop_add1042.5 = lo.2 + hi
2023-11-07 09:01:26,065 [DEBUG] replaced with: $binop_add1042.5 = lo.2 + hi.1
2023-11-07 09:01:26,065 [DEBUG] on stmt: $const1046.6 = const(float, 2.0)
2023-11-07 09:01:26,065 [DEBUG] on stmt: mid = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,065 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,065 [DEBUG] ==== SSA block rewrite pass on 1056
2023-11-07 09:01:26,065 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,065 [DEBUG] on stmt: lo.1 = mid
2023-11-07 09:01:26,065 [DEBUG] on stmt: $1062load_global.4 = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,065 [DEBUG] on stmt: $1074compare_op.5 = hi == $1062load_global.4
2023-11-07 09:01:26,065 [DEBUG] find_def var='hi' stmt=$1074compare_op.5 = hi == $1062load_global.4
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 1056
2023-11-07 09:01:26,065 [DEBUG] idom 1022 from label 1056
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 1022
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 1022
2023-11-07 09:01:26,065 [DEBUG] idom 954 from label 1022
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 954
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,065 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,065 [DEBUG] idom 772 from label 832
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 772
2023-11-07 09:01:26,065 [DEBUG] idom 770 from label 772
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 770
2023-11-07 09:01:26,065 [DEBUG] insert phi node hi.2 = phi(incoming_values=[], incoming_blocks=[]) at 770
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 1328
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 1328
2023-11-07 09:01:26,065 [DEBUG] insert phi node hi.3 = phi(incoming_values=[], incoming_blocks=[]) at 1328
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 1034
2023-11-07 09:01:26,065 [DEBUG] incoming_def hi.1 = mid
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 1082
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 1082
2023-11-07 09:01:26,065 [DEBUG] idom 1056 from label 1082
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 1056
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 1056
2023-11-07 09:01:26,065 [DEBUG] idom 1022 from label 1056
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 1022
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 1022
2023-11-07 09:01:26,065 [DEBUG] idom 954 from label 1022
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 954
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,065 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,065 [DEBUG] idom 772 from label 832
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 772
2023-11-07 09:01:26,065 [DEBUG] idom 770 from label 772
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,065 [DEBUG] incoming_def hi.2 = phi(incoming_values=[], incoming_blocks=[])
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 1094
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 1094
2023-11-07 09:01:26,065 [DEBUG] idom 1056 from label 1094
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 1056
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 1056
2023-11-07 09:01:26,065 [DEBUG] idom 1022 from label 1056
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 1022
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 1022
2023-11-07 09:01:26,065 [DEBUG] idom 954 from label 1022
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 954
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,065 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,065 [DEBUG] idom 772 from label 832
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 772
2023-11-07 09:01:26,065 [DEBUG] idom 770 from label 772
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,065 [DEBUG] incoming_def hi.2 = phi(incoming_values=[], incoming_blocks=[])
2023-11-07 09:01:26,065 [DEBUG] incoming_def hi.3 = phi(incoming_values=[Var(hi.1, umap_.py:231), Var(hi.2, umap_.py:234), Var(hi.2, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 740
2023-11-07 09:01:26,065 [DEBUG] find_def_from_top label 740
2023-11-07 09:01:26,065 [DEBUG] idom 318 from label 740
2023-11-07 09:01:26,065 [DEBUG] find_def_from_bottom label 318
2023-11-07 09:01:26,065 [DEBUG] incoming_def hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,066 [DEBUG] replaced with: $1074compare_op.5 = hi.2 == $1062load_global.4
2023-11-07 09:01:26,066 [DEBUG] on stmt: bool1080 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1080pred = call bool1080($1074compare_op.5, func=bool1080, args=(Var($1074compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,066 [DEBUG] on stmt: branch $1080pred, 1082, 1094
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1082
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: $const1084.3 = const(int, 2)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,066 [DEBUG] on stmt: mid = $binop_imul1086.4
2023-11-07 09:01:26,066 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1094
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: $binop_add1098.4 = lo.1 + hi
2023-11-07 09:01:26,066 [DEBUG] find_def var='hi' stmt=$binop_add1098.4 = lo.1 + hi
2023-11-07 09:01:26,066 [DEBUG] find_def_from_top label 1094
2023-11-07 09:01:26,066 [DEBUG] idom 1056 from label 1094
2023-11-07 09:01:26,066 [DEBUG] find_def_from_bottom label 1056
2023-11-07 09:01:26,066 [DEBUG] find_def_from_top label 1056
2023-11-07 09:01:26,066 [DEBUG] idom 1022 from label 1056
2023-11-07 09:01:26,066 [DEBUG] find_def_from_bottom label 1022
2023-11-07 09:01:26,066 [DEBUG] find_def_from_top label 1022
2023-11-07 09:01:26,066 [DEBUG] idom 954 from label 1022
2023-11-07 09:01:26,066 [DEBUG] find_def_from_bottom label 954
2023-11-07 09:01:26,066 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,066 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,066 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,066 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,066 [DEBUG] idom 772 from label 832
2023-11-07 09:01:26,066 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,066 [DEBUG] find_def_from_top label 772
2023-11-07 09:01:26,066 [DEBUG] idom 770 from label 772
2023-11-07 09:01:26,066 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,066 [DEBUG] replaced with: $binop_add1098.4 = lo.1 + hi.2
2023-11-07 09:01:26,066 [DEBUG] on stmt: $const1102.5 = const(float, 2.0)
2023-11-07 09:01:26,066 [DEBUG] on stmt: mid = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,066 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1112
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: result[i] = mid
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1126binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $const1136.7 = const(float, 0.0)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1138compare_op.8 = $1126binary_subscr.6 > $const1136.7
2023-11-07 09:01:26,066 [DEBUG] on stmt: bool1144 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1144pred = call bool1144($1138compare_op.8, func=bool1144, args=(Var($1138compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,066 [DEBUG] on stmt: branch $1144pred, 1146, 1256
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1146
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1146load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1158load_attr.3 = getattr(value=$1146load_global.1, attr=mean)
2023-11-07 09:01:26,066 [DEBUG] on stmt: mean_ith_distances = call $1158load_attr.3(ith_distances, func=$1158load_attr.3, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1190binary_subscr.8 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1200load_global.9 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $binop_mul1214.11 = $1200load_global.9 * mean_ith_distances
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1218compare_op.12 = $1190binary_subscr.8 < $binop_mul1214.11
2023-11-07 09:01:26,066 [DEBUG] on stmt: bool1224 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1224pred = call bool1224($1218compare_op.12, func=bool1224, args=(Var($1218compare_op.12, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,066 [DEBUG] on stmt: branch $1224pred, 1226, 1252
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1226
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1226load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $binop_mul1240.3 = $1226load_global.1 * mean_ith_distances
2023-11-07 09:01:26,066 [DEBUG] on stmt: result[i] = $binop_mul1240.3
2023-11-07 09:01:26,066 [DEBUG] on stmt: jump 1252
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1252
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1256
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1260binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1270load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $binop_mul1284.6 = $1270load_global.4 * mean_distances
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1288compare_op.7 = $1260binary_subscr.3 < $binop_mul1284.6
2023-11-07 09:01:26,066 [DEBUG] on stmt: bool1294 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1294pred = call bool1294($1288compare_op.7, func=bool1294, args=(Var($1288compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,066 [DEBUG] on stmt: branch $1294pred, 1296, 1322
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1296
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1296load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,066 [DEBUG] on stmt: $binop_mul1310.3 = $1296load_global.1 * mean_distances
2023-11-07 09:01:26,066 [DEBUG] on stmt: result[i] = $binop_mul1310.3
2023-11-07 09:01:26,066 [DEBUG] on stmt: jump 1322
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1322
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1326
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1330build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
2023-11-07 09:01:26,066 [DEBUG] on stmt: $1332return_value.3 = cast(value=$1330build_tuple.2)
2023-11-07 09:01:26,066 [DEBUG] on stmt: return $1332return_value.3
2023-11-07 09:01:26,066 [DEBUG] ==== SSA block rewrite pass on 1327
2023-11-07 09:01:26,066 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,066 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,067 [DEBUG] ==== SSA block rewrite pass on 1328
2023-11-07 09:01:26,067 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,067 [DEBUG] on stmt: lo.3 = phi(incoming_values=[Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234), Var(lo.1, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,067 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,067 [DEBUG] ==== SSA block rewrite pass on 1329
2023-11-07 09:01:26,067 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2841f2d50>
2023-11-07 09:01:26,067 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,067 [DEBUG] Fix SSA violator on var psum
2023-11-07 09:01:26,067 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,067 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,067 [DEBUG] on stmt: distances = arg(0, name=distances)
2023-11-07 09:01:26,067 [DEBUG] on stmt: k = arg(1, name=k)
2023-11-07 09:01:26,067 [DEBUG] on stmt: n_iter = arg(2, name=n_iter)
2023-11-07 09:01:26,067 [DEBUG] on stmt: local_connectivity = arg(3, name=local_connectivity)
2023-11-07 09:01:26,067 [DEBUG] on stmt: bandwidth = arg(4, name=bandwidth)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=log2)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $32call.4 = call $16load_attr.2(k, func=$16load_attr.2, args=[Var(k, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,067 [DEBUG] on stmt: target = $32call.4 * bandwidth
2023-11-07 09:01:26,067 [DEBUG] on stmt: $50load_global.7 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $62load_attr.9 = getattr(value=$50load_global.7, attr=zeros)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $74load_attr.11 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $const84.12 = const(int, 0)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $86binary_subscr.13 = static_getitem(value=$74load_attr.11, index=0, index_var=$const84.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $96load_global.14 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $108load_attr.15 = getattr(value=$96load_global.14, attr=float32)
2023-11-07 09:01:26,067 [DEBUG] on stmt: rho = call $62load_attr.9($86binary_subscr.13, func=$62load_attr.9, args=[Var($86binary_subscr.13, umap_.py:190)], kws=[('dtype', Var($108load_attr.15, umap_.py:190))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $136load_global.17 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $148load_attr.19 = getattr(value=$136load_global.17, attr=zeros)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $160load_attr.21 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $const170.22 = const(int, 0)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $172binary_subscr.23 = static_getitem(value=$160load_attr.21, index=0, index_var=$const170.22, fn=<built-in function getitem>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $182load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $194load_attr.25 = getattr(value=$182load_global.24, attr=float32)
2023-11-07 09:01:26,067 [DEBUG] on stmt: result = call $148load_attr.19($172binary_subscr.23, func=$148load_attr.19, args=[Var($172binary_subscr.23, umap_.py:191)], kws=[('dtype', Var($194load_attr.25, umap_.py:191))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $222load_global.27 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $234load_attr.29 = getattr(value=$222load_global.27, attr=mean)
2023-11-07 09:01:26,067 [DEBUG] on stmt: mean_distances = call $234load_attr.29(distances, func=$234load_attr.29, args=[Var(distances, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $262load_global.32 = global(range: <class 'range'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $276load_attr.35 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $const286.36 = const(int, 0)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $288binary_subscr.37 = static_getitem(value=$276load_attr.35, index=0, index_var=$const286.36, fn=<built-in function getitem>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $302call.38 = call $262load_global.32($288binary_subscr.37, func=$262load_global.32, args=[Var($288binary_subscr.37, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $312get_iter.39 = getiter(value=$302call.38)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $phi316.0 = $312get_iter.39
2023-11-07 09:01:26,067 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,067 [DEBUG] ==== SSA block rewrite pass on 314
2023-11-07 09:01:26,067 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,067 [DEBUG] on stmt: jump 316
2023-11-07 09:01:26,067 [DEBUG] ==== SSA block rewrite pass on 316
2023-11-07 09:01:26,067 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,067 [DEBUG] on stmt: $316for_iter.1 = iternext(value=$phi316.0)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $316for_iter.2 = pair_first(value=$316for_iter.1)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $316for_iter.3 = pair_second(value=$316for_iter.1)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $phi318.1 = $316for_iter.2
2023-11-07 09:01:26,067 [DEBUG] on stmt: branch $316for_iter.3, 318, 1326
2023-11-07 09:01:26,067 [DEBUG] ==== SSA block rewrite pass on 318
2023-11-07 09:01:26,067 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,067 [DEBUG] on stmt: i = $phi318.1
2023-11-07 09:01:26,067 [DEBUG] on stmt: lo = const(float, 0.0)
2023-11-07 09:01:26,067 [DEBUG] on stmt: hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,067 [DEBUG] on stmt: mid = const(float, 1.0)
2023-11-07 09:01:26,067 [DEBUG] on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $const362.10 = const(float, 0.0)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $364compare_op.11 = ith_distances > $const362.10
2023-11-07 09:01:26,067 [DEBUG] on stmt: non_zero_dists = getitem(value=ith_distances, index=$364compare_op.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $384load_attr.14 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $const394.15 = const(int, 0)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $396binary_subscr.16 = static_getitem(value=$384load_attr.14, index=0, index_var=$const394.15, fn=<built-in function getitem>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $408compare_op.18 = $396binary_subscr.16 >= local_connectivity
2023-11-07 09:01:26,067 [DEBUG] on stmt: bool414 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $414pred = call bool414($408compare_op.18, func=bool414, args=(Var($408compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,067 [DEBUG] on stmt: branch $414pred, 416, 660
2023-11-07 09:01:26,067 [DEBUG] ==== SSA block rewrite pass on 416
2023-11-07 09:01:26,067 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,067 [DEBUG] on stmt: $416load_global.1 = global(int: <class 'int'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $428load_global.3 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $440load_attr.5 = getattr(value=$428load_global.3, attr=floor)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $456call.7 = call $440load_attr.5(local_connectivity, func=$440load_attr.5, args=[Var(local_connectivity, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,067 [DEBUG] on stmt: index = call $416load_global.1($456call.7, func=$416load_global.1, args=[Var($456call.7, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,067 [DEBUG] on stmt: interpolation = local_connectivity - index
2023-11-07 09:01:26,067 [DEBUG] on stmt: $const494.13 = const(int, 0)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $496compare_op.14 = index > $const494.13
2023-11-07 09:01:26,067 [DEBUG] on stmt: bool502 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $502pred = call bool502($496compare_op.14, func=bool502, args=(Var($496compare_op.14, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,067 [DEBUG] on stmt: branch $502pred, 504, 630
2023-11-07 09:01:26,067 [DEBUG] ==== SSA block rewrite pass on 504
2023-11-07 09:01:26,067 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,067 [DEBUG] on stmt: $const508.3 = const(int, 1)
2023-11-07 09:01:26,067 [DEBUG] on stmt: $binop_sub510.4 = index - $const508.3
2023-11-07 09:01:26,067 [DEBUG] on stmt: $514binary_subscr.5 = getitem(value=non_zero_dists, index=$binop_sub510.4, fn=<built-in function getitem>)
2023-11-07 09:01:26,067 [DEBUG] on stmt: rho[i] = $514binary_subscr.5
2023-11-07 09:01:26,068 [DEBUG] on stmt: $534load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $546compare_op.10 = interpolation > $534load_global.9
2023-11-07 09:01:26,068 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $552pred = call bool552($546compare_op.10, func=bool552, args=(Var($546compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,068 [DEBUG] on stmt: branch $552pred, 554, 628
2023-11-07 09:01:26,068 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,068 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,068 [DEBUG] on stmt: $562binary_subscr.3 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $578binary_subscr.7 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $const592.10 = const(int, 1)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $binop_sub594.11 = index - $const592.10
2023-11-07 09:01:26,068 [DEBUG] on stmt: $598binary_subscr.12 = getitem(value=non_zero_dists, index=$binop_sub594.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $binop_sub608.13 = $578binary_subscr.7 - $598binary_subscr.12
2023-11-07 09:01:26,068 [DEBUG] on stmt: $binop_mul612.14 = interpolation * $binop_sub608.13
2023-11-07 09:01:26,068 [DEBUG] on stmt: $binop_iadd616.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$562binary_subscr.3, rhs=$binop_mul612.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,068 [DEBUG] on stmt: rho[i] = $binop_iadd616.15
2023-11-07 09:01:26,068 [DEBUG] on stmt: jump 628
2023-11-07 09:01:26,068 [DEBUG] ==== SSA block rewrite pass on 628
2023-11-07 09:01:26,068 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,068 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,068 [DEBUG] ==== SSA block rewrite pass on 630
2023-11-07 09:01:26,068 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,068 [DEBUG] on stmt: $const634.3 = const(int, 0)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $636binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const634.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $binop_mul646.5 = interpolation * $636binary_subscr.4
2023-11-07 09:01:26,068 [DEBUG] on stmt: rho[i] = $binop_mul646.5
2023-11-07 09:01:26,068 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,068 [DEBUG] ==== SSA block rewrite pass on 660
2023-11-07 09:01:26,068 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,068 [DEBUG] on stmt: $662load_attr.2 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $const672.3 = const(int, 0)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $674binary_subscr.4 = static_getitem(value=$662load_attr.2, index=0, index_var=$const672.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $const684.5 = const(int, 0)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $686compare_op.6 = $674binary_subscr.4 > $const684.5
2023-11-07 09:01:26,068 [DEBUG] on stmt: bool692 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $692pred = call bool692($686compare_op.6, func=bool692, args=(Var($686compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,068 [DEBUG] on stmt: branch $692pred, 694, 740
2023-11-07 09:01:26,068 [DEBUG] ==== SSA block rewrite pass on 694
2023-11-07 09:01:26,068 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,068 [DEBUG] on stmt: $694load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $706load_attr.3 = getattr(value=$694load_global.1, attr=max)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $722call.5 = call $706load_attr.3(non_zero_dists, func=$706load_attr.3, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,068 [DEBUG] on stmt: rho[i] = $722call.5
2023-11-07 09:01:26,068 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,068 [DEBUG] ==== SSA block rewrite pass on 740
2023-11-07 09:01:26,068 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,068 [DEBUG] on stmt: $740load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $758call.4 = call $740load_global.1(n_iter, func=$740load_global.1, args=[Var(n_iter, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $768get_iter.5 = getiter(value=$758call.4)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $phi770.1 = $768get_iter.5
2023-11-07 09:01:26,068 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,068 [DEBUG] ==== SSA block rewrite pass on 770
2023-11-07 09:01:26,068 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,068 [DEBUG] on stmt: hi.2 = phi(incoming_values=[Var(hi.3, umap_.py:234), Var(hi, umap_.py:197)], incoming_blocks=[1328, 740])
2023-11-07 09:01:26,068 [DEBUG] on stmt: lo.2 = phi(incoming_values=[Var(lo.3, umap_.py:231), Var(lo, umap_.py:196)], incoming_blocks=[1328, 740])
2023-11-07 09:01:26,068 [DEBUG] on stmt: $770for_iter.2 = iternext(value=$phi770.1)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $770for_iter.3 = pair_first(value=$770for_iter.2)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $770for_iter.4 = pair_second(value=$770for_iter.2)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $phi772.2 = $770for_iter.3
2023-11-07 09:01:26,068 [DEBUG] on stmt: branch $770for_iter.4, 772, 1112
2023-11-07 09:01:26,068 [DEBUG] ==== SSA block rewrite pass on 772
2023-11-07 09:01:26,068 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,068 [DEBUG] on stmt: n = $phi772.2
2023-11-07 09:01:26,068 [DEBUG] on stmt: psum = const(float, 0.0)
2023-11-07 09:01:26,068 [DEBUG] first assign: psum
2023-11-07 09:01:26,068 [DEBUG] replaced with: psum = const(float, 0.0)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $778load_global.4 = global(range: <class 'range'>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $const790.6 = const(int, 1)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $794load_attr.8 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $const804.9 = const(int, 1)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $806binary_subscr.10 = static_getitem(value=$794load_attr.8, index=1, index_var=$const804.9, fn=<built-in function getitem>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $820call.11 = call $778load_global.4($const790.6, $806binary_subscr.10, func=$778load_global.4, args=[Var($const790.6, umap_.py:220), Var($806binary_subscr.10, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $830get_iter.12 = getiter(value=$820call.11)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $phi832.2 = $830get_iter.12
2023-11-07 09:01:26,068 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,068 [DEBUG] ==== SSA block rewrite pass on 832
2023-11-07 09:01:26,068 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,068 [DEBUG] on stmt: $832for_iter.3 = iternext(value=$phi832.2)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $832for_iter.4 = pair_first(value=$832for_iter.3)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $832for_iter.5 = pair_second(value=$832for_iter.3)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $phi834.3 = $832for_iter.4
2023-11-07 09:01:26,068 [DEBUG] on stmt: branch $832for_iter.5, 834, 954
2023-11-07 09:01:26,068 [DEBUG] ==== SSA block rewrite pass on 834
2023-11-07 09:01:26,068 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,068 [DEBUG] on stmt: j = $phi834.3
2023-11-07 09:01:26,068 [DEBUG] on stmt: $842build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
2023-11-07 09:01:26,068 [DEBUG] on stmt: $844binary_subscr.8 = getitem(value=distances, index=$842build_tuple.7, fn=<built-in function getitem>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $858binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: d = $844binary_subscr.8 - $858binary_subscr.11
2023-11-07 09:01:26,068 [DEBUG] on stmt: $const876.14 = const(int, 0)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $878compare_op.15 = d > $const876.14
2023-11-07 09:01:26,068 [DEBUG] on stmt: bool884 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,068 [DEBUG] on stmt: $884pred = call bool884($878compare_op.15, func=bool884, args=(Var($878compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,069 [DEBUG] on stmt: branch $884pred, 886, 942
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 886
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: $888load_global.4 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $900load_attr.6 = getattr(value=$888load_global.4, attr=exp)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $binop_truediv914.9 = d / mid
2023-11-07 09:01:26,069 [DEBUG] on stmt: $918unary_negative.10 = unary(fn=<built-in function neg>, value=$binop_truediv914.9)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $924call.11 = call $900load_attr.6($918unary_negative.10, func=$900load_attr.6, args=[Var($918unary_negative.10, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,069 [DEBUG] on stmt: psum = $binop_iadd934.12
2023-11-07 09:01:26,069 [DEBUG] replaced with: psum.1 = $binop_iadd934.12
2023-11-07 09:01:26,069 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 942
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: $const944.4 = const(float, 1.0)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,069 [DEBUG] on stmt: psum = $binop_iadd946.5
2023-11-07 09:01:26,069 [DEBUG] replaced with: psum.2 = $binop_iadd946.5
2023-11-07 09:01:26,069 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 954
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: $954load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $966load_attr.4 = getattr(value=$954load_global.2, attr=fabs)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $binop_sub980.7 = psum - target
2023-11-07 09:01:26,069 [DEBUG] on stmt: $988call.8 = call $966load_attr.4($binop_sub980.7, func=$966load_attr.4, args=[Var($binop_sub980.7, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $998load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1010compare_op.10 = $988call.8 < $998load_global.9
2023-11-07 09:01:26,069 [DEBUG] on stmt: bool1016 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1016pred = call bool1016($1010compare_op.10, func=bool1016, args=(Var($1010compare_op.10, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,069 [DEBUG] on stmt: branch $1016pred, 1018, 1022
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 1018
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: jump 1112
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 1022
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1026compare_op.4 = psum > target
2023-11-07 09:01:26,069 [DEBUG] on stmt: bool1032 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1032pred = call bool1032($1026compare_op.4, func=bool1032, args=(Var($1026compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,069 [DEBUG] on stmt: branch $1032pred, 1034, 1056
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 1034
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: hi.1 = mid
2023-11-07 09:01:26,069 [DEBUG] on stmt: $binop_add1042.5 = lo.2 + hi.1
2023-11-07 09:01:26,069 [DEBUG] on stmt: $const1046.6 = const(float, 2.0)
2023-11-07 09:01:26,069 [DEBUG] on stmt: mid = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,069 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 1056
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: lo.1 = mid
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1062load_global.4 = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1074compare_op.5 = hi.2 == $1062load_global.4
2023-11-07 09:01:26,069 [DEBUG] on stmt: bool1080 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1080pred = call bool1080($1074compare_op.5, func=bool1080, args=(Var($1074compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,069 [DEBUG] on stmt: branch $1080pred, 1082, 1094
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 1082
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: $const1084.3 = const(int, 2)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,069 [DEBUG] on stmt: mid = $binop_imul1086.4
2023-11-07 09:01:26,069 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 1094
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: $binop_add1098.4 = lo.1 + hi.2
2023-11-07 09:01:26,069 [DEBUG] on stmt: $const1102.5 = const(float, 2.0)
2023-11-07 09:01:26,069 [DEBUG] on stmt: mid = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,069 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 1112
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: result[i] = mid
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1126binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $const1136.7 = const(float, 0.0)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1138compare_op.8 = $1126binary_subscr.6 > $const1136.7
2023-11-07 09:01:26,069 [DEBUG] on stmt: bool1144 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1144pred = call bool1144($1138compare_op.8, func=bool1144, args=(Var($1138compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,069 [DEBUG] on stmt: branch $1144pred, 1146, 1256
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 1146
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1146load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1158load_attr.3 = getattr(value=$1146load_global.1, attr=mean)
2023-11-07 09:01:26,069 [DEBUG] on stmt: mean_ith_distances = call $1158load_attr.3(ith_distances, func=$1158load_attr.3, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1190binary_subscr.8 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1200load_global.9 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $binop_mul1214.11 = $1200load_global.9 * mean_ith_distances
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1218compare_op.12 = $1190binary_subscr.8 < $binop_mul1214.11
2023-11-07 09:01:26,069 [DEBUG] on stmt: bool1224 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1224pred = call bool1224($1218compare_op.12, func=bool1224, args=(Var($1218compare_op.12, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,069 [DEBUG] on stmt: branch $1224pred, 1226, 1252
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 1226
2023-11-07 09:01:26,069 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,069 [DEBUG] on stmt: $1226load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,069 [DEBUG] on stmt: $binop_mul1240.3 = $1226load_global.1 * mean_ith_distances
2023-11-07 09:01:26,069 [DEBUG] on stmt: result[i] = $binop_mul1240.3
2023-11-07 09:01:26,069 [DEBUG] on stmt: jump 1252
2023-11-07 09:01:26,069 [DEBUG] ==== SSA block rewrite pass on 1252
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,070 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 1256
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,070 [DEBUG] on stmt: $1260binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $1270load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $binop_mul1284.6 = $1270load_global.4 * mean_distances
2023-11-07 09:01:26,070 [DEBUG] on stmt: $1288compare_op.7 = $1260binary_subscr.3 < $binop_mul1284.6
2023-11-07 09:01:26,070 [DEBUG] on stmt: bool1294 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $1294pred = call bool1294($1288compare_op.7, func=bool1294, args=(Var($1288compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,070 [DEBUG] on stmt: branch $1294pred, 1296, 1322
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 1296
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,070 [DEBUG] on stmt: $1296load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $binop_mul1310.3 = $1296load_global.1 * mean_distances
2023-11-07 09:01:26,070 [DEBUG] on stmt: result[i] = $binop_mul1310.3
2023-11-07 09:01:26,070 [DEBUG] on stmt: jump 1322
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 1322
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,070 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 1326
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,070 [DEBUG] on stmt: $1330build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
2023-11-07 09:01:26,070 [DEBUG] on stmt: $1332return_value.3 = cast(value=$1330build_tuple.2)
2023-11-07 09:01:26,070 [DEBUG] on stmt: return $1332return_value.3
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 1327
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,070 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 1328
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,070 [DEBUG] on stmt: hi.3 = phi(incoming_values=[Var(hi.1, umap_.py:231), Var(hi.2, umap_.py:234), Var(hi.2, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,070 [DEBUG] on stmt: lo.3 = phi(incoming_values=[Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234), Var(lo.1, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,070 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 1329
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x281db46d0>
2023-11-07 09:01:26,070 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,070 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {772: [<numba.core.ir.Assign object at 0x2825cc210>],
             886: [<numba.core.ir.Assign object at 0x2825ab450>],
             942: [<numba.core.ir.Assign object at 0x2825a99d0>]})
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,070 [DEBUG] on stmt: distances = arg(0, name=distances)
2023-11-07 09:01:26,070 [DEBUG] on stmt: k = arg(1, name=k)
2023-11-07 09:01:26,070 [DEBUG] on stmt: n_iter = arg(2, name=n_iter)
2023-11-07 09:01:26,070 [DEBUG] on stmt: local_connectivity = arg(3, name=local_connectivity)
2023-11-07 09:01:26,070 [DEBUG] on stmt: bandwidth = arg(4, name=bandwidth)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=log2)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $32call.4 = call $16load_attr.2(k, func=$16load_attr.2, args=[Var(k, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,070 [DEBUG] on stmt: target = $32call.4 * bandwidth
2023-11-07 09:01:26,070 [DEBUG] on stmt: $50load_global.7 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $62load_attr.9 = getattr(value=$50load_global.7, attr=zeros)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $74load_attr.11 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $const84.12 = const(int, 0)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $86binary_subscr.13 = static_getitem(value=$74load_attr.11, index=0, index_var=$const84.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $96load_global.14 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $108load_attr.15 = getattr(value=$96load_global.14, attr=float32)
2023-11-07 09:01:26,070 [DEBUG] on stmt: rho = call $62load_attr.9($86binary_subscr.13, func=$62load_attr.9, args=[Var($86binary_subscr.13, umap_.py:190)], kws=[('dtype', Var($108load_attr.15, umap_.py:190))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $136load_global.17 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $148load_attr.19 = getattr(value=$136load_global.17, attr=zeros)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $160load_attr.21 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $const170.22 = const(int, 0)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $172binary_subscr.23 = static_getitem(value=$160load_attr.21, index=0, index_var=$const170.22, fn=<built-in function getitem>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $182load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $194load_attr.25 = getattr(value=$182load_global.24, attr=float32)
2023-11-07 09:01:26,070 [DEBUG] on stmt: result = call $148load_attr.19($172binary_subscr.23, func=$148load_attr.19, args=[Var($172binary_subscr.23, umap_.py:191)], kws=[('dtype', Var($194load_attr.25, umap_.py:191))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $222load_global.27 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $234load_attr.29 = getattr(value=$222load_global.27, attr=mean)
2023-11-07 09:01:26,070 [DEBUG] on stmt: mean_distances = call $234load_attr.29(distances, func=$234load_attr.29, args=[Var(distances, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $262load_global.32 = global(range: <class 'range'>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $276load_attr.35 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $const286.36 = const(int, 0)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $288binary_subscr.37 = static_getitem(value=$276load_attr.35, index=0, index_var=$const286.36, fn=<built-in function getitem>)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $302call.38 = call $262load_global.32($288binary_subscr.37, func=$262load_global.32, args=[Var($288binary_subscr.37, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $312get_iter.39 = getiter(value=$302call.38)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $phi316.0 = $312get_iter.39
2023-11-07 09:01:26,070 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 314
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,070 [DEBUG] on stmt: jump 316
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 316
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,070 [DEBUG] on stmt: $316for_iter.1 = iternext(value=$phi316.0)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $316for_iter.2 = pair_first(value=$316for_iter.1)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $316for_iter.3 = pair_second(value=$316for_iter.1)
2023-11-07 09:01:26,070 [DEBUG] on stmt: $phi318.1 = $316for_iter.2
2023-11-07 09:01:26,070 [DEBUG] on stmt: branch $316for_iter.3, 318, 1326
2023-11-07 09:01:26,070 [DEBUG] ==== SSA block rewrite pass on 318
2023-11-07 09:01:26,070 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,070 [DEBUG] on stmt: i = $phi318.1
2023-11-07 09:01:26,070 [DEBUG] on stmt: lo = const(float, 0.0)
2023-11-07 09:01:26,070 [DEBUG] on stmt: hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,070 [DEBUG] on stmt: mid = const(float, 1.0)
2023-11-07 09:01:26,070 [DEBUG] on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $const362.10 = const(float, 0.0)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $364compare_op.11 = ith_distances > $const362.10
2023-11-07 09:01:26,071 [DEBUG] on stmt: non_zero_dists = getitem(value=ith_distances, index=$364compare_op.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $384load_attr.14 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $const394.15 = const(int, 0)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $396binary_subscr.16 = static_getitem(value=$384load_attr.14, index=0, index_var=$const394.15, fn=<built-in function getitem>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $408compare_op.18 = $396binary_subscr.16 >= local_connectivity
2023-11-07 09:01:26,071 [DEBUG] on stmt: bool414 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $414pred = call bool414($408compare_op.18, func=bool414, args=(Var($408compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,071 [DEBUG] on stmt: branch $414pred, 416, 660
2023-11-07 09:01:26,071 [DEBUG] ==== SSA block rewrite pass on 416
2023-11-07 09:01:26,071 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,071 [DEBUG] on stmt: $416load_global.1 = global(int: <class 'int'>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $428load_global.3 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $440load_attr.5 = getattr(value=$428load_global.3, attr=floor)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $456call.7 = call $440load_attr.5(local_connectivity, func=$440load_attr.5, args=[Var(local_connectivity, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,071 [DEBUG] on stmt: index = call $416load_global.1($456call.7, func=$416load_global.1, args=[Var($456call.7, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,071 [DEBUG] on stmt: interpolation = local_connectivity - index
2023-11-07 09:01:26,071 [DEBUG] on stmt: $const494.13 = const(int, 0)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $496compare_op.14 = index > $const494.13
2023-11-07 09:01:26,071 [DEBUG] on stmt: bool502 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $502pred = call bool502($496compare_op.14, func=bool502, args=(Var($496compare_op.14, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,071 [DEBUG] on stmt: branch $502pred, 504, 630
2023-11-07 09:01:26,071 [DEBUG] ==== SSA block rewrite pass on 504
2023-11-07 09:01:26,071 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,071 [DEBUG] on stmt: $const508.3 = const(int, 1)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $binop_sub510.4 = index - $const508.3
2023-11-07 09:01:26,071 [DEBUG] on stmt: $514binary_subscr.5 = getitem(value=non_zero_dists, index=$binop_sub510.4, fn=<built-in function getitem>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: rho[i] = $514binary_subscr.5
2023-11-07 09:01:26,071 [DEBUG] on stmt: $534load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $546compare_op.10 = interpolation > $534load_global.9
2023-11-07 09:01:26,071 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $552pred = call bool552($546compare_op.10, func=bool552, args=(Var($546compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,071 [DEBUG] on stmt: branch $552pred, 554, 628
2023-11-07 09:01:26,071 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,071 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,071 [DEBUG] on stmt: $562binary_subscr.3 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $578binary_subscr.7 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $const592.10 = const(int, 1)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $binop_sub594.11 = index - $const592.10
2023-11-07 09:01:26,071 [DEBUG] on stmt: $598binary_subscr.12 = getitem(value=non_zero_dists, index=$binop_sub594.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $binop_sub608.13 = $578binary_subscr.7 - $598binary_subscr.12
2023-11-07 09:01:26,071 [DEBUG] on stmt: $binop_mul612.14 = interpolation * $binop_sub608.13
2023-11-07 09:01:26,071 [DEBUG] on stmt: $binop_iadd616.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$562binary_subscr.3, rhs=$binop_mul612.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,071 [DEBUG] on stmt: rho[i] = $binop_iadd616.15
2023-11-07 09:01:26,071 [DEBUG] on stmt: jump 628
2023-11-07 09:01:26,071 [DEBUG] ==== SSA block rewrite pass on 628
2023-11-07 09:01:26,071 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,071 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,071 [DEBUG] ==== SSA block rewrite pass on 630
2023-11-07 09:01:26,071 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,071 [DEBUG] on stmt: $const634.3 = const(int, 0)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $636binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const634.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $binop_mul646.5 = interpolation * $636binary_subscr.4
2023-11-07 09:01:26,071 [DEBUG] on stmt: rho[i] = $binop_mul646.5
2023-11-07 09:01:26,071 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,071 [DEBUG] ==== SSA block rewrite pass on 660
2023-11-07 09:01:26,071 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,071 [DEBUG] on stmt: $662load_attr.2 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $const672.3 = const(int, 0)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $674binary_subscr.4 = static_getitem(value=$662load_attr.2, index=0, index_var=$const672.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $const684.5 = const(int, 0)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $686compare_op.6 = $674binary_subscr.4 > $const684.5
2023-11-07 09:01:26,071 [DEBUG] on stmt: bool692 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $692pred = call bool692($686compare_op.6, func=bool692, args=(Var($686compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,071 [DEBUG] on stmt: branch $692pred, 694, 740
2023-11-07 09:01:26,071 [DEBUG] ==== SSA block rewrite pass on 694
2023-11-07 09:01:26,071 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,071 [DEBUG] on stmt: $694load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $706load_attr.3 = getattr(value=$694load_global.1, attr=max)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $722call.5 = call $706load_attr.3(non_zero_dists, func=$706load_attr.3, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,071 [DEBUG] on stmt: rho[i] = $722call.5
2023-11-07 09:01:26,071 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,071 [DEBUG] ==== SSA block rewrite pass on 740
2023-11-07 09:01:26,071 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,071 [DEBUG] on stmt: $740load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $758call.4 = call $740load_global.1(n_iter, func=$740load_global.1, args=[Var(n_iter, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $768get_iter.5 = getiter(value=$758call.4)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $phi770.1 = $768get_iter.5
2023-11-07 09:01:26,071 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,071 [DEBUG] ==== SSA block rewrite pass on 770
2023-11-07 09:01:26,071 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,071 [DEBUG] on stmt: hi.2 = phi(incoming_values=[Var(hi.3, umap_.py:234), Var(hi, umap_.py:197)], incoming_blocks=[1328, 740])
2023-11-07 09:01:26,071 [DEBUG] on stmt: lo.2 = phi(incoming_values=[Var(lo.3, umap_.py:231), Var(lo, umap_.py:196)], incoming_blocks=[1328, 740])
2023-11-07 09:01:26,071 [DEBUG] on stmt: $770for_iter.2 = iternext(value=$phi770.1)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $770for_iter.3 = pair_first(value=$770for_iter.2)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $770for_iter.4 = pair_second(value=$770for_iter.2)
2023-11-07 09:01:26,071 [DEBUG] on stmt: $phi772.2 = $770for_iter.3
2023-11-07 09:01:26,071 [DEBUG] on stmt: branch $770for_iter.4, 772, 1112
2023-11-07 09:01:26,071 [DEBUG] ==== SSA block rewrite pass on 772
2023-11-07 09:01:26,071 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,071 [DEBUG] on stmt: n = $phi772.2
2023-11-07 09:01:26,072 [DEBUG] on stmt: psum = const(float, 0.0)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $778load_global.4 = global(range: <class 'range'>)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $const790.6 = const(int, 1)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $794load_attr.8 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $const804.9 = const(int, 1)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $806binary_subscr.10 = static_getitem(value=$794load_attr.8, index=1, index_var=$const804.9, fn=<built-in function getitem>)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $820call.11 = call $778load_global.4($const790.6, $806binary_subscr.10, func=$778load_global.4, args=[Var($const790.6, umap_.py:220), Var($806binary_subscr.10, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $830get_iter.12 = getiter(value=$820call.11)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $phi832.2 = $830get_iter.12
2023-11-07 09:01:26,072 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,072 [DEBUG] ==== SSA block rewrite pass on 832
2023-11-07 09:01:26,072 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,072 [DEBUG] on stmt: $832for_iter.3 = iternext(value=$phi832.2)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $832for_iter.4 = pair_first(value=$832for_iter.3)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $832for_iter.5 = pair_second(value=$832for_iter.3)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $phi834.3 = $832for_iter.4
2023-11-07 09:01:26,072 [DEBUG] on stmt: branch $832for_iter.5, 834, 954
2023-11-07 09:01:26,072 [DEBUG] ==== SSA block rewrite pass on 834
2023-11-07 09:01:26,072 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,072 [DEBUG] on stmt: j = $phi834.3
2023-11-07 09:01:26,072 [DEBUG] on stmt: $842build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
2023-11-07 09:01:26,072 [DEBUG] on stmt: $844binary_subscr.8 = getitem(value=distances, index=$842build_tuple.7, fn=<built-in function getitem>)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $858binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,072 [DEBUG] on stmt: d = $844binary_subscr.8 - $858binary_subscr.11
2023-11-07 09:01:26,072 [DEBUG] on stmt: $const876.14 = const(int, 0)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $878compare_op.15 = d > $const876.14
2023-11-07 09:01:26,072 [DEBUG] on stmt: bool884 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $884pred = call bool884($878compare_op.15, func=bool884, args=(Var($878compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,072 [DEBUG] on stmt: branch $884pred, 886, 942
2023-11-07 09:01:26,072 [DEBUG] ==== SSA block rewrite pass on 886
2023-11-07 09:01:26,072 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,072 [DEBUG] on stmt: $888load_global.4 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $900load_attr.6 = getattr(value=$888load_global.4, attr=exp)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $binop_truediv914.9 = d / mid
2023-11-07 09:01:26,072 [DEBUG] on stmt: $918unary_negative.10 = unary(fn=<built-in function neg>, value=$binop_truediv914.9)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $924call.11 = call $900load_attr.6($918unary_negative.10, func=$900load_attr.6, args=[Var($918unary_negative.10, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,072 [DEBUG] find_def var='psum' stmt=$binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,072 [DEBUG] find_def_from_top label 886
2023-11-07 09:01:26,072 [DEBUG] idom 834 from label 886
2023-11-07 09:01:26,072 [DEBUG] find_def_from_bottom label 834
2023-11-07 09:01:26,072 [DEBUG] find_def_from_top label 834
2023-11-07 09:01:26,072 [DEBUG] idom 832 from label 834
2023-11-07 09:01:26,072 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,072 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,072 [DEBUG] insert phi node psum.3 = phi(incoming_values=[], incoming_blocks=[]) at 832
2023-11-07 09:01:26,072 [DEBUG] find_def_from_bottom label 1329
2023-11-07 09:01:26,072 [DEBUG] find_def_from_top label 1329
2023-11-07 09:01:26,072 [DEBUG] insert phi node psum.4 = phi(incoming_values=[], incoming_blocks=[]) at 1329
2023-11-07 09:01:26,072 [DEBUG] find_def_from_bottom label 942
2023-11-07 09:01:26,072 [DEBUG] incoming_def psum.2 = $binop_iadd946.5
2023-11-07 09:01:26,072 [DEBUG] find_def_from_bottom label 886
2023-11-07 09:01:26,072 [DEBUG] incoming_def psum.1 = $binop_iadd934.12
2023-11-07 09:01:26,072 [DEBUG] incoming_def psum.4 = phi(incoming_values=[Var(psum.2, umap_.py:225), Var(psum.1, umap_.py:223)], incoming_blocks=[942, 886])
2023-11-07 09:01:26,072 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,072 [DEBUG] incoming_def psum = const(float, 0.0)
2023-11-07 09:01:26,072 [DEBUG] replaced with: $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,072 [DEBUG] on stmt: psum.1 = $binop_iadd934.12
2023-11-07 09:01:26,072 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,072 [DEBUG] ==== SSA block rewrite pass on 942
2023-11-07 09:01:26,072 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,072 [DEBUG] on stmt: $const944.4 = const(float, 1.0)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,072 [DEBUG] find_def var='psum' stmt=$binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,072 [DEBUG] find_def_from_top label 942
2023-11-07 09:01:26,072 [DEBUG] idom 834 from label 942
2023-11-07 09:01:26,072 [DEBUG] find_def_from_bottom label 834
2023-11-07 09:01:26,072 [DEBUG] find_def_from_top label 834
2023-11-07 09:01:26,072 [DEBUG] idom 832 from label 834
2023-11-07 09:01:26,072 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,072 [DEBUG] replaced with: $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,072 [DEBUG] on stmt: psum.2 = $binop_iadd946.5
2023-11-07 09:01:26,072 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,072 [DEBUG] ==== SSA block rewrite pass on 954
2023-11-07 09:01:26,072 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,072 [DEBUG] on stmt: $954load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $966load_attr.4 = getattr(value=$954load_global.2, attr=fabs)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $binop_sub980.7 = psum - target
2023-11-07 09:01:26,072 [DEBUG] find_def var='psum' stmt=$binop_sub980.7 = psum - target
2023-11-07 09:01:26,072 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,072 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,072 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,072 [DEBUG] replaced with: $binop_sub980.7 = psum.3 - target
2023-11-07 09:01:26,072 [DEBUG] on stmt: $988call.8 = call $966load_attr.4($binop_sub980.7, func=$966load_attr.4, args=[Var($binop_sub980.7, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $998load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $1010compare_op.10 = $988call.8 < $998load_global.9
2023-11-07 09:01:26,072 [DEBUG] on stmt: bool1016 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,072 [DEBUG] on stmt: $1016pred = call bool1016($1010compare_op.10, func=bool1016, args=(Var($1010compare_op.10, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,072 [DEBUG] on stmt: branch $1016pred, 1018, 1022
2023-11-07 09:01:26,072 [DEBUG] ==== SSA block rewrite pass on 1018
2023-11-07 09:01:26,072 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: jump 1112
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1022
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1026compare_op.4 = psum > target
2023-11-07 09:01:26,073 [DEBUG] find_def var='psum' stmt=$1026compare_op.4 = psum > target
2023-11-07 09:01:26,073 [DEBUG] find_def_from_top label 1022
2023-11-07 09:01:26,073 [DEBUG] idom 954 from label 1022
2023-11-07 09:01:26,073 [DEBUG] find_def_from_bottom label 954
2023-11-07 09:01:26,073 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,073 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,073 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,073 [DEBUG] replaced with: $1026compare_op.4 = psum.3 > target
2023-11-07 09:01:26,073 [DEBUG] on stmt: bool1032 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1032pred = call bool1032($1026compare_op.4, func=bool1032, args=(Var($1026compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,073 [DEBUG] on stmt: branch $1032pred, 1034, 1056
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1034
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: hi.1 = mid
2023-11-07 09:01:26,073 [DEBUG] on stmt: $binop_add1042.5 = lo.2 + hi.1
2023-11-07 09:01:26,073 [DEBUG] on stmt: $const1046.6 = const(float, 2.0)
2023-11-07 09:01:26,073 [DEBUG] on stmt: mid = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,073 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1056
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: lo.1 = mid
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1062load_global.4 = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1074compare_op.5 = hi.2 == $1062load_global.4
2023-11-07 09:01:26,073 [DEBUG] on stmt: bool1080 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1080pred = call bool1080($1074compare_op.5, func=bool1080, args=(Var($1074compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,073 [DEBUG] on stmt: branch $1080pred, 1082, 1094
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1082
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: $const1084.3 = const(int, 2)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,073 [DEBUG] on stmt: mid = $binop_imul1086.4
2023-11-07 09:01:26,073 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1094
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: $binop_add1098.4 = lo.1 + hi.2
2023-11-07 09:01:26,073 [DEBUG] on stmt: $const1102.5 = const(float, 2.0)
2023-11-07 09:01:26,073 [DEBUG] on stmt: mid = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,073 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1112
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: result[i] = mid
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1126binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $const1136.7 = const(float, 0.0)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1138compare_op.8 = $1126binary_subscr.6 > $const1136.7
2023-11-07 09:01:26,073 [DEBUG] on stmt: bool1144 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1144pred = call bool1144($1138compare_op.8, func=bool1144, args=(Var($1138compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,073 [DEBUG] on stmt: branch $1144pred, 1146, 1256
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1146
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1146load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1158load_attr.3 = getattr(value=$1146load_global.1, attr=mean)
2023-11-07 09:01:26,073 [DEBUG] on stmt: mean_ith_distances = call $1158load_attr.3(ith_distances, func=$1158load_attr.3, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1190binary_subscr.8 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1200load_global.9 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $binop_mul1214.11 = $1200load_global.9 * mean_ith_distances
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1218compare_op.12 = $1190binary_subscr.8 < $binop_mul1214.11
2023-11-07 09:01:26,073 [DEBUG] on stmt: bool1224 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1224pred = call bool1224($1218compare_op.12, func=bool1224, args=(Var($1218compare_op.12, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,073 [DEBUG] on stmt: branch $1224pred, 1226, 1252
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1226
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1226load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $binop_mul1240.3 = $1226load_global.1 * mean_ith_distances
2023-11-07 09:01:26,073 [DEBUG] on stmt: result[i] = $binop_mul1240.3
2023-11-07 09:01:26,073 [DEBUG] on stmt: jump 1252
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1252
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1256
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1260binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1270load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $binop_mul1284.6 = $1270load_global.4 * mean_distances
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1288compare_op.7 = $1260binary_subscr.3 < $binop_mul1284.6
2023-11-07 09:01:26,073 [DEBUG] on stmt: bool1294 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1294pred = call bool1294($1288compare_op.7, func=bool1294, args=(Var($1288compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,073 [DEBUG] on stmt: branch $1294pred, 1296, 1322
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1296
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1296load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,073 [DEBUG] on stmt: $binop_mul1310.3 = $1296load_global.1 * mean_distances
2023-11-07 09:01:26,073 [DEBUG] on stmt: result[i] = $binop_mul1310.3
2023-11-07 09:01:26,073 [DEBUG] on stmt: jump 1322
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1322
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,073 [DEBUG] ==== SSA block rewrite pass on 1326
2023-11-07 09:01:26,073 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,073 [DEBUG] on stmt: $1330build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
2023-11-07 09:01:26,074 [DEBUG] on stmt: $1332return_value.3 = cast(value=$1330build_tuple.2)
2023-11-07 09:01:26,074 [DEBUG] on stmt: return $1332return_value.3
2023-11-07 09:01:26,074 [DEBUG] ==== SSA block rewrite pass on 1327
2023-11-07 09:01:26,074 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,074 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,074 [DEBUG] ==== SSA block rewrite pass on 1328
2023-11-07 09:01:26,074 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,074 [DEBUG] on stmt: hi.3 = phi(incoming_values=[Var(hi.1, umap_.py:231), Var(hi.2, umap_.py:234), Var(hi.2, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,074 [DEBUG] on stmt: lo.3 = phi(incoming_values=[Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234), Var(lo.1, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,074 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,074 [DEBUG] ==== SSA block rewrite pass on 1329
2023-11-07 09:01:26,074 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x28255db10>
2023-11-07 09:01:26,074 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,074 [DEBUG] Fix SSA violator on var mid
2023-11-07 09:01:26,074 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,074 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,074 [DEBUG] on stmt: distances = arg(0, name=distances)
2023-11-07 09:01:26,074 [DEBUG] on stmt: k = arg(1, name=k)
2023-11-07 09:01:26,074 [DEBUG] on stmt: n_iter = arg(2, name=n_iter)
2023-11-07 09:01:26,074 [DEBUG] on stmt: local_connectivity = arg(3, name=local_connectivity)
2023-11-07 09:01:26,074 [DEBUG] on stmt: bandwidth = arg(4, name=bandwidth)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=log2)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $32call.4 = call $16load_attr.2(k, func=$16load_attr.2, args=[Var(k, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,074 [DEBUG] on stmt: target = $32call.4 * bandwidth
2023-11-07 09:01:26,074 [DEBUG] on stmt: $50load_global.7 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $62load_attr.9 = getattr(value=$50load_global.7, attr=zeros)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $74load_attr.11 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $const84.12 = const(int, 0)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $86binary_subscr.13 = static_getitem(value=$74load_attr.11, index=0, index_var=$const84.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $96load_global.14 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $108load_attr.15 = getattr(value=$96load_global.14, attr=float32)
2023-11-07 09:01:26,074 [DEBUG] on stmt: rho = call $62load_attr.9($86binary_subscr.13, func=$62load_attr.9, args=[Var($86binary_subscr.13, umap_.py:190)], kws=[('dtype', Var($108load_attr.15, umap_.py:190))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $136load_global.17 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $148load_attr.19 = getattr(value=$136load_global.17, attr=zeros)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $160load_attr.21 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $const170.22 = const(int, 0)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $172binary_subscr.23 = static_getitem(value=$160load_attr.21, index=0, index_var=$const170.22, fn=<built-in function getitem>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $182load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $194load_attr.25 = getattr(value=$182load_global.24, attr=float32)
2023-11-07 09:01:26,074 [DEBUG] on stmt: result = call $148load_attr.19($172binary_subscr.23, func=$148load_attr.19, args=[Var($172binary_subscr.23, umap_.py:191)], kws=[('dtype', Var($194load_attr.25, umap_.py:191))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $222load_global.27 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $234load_attr.29 = getattr(value=$222load_global.27, attr=mean)
2023-11-07 09:01:26,074 [DEBUG] on stmt: mean_distances = call $234load_attr.29(distances, func=$234load_attr.29, args=[Var(distances, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $262load_global.32 = global(range: <class 'range'>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $276load_attr.35 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $const286.36 = const(int, 0)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $288binary_subscr.37 = static_getitem(value=$276load_attr.35, index=0, index_var=$const286.36, fn=<built-in function getitem>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $302call.38 = call $262load_global.32($288binary_subscr.37, func=$262load_global.32, args=[Var($288binary_subscr.37, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $312get_iter.39 = getiter(value=$302call.38)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $phi316.0 = $312get_iter.39
2023-11-07 09:01:26,074 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,074 [DEBUG] ==== SSA block rewrite pass on 314
2023-11-07 09:01:26,074 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,074 [DEBUG] on stmt: jump 316
2023-11-07 09:01:26,074 [DEBUG] ==== SSA block rewrite pass on 316
2023-11-07 09:01:26,074 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,074 [DEBUG] on stmt: $316for_iter.1 = iternext(value=$phi316.0)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $316for_iter.2 = pair_first(value=$316for_iter.1)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $316for_iter.3 = pair_second(value=$316for_iter.1)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $phi318.1 = $316for_iter.2
2023-11-07 09:01:26,074 [DEBUG] on stmt: branch $316for_iter.3, 318, 1326
2023-11-07 09:01:26,074 [DEBUG] ==== SSA block rewrite pass on 318
2023-11-07 09:01:26,074 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,074 [DEBUG] on stmt: i = $phi318.1
2023-11-07 09:01:26,074 [DEBUG] on stmt: lo = const(float, 0.0)
2023-11-07 09:01:26,074 [DEBUG] on stmt: hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,074 [DEBUG] on stmt: mid = const(float, 1.0)
2023-11-07 09:01:26,074 [DEBUG] first assign: mid
2023-11-07 09:01:26,074 [DEBUG] replaced with: mid = const(float, 1.0)
2023-11-07 09:01:26,074 [DEBUG] on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $const362.10 = const(float, 0.0)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $364compare_op.11 = ith_distances > $const362.10
2023-11-07 09:01:26,074 [DEBUG] on stmt: non_zero_dists = getitem(value=ith_distances, index=$364compare_op.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $384load_attr.14 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $const394.15 = const(int, 0)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $396binary_subscr.16 = static_getitem(value=$384load_attr.14, index=0, index_var=$const394.15, fn=<built-in function getitem>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $408compare_op.18 = $396binary_subscr.16 >= local_connectivity
2023-11-07 09:01:26,074 [DEBUG] on stmt: bool414 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $414pred = call bool414($408compare_op.18, func=bool414, args=(Var($408compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,074 [DEBUG] on stmt: branch $414pred, 416, 660
2023-11-07 09:01:26,074 [DEBUG] ==== SSA block rewrite pass on 416
2023-11-07 09:01:26,074 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,074 [DEBUG] on stmt: $416load_global.1 = global(int: <class 'int'>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $428load_global.3 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $440load_attr.5 = getattr(value=$428load_global.3, attr=floor)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $456call.7 = call $440load_attr.5(local_connectivity, func=$440load_attr.5, args=[Var(local_connectivity, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,074 [DEBUG] on stmt: index = call $416load_global.1($456call.7, func=$416load_global.1, args=[Var($456call.7, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,074 [DEBUG] on stmt: interpolation = local_connectivity - index
2023-11-07 09:01:26,074 [DEBUG] on stmt: $const494.13 = const(int, 0)
2023-11-07 09:01:26,074 [DEBUG] on stmt: $496compare_op.14 = index > $const494.13
2023-11-07 09:01:26,074 [DEBUG] on stmt: bool502 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $502pred = call bool502($496compare_op.14, func=bool502, args=(Var($496compare_op.14, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,075 [DEBUG] on stmt: branch $502pred, 504, 630
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 504
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: $const508.3 = const(int, 1)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $binop_sub510.4 = index - $const508.3
2023-11-07 09:01:26,075 [DEBUG] on stmt: $514binary_subscr.5 = getitem(value=non_zero_dists, index=$binop_sub510.4, fn=<built-in function getitem>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: rho[i] = $514binary_subscr.5
2023-11-07 09:01:26,075 [DEBUG] on stmt: $534load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $546compare_op.10 = interpolation > $534load_global.9
2023-11-07 09:01:26,075 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $552pred = call bool552($546compare_op.10, func=bool552, args=(Var($546compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,075 [DEBUG] on stmt: branch $552pred, 554, 628
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: $562binary_subscr.3 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $578binary_subscr.7 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $const592.10 = const(int, 1)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $binop_sub594.11 = index - $const592.10
2023-11-07 09:01:26,075 [DEBUG] on stmt: $598binary_subscr.12 = getitem(value=non_zero_dists, index=$binop_sub594.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $binop_sub608.13 = $578binary_subscr.7 - $598binary_subscr.12
2023-11-07 09:01:26,075 [DEBUG] on stmt: $binop_mul612.14 = interpolation * $binop_sub608.13
2023-11-07 09:01:26,075 [DEBUG] on stmt: $binop_iadd616.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$562binary_subscr.3, rhs=$binop_mul612.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,075 [DEBUG] on stmt: rho[i] = $binop_iadd616.15
2023-11-07 09:01:26,075 [DEBUG] on stmt: jump 628
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 628
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 630
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: $const634.3 = const(int, 0)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $636binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const634.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $binop_mul646.5 = interpolation * $636binary_subscr.4
2023-11-07 09:01:26,075 [DEBUG] on stmt: rho[i] = $binop_mul646.5
2023-11-07 09:01:26,075 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 660
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: $662load_attr.2 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $const672.3 = const(int, 0)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $674binary_subscr.4 = static_getitem(value=$662load_attr.2, index=0, index_var=$const672.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $const684.5 = const(int, 0)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $686compare_op.6 = $674binary_subscr.4 > $const684.5
2023-11-07 09:01:26,075 [DEBUG] on stmt: bool692 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $692pred = call bool692($686compare_op.6, func=bool692, args=(Var($686compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,075 [DEBUG] on stmt: branch $692pred, 694, 740
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 694
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: $694load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $706load_attr.3 = getattr(value=$694load_global.1, attr=max)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $722call.5 = call $706load_attr.3(non_zero_dists, func=$706load_attr.3, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,075 [DEBUG] on stmt: rho[i] = $722call.5
2023-11-07 09:01:26,075 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 740
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: $740load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $758call.4 = call $740load_global.1(n_iter, func=$740load_global.1, args=[Var(n_iter, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $768get_iter.5 = getiter(value=$758call.4)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $phi770.1 = $768get_iter.5
2023-11-07 09:01:26,075 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 770
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: hi.2 = phi(incoming_values=[Var(hi.3, umap_.py:234), Var(hi, umap_.py:197)], incoming_blocks=[1328, 740])
2023-11-07 09:01:26,075 [DEBUG] on stmt: lo.2 = phi(incoming_values=[Var(lo.3, umap_.py:231), Var(lo, umap_.py:196)], incoming_blocks=[1328, 740])
2023-11-07 09:01:26,075 [DEBUG] on stmt: $770for_iter.2 = iternext(value=$phi770.1)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $770for_iter.3 = pair_first(value=$770for_iter.2)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $770for_iter.4 = pair_second(value=$770for_iter.2)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $phi772.2 = $770for_iter.3
2023-11-07 09:01:26,075 [DEBUG] on stmt: branch $770for_iter.4, 772, 1112
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 772
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: n = $phi772.2
2023-11-07 09:01:26,075 [DEBUG] on stmt: psum = const(float, 0.0)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $778load_global.4 = global(range: <class 'range'>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $const790.6 = const(int, 1)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $794load_attr.8 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $const804.9 = const(int, 1)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $806binary_subscr.10 = static_getitem(value=$794load_attr.8, index=1, index_var=$const804.9, fn=<built-in function getitem>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $820call.11 = call $778load_global.4($const790.6, $806binary_subscr.10, func=$778load_global.4, args=[Var($const790.6, umap_.py:220), Var($806binary_subscr.10, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $830get_iter.12 = getiter(value=$820call.11)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $phi832.2 = $830get_iter.12
2023-11-07 09:01:26,075 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 832
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: psum.3 = phi(incoming_values=[Var(psum.4, umap_.py:223), Var(psum, umap_.py:219)], incoming_blocks=[1329, 772])
2023-11-07 09:01:26,075 [DEBUG] on stmt: $832for_iter.3 = iternext(value=$phi832.2)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $832for_iter.4 = pair_first(value=$832for_iter.3)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $832for_iter.5 = pair_second(value=$832for_iter.3)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $phi834.3 = $832for_iter.4
2023-11-07 09:01:26,075 [DEBUG] on stmt: branch $832for_iter.5, 834, 954
2023-11-07 09:01:26,075 [DEBUG] ==== SSA block rewrite pass on 834
2023-11-07 09:01:26,075 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,075 [DEBUG] on stmt: j = $phi834.3
2023-11-07 09:01:26,075 [DEBUG] on stmt: $842build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
2023-11-07 09:01:26,075 [DEBUG] on stmt: $844binary_subscr.8 = getitem(value=distances, index=$842build_tuple.7, fn=<built-in function getitem>)
2023-11-07 09:01:26,075 [DEBUG] on stmt: $858binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: d = $844binary_subscr.8 - $858binary_subscr.11
2023-11-07 09:01:26,076 [DEBUG] on stmt: $const876.14 = const(int, 0)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $878compare_op.15 = d > $const876.14
2023-11-07 09:01:26,076 [DEBUG] on stmt: bool884 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $884pred = call bool884($878compare_op.15, func=bool884, args=(Var($878compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,076 [DEBUG] on stmt: branch $884pred, 886, 942
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 886
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: $888load_global.4 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $900load_attr.6 = getattr(value=$888load_global.4, attr=exp)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $binop_truediv914.9 = d / mid
2023-11-07 09:01:26,076 [DEBUG] on stmt: $918unary_negative.10 = unary(fn=<built-in function neg>, value=$binop_truediv914.9)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $924call.11 = call $900load_attr.6($918unary_negative.10, func=$900load_attr.6, args=[Var($918unary_negative.10, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,076 [DEBUG] on stmt: psum.1 = $binop_iadd934.12
2023-11-07 09:01:26,076 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 942
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: $const944.4 = const(float, 1.0)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,076 [DEBUG] on stmt: psum.2 = $binop_iadd946.5
2023-11-07 09:01:26,076 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 954
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: $954load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $966load_attr.4 = getattr(value=$954load_global.2, attr=fabs)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $binop_sub980.7 = psum.3 - target
2023-11-07 09:01:26,076 [DEBUG] on stmt: $988call.8 = call $966load_attr.4($binop_sub980.7, func=$966load_attr.4, args=[Var($binop_sub980.7, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $998load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1010compare_op.10 = $988call.8 < $998load_global.9
2023-11-07 09:01:26,076 [DEBUG] on stmt: bool1016 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1016pred = call bool1016($1010compare_op.10, func=bool1016, args=(Var($1010compare_op.10, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,076 [DEBUG] on stmt: branch $1016pred, 1018, 1022
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 1018
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: jump 1112
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 1022
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1026compare_op.4 = psum.3 > target
2023-11-07 09:01:26,076 [DEBUG] on stmt: bool1032 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1032pred = call bool1032($1026compare_op.4, func=bool1032, args=(Var($1026compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,076 [DEBUG] on stmt: branch $1032pred, 1034, 1056
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 1034
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: hi.1 = mid
2023-11-07 09:01:26,076 [DEBUG] on stmt: $binop_add1042.5 = lo.2 + hi.1
2023-11-07 09:01:26,076 [DEBUG] on stmt: $const1046.6 = const(float, 2.0)
2023-11-07 09:01:26,076 [DEBUG] on stmt: mid = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,076 [DEBUG] replaced with: mid.1 = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,076 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 1056
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: lo.1 = mid
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1062load_global.4 = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1074compare_op.5 = hi.2 == $1062load_global.4
2023-11-07 09:01:26,076 [DEBUG] on stmt: bool1080 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1080pred = call bool1080($1074compare_op.5, func=bool1080, args=(Var($1074compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,076 [DEBUG] on stmt: branch $1080pred, 1082, 1094
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 1082
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: $const1084.3 = const(int, 2)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,076 [DEBUG] on stmt: mid = $binop_imul1086.4
2023-11-07 09:01:26,076 [DEBUG] replaced with: mid.2 = $binop_imul1086.4
2023-11-07 09:01:26,076 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 1094
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: $binop_add1098.4 = lo.1 + hi.2
2023-11-07 09:01:26,076 [DEBUG] on stmt: $const1102.5 = const(float, 2.0)
2023-11-07 09:01:26,076 [DEBUG] on stmt: mid = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,076 [DEBUG] replaced with: mid.3 = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,076 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 1112
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: result[i] = mid
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1126binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $const1136.7 = const(float, 0.0)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1138compare_op.8 = $1126binary_subscr.6 > $const1136.7
2023-11-07 09:01:26,076 [DEBUG] on stmt: bool1144 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1144pred = call bool1144($1138compare_op.8, func=bool1144, args=(Var($1138compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,076 [DEBUG] on stmt: branch $1144pred, 1146, 1256
2023-11-07 09:01:26,076 [DEBUG] ==== SSA block rewrite pass on 1146
2023-11-07 09:01:26,076 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1146load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1158load_attr.3 = getattr(value=$1146load_global.1, attr=mean)
2023-11-07 09:01:26,076 [DEBUG] on stmt: mean_ith_distances = call $1158load_attr.3(ith_distances, func=$1158load_attr.3, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1190binary_subscr.8 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1200load_global.9 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $binop_mul1214.11 = $1200load_global.9 * mean_ith_distances
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1218compare_op.12 = $1190binary_subscr.8 < $binop_mul1214.11
2023-11-07 09:01:26,076 [DEBUG] on stmt: bool1224 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,076 [DEBUG] on stmt: $1224pred = call bool1224($1218compare_op.12, func=bool1224, args=(Var($1218compare_op.12, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,076 [DEBUG] on stmt: branch $1224pred, 1226, 1252
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 1226
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: $1226load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $binop_mul1240.3 = $1226load_global.1 * mean_ith_distances
2023-11-07 09:01:26,077 [DEBUG] on stmt: result[i] = $binop_mul1240.3
2023-11-07 09:01:26,077 [DEBUG] on stmt: jump 1252
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 1252
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 1256
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: $1260binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $1270load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $binop_mul1284.6 = $1270load_global.4 * mean_distances
2023-11-07 09:01:26,077 [DEBUG] on stmt: $1288compare_op.7 = $1260binary_subscr.3 < $binop_mul1284.6
2023-11-07 09:01:26,077 [DEBUG] on stmt: bool1294 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $1294pred = call bool1294($1288compare_op.7, func=bool1294, args=(Var($1288compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,077 [DEBUG] on stmt: branch $1294pred, 1296, 1322
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 1296
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: $1296load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $binop_mul1310.3 = $1296load_global.1 * mean_distances
2023-11-07 09:01:26,077 [DEBUG] on stmt: result[i] = $binop_mul1310.3
2023-11-07 09:01:26,077 [DEBUG] on stmt: jump 1322
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 1322
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 1326
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: $1330build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
2023-11-07 09:01:26,077 [DEBUG] on stmt: $1332return_value.3 = cast(value=$1330build_tuple.2)
2023-11-07 09:01:26,077 [DEBUG] on stmt: return $1332return_value.3
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 1327
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 1328
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: hi.3 = phi(incoming_values=[Var(hi.1, umap_.py:231), Var(hi.2, umap_.py:234), Var(hi.2, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,077 [DEBUG] on stmt: lo.3 = phi(incoming_values=[Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234), Var(lo.1, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,077 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 1329
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2841f2d50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: psum.4 = phi(incoming_values=[Var(psum.2, umap_.py:225), Var(psum.1, umap_.py:223)], incoming_blocks=[942, 886])
2023-11-07 09:01:26,077 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,077 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {318: [<numba.core.ir.Assign object at 0x2825ccf90>],
             1034: [<numba.core.ir.Assign object at 0x2825aa090>],
             1082: [<numba.core.ir.Assign object at 0x2825a8590>],
             1094: [<numba.core.ir.Assign object at 0x2825a8e50>]})
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: distances = arg(0, name=distances)
2023-11-07 09:01:26,077 [DEBUG] on stmt: k = arg(1, name=k)
2023-11-07 09:01:26,077 [DEBUG] on stmt: n_iter = arg(2, name=n_iter)
2023-11-07 09:01:26,077 [DEBUG] on stmt: local_connectivity = arg(3, name=local_connectivity)
2023-11-07 09:01:26,077 [DEBUG] on stmt: bandwidth = arg(4, name=bandwidth)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=log2)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $32call.4 = call $16load_attr.2(k, func=$16load_attr.2, args=[Var(k, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,077 [DEBUG] on stmt: target = $32call.4 * bandwidth
2023-11-07 09:01:26,077 [DEBUG] on stmt: $50load_global.7 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $62load_attr.9 = getattr(value=$50load_global.7, attr=zeros)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $74load_attr.11 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $const84.12 = const(int, 0)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $86binary_subscr.13 = static_getitem(value=$74load_attr.11, index=0, index_var=$const84.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $96load_global.14 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $108load_attr.15 = getattr(value=$96load_global.14, attr=float32)
2023-11-07 09:01:26,077 [DEBUG] on stmt: rho = call $62load_attr.9($86binary_subscr.13, func=$62load_attr.9, args=[Var($86binary_subscr.13, umap_.py:190)], kws=[('dtype', Var($108load_attr.15, umap_.py:190))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $136load_global.17 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $148load_attr.19 = getattr(value=$136load_global.17, attr=zeros)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $160load_attr.21 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $const170.22 = const(int, 0)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $172binary_subscr.23 = static_getitem(value=$160load_attr.21, index=0, index_var=$const170.22, fn=<built-in function getitem>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $182load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $194load_attr.25 = getattr(value=$182load_global.24, attr=float32)
2023-11-07 09:01:26,077 [DEBUG] on stmt: result = call $148load_attr.19($172binary_subscr.23, func=$148load_attr.19, args=[Var($172binary_subscr.23, umap_.py:191)], kws=[('dtype', Var($194load_attr.25, umap_.py:191))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $222load_global.27 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $234load_attr.29 = getattr(value=$222load_global.27, attr=mean)
2023-11-07 09:01:26,077 [DEBUG] on stmt: mean_distances = call $234load_attr.29(distances, func=$234load_attr.29, args=[Var(distances, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $262load_global.32 = global(range: <class 'range'>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $276load_attr.35 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $const286.36 = const(int, 0)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $288binary_subscr.37 = static_getitem(value=$276load_attr.35, index=0, index_var=$const286.36, fn=<built-in function getitem>)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $302call.38 = call $262load_global.32($288binary_subscr.37, func=$262load_global.32, args=[Var($288binary_subscr.37, umap_.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $312get_iter.39 = getiter(value=$302call.38)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $phi316.0 = $312get_iter.39
2023-11-07 09:01:26,077 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 314
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: jump 316
2023-11-07 09:01:26,077 [DEBUG] ==== SSA block rewrite pass on 316
2023-11-07 09:01:26,077 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,077 [DEBUG] on stmt: $316for_iter.1 = iternext(value=$phi316.0)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $316for_iter.2 = pair_first(value=$316for_iter.1)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $316for_iter.3 = pair_second(value=$316for_iter.1)
2023-11-07 09:01:26,077 [DEBUG] on stmt: $phi318.1 = $316for_iter.2
2023-11-07 09:01:26,078 [DEBUG] on stmt: branch $316for_iter.3, 318, 1326
2023-11-07 09:01:26,078 [DEBUG] ==== SSA block rewrite pass on 318
2023-11-07 09:01:26,078 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,078 [DEBUG] on stmt: i = $phi318.1
2023-11-07 09:01:26,078 [DEBUG] on stmt: lo = const(float, 0.0)
2023-11-07 09:01:26,078 [DEBUG] on stmt: hi = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,078 [DEBUG] on stmt: mid = const(float, 1.0)
2023-11-07 09:01:26,078 [DEBUG] on stmt: ith_distances = getitem(value=distances, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $const362.10 = const(float, 0.0)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $364compare_op.11 = ith_distances > $const362.10
2023-11-07 09:01:26,078 [DEBUG] on stmt: non_zero_dists = getitem(value=ith_distances, index=$364compare_op.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $384load_attr.14 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $const394.15 = const(int, 0)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $396binary_subscr.16 = static_getitem(value=$384load_attr.14, index=0, index_var=$const394.15, fn=<built-in function getitem>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $408compare_op.18 = $396binary_subscr.16 >= local_connectivity
2023-11-07 09:01:26,078 [DEBUG] on stmt: bool414 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $414pred = call bool414($408compare_op.18, func=bool414, args=(Var($408compare_op.18, umap_.py:203),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,078 [DEBUG] on stmt: branch $414pred, 416, 660
2023-11-07 09:01:26,078 [DEBUG] ==== SSA block rewrite pass on 416
2023-11-07 09:01:26,078 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,078 [DEBUG] on stmt: $416load_global.1 = global(int: <class 'int'>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $428load_global.3 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $440load_attr.5 = getattr(value=$428load_global.3, attr=floor)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $456call.7 = call $440load_attr.5(local_connectivity, func=$440load_attr.5, args=[Var(local_connectivity, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,078 [DEBUG] on stmt: index = call $416load_global.1($456call.7, func=$416load_global.1, args=[Var($456call.7, umap_.py:204)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,078 [DEBUG] on stmt: interpolation = local_connectivity - index
2023-11-07 09:01:26,078 [DEBUG] on stmt: $const494.13 = const(int, 0)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $496compare_op.14 = index > $const494.13
2023-11-07 09:01:26,078 [DEBUG] on stmt: bool502 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $502pred = call bool502($496compare_op.14, func=bool502, args=(Var($496compare_op.14, umap_.py:206),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,078 [DEBUG] on stmt: branch $502pred, 504, 630
2023-11-07 09:01:26,078 [DEBUG] ==== SSA block rewrite pass on 504
2023-11-07 09:01:26,078 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,078 [DEBUG] on stmt: $const508.3 = const(int, 1)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $binop_sub510.4 = index - $const508.3
2023-11-07 09:01:26,078 [DEBUG] on stmt: $514binary_subscr.5 = getitem(value=non_zero_dists, index=$binop_sub510.4, fn=<built-in function getitem>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: rho[i] = $514binary_subscr.5
2023-11-07 09:01:26,078 [DEBUG] on stmt: $534load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $546compare_op.10 = interpolation > $534load_global.9
2023-11-07 09:01:26,078 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $552pred = call bool552($546compare_op.10, func=bool552, args=(Var($546compare_op.10, umap_.py:208),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,078 [DEBUG] on stmt: branch $552pred, 554, 628
2023-11-07 09:01:26,078 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,078 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,078 [DEBUG] on stmt: $562binary_subscr.3 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $578binary_subscr.7 = getitem(value=non_zero_dists, index=index, fn=<built-in function getitem>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $const592.10 = const(int, 1)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $binop_sub594.11 = index - $const592.10
2023-11-07 09:01:26,078 [DEBUG] on stmt: $598binary_subscr.12 = getitem(value=non_zero_dists, index=$binop_sub594.11, fn=<built-in function getitem>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $binop_sub608.13 = $578binary_subscr.7 - $598binary_subscr.12
2023-11-07 09:01:26,078 [DEBUG] on stmt: $binop_mul612.14 = interpolation * $binop_sub608.13
2023-11-07 09:01:26,078 [DEBUG] on stmt: $binop_iadd616.15 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$562binary_subscr.3, rhs=$binop_mul612.14, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,078 [DEBUG] on stmt: rho[i] = $binop_iadd616.15
2023-11-07 09:01:26,078 [DEBUG] on stmt: jump 628
2023-11-07 09:01:26,078 [DEBUG] ==== SSA block rewrite pass on 628
2023-11-07 09:01:26,078 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,078 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,078 [DEBUG] ==== SSA block rewrite pass on 630
2023-11-07 09:01:26,078 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,078 [DEBUG] on stmt: $const634.3 = const(int, 0)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $636binary_subscr.4 = static_getitem(value=non_zero_dists, index=0, index_var=$const634.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $binop_mul646.5 = interpolation * $636binary_subscr.4
2023-11-07 09:01:26,078 [DEBUG] on stmt: rho[i] = $binop_mul646.5
2023-11-07 09:01:26,078 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,078 [DEBUG] ==== SSA block rewrite pass on 660
2023-11-07 09:01:26,078 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,078 [DEBUG] on stmt: $662load_attr.2 = getattr(value=non_zero_dists, attr=shape)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $const672.3 = const(int, 0)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $674binary_subscr.4 = static_getitem(value=$662load_attr.2, index=0, index_var=$const672.3, fn=<built-in function getitem>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $const684.5 = const(int, 0)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $686compare_op.6 = $674binary_subscr.4 > $const684.5
2023-11-07 09:01:26,078 [DEBUG] on stmt: bool692 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $692pred = call bool692($686compare_op.6, func=bool692, args=(Var($686compare_op.6, umap_.py:214),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,078 [DEBUG] on stmt: branch $692pred, 694, 740
2023-11-07 09:01:26,078 [DEBUG] ==== SSA block rewrite pass on 694
2023-11-07 09:01:26,078 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,078 [DEBUG] on stmt: $694load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $706load_attr.3 = getattr(value=$694load_global.1, attr=max)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $722call.5 = call $706load_attr.3(non_zero_dists, func=$706load_attr.3, args=[Var(non_zero_dists, umap_.py:202)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,078 [DEBUG] on stmt: rho[i] = $722call.5
2023-11-07 09:01:26,078 [DEBUG] on stmt: jump 740
2023-11-07 09:01:26,078 [DEBUG] ==== SSA block rewrite pass on 740
2023-11-07 09:01:26,078 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,078 [DEBUG] on stmt: $740load_global.1 = global(range: <class 'range'>)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $758call.4 = call $740load_global.1(n_iter, func=$740load_global.1, args=[Var(n_iter, umap_.py:141)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $768get_iter.5 = getiter(value=$758call.4)
2023-11-07 09:01:26,078 [DEBUG] on stmt: $phi770.1 = $768get_iter.5
2023-11-07 09:01:26,078 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,078 [DEBUG] ==== SSA block rewrite pass on 770
2023-11-07 09:01:26,078 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,078 [DEBUG] on stmt: hi.2 = phi(incoming_values=[Var(hi.3, umap_.py:234), Var(hi, umap_.py:197)], incoming_blocks=[1328, 740])
2023-11-07 09:01:26,078 [DEBUG] on stmt: lo.2 = phi(incoming_values=[Var(lo.3, umap_.py:231), Var(lo, umap_.py:196)], incoming_blocks=[1328, 740])
2023-11-07 09:01:26,078 [DEBUG] on stmt: $770for_iter.2 = iternext(value=$phi770.1)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $770for_iter.3 = pair_first(value=$770for_iter.2)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $770for_iter.4 = pair_second(value=$770for_iter.2)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $phi772.2 = $770for_iter.3
2023-11-07 09:01:26,079 [DEBUG] on stmt: branch $770for_iter.4, 772, 1112
2023-11-07 09:01:26,079 [DEBUG] ==== SSA block rewrite pass on 772
2023-11-07 09:01:26,079 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,079 [DEBUG] on stmt: n = $phi772.2
2023-11-07 09:01:26,079 [DEBUG] on stmt: psum = const(float, 0.0)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $778load_global.4 = global(range: <class 'range'>)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $const790.6 = const(int, 1)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $794load_attr.8 = getattr(value=distances, attr=shape)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $const804.9 = const(int, 1)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $806binary_subscr.10 = static_getitem(value=$794load_attr.8, index=1, index_var=$const804.9, fn=<built-in function getitem>)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $820call.11 = call $778load_global.4($const790.6, $806binary_subscr.10, func=$778load_global.4, args=[Var($const790.6, umap_.py:220), Var($806binary_subscr.10, umap_.py:220)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $830get_iter.12 = getiter(value=$820call.11)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $phi832.2 = $830get_iter.12
2023-11-07 09:01:26,079 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,079 [DEBUG] ==== SSA block rewrite pass on 832
2023-11-07 09:01:26,079 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,079 [DEBUG] on stmt: psum.3 = phi(incoming_values=[Var(psum.4, umap_.py:223), Var(psum, umap_.py:219)], incoming_blocks=[1329, 772])
2023-11-07 09:01:26,079 [DEBUG] on stmt: $832for_iter.3 = iternext(value=$phi832.2)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $832for_iter.4 = pair_first(value=$832for_iter.3)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $832for_iter.5 = pair_second(value=$832for_iter.3)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $phi834.3 = $832for_iter.4
2023-11-07 09:01:26,079 [DEBUG] on stmt: branch $832for_iter.5, 834, 954
2023-11-07 09:01:26,079 [DEBUG] ==== SSA block rewrite pass on 834
2023-11-07 09:01:26,079 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,079 [DEBUG] on stmt: j = $phi834.3
2023-11-07 09:01:26,079 [DEBUG] on stmt: $842build_tuple.7 = build_tuple(items=[Var(i, umap_.py:195), Var(j, umap_.py:220)])
2023-11-07 09:01:26,079 [DEBUG] on stmt: $844binary_subscr.8 = getitem(value=distances, index=$842build_tuple.7, fn=<built-in function getitem>)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $858binary_subscr.11 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,079 [DEBUG] on stmt: d = $844binary_subscr.8 - $858binary_subscr.11
2023-11-07 09:01:26,079 [DEBUG] on stmt: $const876.14 = const(int, 0)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $878compare_op.15 = d > $const876.14
2023-11-07 09:01:26,079 [DEBUG] on stmt: bool884 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $884pred = call bool884($878compare_op.15, func=bool884, args=(Var($878compare_op.15, umap_.py:222),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,079 [DEBUG] on stmt: branch $884pred, 886, 942
2023-11-07 09:01:26,079 [DEBUG] ==== SSA block rewrite pass on 886
2023-11-07 09:01:26,079 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,079 [DEBUG] on stmt: $888load_global.4 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $900load_attr.6 = getattr(value=$888load_global.4, attr=exp)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $binop_truediv914.9 = d / mid
2023-11-07 09:01:26,079 [DEBUG] find_def var='mid' stmt=$binop_truediv914.9 = d / mid
2023-11-07 09:01:26,079 [DEBUG] find_def_from_top label 886
2023-11-07 09:01:26,079 [DEBUG] idom 834 from label 886
2023-11-07 09:01:26,079 [DEBUG] find_def_from_bottom label 834
2023-11-07 09:01:26,079 [DEBUG] find_def_from_top label 834
2023-11-07 09:01:26,079 [DEBUG] idom 832 from label 834
2023-11-07 09:01:26,079 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,079 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,079 [DEBUG] idom 772 from label 832
2023-11-07 09:01:26,079 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,079 [DEBUG] find_def_from_top label 772
2023-11-07 09:01:26,079 [DEBUG] idom 770 from label 772
2023-11-07 09:01:26,079 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,079 [DEBUG] find_def_from_top label 770
2023-11-07 09:01:26,079 [DEBUG] insert phi node mid.4 = phi(incoming_values=[], incoming_blocks=[]) at 770
2023-11-07 09:01:26,079 [DEBUG] find_def_from_bottom label 1328
2023-11-07 09:01:26,079 [DEBUG] find_def_from_top label 1328
2023-11-07 09:01:26,079 [DEBUG] insert phi node mid.5 = phi(incoming_values=[], incoming_blocks=[]) at 1328
2023-11-07 09:01:26,079 [DEBUG] find_def_from_bottom label 1034
2023-11-07 09:01:26,079 [DEBUG] incoming_def mid.1 = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,079 [DEBUG] find_def_from_bottom label 1082
2023-11-07 09:01:26,079 [DEBUG] incoming_def mid.2 = $binop_imul1086.4
2023-11-07 09:01:26,079 [DEBUG] find_def_from_bottom label 1094
2023-11-07 09:01:26,079 [DEBUG] incoming_def mid.3 = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,079 [DEBUG] incoming_def mid.5 = phi(incoming_values=[Var(mid.1, umap_.py:232), Var(mid.2, umap_.py:236), Var(mid.3, umap_.py:238)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,079 [DEBUG] find_def_from_bottom label 740
2023-11-07 09:01:26,079 [DEBUG] find_def_from_top label 740
2023-11-07 09:01:26,079 [DEBUG] idom 318 from label 740
2023-11-07 09:01:26,079 [DEBUG] find_def_from_bottom label 318
2023-11-07 09:01:26,079 [DEBUG] incoming_def mid = const(float, 1.0)
2023-11-07 09:01:26,079 [DEBUG] replaced with: $binop_truediv914.9 = d / mid.4
2023-11-07 09:01:26,079 [DEBUG] on stmt: $918unary_negative.10 = unary(fn=<built-in function neg>, value=$binop_truediv914.9)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $924call.11 = call $900load_attr.6($918unary_negative.10, func=$900load_attr.6, args=[Var($918unary_negative.10, umap_.py:223)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $binop_iadd934.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$924call.11, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,079 [DEBUG] on stmt: psum.1 = $binop_iadd934.12
2023-11-07 09:01:26,079 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,079 [DEBUG] ==== SSA block rewrite pass on 942
2023-11-07 09:01:26,079 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,079 [DEBUG] on stmt: $const944.4 = const(float, 1.0)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $binop_iadd946.5 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=psum.3, rhs=$const944.4, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,079 [DEBUG] on stmt: psum.2 = $binop_iadd946.5
2023-11-07 09:01:26,079 [DEBUG] on stmt: jump 1329
2023-11-07 09:01:26,079 [DEBUG] ==== SSA block rewrite pass on 954
2023-11-07 09:01:26,079 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,079 [DEBUG] on stmt: $954load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $966load_attr.4 = getattr(value=$954load_global.2, attr=fabs)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $binop_sub980.7 = psum.3 - target
2023-11-07 09:01:26,079 [DEBUG] on stmt: $988call.8 = call $966load_attr.4($binop_sub980.7, func=$966load_attr.4, args=[Var($binop_sub980.7, umap_.py:227)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $998load_global.9 = global(SMOOTH_K_TOLERANCE: 1e-05)
2023-11-07 09:01:26,079 [DEBUG] on stmt: $1010compare_op.10 = $988call.8 < $998load_global.9
2023-11-07 09:01:26,080 [DEBUG] on stmt: bool1016 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,080 [DEBUG] on stmt: $1016pred = call bool1016($1010compare_op.10, func=bool1016, args=(Var($1010compare_op.10, umap_.py:227),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,080 [DEBUG] on stmt: branch $1016pred, 1018, 1022
2023-11-07 09:01:26,080 [DEBUG] ==== SSA block rewrite pass on 1018
2023-11-07 09:01:26,080 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,080 [DEBUG] on stmt: jump 1112
2023-11-07 09:01:26,080 [DEBUG] ==== SSA block rewrite pass on 1022
2023-11-07 09:01:26,080 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,080 [DEBUG] on stmt: $1026compare_op.4 = psum.3 > target
2023-11-07 09:01:26,080 [DEBUG] on stmt: bool1032 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,080 [DEBUG] on stmt: $1032pred = call bool1032($1026compare_op.4, func=bool1032, args=(Var($1026compare_op.4, umap_.py:230),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,080 [DEBUG] on stmt: branch $1032pred, 1034, 1056
2023-11-07 09:01:26,080 [DEBUG] ==== SSA block rewrite pass on 1034
2023-11-07 09:01:26,080 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,080 [DEBUG] on stmt: hi.1 = mid
2023-11-07 09:01:26,080 [DEBUG] find_def var='mid' stmt=hi.1 = mid
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 1034
2023-11-07 09:01:26,080 [DEBUG] idom 1022 from label 1034
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 1022
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 1022
2023-11-07 09:01:26,080 [DEBUG] idom 954 from label 1022
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 954
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,080 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,080 [DEBUG] idom 772 from label 832
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 772
2023-11-07 09:01:26,080 [DEBUG] idom 770 from label 772
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,080 [DEBUG] replaced with: hi.1 = mid.4
2023-11-07 09:01:26,080 [DEBUG] on stmt: $binop_add1042.5 = lo.2 + hi.1
2023-11-07 09:01:26,080 [DEBUG] on stmt: $const1046.6 = const(float, 2.0)
2023-11-07 09:01:26,080 [DEBUG] on stmt: mid.1 = $binop_add1042.5 / $const1046.6
2023-11-07 09:01:26,080 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,080 [DEBUG] ==== SSA block rewrite pass on 1056
2023-11-07 09:01:26,080 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,080 [DEBUG] on stmt: lo.1 = mid
2023-11-07 09:01:26,080 [DEBUG] find_def var='mid' stmt=lo.1 = mid
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 1056
2023-11-07 09:01:26,080 [DEBUG] idom 1022 from label 1056
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 1022
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 1022
2023-11-07 09:01:26,080 [DEBUG] idom 954 from label 1022
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 954
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,080 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,080 [DEBUG] idom 772 from label 832
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 772
2023-11-07 09:01:26,080 [DEBUG] idom 770 from label 772
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,080 [DEBUG] replaced with: lo.1 = mid.4
2023-11-07 09:01:26,080 [DEBUG] on stmt: $1062load_global.4 = global(NPY_INFINITY: inf)
2023-11-07 09:01:26,080 [DEBUG] on stmt: $1074compare_op.5 = hi.2 == $1062load_global.4
2023-11-07 09:01:26,080 [DEBUG] on stmt: bool1080 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,080 [DEBUG] on stmt: $1080pred = call bool1080($1074compare_op.5, func=bool1080, args=(Var($1074compare_op.5, umap_.py:235),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,080 [DEBUG] on stmt: branch $1080pred, 1082, 1094
2023-11-07 09:01:26,080 [DEBUG] ==== SSA block rewrite pass on 1082
2023-11-07 09:01:26,080 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,080 [DEBUG] on stmt: $const1084.3 = const(int, 2)
2023-11-07 09:01:26,080 [DEBUG] on stmt: $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,080 [DEBUG] find_def var='mid' stmt=$binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 1082
2023-11-07 09:01:26,080 [DEBUG] idom 1056 from label 1082
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 1056
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 1056
2023-11-07 09:01:26,080 [DEBUG] idom 1022 from label 1056
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 1022
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 1022
2023-11-07 09:01:26,080 [DEBUG] idom 954 from label 1022
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 954
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 954
2023-11-07 09:01:26,080 [DEBUG] idom 832 from label 954
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 832
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 832
2023-11-07 09:01:26,080 [DEBUG] idom 772 from label 832
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 772
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 772
2023-11-07 09:01:26,080 [DEBUG] idom 770 from label 772
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,080 [DEBUG] replaced with: $binop_imul1086.4 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=mid.4, rhs=$const1084.3, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,080 [DEBUG] on stmt: mid.2 = $binop_imul1086.4
2023-11-07 09:01:26,080 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,080 [DEBUG] ==== SSA block rewrite pass on 1094
2023-11-07 09:01:26,080 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,080 [DEBUG] on stmt: $binop_add1098.4 = lo.1 + hi.2
2023-11-07 09:01:26,080 [DEBUG] on stmt: $const1102.5 = const(float, 2.0)
2023-11-07 09:01:26,080 [DEBUG] on stmt: mid.3 = $binop_add1098.4 / $const1102.5
2023-11-07 09:01:26,080 [DEBUG] on stmt: jump 1328
2023-11-07 09:01:26,080 [DEBUG] ==== SSA block rewrite pass on 1112
2023-11-07 09:01:26,080 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,080 [DEBUG] on stmt: result[i] = mid
2023-11-07 09:01:26,080 [DEBUG] find_def var='mid' stmt=result[i] = mid
2023-11-07 09:01:26,080 [DEBUG] find_def_from_top label 1112
2023-11-07 09:01:26,080 [DEBUG] idom 770 from label 1112
2023-11-07 09:01:26,080 [DEBUG] find_def_from_bottom label 770
2023-11-07 09:01:26,081 [DEBUG] replaced with: result[i] = mid.4
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1126binary_subscr.6 = getitem(value=rho, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $const1136.7 = const(float, 0.0)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1138compare_op.8 = $1126binary_subscr.6 > $const1136.7
2023-11-07 09:01:26,081 [DEBUG] on stmt: bool1144 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1144pred = call bool1144($1138compare_op.8, func=bool1144, args=(Var($1138compare_op.8, umap_.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,081 [DEBUG] on stmt: branch $1144pred, 1146, 1256
2023-11-07 09:01:26,081 [DEBUG] ==== SSA block rewrite pass on 1146
2023-11-07 09:01:26,081 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1146load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1158load_attr.3 = getattr(value=$1146load_global.1, attr=mean)
2023-11-07 09:01:26,081 [DEBUG] on stmt: mean_ith_distances = call $1158load_attr.3(ith_distances, func=$1158load_attr.3, args=[Var(ith_distances, umap_.py:201)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1190binary_subscr.8 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1200load_global.9 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $binop_mul1214.11 = $1200load_global.9 * mean_ith_distances
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1218compare_op.12 = $1190binary_subscr.8 < $binop_mul1214.11
2023-11-07 09:01:26,081 [DEBUG] on stmt: bool1224 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1224pred = call bool1224($1218compare_op.12, func=bool1224, args=(Var($1218compare_op.12, umap_.py:245),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,081 [DEBUG] on stmt: branch $1224pred, 1226, 1252
2023-11-07 09:01:26,081 [DEBUG] ==== SSA block rewrite pass on 1226
2023-11-07 09:01:26,081 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1226load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $binop_mul1240.3 = $1226load_global.1 * mean_ith_distances
2023-11-07 09:01:26,081 [DEBUG] on stmt: result[i] = $binop_mul1240.3
2023-11-07 09:01:26,081 [DEBUG] on stmt: jump 1252
2023-11-07 09:01:26,081 [DEBUG] ==== SSA block rewrite pass on 1252
2023-11-07 09:01:26,081 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,081 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,081 [DEBUG] ==== SSA block rewrite pass on 1256
2023-11-07 09:01:26,081 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1260binary_subscr.3 = getitem(value=result, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1270load_global.4 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $binop_mul1284.6 = $1270load_global.4 * mean_distances
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1288compare_op.7 = $1260binary_subscr.3 < $binop_mul1284.6
2023-11-07 09:01:26,081 [DEBUG] on stmt: bool1294 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1294pred = call bool1294($1288compare_op.7, func=bool1294, args=(Var($1288compare_op.7, umap_.py:248),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,081 [DEBUG] on stmt: branch $1294pred, 1296, 1322
2023-11-07 09:01:26,081 [DEBUG] ==== SSA block rewrite pass on 1296
2023-11-07 09:01:26,081 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1296load_global.1 = global(MIN_K_DIST_SCALE: 0.001)
2023-11-07 09:01:26,081 [DEBUG] on stmt: $binop_mul1310.3 = $1296load_global.1 * mean_distances
2023-11-07 09:01:26,081 [DEBUG] on stmt: result[i] = $binop_mul1310.3
2023-11-07 09:01:26,081 [DEBUG] on stmt: jump 1322
2023-11-07 09:01:26,081 [DEBUG] ==== SSA block rewrite pass on 1322
2023-11-07 09:01:26,081 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,081 [DEBUG] on stmt: jump 1327
2023-11-07 09:01:26,081 [DEBUG] ==== SSA block rewrite pass on 1326
2023-11-07 09:01:26,081 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1330build_tuple.2 = build_tuple(items=[Var(result, umap_.py:191), Var(rho, umap_.py:190)])
2023-11-07 09:01:26,081 [DEBUG] on stmt: $1332return_value.3 = cast(value=$1330build_tuple.2)
2023-11-07 09:01:26,081 [DEBUG] on stmt: return $1332return_value.3
2023-11-07 09:01:26,081 [DEBUG] ==== SSA block rewrite pass on 1327
2023-11-07 09:01:26,081 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,081 [DEBUG] on stmt: jump 314
2023-11-07 09:01:26,081 [DEBUG] ==== SSA block rewrite pass on 1328
2023-11-07 09:01:26,081 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,081 [DEBUG] on stmt: hi.3 = phi(incoming_values=[Var(hi.1, umap_.py:231), Var(hi.2, umap_.py:234), Var(hi.2, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,081 [DEBUG] on stmt: lo.3 = phi(incoming_values=[Var(lo.2, umap_.py:231), Var(lo.1, umap_.py:234), Var(lo.1, umap_.py:234)], incoming_blocks=[1034, 1082, 1094])
2023-11-07 09:01:26,081 [DEBUG] on stmt: jump 770
2023-11-07 09:01:26,081 [DEBUG] ==== SSA block rewrite pass on 1329
2023-11-07 09:01:26,081 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x16a1b6a50>
2023-11-07 09:01:26,081 [DEBUG] on stmt: psum.4 = phi(incoming_values=[Var(psum.2, umap_.py:225), Var(psum.1, umap_.py:223)], incoming_blocks=[942, 886])
2023-11-07 09:01:26,081 [DEBUG] on stmt: jump 832
2023-11-07 09:01:26,086 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4319)
           2	RESUME(arg=0, lineno=4319)
           4	LOAD_GLOBAL(arg=1, lineno=4320)
          16	LOAD_ATTR(arg=1, lineno=4320)
          26	LOAD_FAST(arg=0, lineno=4320)
          28	LOAD_FAST(arg=1, lineno=4320)
          30	KW_NAMES(arg=1, lineno=4320)
          32	PRECALL(arg=2, lineno=4320)
          36	CALL(arg=2, lineno=4320)
          46	STORE_FAST(arg=2, lineno=4320)
          48	LOAD_FAST(arg=2, lineno=4321)
          50	LOAD_METHOD(arg=2, lineno=4321)
          72	PRECALL(arg=0, lineno=4321)
          76	CALL(arg=0, lineno=4321)
          86	POP_TOP(arg=None, lineno=4321)
          88	LOAD_FAST(arg=2, lineno=4322)
          90	RETURN_VALUE(arg=None, lineno=4322)
2023-11-07 09:01:26,086 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,086 [DEBUG] stack: []
2023-11-07 09:01:26,086 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,086 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4319)
2023-11-07 09:01:26,086 [DEBUG] stack []
2023-11-07 09:01:26,086 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=4319)
2023-11-07 09:01:26,086 [DEBUG] stack []
2023-11-07 09:01:26,086 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4320)
2023-11-07 09:01:26,086 [DEBUG] stack []
2023-11-07 09:01:26,086 [DEBUG] dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=4320)
2023-11-07 09:01:26,086 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,086 [DEBUG] dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4320)
2023-11-07 09:01:26,086 [DEBUG] stack ['$null$4.1', '$16load_attr.2']
2023-11-07 09:01:26,086 [DEBUG] dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4320)
2023-11-07 09:01:26,086 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3']
2023-11-07 09:01:26,086 [DEBUG] dispatch pc=30, inst=KW_NAMES(arg=1, lineno=4320)
2023-11-07 09:01:26,086 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2023-11-07 09:01:26,086 [DEBUG] dispatch pc=32, inst=PRECALL(arg=2, lineno=4320)
2023-11-07 09:01:26,086 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2023-11-07 09:01:26,087 [DEBUG] dispatch pc=36, inst=CALL(arg=2, lineno=4320)
2023-11-07 09:01:26,087 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2023-11-07 09:01:26,087 [DEBUG] dispatch pc=46, inst=STORE_FAST(arg=2, lineno=4320)
2023-11-07 09:01:26,087 [DEBUG] stack ['$36call.5']
2023-11-07 09:01:26,087 [DEBUG] dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=4321)
2023-11-07 09:01:26,087 [DEBUG] stack []
2023-11-07 09:01:26,087 [DEBUG] dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=4321)
2023-11-07 09:01:26,087 [DEBUG] stack ['$arr48.6']
2023-11-07 09:01:26,087 [DEBUG] dispatch pc=72, inst=PRECALL(arg=0, lineno=4321)
2023-11-07 09:01:26,087 [DEBUG] stack ['$null$50.7', '$50load_method.8']
2023-11-07 09:01:26,087 [DEBUG] dispatch pc=76, inst=CALL(arg=0, lineno=4321)
2023-11-07 09:01:26,087 [DEBUG] stack ['$null$50.7', '$50load_method.8']
2023-11-07 09:01:26,087 [DEBUG] dispatch pc=86, inst=POP_TOP(arg=None, lineno=4321)
2023-11-07 09:01:26,087 [DEBUG] stack ['$76call.9']
2023-11-07 09:01:26,087 [DEBUG] dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=4322)
2023-11-07 09:01:26,087 [DEBUG] stack []
2023-11-07 09:01:26,087 [DEBUG] dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=4322)
2023-11-07 09:01:26,087 [DEBUG] stack ['$arr88.10']
2023-11-07 09:01:26,087 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,087 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,087 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,087 [DEBUG] defmap: {}
2023-11-07 09:01:26,087 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,087 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,087 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,087 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,087 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,087 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$shape26.3'}), (28, {'res': '$dtype28.4'}), (32, {}), (34, {}), (36, {'func': '$16load_attr.2', 'args': ['$shape26.3', '$dtype28.4'], 'kw_names': 1, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'value': '$36call.5'}), (48, {'res': '$arr48.6'}), (50, {'item': '$arr48.6', 'res': '$50load_method.8'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {'func': '$50load_method.8', 'args': [], 'kw_names': None, 'res': '$76call.9'}), (78, {}), (80, {}), (82, {}), (84, {}), (88, {'res': '$arr88.10'}), (90, {'retval': '$arr88.10', 'castval': '$90return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,087 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4319)], kws=[('dtype', Var(dtype, arrayobj.py:4319))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', 'arr', 'dtype', 'shape']
    $50load_method.8 = getattr(value=arr, attr=_zero_fill) ['$50load_method.8', 'arr']
    $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_method.8', '$76call.9']
    $90return_value.11 = cast(value=arr)     ['$90return_value.11', 'arr']
    return $90return_value.11                ['$90return_value.11']

2023-11-07 09:01:26,089 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,089 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282524090>
2023-11-07 09:01:26,089 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-11-07 09:01:26,089 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-11-07 09:01:26,089 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,089 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2023-11-07 09:01:26,089 [DEBUG] on stmt: arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4319)], kws=[('dtype', Var(dtype, arrayobj.py:4319))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,089 [DEBUG] on stmt: $50load_method.8 = getattr(value=arr, attr=_zero_fill)
2023-11-07 09:01:26,089 [DEBUG] on stmt: $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,089 [DEBUG] on stmt: $90return_value.11 = cast(value=arr)
2023-11-07 09:01:26,089 [DEBUG] on stmt: return $90return_value.11
2023-11-07 09:01:26,089 [DEBUG] defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [<numba.core.ir.Assign object at 0x282603990>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x2826029d0>],
             '$50load_method.8': [<numba.core.ir.Assign object at 0x282602ed0>],
             '$76call.9': [<numba.core.ir.Assign object at 0x282602a50>],
             '$90return_value.11': [<numba.core.ir.Assign object at 0x282524190>],
             'arr': [<numba.core.ir.Assign object at 0x282600b90>],
             'dtype': [<numba.core.ir.Assign object at 0x2826006d0>],
             'shape': [<numba.core.ir.Assign object at 0x282600d10>]})
2023-11-07 09:01:26,089 [DEBUG] SSA violators set()
2023-11-07 09:01:26,090 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4251)
           2	COPY_FREE_VARS(arg=1, lineno=4251)
           4	RESUME(arg=0, lineno=4251)
           6	LOAD_GLOBAL(arg=1, lineno=4252)
          18	LOAD_FAST(arg=0, lineno=4252)
          20	LOAD_FAST(arg=1, lineno=4252)
          22	LOAD_DEREF(arg=2, lineno=4252)
          24	PRECALL(arg=3, lineno=4252)
          28	CALL(arg=3, lineno=4252)
          38	RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:26,090 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,090 [DEBUG] stack: []
2023-11-07 09:01:26,090 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,090 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4251)
2023-11-07 09:01:26,090 [DEBUG] stack []
2023-11-07 09:01:26,090 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4251)
2023-11-07 09:01:26,090 [DEBUG] stack []
2023-11-07 09:01:26,090 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=4251)
2023-11-07 09:01:26,090 [DEBUG] stack []
2023-11-07 09:01:26,090 [DEBUG] dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4252)
2023-11-07 09:01:26,091 [DEBUG] stack []
2023-11-07 09:01:26,091 [DEBUG] dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4252)
2023-11-07 09:01:26,091 [DEBUG] stack ['$null$6.1', '$6load_global.0']
2023-11-07 09:01:26,091 [DEBUG] dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4252)
2023-11-07 09:01:26,091 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2023-11-07 09:01:26,091 [DEBUG] dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4252)
2023-11-07 09:01:26,091 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2023-11-07 09:01:26,091 [DEBUG] dispatch pc=24, inst=PRECALL(arg=3, lineno=4252)
2023-11-07 09:01:26,091 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:26,091 [DEBUG] dispatch pc=28, inst=CALL(arg=3, lineno=4252)
2023-11-07 09:01:26,091 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:26,091 [DEBUG] dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:26,091 [DEBUG] stack ['$28call.5']
2023-11-07 09:01:26,091 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,091 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,091 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,091 [DEBUG] defmap: {}
2023-11-07 09:01:26,091 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,091 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,091 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,091 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,091 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,091 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,091 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(float32, 1d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2023-11-07 09:01:26,095 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,095 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2826d9e90>
2023-11-07 09:01:26,095 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-11-07 09:01:26,095 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-11-07 09:01:26,095 [DEBUG] on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-11-07 09:01:26,095 [DEBUG] on stmt: $22load_deref.4 = freevar(retty: array(float32, 1d, C))
2023-11-07 09:01:26,095 [DEBUG] on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,095 [DEBUG] on stmt: $38return_value.6 = cast(value=$28call.5)
2023-11-07 09:01:26,095 [DEBUG] on stmt: return $38return_value.6
2023-11-07 09:01:26,095 [DEBUG] defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x2826d9a50>],
             '$28call.5': [<numba.core.ir.Assign object at 0x2826dbd50>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x2826db590>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x2826da0d0>],
             'dtype': [<numba.core.ir.Assign object at 0x2826db050>],
             'shape': [<numba.core.ir.Assign object at 0x2826dbe90>]})
2023-11-07 09:01:26,095 [DEBUG] SSA violators set()
2023-11-07 09:01:26,113 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4310)
           2	RESUME(arg=0, lineno=4310)
           4	LOAD_GLOBAL(arg=1, lineno=4311)
          16	LOAD_FAST(arg=0, lineno=4311)
          18	PRECALL(arg=1, lineno=4311)
          22	CALL(arg=1, lineno=4311)
          32	POP_TOP(arg=None, lineno=4311)
          34	LOAD_CONST(arg=0, lineno=4311)
          36	RETURN_VALUE(arg=None, lineno=4311)
2023-11-07 09:01:26,113 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,113 [DEBUG] stack: []
2023-11-07 09:01:26,113 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,113 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4310)
2023-11-07 09:01:26,113 [DEBUG] stack []
2023-11-07 09:01:26,113 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=4310)
2023-11-07 09:01:26,113 [DEBUG] stack []
2023-11-07 09:01:26,113 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4311)
2023-11-07 09:01:26,113 [DEBUG] stack []
2023-11-07 09:01:26,113 [DEBUG] dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4311)
2023-11-07 09:01:26,113 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,113 [DEBUG] dispatch pc=18, inst=PRECALL(arg=1, lineno=4311)
2023-11-07 09:01:26,113 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$self16.2']
2023-11-07 09:01:26,113 [DEBUG] dispatch pc=22, inst=CALL(arg=1, lineno=4311)
2023-11-07 09:01:26,113 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$self16.2']
2023-11-07 09:01:26,113 [DEBUG] dispatch pc=32, inst=POP_TOP(arg=None, lineno=4311)
2023-11-07 09:01:26,113 [DEBUG] stack ['$22call.3']
2023-11-07 09:01:26,113 [DEBUG] dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=4311)
2023-11-07 09:01:26,113 [DEBUG] stack []
2023-11-07 09:01:26,113 [DEBUG] dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=4311)
2023-11-07 09:01:26,113 [DEBUG] stack ['$const34.4']
2023-11-07 09:01:26,113 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,113 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,113 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,113 [DEBUG] defmap: {}
2023-11-07 09:01:26,113 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,113 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,113 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,113 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,113 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,113 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$self16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$self16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (34, {'res': '$const34.4'}), (36, {'retval': '$const34.4', 'castval': '$36return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,113 [DEBUG] label 0:
    self = arg(0, name=self)                 ['self']
    $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4310)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'self']
    $const34.4 = const(NoneType, None)       ['$const34.4']
    $36return_value.5 = cast(value=$const34.4) ['$36return_value.5', '$const34.4']
    return $36return_value.5                 ['$36return_value.5']

2023-11-07 09:01:26,116 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,116 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282732950>
2023-11-07 09:01:26,116 [DEBUG] on stmt: self = arg(0, name=self)
2023-11-07 09:01:26,116 [DEBUG] on stmt: $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
2023-11-07 09:01:26,116 [DEBUG] on stmt: $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4310)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,116 [DEBUG] on stmt: $const34.4 = const(NoneType, None)
2023-11-07 09:01:26,116 [DEBUG] on stmt: $36return_value.5 = cast(value=$const34.4)
2023-11-07 09:01:26,116 [DEBUG] on stmt: return $36return_value.5
2023-11-07 09:01:26,116 [DEBUG] defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x2825dac10>],
             '$36return_value.5': [<numba.core.ir.Assign object at 0x2825d8250>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x282541350>],
             '$const34.4': [<numba.core.ir.Assign object at 0x2825d9090>],
             'self': [<numba.core.ir.Assign object at 0x2825408d0>]})
2023-11-07 09:01:26,116 [DEBUG] SSA violators set()
2023-11-07 09:01:26,141 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=438)
           2	COPY_FREE_VARS(arg=1, lineno=438)
           4	RESUME(arg=0, lineno=438)
           6	LOAD_DEREF(arg=3, lineno=441)
           8	STORE_FAST(arg=1, lineno=441)
          10	LOAD_GLOBAL(arg=1, lineno=442)
          22	LOAD_ATTR(arg=1, lineno=442)
          32	LOAD_FAST(arg=0, lineno=442)
          34	PRECALL(arg=1, lineno=442)
          38	CALL(arg=1, lineno=442)
          48	GET_ITER(arg=None, lineno=442)
>         50	FOR_ITER(arg=25, lineno=442)
          52	STORE_FAST(arg=2, lineno=442)
          54	LOAD_FAST(arg=1, lineno=443)
          56	LOAD_FAST(arg=2, lineno=443)
          58	LOAD_METHOD(arg=2, lineno=443)
          80	PRECALL(arg=0, lineno=443)
          84	CALL(arg=0, lineno=443)
          94	BINARY_OP(arg=13, lineno=443)
          98	STORE_FAST(arg=1, lineno=443)
         100	JUMP_BACKWARD(arg=26, lineno=443)
>        102	LOAD_FAST(arg=1, lineno=444)
         104	LOAD_FAST(arg=0, lineno=444)
         106	LOAD_ATTR(arg=3, lineno=444)
         116	BINARY_OP(arg=11, lineno=444)
         120	RETURN_VALUE(arg=None, lineno=444)
2023-11-07 09:01:26,141 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,141 [DEBUG] stack: []
2023-11-07 09:01:26,141 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=438)
2023-11-07 09:01:26,141 [DEBUG] stack []
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=438)
2023-11-07 09:01:26,141 [DEBUG] stack []
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=438)
2023-11-07 09:01:26,141 [DEBUG] stack []
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=6, inst=LOAD_DEREF(arg=3, lineno=441)
2023-11-07 09:01:26,141 [DEBUG] stack []
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=8, inst=STORE_FAST(arg=1, lineno=441)
2023-11-07 09:01:26,141 [DEBUG] stack ['$6load_deref.0']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=442)
2023-11-07 09:01:26,141 [DEBUG] stack []
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=22, inst=LOAD_ATTR(arg=1, lineno=442)
2023-11-07 09:01:26,141 [DEBUG] stack ['$null$10.2', '$10load_global.1']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=442)
2023-11-07 09:01:26,141 [DEBUG] stack ['$null$10.2', '$22load_attr.3']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=34, inst=PRECALL(arg=1, lineno=442)
2023-11-07 09:01:26,141 [DEBUG] stack ['$null$10.2', '$22load_attr.3', '$a32.4']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=38, inst=CALL(arg=1, lineno=442)
2023-11-07 09:01:26,141 [DEBUG] stack ['$null$10.2', '$22load_attr.3', '$a32.4']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=48, inst=GET_ITER(arg=None, lineno=442)
2023-11-07 09:01:26,141 [DEBUG] stack ['$38call.5']
2023-11-07 09:01:26,141 [DEBUG] end state. edges=[Edge(pc=50, stack=('$48get_iter.6',), blockstack=(), npush=0)]
2023-11-07 09:01:26,141 [DEBUG] pending: deque([State(pc_initial=50 nstack_initial=1)])
2023-11-07 09:01:26,141 [DEBUG] stack: ['$phi50.0']
2023-11-07 09:01:26,141 [DEBUG] state.pc_initial: State(pc_initial=50 nstack_initial=1)
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=50, inst=FOR_ITER(arg=25, lineno=442)
2023-11-07 09:01:26,141 [DEBUG] stack ['$phi50.0']
2023-11-07 09:01:26,141 [DEBUG] end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=('$phi50.0', '$50for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,141 [DEBUG] pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=52 nstack_initial=2)])
2023-11-07 09:01:26,141 [DEBUG] stack: []
2023-11-07 09:01:26,141 [DEBUG] state.pc_initial: State(pc_initial=102 nstack_initial=0)
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=444)
2023-11-07 09:01:26,141 [DEBUG] stack []
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=444)
2023-11-07 09:01:26,141 [DEBUG] stack ['$c102.0']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=106, inst=LOAD_ATTR(arg=3, lineno=444)
2023-11-07 09:01:26,141 [DEBUG] stack ['$c102.0', '$a104.1']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=116, inst=BINARY_OP(arg=11, lineno=444)
2023-11-07 09:01:26,141 [DEBUG] stack ['$c102.0', '$106load_attr.2']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=444)
2023-11-07 09:01:26,141 [DEBUG] stack ['$binop_truediv116.3']
2023-11-07 09:01:26,141 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,141 [DEBUG] pending: deque([State(pc_initial=52 nstack_initial=2)])
2023-11-07 09:01:26,141 [DEBUG] stack: ['$phi52.0', '$phi52.1']
2023-11-07 09:01:26,141 [DEBUG] state.pc_initial: State(pc_initial=52 nstack_initial=2)
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=52, inst=STORE_FAST(arg=2, lineno=442)
2023-11-07 09:01:26,141 [DEBUG] stack ['$phi52.0', '$phi52.1']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=443)
2023-11-07 09:01:26,141 [DEBUG] stack ['$phi52.0']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=443)
2023-11-07 09:01:26,141 [DEBUG] stack ['$phi52.0', '$c54.2']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=58, inst=LOAD_METHOD(arg=2, lineno=443)
2023-11-07 09:01:26,141 [DEBUG] stack ['$phi52.0', '$c54.2', '$v56.3']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=80, inst=PRECALL(arg=0, lineno=443)
2023-11-07 09:01:26,141 [DEBUG] stack ['$phi52.0', '$c54.2', '$null$58.4', '$58load_method.5']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=84, inst=CALL(arg=0, lineno=443)
2023-11-07 09:01:26,141 [DEBUG] stack ['$phi52.0', '$c54.2', '$null$58.4', '$58load_method.5']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=94, inst=BINARY_OP(arg=13, lineno=443)
2023-11-07 09:01:26,141 [DEBUG] stack ['$phi52.0', '$c54.2', '$84call.6']
2023-11-07 09:01:26,141 [DEBUG] dispatch pc=98, inst=STORE_FAST(arg=1, lineno=443)
2023-11-07 09:01:26,141 [DEBUG] stack ['$phi52.0', '$binop_iadd94.7']
2023-11-07 09:01:26,142 [DEBUG] dispatch pc=100, inst=JUMP_BACKWARD(arg=26, lineno=443)
2023-11-07 09:01:26,142 [DEBUG] stack ['$phi52.0']
2023-11-07 09:01:26,142 [DEBUG] end state. edges=[Edge(pc=50, stack=('$phi52.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,142 [DEBUG] pending: deque([State(pc_initial=50 nstack_initial=1)])
2023-11-07 09:01:26,142 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,142 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=1): {'$phi50.0'},
             State(pc_initial=52 nstack_initial=2): {'$phi52.1'},
             State(pc_initial=102 nstack_initial=0): set()})
2023-11-07 09:01:26,142 [DEBUG] defmap: {'$phi50.0': State(pc_initial=0 nstack_initial=0),
 '$phi52.1': State(pc_initial=50 nstack_initial=1)}
2023-11-07 09:01:26,142 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi50.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi52.0': {('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))}})
2023-11-07 09:01:26,142 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi50.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi52.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))}})
2023-11-07 09:01:26,142 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi50.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))}})
2023-11-07 09:01:26,142 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi50.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))}})
2023-11-07 09:01:26,142 [DEBUG] keep phismap: {'$phi50.0': {('$48get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi52.1': {('$50for_iter.2', State(pc_initial=50 nstack_initial=1))}}
2023-11-07 09:01:26,142 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi50.0': '$48get_iter.6'},
             State(pc_initial=50 nstack_initial=1): {'$phi52.1': '$50for_iter.2'}})
2023-11-07 09:01:26,142 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,142 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$6load_deref.0'}), (8, {'value': '$6load_deref.0'}), (10, {'idx': 0, 'res': '$10load_global.1'}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {'item': '$10load_global.1', 'res': '$22load_attr.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$a32.4'}), (34, {}), (36, {}), (38, {'func': '$22load_attr.3', 'args': ['$a32.4'], 'kw_names': None, 'res': '$38call.5'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'value': '$38call.5', 'res': '$48get_iter.6'})), outgoing_phis={'$phi50.0': '$48get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$48get_iter.6',)})
2023-11-07 09:01:26,142 [DEBUG] block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'iterator': '$phi50.0', 'pair': '$50for_iter.1', 'indval': '$50for_iter.2', 'pred': '$50for_iter.3'}),), outgoing_phis={'$phi52.1': '$50for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 52: ('$phi50.0', '$50for_iter.2')})
2023-11-07 09:01:26,142 [DEBUG] block_infos State(pc_initial=52 nstack_initial=2):
AdaptBlockInfo(insts=((52, {'value': '$phi52.1'}), (54, {'res': '$c54.2'}), (56, {'res': '$v56.3'}), (58, {'item': '$v56.3', 'res': '$58load_method.5'}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {}), (80, {}), (82, {}), (84, {'func': '$58load_method.5', 'args': [], 'kw_names': None, 'res': '$84call.6'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'op': '+=', 'lhs': '$c54.2', 'rhs': '$84call.6', 'res': '$binop_iadd94.7'}), (96, {}), (98, {'value': '$binop_iadd94.7'}), (100, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi52.0',)})
2023-11-07 09:01:26,142 [DEBUG] block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$c102.0'}), (104, {'res': '$a104.1'}), (106, {'item': '$a104.1', 'res': '$106load_attr.2'}), (108, {}), (110, {}), (112, {}), (114, {}), (116, {'op': '/', 'lhs': '$c102.0', 'rhs': '$106load_attr.2', 'res': '$binop_truediv116.3'}), (118, {}), (120, {'retval': '$binop_truediv116.3', 'castval': '$120return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,143 [DEBUG] label 0:
    a = arg(0, name=a)                       ['a']
    c = freevar(acc_init: 0.0)               ['c']
    $10load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$10load_global.1']
    $22load_attr.3 = getattr(value=$10load_global.1, attr=nditer) ['$10load_global.1', '$22load_attr.3']
    $38call.5 = call $22load_attr.3(a, func=$22load_attr.3, args=[Var(a, arraymath.py:438)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_attr.3', '$38call.5', 'a']
    $48get_iter.6 = getiter(value=$38call.5) ['$38call.5', '$48get_iter.6']
    $phi50.0 = $48get_iter.6                 ['$48get_iter.6', '$phi50.0']
    jump 50                                  []
label 50:
    $50for_iter.1 = iternext(value=$phi50.0) ['$50for_iter.1', '$phi50.0']
    $50for_iter.2 = pair_first(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.2']
    $50for_iter.3 = pair_second(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.3']
    $phi52.1 = $50for_iter.2                 ['$50for_iter.2', '$phi52.1']
    branch $50for_iter.3, 52, 102            ['$50for_iter.3']
label 52:
    v = $phi52.1                             ['$phi52.1', 'v']
    $58load_method.5 = getattr(value=v, attr=item) ['$58load_method.5', 'v']
    $84call.6 = call $58load_method.5(func=$58load_method.5, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_method.5', '$84call.6']
    $binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined) ['$84call.6', '$binop_iadd94.7', 'c']
    c = $binop_iadd94.7                      ['$binop_iadd94.7', 'c']
    jump 50                                  []
label 102:
    $106load_attr.2 = getattr(value=a, attr=size) ['$106load_attr.2', 'a']
    $binop_truediv116.3 = c / $106load_attr.2 ['$106load_attr.2', '$binop_truediv116.3', 'c']
    $120return_value.4 = cast(value=$binop_truediv116.3) ['$120return_value.4', '$binop_truediv116.3']
    return $120return_value.4                ['$120return_value.4']

2023-11-07 09:01:26,146 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,146 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2827d1890>
2023-11-07 09:01:26,146 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,146 [DEBUG] on stmt: c = freevar(acc_init: 0.0)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $10load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $22load_attr.3 = getattr(value=$10load_global.1, attr=nditer)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $38call.5 = call $22load_attr.3(a, func=$22load_attr.3, args=[Var(a, arraymath.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $48get_iter.6 = getiter(value=$38call.5)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $phi50.0 = $48get_iter.6
2023-11-07 09:01:26,146 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,146 [DEBUG] ==== SSA block analysis pass on 50
2023-11-07 09:01:26,146 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2827d1890>
2023-11-07 09:01:26,146 [DEBUG] on stmt: $50for_iter.1 = iternext(value=$phi50.0)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $phi52.1 = $50for_iter.2
2023-11-07 09:01:26,146 [DEBUG] on stmt: branch $50for_iter.3, 52, 102
2023-11-07 09:01:26,146 [DEBUG] ==== SSA block analysis pass on 52
2023-11-07 09:01:26,146 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2827d1890>
2023-11-07 09:01:26,146 [DEBUG] on stmt: v = $phi52.1
2023-11-07 09:01:26,146 [DEBUG] on stmt: $58load_method.5 = getattr(value=v, attr=item)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $84call.6 = call $58load_method.5(func=$58load_method.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,146 [DEBUG] on stmt: c = $binop_iadd94.7
2023-11-07 09:01:26,146 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,146 [DEBUG] ==== SSA block analysis pass on 102
2023-11-07 09:01:26,146 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2827d1890>
2023-11-07 09:01:26,146 [DEBUG] on stmt: $106load_attr.2 = getattr(value=a, attr=size)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $binop_truediv116.3 = c / $106load_attr.2
2023-11-07 09:01:26,146 [DEBUG] on stmt: $120return_value.4 = cast(value=$binop_truediv116.3)
2023-11-07 09:01:26,146 [DEBUG] on stmt: return $120return_value.4
2023-11-07 09:01:26,146 [DEBUG] defs defaultdict(<class 'list'>,
            {'$106load_attr.2': [<numba.core.ir.Assign object at 0x2827d9cd0>],
             '$10load_global.1': [<numba.core.ir.Assign object at 0x2827d3810>],
             '$120return_value.4': [<numba.core.ir.Assign object at 0x2827da190>],
             '$22load_attr.3': [<numba.core.ir.Assign object at 0x2827d3a50>],
             '$38call.5': [<numba.core.ir.Assign object at 0x2827d3d90>],
             '$48get_iter.6': [<numba.core.ir.Assign object at 0x2827d3fd0>],
             '$50for_iter.1': [<numba.core.ir.Assign object at 0x2827d8390>],
             '$50for_iter.2': [<numba.core.ir.Assign object at 0x2827d8510>],
             '$50for_iter.3': [<numba.core.ir.Assign object at 0x2827d8690>],
             '$58load_method.5': [<numba.core.ir.Assign object at 0x2827d9090>],
             '$84call.6': [<numba.core.ir.Assign object at 0x2827d92d0>],
             '$binop_iadd94.7': [<numba.core.ir.Assign object at 0x2827d95d0>],
             '$binop_truediv116.3': [<numba.core.ir.Assign object at 0x2827d9f90>],
             '$phi50.0': [<numba.core.ir.Assign object at 0x2827d3650>],
             '$phi52.1': [<numba.core.ir.Assign object at 0x2827d8750>],
             'a': [<numba.core.ir.Assign object at 0x2827d34d0>],
             'c': [<numba.core.ir.Assign object at 0x2827d3510>,
                   <numba.core.ir.Assign object at 0x2827d9710>],
             'v': [<numba.core.ir.Assign object at 0x2827d8a10>]})
2023-11-07 09:01:26,146 [DEBUG] SSA violators {'c'}
2023-11-07 09:01:26,146 [DEBUG] Fix SSA violator on var c
2023-11-07 09:01:26,146 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,146 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827d3290>
2023-11-07 09:01:26,146 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,146 [DEBUG] on stmt: c = freevar(acc_init: 0.0)
2023-11-07 09:01:26,146 [DEBUG] first assign: c
2023-11-07 09:01:26,146 [DEBUG] replaced with: c = freevar(acc_init: 0.0)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $10load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $22load_attr.3 = getattr(value=$10load_global.1, attr=nditer)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $38call.5 = call $22load_attr.3(a, func=$22load_attr.3, args=[Var(a, arraymath.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,146 [DEBUG] on stmt: $48get_iter.6 = getiter(value=$38call.5)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $phi50.0 = $48get_iter.6
2023-11-07 09:01:26,147 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,147 [DEBUG] ==== SSA block rewrite pass on 50
2023-11-07 09:01:26,147 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827d3290>
2023-11-07 09:01:26,147 [DEBUG] on stmt: $50for_iter.1 = iternext(value=$phi50.0)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $phi52.1 = $50for_iter.2
2023-11-07 09:01:26,147 [DEBUG] on stmt: branch $50for_iter.3, 52, 102
2023-11-07 09:01:26,147 [DEBUG] ==== SSA block rewrite pass on 52
2023-11-07 09:01:26,147 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827d3290>
2023-11-07 09:01:26,147 [DEBUG] on stmt: v = $phi52.1
2023-11-07 09:01:26,147 [DEBUG] on stmt: $58load_method.5 = getattr(value=v, attr=item)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $84call.6 = call $58load_method.5(func=$58load_method.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,147 [DEBUG] on stmt: c = $binop_iadd94.7
2023-11-07 09:01:26,147 [DEBUG] replaced with: c.1 = $binop_iadd94.7
2023-11-07 09:01:26,147 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,147 [DEBUG] ==== SSA block rewrite pass on 102
2023-11-07 09:01:26,147 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827d3290>
2023-11-07 09:01:26,147 [DEBUG] on stmt: $106load_attr.2 = getattr(value=a, attr=size)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $binop_truediv116.3 = c / $106load_attr.2
2023-11-07 09:01:26,147 [DEBUG] on stmt: $120return_value.4 = cast(value=$binop_truediv116.3)
2023-11-07 09:01:26,147 [DEBUG] on stmt: return $120return_value.4
2023-11-07 09:01:26,147 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x2827d2410>],
             52: [<numba.core.ir.Assign object at 0x2827d0f50>]})
2023-11-07 09:01:26,147 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,147 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827d1350>
2023-11-07 09:01:26,147 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,147 [DEBUG] on stmt: c = freevar(acc_init: 0.0)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $10load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $22load_attr.3 = getattr(value=$10load_global.1, attr=nditer)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $38call.5 = call $22load_attr.3(a, func=$22load_attr.3, args=[Var(a, arraymath.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $48get_iter.6 = getiter(value=$38call.5)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $phi50.0 = $48get_iter.6
2023-11-07 09:01:26,147 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,147 [DEBUG] ==== SSA block rewrite pass on 50
2023-11-07 09:01:26,147 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827d1350>
2023-11-07 09:01:26,147 [DEBUG] on stmt: $50for_iter.1 = iternext(value=$phi50.0)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $phi52.1 = $50for_iter.2
2023-11-07 09:01:26,147 [DEBUG] on stmt: branch $50for_iter.3, 52, 102
2023-11-07 09:01:26,147 [DEBUG] ==== SSA block rewrite pass on 52
2023-11-07 09:01:26,147 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827d1350>
2023-11-07 09:01:26,147 [DEBUG] on stmt: v = $phi52.1
2023-11-07 09:01:26,147 [DEBUG] on stmt: $58load_method.5 = getattr(value=v, attr=item)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $84call.6 = call $58load_method.5(func=$58load_method.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,147 [DEBUG] find_def var='c' stmt=$binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,147 [DEBUG] find_def_from_top label 52
2023-11-07 09:01:26,147 [DEBUG] idom 50 from label 52
2023-11-07 09:01:26,147 [DEBUG] find_def_from_bottom label 50
2023-11-07 09:01:26,147 [DEBUG] find_def_from_top label 50
2023-11-07 09:01:26,147 [DEBUG] insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 50
2023-11-07 09:01:26,147 [DEBUG] find_def_from_bottom label 0
2023-11-07 09:01:26,147 [DEBUG] incoming_def c = freevar(acc_init: 0.0)
2023-11-07 09:01:26,147 [DEBUG] find_def_from_bottom label 52
2023-11-07 09:01:26,147 [DEBUG] incoming_def c.1 = $binop_iadd94.7
2023-11-07 09:01:26,147 [DEBUG] replaced with: $binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,147 [DEBUG] on stmt: c.1 = $binop_iadd94.7
2023-11-07 09:01:26,147 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,147 [DEBUG] ==== SSA block rewrite pass on 102
2023-11-07 09:01:26,147 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827d1350>
2023-11-07 09:01:26,147 [DEBUG] on stmt: $106load_attr.2 = getattr(value=a, attr=size)
2023-11-07 09:01:26,147 [DEBUG] on stmt: $binop_truediv116.3 = c / $106load_attr.2
2023-11-07 09:01:26,147 [DEBUG] find_def var='c' stmt=$binop_truediv116.3 = c / $106load_attr.2
2023-11-07 09:01:26,147 [DEBUG] find_def_from_top label 102
2023-11-07 09:01:26,147 [DEBUG] idom 50 from label 102
2023-11-07 09:01:26,147 [DEBUG] find_def_from_bottom label 50
2023-11-07 09:01:26,147 [DEBUG] replaced with: $binop_truediv116.3 = c.2 / $106load_attr.2
2023-11-07 09:01:26,147 [DEBUG] on stmt: $120return_value.4 = cast(value=$binop_truediv116.3)
2023-11-07 09:01:26,147 [DEBUG] on stmt: return $120return_value.4
2023-11-07 09:01:26,153 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=3405)
           2	RESUME(arg=0, lineno=3405)
           4	LOAD_GLOBAL(arg=1, lineno=3406)
          16	LOAD_FAST(arg=0, lineno=3406)
          18	PRECALL(arg=1, lineno=3406)
          22	CALL(arg=1, lineno=3406)
          32	STORE_FAST(arg=2, lineno=3406)
          34	LOAD_GLOBAL(arg=3, lineno=3407)
          46	LOAD_FAST(arg=2, lineno=3407)
          48	PRECALL(arg=1, lineno=3407)
          52	CALL(arg=1, lineno=3407)
          62	GET_ITER(arg=None, lineno=3407)
>         64	FOR_ITER(arg=54, lineno=3407)
          66	STORE_FAST(arg=3, lineno=3407)
          68	LOAD_FAST(arg=0, lineno=3408)
          70	LOAD_FAST(arg=3, lineno=3408)
          72	BINARY_SUBSCR(arg=None, lineno=3408)
          82	LOAD_FAST(arg=1, lineno=3408)
          84	LOAD_GLOBAL(arg=1, lineno=3408)
          96	LOAD_FAST(arg=1, lineno=3408)
          98	PRECALL(arg=1, lineno=3408)
         102	CALL(arg=1, lineno=3408)
         112	LOAD_FAST(arg=2, lineno=3408)
         114	BINARY_OP(arg=10, lineno=3408)
         118	LOAD_FAST(arg=3, lineno=3408)
         120	BINARY_OP(arg=0, lineno=3408)
         124	BINARY_SUBSCR(arg=None, lineno=3408)
         134	COMPARE_OP(arg=3, lineno=3408)
         140	POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=3408)
         142	LOAD_GLOBAL(arg=5, lineno=3409)
         154	LOAD_CONST(arg=1, lineno=3409)
         156	PRECALL(arg=1, lineno=3409)
         160	CALL(arg=1, lineno=3409)
         170	RAISE_VARARGS(arg=1, lineno=3409)
>        172	JUMP_BACKWARD(arg=55, lineno=3408)
>        174	LOAD_CONST(arg=0, lineno=3407)
         176	RETURN_VALUE(arg=None, lineno=3407)
2023-11-07 09:01:26,153 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,153 [DEBUG] stack: []
2023-11-07 09:01:26,153 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,153 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=3405)
2023-11-07 09:01:26,153 [DEBUG] stack []
2023-11-07 09:01:26,153 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=3405)
2023-11-07 09:01:26,153 [DEBUG] stack []
2023-11-07 09:01:26,153 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=3406)
2023-11-07 09:01:26,153 [DEBUG] stack []
2023-11-07 09:01:26,153 [DEBUG] dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=3406)
2023-11-07 09:01:26,153 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,153 [DEBUG] dispatch pc=18, inst=PRECALL(arg=1, lineno=3406)
2023-11-07 09:01:26,153 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$shape16.2']
2023-11-07 09:01:26,153 [DEBUG] dispatch pc=22, inst=CALL(arg=1, lineno=3406)
2023-11-07 09:01:26,153 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$shape16.2']
2023-11-07 09:01:26,153 [DEBUG] dispatch pc=32, inst=STORE_FAST(arg=2, lineno=3406)
2023-11-07 09:01:26,153 [DEBUG] stack ['$22call.3']
2023-11-07 09:01:26,153 [DEBUG] dispatch pc=34, inst=LOAD_GLOBAL(arg=3, lineno=3407)
2023-11-07 09:01:26,153 [DEBUG] stack []
2023-11-07 09:01:26,153 [DEBUG] dispatch pc=46, inst=LOAD_FAST(arg=2, lineno=3407)
2023-11-07 09:01:26,153 [DEBUG] stack ['$null$34.5', '$34load_global.4']
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=48, inst=PRECALL(arg=1, lineno=3407)
2023-11-07 09:01:26,154 [DEBUG] stack ['$null$34.5', '$34load_global.4', '$n46.6']
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=52, inst=CALL(arg=1, lineno=3407)
2023-11-07 09:01:26,154 [DEBUG] stack ['$null$34.5', '$34load_global.4', '$n46.6']
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=62, inst=GET_ITER(arg=None, lineno=3407)
2023-11-07 09:01:26,154 [DEBUG] stack ['$52call.7']
2023-11-07 09:01:26,154 [DEBUG] end state. edges=[Edge(pc=64, stack=('$62get_iter.8',), blockstack=(), npush=0)]
2023-11-07 09:01:26,154 [DEBUG] pending: deque([State(pc_initial=64 nstack_initial=1)])
2023-11-07 09:01:26,154 [DEBUG] stack: ['$phi64.0']
2023-11-07 09:01:26,154 [DEBUG] state.pc_initial: State(pc_initial=64 nstack_initial=1)
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=64, inst=FOR_ITER(arg=54, lineno=3407)
2023-11-07 09:01:26,154 [DEBUG] stack ['$phi64.0']
2023-11-07 09:01:26,154 [DEBUG] end state. edges=[Edge(pc=174, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=('$phi64.0', '$64for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,154 [DEBUG] pending: deque([State(pc_initial=174 nstack_initial=0), State(pc_initial=66 nstack_initial=2)])
2023-11-07 09:01:26,154 [DEBUG] stack: []
2023-11-07 09:01:26,154 [DEBUG] state.pc_initial: State(pc_initial=174 nstack_initial=0)
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=174, inst=LOAD_CONST(arg=0, lineno=3407)
2023-11-07 09:01:26,154 [DEBUG] stack []
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=176, inst=RETURN_VALUE(arg=None, lineno=3407)
2023-11-07 09:01:26,154 [DEBUG] stack ['$const174.0']
2023-11-07 09:01:26,154 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,154 [DEBUG] pending: deque([State(pc_initial=66 nstack_initial=2)])
2023-11-07 09:01:26,154 [DEBUG] stack: ['$phi66.0', '$phi66.1']
2023-11-07 09:01:26,154 [DEBUG] state.pc_initial: State(pc_initial=66 nstack_initial=2)
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=66, inst=STORE_FAST(arg=3, lineno=3407)
2023-11-07 09:01:26,154 [DEBUG] stack ['$phi66.0', '$phi66.1']
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=68, inst=LOAD_FAST(arg=0, lineno=3408)
2023-11-07 09:01:26,154 [DEBUG] stack ['$phi66.0']
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=70, inst=LOAD_FAST(arg=3, lineno=3408)
2023-11-07 09:01:26,154 [DEBUG] stack ['$phi66.0', '$shape68.2']
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=3408)
2023-11-07 09:01:26,154 [DEBUG] stack ['$phi66.0', '$shape68.2', '$i70.3']
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=82, inst=LOAD_FAST(arg=1, lineno=3408)
2023-11-07 09:01:26,154 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4']
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=84, inst=LOAD_GLOBAL(arg=1, lineno=3408)
2023-11-07 09:01:26,154 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4', '$main_shape82.5']
2023-11-07 09:01:26,154 [DEBUG] dispatch pc=96, inst=LOAD_FAST(arg=1, lineno=3408)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4', '$main_shape82.5', '$null$84.7', '$84load_global.6']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=98, inst=PRECALL(arg=1, lineno=3408)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4', '$main_shape82.5', '$null$84.7', '$84load_global.6', '$main_shape96.8']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=102, inst=CALL(arg=1, lineno=3408)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4', '$main_shape82.5', '$null$84.7', '$84load_global.6', '$main_shape96.8']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=112, inst=LOAD_FAST(arg=2, lineno=3408)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4', '$main_shape82.5', '$102call.9']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=114, inst=BINARY_OP(arg=10, lineno=3408)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4', '$main_shape82.5', '$102call.9', '$n112.10']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=118, inst=LOAD_FAST(arg=3, lineno=3408)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4', '$main_shape82.5', '$binop_sub114.11']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=120, inst=BINARY_OP(arg=0, lineno=3408)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4', '$main_shape82.5', '$binop_sub114.11', '$i118.12']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=124, inst=BINARY_SUBSCR(arg=None, lineno=3408)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4', '$main_shape82.5', '$binop_add120.13']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=3408)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi66.0', '$72binary_subscr.4', '$124binary_subscr.14']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=140, inst=POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=3408)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi66.0', '$134compare_op.15']
2023-11-07 09:01:26,155 [DEBUG] end state. edges=[Edge(pc=142, stack=('$phi66.0',), blockstack=(), npush=0), Edge(pc=172, stack=('$phi66.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,155 [DEBUG] pending: deque([State(pc_initial=142 nstack_initial=1), State(pc_initial=172 nstack_initial=1)])
2023-11-07 09:01:26,155 [DEBUG] stack: ['$phi142.0']
2023-11-07 09:01:26,155 [DEBUG] state.pc_initial: State(pc_initial=142 nstack_initial=1)
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=142, inst=LOAD_GLOBAL(arg=5, lineno=3409)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi142.0']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=154, inst=LOAD_CONST(arg=1, lineno=3409)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi142.0', '$null$142.2', '$142load_global.1']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=156, inst=PRECALL(arg=1, lineno=3409)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi142.0', '$null$142.2', '$142load_global.1', '$const154.3']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=160, inst=CALL(arg=1, lineno=3409)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi142.0', '$null$142.2', '$142load_global.1', '$const154.3']
2023-11-07 09:01:26,155 [DEBUG] dispatch pc=170, inst=RAISE_VARARGS(arg=1, lineno=3409)
2023-11-07 09:01:26,155 [DEBUG] stack ['$phi142.0', '$160call.4']
2023-11-07 09:01:26,155 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,156 [DEBUG] pending: deque([State(pc_initial=172 nstack_initial=1)])
2023-11-07 09:01:26,156 [DEBUG] stack: ['$phi172.0']
2023-11-07 09:01:26,156 [DEBUG] state.pc_initial: State(pc_initial=172 nstack_initial=1)
2023-11-07 09:01:26,156 [DEBUG] dispatch pc=172, inst=JUMP_BACKWARD(arg=55, lineno=3408)
2023-11-07 09:01:26,156 [DEBUG] stack ['$phi172.0']
2023-11-07 09:01:26,156 [DEBUG] end state. edges=[Edge(pc=64, stack=('$phi172.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,156 [DEBUG] pending: deque([State(pc_initial=64 nstack_initial=1)])
2023-11-07 09:01:26,156 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,156 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
             State(pc_initial=66 nstack_initial=2): {'$phi66.1'},
             State(pc_initial=142 nstack_initial=1): set(),
             State(pc_initial=172 nstack_initial=1): set(),
             State(pc_initial=174 nstack_initial=0): set()})
2023-11-07 09:01:26,156 [DEBUG] defmap: {'$phi64.0': State(pc_initial=0 nstack_initial=0),
 '$phi66.1': State(pc_initial=64 nstack_initial=1)}
2023-11-07 09:01:26,156 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$phi66.0', State(pc_initial=66 nstack_initial=2))},
             '$phi172.0': {('$phi66.0', State(pc_initial=66 nstack_initial=2))},
             '$phi64.0': {('$62get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi172.0',
                           State(pc_initial=172 nstack_initial=1))},
             '$phi66.0': {('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))}})
2023-11-07 09:01:26,156 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi172.0': {('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi64.0': {('$62get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1))},
             '$phi66.0': {('$62get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))}})
2023-11-07 09:01:26,156 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$62get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi172.0': {('$62get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$62get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))}})
2023-11-07 09:01:26,156 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi142.0': {('$62get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi172.0': {('$62get_iter.8',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi64.0': {('$62get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.0': {('$62get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi66.1': {('$64for_iter.2',
                           State(pc_initial=64 nstack_initial=1))}})
2023-11-07 09:01:26,156 [DEBUG] keep phismap: {'$phi64.0': {('$62get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi66.1': {('$64for_iter.2', State(pc_initial=64 nstack_initial=1))}}
2023-11-07 09:01:26,156 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi64.0': '$62get_iter.8'},
             State(pc_initial=64 nstack_initial=1): {'$phi66.1': '$64for_iter.2'}})
2023-11-07 09:01:26,156 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,156 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$shape16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$shape16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'value': '$22call.3'}), (34, {'idx': 1, 'res': '$34load_global.4'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'res': '$n46.6'}), (48, {}), (50, {}), (52, {'func': '$34load_global.4', 'args': ['$n46.6'], 'kw_names': None, 'res': '$52call.7'}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {'value': '$52call.7', 'res': '$62get_iter.8'})), outgoing_phis={'$phi64.0': '$62get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$62get_iter.8',)})
2023-11-07 09:01:26,156 [DEBUG] block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'iterator': '$phi64.0', 'pair': '$64for_iter.1', 'indval': '$64for_iter.2', 'pred': '$64for_iter.3'}),), outgoing_phis={'$phi66.1': '$64for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={174: (), 66: ('$phi64.0', '$64for_iter.2')})
2023-11-07 09:01:26,156 [DEBUG] block_infos State(pc_initial=66 nstack_initial=2):
AdaptBlockInfo(insts=((66, {'value': '$phi66.1'}), (68, {'res': '$shape68.2'}), (70, {'res': '$i70.3'}), (72, {'index': '$i70.3', 'target': '$shape68.2', 'res': '$72binary_subscr.4'}), (74, {}), (76, {}), (78, {}), (80, {}), (82, {'res': '$main_shape82.5'}), (84, {'idx': 0, 'res': '$84load_global.6'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {}), (96, {'res': '$main_shape96.8'}), (98, {}), (100, {}), (102, {'func': '$84load_global.6', 'args': ['$main_shape96.8'], 'kw_names': None, 'res': '$102call.9'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {'res': '$n112.10'}), (114, {'op': '-', 'lhs': '$102call.9', 'rhs': '$n112.10', 'res': '$binop_sub114.11'}), (116, {}), (118, {'res': '$i118.12'}), (120, {'op': '+', 'lhs': '$binop_sub114.11', 'rhs': '$i118.12', 'res': '$binop_add120.13'}), (122, {}), (124, {'index': '$binop_add120.13', 'target': '$main_shape82.5', 'res': '$124binary_subscr.14'}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'lhs': '$72binary_subscr.4', 'rhs': '$124binary_subscr.14', 'res': '$134compare_op.15'}), (136, {}), (138, {}), (140, {'pred': '$134compare_op.15'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: ('$phi66.0',), 172: ('$phi66.0',)})
2023-11-07 09:01:26,156 [DEBUG] block_infos State(pc_initial=142 nstack_initial=1):
AdaptBlockInfo(insts=((142, {'idx': 2, 'res': '$142load_global.1'}), (144, {}), (146, {}), (148, {}), (150, {}), (152, {}), (154, {'res': '$const154.3'}), (156, {}), (158, {}), (160, {'func': '$142load_global.1', 'args': ['$const154.3'], 'kw_names': None, 'res': '$160call.4'}), (162, {}), (164, {}), (166, {}), (168, {}), (170, {'exc': '$160call.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,156 [DEBUG] block_infos State(pc_initial=172 nstack_initial=1):
AdaptBlockInfo(insts=((172, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$phi172.0',)})
2023-11-07 09:01:26,156 [DEBUG] block_infos State(pc_initial=174 nstack_initial=0):
AdaptBlockInfo(insts=((174, {'res': '$const174.0'}), (176, {'retval': '$const174.0', 'castval': '$176return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,157 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    main_shape = arg(1, name=main_shape)     ['main_shape']
    $4load_global.0 = global(len: <built-in function len>) ['$4load_global.0']
    n = call $4load_global.0(shape, func=$4load_global.0, args=[Var(shape, arrayobj.py:3405)], kws=(), vararg=None, varkwarg=None, target=None) ['$4load_global.0', 'n', 'shape']
    $34load_global.4 = global(range: <class 'range'>) ['$34load_global.4']
    $52call.7 = call $34load_global.4(n, func=$34load_global.4, args=[Var(n, arrayobj.py:3406)], kws=(), vararg=None, varkwarg=None, target=None) ['$34load_global.4', '$52call.7', 'n']
    $62get_iter.8 = getiter(value=$52call.7) ['$52call.7', '$62get_iter.8']
    $phi64.0 = $62get_iter.8                 ['$62get_iter.8', '$phi64.0']
    jump 64                                  []
label 64:
    $64for_iter.1 = iternext(value=$phi64.0) ['$64for_iter.1', '$phi64.0']
    $64for_iter.2 = pair_first(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.2']
    $64for_iter.3 = pair_second(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.3']
    $phi66.1 = $64for_iter.2                 ['$64for_iter.2', '$phi66.1']
    branch $64for_iter.3, 66, 174            ['$64for_iter.3']
label 66:
    i = $phi66.1                             ['$phi66.1', 'i']
    $72binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>) ['$72binary_subscr.4', 'i', 'shape']
    $84load_global.6 = global(len: <built-in function len>) ['$84load_global.6']
    $102call.9 = call $84load_global.6(main_shape, func=$84load_global.6, args=[Var(main_shape, arrayobj.py:3405)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call.9', '$84load_global.6', 'main_shape']
    $binop_sub114.11 = $102call.9 - n        ['$102call.9', '$binop_sub114.11', 'n']
    $binop_add120.13 = $binop_sub114.11 + i  ['$binop_add120.13', '$binop_sub114.11', 'i']
    $124binary_subscr.14 = getitem(value=main_shape, index=$binop_add120.13, fn=<built-in function getitem>) ['$124binary_subscr.14', '$binop_add120.13', 'main_shape']
    $134compare_op.15 = $72binary_subscr.4 != $124binary_subscr.14 ['$124binary_subscr.14', '$134compare_op.15', '$72binary_subscr.4']
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140($134compare_op.15, func=bool140, args=(Var($134compare_op.15, arrayobj.py:3408),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.15', '$140pred', 'bool140']
    branch $140pred, 142, 172                ['$140pred']
label 142:
    $142load_global.1 = global(ValueError: <class 'ValueError'>) ['$142load_global.1']
    $const154.3 = const(str, nditer(): operands could not be broadcast together) ['$const154.3']
    $160call.4 = call $142load_global.1($const154.3, func=$142load_global.1, args=[Var($const154.3, arrayobj.py:3409)], kws=(), vararg=None, varkwarg=None, target=None) ['$142load_global.1', '$160call.4', '$const154.3']
    raise $160call.4                         ['$160call.4']
label 172:
    jump 64                                  []
label 174:
    $const174.0 = const(NoneType, None)      ['$const174.0']
    $176return_value.1 = cast(value=$const174.0) ['$176return_value.1', '$const174.0']
    return $176return_value.1                ['$176return_value.1']

2023-11-07 09:01:26,165 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,165 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282761f10>
2023-11-07 09:01:26,165 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-11-07 09:01:26,165 [DEBUG] on stmt: main_shape = arg(1, name=main_shape)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $4load_global.0 = global(len: <built-in function len>)
2023-11-07 09:01:26,165 [DEBUG] on stmt: n = const(int, 2)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $34load_global.4 = global(range: <class 'range'>)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $52call.7 = call $34load_global.4(n, func=$34load_global.4, args=[Var(n, arrayobj.py:3406)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $62get_iter.8 = getiter(value=$52call.7)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $phi64.0 = $62get_iter.8
2023-11-07 09:01:26,165 [DEBUG] on stmt: jump 64
2023-11-07 09:01:26,165 [DEBUG] ==== SSA block analysis pass on 64
2023-11-07 09:01:26,165 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282761f10>
2023-11-07 09:01:26,165 [DEBUG] on stmt: $64for_iter.1 = iternext(value=$phi64.0)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $phi66.1 = $64for_iter.2
2023-11-07 09:01:26,165 [DEBUG] on stmt: branch $64for_iter.3, 66, 174
2023-11-07 09:01:26,165 [DEBUG] ==== SSA block analysis pass on 66
2023-11-07 09:01:26,165 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282761f10>
2023-11-07 09:01:26,165 [DEBUG] on stmt: i = $phi66.1
2023-11-07 09:01:26,165 [DEBUG] on stmt: $72binary_subscr.4 = getitem(value=shape, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $84load_global.6 = global(len: <built-in function len>)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $102call.9 = const(int, 2)
2023-11-07 09:01:26,165 [DEBUG] on stmt: $binop_sub114.11 = $102call.9 - n
2023-11-07 09:01:26,165 [DEBUG] on stmt: $binop_add120.13 = $binop_sub114.11 + i
2023-11-07 09:01:26,166 [DEBUG] on stmt: $124binary_subscr.14 = getitem(value=main_shape, index=$binop_add120.13, fn=<built-in function getitem>)
2023-11-07 09:01:26,166 [DEBUG] on stmt: $134compare_op.15 = $72binary_subscr.4 != $124binary_subscr.14
2023-11-07 09:01:26,166 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,166 [DEBUG] on stmt: $140pred = call bool140($134compare_op.15, func=bool140, args=(Var($134compare_op.15, arrayobj.py:3408),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,166 [DEBUG] on stmt: branch $140pred, 142, 172
2023-11-07 09:01:26,166 [DEBUG] ==== SSA block analysis pass on 142
2023-11-07 09:01:26,166 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282761f10>
2023-11-07 09:01:26,166 [DEBUG] on stmt: $142load_global.1 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,166 [DEBUG] on stmt: $const154.3 = const(str, nditer(): operands could not be broadcast together)
2023-11-07 09:01:26,166 [DEBUG] on stmt: $160call.4 = call $142load_global.1($const154.3, func=$142load_global.1, args=[Var($const154.3, arrayobj.py:3409)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,166 [DEBUG] on stmt: <static> raise <class 'ValueError'>('nditer(): operands could not be broadcast together')
2023-11-07 09:01:26,166 [DEBUG] ==== SSA block analysis pass on 172
2023-11-07 09:01:26,166 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282761f10>
2023-11-07 09:01:26,166 [DEBUG] on stmt: jump 64
2023-11-07 09:01:26,166 [DEBUG] ==== SSA block analysis pass on 174
2023-11-07 09:01:26,166 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282761f10>
2023-11-07 09:01:26,166 [DEBUG] on stmt: $const174.0 = const(NoneType, None)
2023-11-07 09:01:26,166 [DEBUG] on stmt: $176return_value.1 = cast(value=$const174.0)
2023-11-07 09:01:26,166 [DEBUG] on stmt: return $176return_value.1
2023-11-07 09:01:26,166 [DEBUG] defs defaultdict(<class 'list'>,
            {'$102call.9': [<numba.core.ir.Assign object at 0x2827a5cd0>],
             '$124binary_subscr.14': [<numba.core.ir.Assign object at 0x282763f50>],
             '$134compare_op.15': [<numba.core.ir.Assign object at 0x282763990>],
             '$140pred': [<numba.core.ir.Assign object at 0x282763210>],
             '$142load_global.1': [<numba.core.ir.Assign object at 0x282762110>],
             '$160call.4': [<numba.core.ir.Assign object at 0x282763110>],
             '$176return_value.1': [<numba.core.ir.Assign object at 0x282799a50>],
             '$34load_global.4': [<numba.core.ir.Assign object at 0x2827a7110>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x2827a5ed0>],
             '$52call.7': [<numba.core.ir.Assign object at 0x2827a41d0>],
             '$62get_iter.8': [<numba.core.ir.Assign object at 0x2827a7150>],
             '$64for_iter.1': [<numba.core.ir.Assign object at 0x2827a5e50>],
             '$64for_iter.2': [<numba.core.ir.Assign object at 0x2827a6d10>],
             '$64for_iter.3': [<numba.core.ir.Assign object at 0x2827a6290>],
             '$72binary_subscr.4': [<numba.core.ir.Assign object at 0x2827a5a10>],
             '$84load_global.6': [<numba.core.ir.Assign object at 0x2827a5b50>],
             '$binop_add120.13': [<numba.core.ir.Assign object at 0x282763650>],
             '$binop_sub114.11': [<numba.core.ir.Assign object at 0x2827a5050>],
             '$const154.3': [<numba.core.ir.Assign object at 0x282761c90>],
             '$const174.0': [<numba.core.ir.Assign object at 0x282763610>],
             '$phi64.0': [<numba.core.ir.Assign object at 0x2827a7790>],
             '$phi66.1': [<numba.core.ir.Assign object at 0x2827a6550>],
             'bool140': [<numba.core.ir.Assign object at 0x282763810>],
             'i': [<numba.core.ir.Assign object at 0x2827a6310>],
             'main_shape': [<numba.core.ir.Assign object at 0x2827a5110>],
             'n': [<numba.core.ir.Assign object at 0x2827a7c10>],
             'shape': [<numba.core.ir.Assign object at 0x2827a4d90>]})
2023-11-07 09:01:26,166 [DEBUG] SSA violators set()
2023-11-07 09:01:26,206 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=569)
           2	COPY_FREE_VARS(arg=2, lineno=569)
           4	RESUME(arg=0, lineno=569)
           6	LOAD_FAST(arg=0, lineno=570)
           8	LOAD_ATTR(arg=0, lineno=570)
          18	LOAD_CONST(arg=1, lineno=570)
          20	COMPARE_OP(arg=2, lineno=570)
          26	POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=570)
          28	LOAD_GLOBAL(arg=3, lineno=571)
          40	LOAD_CONST(arg=2, lineno=571)
          42	PRECALL(arg=1, lineno=571)
          46	CALL(arg=1, lineno=571)
          56	RAISE_VARARGS(arg=1, lineno=571)
>         58	LOAD_GLOBAL(arg=5, lineno=574)
          70	LOAD_ATTR(arg=3, lineno=574)
          80	LOAD_FAST(arg=0, lineno=574)
          82	PRECALL(arg=1, lineno=574)
          86	CALL(arg=1, lineno=574)
          96	STORE_FAST(arg=1, lineno=574)
          98	LOAD_GLOBAL(arg=9, lineno=575)
         110	LOAD_FAST(arg=1, lineno=575)
         112	PRECALL(arg=1, lineno=575)
         116	CALL(arg=1, lineno=575)
         126	LOAD_METHOD(arg=5, lineno=575)
         148	LOAD_CONST(arg=1, lineno=575)
         150	PRECALL(arg=1, lineno=575)
         154	CALL(arg=1, lineno=575)
         164	STORE_FAST(arg=2, lineno=575)
         166	PUSH_NULL(arg=None, lineno=576)
         168	LOAD_DEREF(arg=6, lineno=576)
         170	LOAD_FAST(arg=2, lineno=576)
         172	PRECALL(arg=1, lineno=576)
         176	CALL(arg=1, lineno=576)
         186	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=576)
         188	LOAD_FAST(arg=2, lineno=577)
         190	RETURN_VALUE(arg=None, lineno=577)
>        192	LOAD_FAST(arg=1, lineno=579)
         194	GET_ITER(arg=None, lineno=579)
>        196	FOR_ITER(arg=51, lineno=579)
         198	STORE_FAST(arg=3, lineno=579)
         200	LOAD_FAST(arg=3, lineno=580)
         202	LOAD_METHOD(arg=6, lineno=580)
         224	PRECALL(arg=0, lineno=580)
         228	CALL(arg=0, lineno=580)
         238	STORE_FAST(arg=4, lineno=580)
         240	PUSH_NULL(arg=None, lineno=581)
         242	LOAD_DEREF(arg=6, lineno=581)
         244	LOAD_FAST(arg=4, lineno=581)
         246	PRECALL(arg=1, lineno=581)
         250	CALL(arg=1, lineno=581)
         260	POP_JUMP_FORWARD_IF_FALSE(arg=4, lineno=581)
         262	LOAD_FAST(arg=4, lineno=582)
         264	SWAP(arg=2, lineno=582)
         266	POP_TOP(arg=None, lineno=582)
         268	RETURN_VALUE(arg=None, lineno=582)
>        270	PUSH_NULL(arg=None, lineno=583)
         272	LOAD_DEREF(arg=5, lineno=583)
         274	LOAD_FAST(arg=4, lineno=583)
         276	LOAD_FAST(arg=2, lineno=583)
         278	PRECALL(arg=2, lineno=583)
         282	CALL(arg=2, lineno=583)
         292	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=583)
         294	LOAD_FAST(arg=4, lineno=584)
         296	STORE_FAST(arg=2, lineno=584)
>        298	JUMP_BACKWARD(arg=52, lineno=584)
>        300	LOAD_FAST(arg=2, lineno=585)
         302	RETURN_VALUE(arg=None, lineno=585)
2023-11-07 09:01:26,206 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,206 [DEBUG] stack: []
2023-11-07 09:01:26,206 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=569)
2023-11-07 09:01:26,206 [DEBUG] stack []
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=2, lineno=569)
2023-11-07 09:01:26,206 [DEBUG] stack []
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=569)
2023-11-07 09:01:26,206 [DEBUG] stack []
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=570)
2023-11-07 09:01:26,206 [DEBUG] stack []
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=8, inst=LOAD_ATTR(arg=0, lineno=570)
2023-11-07 09:01:26,206 [DEBUG] stack ['$a6.0']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=570)
2023-11-07 09:01:26,206 [DEBUG] stack ['$8load_attr.1']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=20, inst=COMPARE_OP(arg=2, lineno=570)
2023-11-07 09:01:26,206 [DEBUG] stack ['$8load_attr.1', '$const18.2']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=26, inst=POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=570)
2023-11-07 09:01:26,206 [DEBUG] stack ['$20compare_op.3']
2023-11-07 09:01:26,206 [DEBUG] end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=58, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,206 [DEBUG] pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=58 nstack_initial=0)])
2023-11-07 09:01:26,206 [DEBUG] stack: []
2023-11-07 09:01:26,206 [DEBUG] state.pc_initial: State(pc_initial=28 nstack_initial=0)
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=28, inst=LOAD_GLOBAL(arg=3, lineno=571)
2023-11-07 09:01:26,206 [DEBUG] stack []
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=40, inst=LOAD_CONST(arg=2, lineno=571)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$28.1', '$28load_global.0']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=42, inst=PRECALL(arg=1, lineno=571)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$28.1', '$28load_global.0', '$const40.2']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=46, inst=CALL(arg=1, lineno=571)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$28.1', '$28load_global.0', '$const40.2']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=56, inst=RAISE_VARARGS(arg=1, lineno=571)
2023-11-07 09:01:26,206 [DEBUG] stack ['$46call.3']
2023-11-07 09:01:26,206 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,206 [DEBUG] pending: deque([State(pc_initial=58 nstack_initial=0)])
2023-11-07 09:01:26,206 [DEBUG] stack: []
2023-11-07 09:01:26,206 [DEBUG] state.pc_initial: State(pc_initial=58 nstack_initial=0)
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=58, inst=LOAD_GLOBAL(arg=5, lineno=574)
2023-11-07 09:01:26,206 [DEBUG] stack []
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=70, inst=LOAD_ATTR(arg=3, lineno=574)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$58.1', '$58load_global.0']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=80, inst=LOAD_FAST(arg=0, lineno=574)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$58.1', '$70load_attr.2']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=82, inst=PRECALL(arg=1, lineno=574)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$58.1', '$70load_attr.2', '$a80.3']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=86, inst=CALL(arg=1, lineno=574)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$58.1', '$70load_attr.2', '$a80.3']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=96, inst=STORE_FAST(arg=1, lineno=574)
2023-11-07 09:01:26,206 [DEBUG] stack ['$86call.4']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=98, inst=LOAD_GLOBAL(arg=9, lineno=575)
2023-11-07 09:01:26,206 [DEBUG] stack []
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=110, inst=LOAD_FAST(arg=1, lineno=575)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$98.6', '$98load_global.5']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=112, inst=PRECALL(arg=1, lineno=575)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$98.6', '$98load_global.5', '$it110.7']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=116, inst=CALL(arg=1, lineno=575)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$98.6', '$98load_global.5', '$it110.7']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=126, inst=LOAD_METHOD(arg=5, lineno=575)
2023-11-07 09:01:26,206 [DEBUG] stack ['$116call.8']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=148, inst=LOAD_CONST(arg=1, lineno=575)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$126.9', '$126load_method.10']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=150, inst=PRECALL(arg=1, lineno=575)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$126.9', '$126load_method.10', '$const148.11']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=154, inst=CALL(arg=1, lineno=575)
2023-11-07 09:01:26,206 [DEBUG] stack ['$null$126.9', '$126load_method.10', '$const148.11']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=164, inst=STORE_FAST(arg=2, lineno=575)
2023-11-07 09:01:26,206 [DEBUG] stack ['$154call.12']
2023-11-07 09:01:26,206 [DEBUG] dispatch pc=166, inst=PUSH_NULL(arg=None, lineno=576)
2023-11-07 09:01:26,206 [DEBUG] stack []
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=168, inst=LOAD_DEREF(arg=6, lineno=576)
2023-11-07 09:01:26,207 [DEBUG] stack ['$null$166.13']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=170, inst=LOAD_FAST(arg=2, lineno=576)
2023-11-07 09:01:26,207 [DEBUG] stack ['$null$166.13', '$168load_deref.14']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=172, inst=PRECALL(arg=1, lineno=576)
2023-11-07 09:01:26,207 [DEBUG] stack ['$null$166.13', '$168load_deref.14', '$max_value170.15']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=176, inst=CALL(arg=1, lineno=576)
2023-11-07 09:01:26,207 [DEBUG] stack ['$null$166.13', '$168load_deref.14', '$max_value170.15']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=186, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=576)
2023-11-07 09:01:26,207 [DEBUG] stack ['$176call.16']
2023-11-07 09:01:26,207 [DEBUG] end state. edges=[Edge(pc=188, stack=(), blockstack=(), npush=0), Edge(pc=192, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,207 [DEBUG] pending: deque([State(pc_initial=188 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2023-11-07 09:01:26,207 [DEBUG] stack: []
2023-11-07 09:01:26,207 [DEBUG] state.pc_initial: State(pc_initial=188 nstack_initial=0)
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=188, inst=LOAD_FAST(arg=2, lineno=577)
2023-11-07 09:01:26,207 [DEBUG] stack []
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=190, inst=RETURN_VALUE(arg=None, lineno=577)
2023-11-07 09:01:26,207 [DEBUG] stack ['$max_value188.0']
2023-11-07 09:01:26,207 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,207 [DEBUG] pending: deque([State(pc_initial=192 nstack_initial=0)])
2023-11-07 09:01:26,207 [DEBUG] stack: []
2023-11-07 09:01:26,207 [DEBUG] state.pc_initial: State(pc_initial=192 nstack_initial=0)
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=192, inst=LOAD_FAST(arg=1, lineno=579)
2023-11-07 09:01:26,207 [DEBUG] stack []
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=194, inst=GET_ITER(arg=None, lineno=579)
2023-11-07 09:01:26,207 [DEBUG] stack ['$it192.0']
2023-11-07 09:01:26,207 [DEBUG] end state. edges=[Edge(pc=196, stack=('$194get_iter.1',), blockstack=(), npush=0)]
2023-11-07 09:01:26,207 [DEBUG] pending: deque([State(pc_initial=196 nstack_initial=1)])
2023-11-07 09:01:26,207 [DEBUG] stack: ['$phi196.0']
2023-11-07 09:01:26,207 [DEBUG] state.pc_initial: State(pc_initial=196 nstack_initial=1)
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=196, inst=FOR_ITER(arg=51, lineno=579)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi196.0']
2023-11-07 09:01:26,207 [DEBUG] end state. edges=[Edge(pc=300, stack=(), blockstack=(), npush=0), Edge(pc=198, stack=('$phi196.0', '$196for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,207 [DEBUG] pending: deque([State(pc_initial=300 nstack_initial=0), State(pc_initial=198 nstack_initial=2)])
2023-11-07 09:01:26,207 [DEBUG] stack: []
2023-11-07 09:01:26,207 [DEBUG] state.pc_initial: State(pc_initial=300 nstack_initial=0)
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=300, inst=LOAD_FAST(arg=2, lineno=585)
2023-11-07 09:01:26,207 [DEBUG] stack []
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=302, inst=RETURN_VALUE(arg=None, lineno=585)
2023-11-07 09:01:26,207 [DEBUG] stack ['$max_value300.0']
2023-11-07 09:01:26,207 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,207 [DEBUG] pending: deque([State(pc_initial=198 nstack_initial=2)])
2023-11-07 09:01:26,207 [DEBUG] stack: ['$phi198.0', '$phi198.1']
2023-11-07 09:01:26,207 [DEBUG] state.pc_initial: State(pc_initial=198 nstack_initial=2)
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=198, inst=STORE_FAST(arg=3, lineno=579)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0', '$phi198.1']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=200, inst=LOAD_FAST(arg=3, lineno=580)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=202, inst=LOAD_METHOD(arg=6, lineno=580)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0', '$view200.2']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=224, inst=PRECALL(arg=0, lineno=580)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0', '$null$202.3', '$202load_method.4']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=228, inst=CALL(arg=0, lineno=580)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0', '$null$202.3', '$202load_method.4']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=238, inst=STORE_FAST(arg=4, lineno=580)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0', '$228call.5']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=240, inst=PUSH_NULL(arg=None, lineno=581)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=242, inst=LOAD_DEREF(arg=6, lineno=581)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0', '$null$240.6']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=244, inst=LOAD_FAST(arg=4, lineno=581)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0', '$null$240.6', '$242load_deref.7']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=246, inst=PRECALL(arg=1, lineno=581)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0', '$null$240.6', '$242load_deref.7', '$v244.8']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=250, inst=CALL(arg=1, lineno=581)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0', '$null$240.6', '$242load_deref.7', '$v244.8']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=260, inst=POP_JUMP_FORWARD_IF_FALSE(arg=4, lineno=581)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi198.0', '$250call.9']
2023-11-07 09:01:26,207 [DEBUG] end state. edges=[Edge(pc=262, stack=('$phi198.0',), blockstack=(), npush=0), Edge(pc=270, stack=('$phi198.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,207 [DEBUG] pending: deque([State(pc_initial=262 nstack_initial=1), State(pc_initial=270 nstack_initial=1)])
2023-11-07 09:01:26,207 [DEBUG] stack: ['$phi262.0']
2023-11-07 09:01:26,207 [DEBUG] state.pc_initial: State(pc_initial=262 nstack_initial=1)
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=262, inst=LOAD_FAST(arg=4, lineno=582)
2023-11-07 09:01:26,207 [DEBUG] stack ['$phi262.0']
2023-11-07 09:01:26,207 [DEBUG] dispatch pc=264, inst=SWAP(arg=2, lineno=582)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi262.0', '$v262.1']
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=266, inst=POP_TOP(arg=None, lineno=582)
2023-11-07 09:01:26,208 [DEBUG] stack ['$v262.1', '$phi262.0']
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=268, inst=RETURN_VALUE(arg=None, lineno=582)
2023-11-07 09:01:26,208 [DEBUG] stack ['$v262.1']
2023-11-07 09:01:26,208 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,208 [DEBUG] pending: deque([State(pc_initial=270 nstack_initial=1)])
2023-11-07 09:01:26,208 [DEBUG] stack: ['$phi270.0']
2023-11-07 09:01:26,208 [DEBUG] state.pc_initial: State(pc_initial=270 nstack_initial=1)
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=270, inst=PUSH_NULL(arg=None, lineno=583)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi270.0']
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=272, inst=LOAD_DEREF(arg=5, lineno=583)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi270.0', '$null$270.1']
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=274, inst=LOAD_FAST(arg=4, lineno=583)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi270.0', '$null$270.1', '$272load_deref.2']
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=276, inst=LOAD_FAST(arg=2, lineno=583)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi270.0', '$null$270.1', '$272load_deref.2', '$v274.3']
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=278, inst=PRECALL(arg=2, lineno=583)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi270.0', '$null$270.1', '$272load_deref.2', '$v274.3', '$max_value276.4']
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=282, inst=CALL(arg=2, lineno=583)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi270.0', '$null$270.1', '$272load_deref.2', '$v274.3', '$max_value276.4']
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=292, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=583)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi270.0', '$282call.5']
2023-11-07 09:01:26,208 [DEBUG] end state. edges=[Edge(pc=294, stack=('$phi270.0',), blockstack=(), npush=0), Edge(pc=298, stack=('$phi270.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,208 [DEBUG] pending: deque([State(pc_initial=294 nstack_initial=1), State(pc_initial=298 nstack_initial=1)])
2023-11-07 09:01:26,208 [DEBUG] stack: ['$phi294.0']
2023-11-07 09:01:26,208 [DEBUG] state.pc_initial: State(pc_initial=294 nstack_initial=1)
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=294, inst=LOAD_FAST(arg=4, lineno=584)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi294.0']
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=296, inst=STORE_FAST(arg=2, lineno=584)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi294.0', '$v294.1']
2023-11-07 09:01:26,208 [DEBUG] end state. edges=[Edge(pc=298, stack=('$phi294.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,208 [DEBUG] pending: deque([State(pc_initial=298 nstack_initial=1), State(pc_initial=298 nstack_initial=1)])
2023-11-07 09:01:26,208 [DEBUG] stack: ['$phi298.0']
2023-11-07 09:01:26,208 [DEBUG] state.pc_initial: State(pc_initial=298 nstack_initial=1)
2023-11-07 09:01:26,208 [DEBUG] dispatch pc=298, inst=JUMP_BACKWARD(arg=52, lineno=584)
2023-11-07 09:01:26,208 [DEBUG] stack ['$phi298.0']
2023-11-07 09:01:26,208 [DEBUG] end state. edges=[Edge(pc=196, stack=('$phi298.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,208 [DEBUG] pending: deque([State(pc_initial=298 nstack_initial=1), State(pc_initial=196 nstack_initial=1)])
2023-11-07 09:01:26,208 [DEBUG] pending: deque([State(pc_initial=196 nstack_initial=1)])
2023-11-07 09:01:26,208 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,208 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=188 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=196 nstack_initial=1): {'$phi196.0'},
             State(pc_initial=198 nstack_initial=2): {'$phi198.1'},
             State(pc_initial=262 nstack_initial=1): set(),
             State(pc_initial=270 nstack_initial=1): set(),
             State(pc_initial=294 nstack_initial=1): set(),
             State(pc_initial=298 nstack_initial=1): set(),
             State(pc_initial=300 nstack_initial=0): set()})
2023-11-07 09:01:26,208 [DEBUG] defmap: {'$phi196.0': State(pc_initial=192 nstack_initial=0),
 '$phi198.1': State(pc_initial=196 nstack_initial=1)}
2023-11-07 09:01:26,208 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi196.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi298.0',
                            State(pc_initial=298 nstack_initial=1))},
             '$phi198.0': {('$phi196.0',
                            State(pc_initial=196 nstack_initial=1))},
             '$phi198.1': {('$196for_iter.2',
                            State(pc_initial=196 nstack_initial=1))},
             '$phi262.0': {('$phi198.0',
                            State(pc_initial=198 nstack_initial=2))},
             '$phi270.0': {('$phi198.0',
                            State(pc_initial=198 nstack_initial=2))},
             '$phi294.0': {('$phi270.0',
                            State(pc_initial=270 nstack_initial=1))},
             '$phi298.0': {('$phi270.0',
                            State(pc_initial=270 nstack_initial=1)),
                           ('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))}})
2023-11-07 09:01:26,208 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi196.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi270.0',
                            State(pc_initial=270 nstack_initial=1)),
                           ('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi198.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi270.0',
                            State(pc_initial=270 nstack_initial=1)),
                           ('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi198.1': {('$196for_iter.2',
                            State(pc_initial=196 nstack_initial=1))},
             '$phi262.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi270.0',
                            State(pc_initial=270 nstack_initial=1)),
                           ('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi270.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi270.0',
                            State(pc_initial=270 nstack_initial=1)),
                           ('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi294.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0)),
                           ('$phi294.0',
                            State(pc_initial=294 nstack_initial=1))},
             '$phi298.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))}})
2023-11-07 09:01:26,208 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi196.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi198.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi198.1': {('$196for_iter.2',
                            State(pc_initial=196 nstack_initial=1))},
             '$phi262.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi270.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi294.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi298.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))}})
2023-11-07 09:01:26,208 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi196.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi198.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi198.1': {('$196for_iter.2',
                            State(pc_initial=196 nstack_initial=1))},
             '$phi262.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi270.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi294.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))},
             '$phi298.0': {('$194get_iter.1',
                            State(pc_initial=192 nstack_initial=0))}})
2023-11-07 09:01:26,208 [DEBUG] keep phismap: {'$phi196.0': {('$194get_iter.1', State(pc_initial=192 nstack_initial=0))},
 '$phi198.1': {('$196for_iter.2', State(pc_initial=196 nstack_initial=1))}}
2023-11-07 09:01:26,208 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=192 nstack_initial=0): {'$phi196.0': '$194get_iter.1'},
             State(pc_initial=196 nstack_initial=1): {'$phi198.1': '$196for_iter.2'}})
2023-11-07 09:01:26,209 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$a6.0'}), (8, {'item': '$a6.0', 'res': '$8load_attr.1'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$const18.2'}), (20, {'lhs': '$8load_attr.1', 'rhs': '$const18.2', 'res': '$20compare_op.3'}), (22, {}), (24, {}), (26, {'pred': '$20compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 58: ()})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {'idx': 1, 'res': '$28load_global.0'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {'res': '$const40.2'}), (42, {}), (44, {}), (46, {'func': '$28load_global.0', 'args': ['$const40.2'], 'kw_names': None, 'res': '$46call.3'}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'exc': '$46call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'idx': 2, 'res': '$58load_global.0'}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {'item': '$58load_global.0', 'res': '$70load_attr.2'}), (72, {}), (74, {}), (76, {}), (78, {}), (80, {'res': '$a80.3'}), (82, {}), (84, {}), (86, {'func': '$70load_attr.2', 'args': ['$a80.3'], 'kw_names': None, 'res': '$86call.4'}), (88, {}), (90, {}), (92, {}), (94, {}), (96, {'value': '$86call.4'}), (98, {'idx': 4, 'res': '$98load_global.5'}), (100, {}), (102, {}), (104, {}), (106, {}), (108, {}), (110, {'res': '$it110.7'}), (112, {}), (114, {}), (116, {'func': '$98load_global.5', 'args': ['$it110.7'], 'kw_names': None, 'res': '$116call.8'}), (118, {}), (120, {}), (122, {}), (124, {}), (126, {'item': '$116call.8', 'res': '$126load_method.10'}), (128, {}), (130, {}), (132, {}), (134, {}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {}), (148, {'res': '$const148.11'}), (150, {}), (152, {}), (154, {'func': '$126load_method.10', 'args': ['$const148.11'], 'kw_names': None, 'res': '$154call.12'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'value': '$154call.12'}), (166, {}), (168, {'res': '$168load_deref.14'}), (170, {'res': '$max_value170.15'}), (172, {}), (174, {}), (176, {'func': '$168load_deref.14', 'args': ['$max_value170.15'], 'kw_names': None, 'res': '$176call.16'}), (178, {}), (180, {}), (182, {}), (184, {}), (186, {'pred': '$176call.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={188: (), 192: ()})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=188 nstack_initial=0):
AdaptBlockInfo(insts=((188, {'res': '$max_value188.0'}), (190, {'retval': '$max_value188.0', 'castval': '$190return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$it192.0'}), (194, {'value': '$it192.0', 'res': '$194get_iter.1'})), outgoing_phis={'$phi196.0': '$194get_iter.1'}, blockstack=(), active_try_block=None, outgoing_edgepushed={196: ('$194get_iter.1',)})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=196 nstack_initial=1):
AdaptBlockInfo(insts=((196, {'iterator': '$phi196.0', 'pair': '$196for_iter.1', 'indval': '$196for_iter.2', 'pred': '$196for_iter.3'}),), outgoing_phis={'$phi198.1': '$196for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={300: (), 198: ('$phi196.0', '$196for_iter.2')})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=198 nstack_initial=2):
AdaptBlockInfo(insts=((198, {'value': '$phi198.1'}), (200, {'res': '$view200.2'}), (202, {'item': '$view200.2', 'res': '$202load_method.4'}), (204, {}), (206, {}), (208, {}), (210, {}), (212, {}), (214, {}), (216, {}), (218, {}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'func': '$202load_method.4', 'args': [], 'kw_names': None, 'res': '$228call.5'}), (230, {}), (232, {}), (234, {}), (236, {}), (238, {'value': '$228call.5'}), (240, {}), (242, {'res': '$242load_deref.7'}), (244, {'res': '$v244.8'}), (246, {}), (248, {}), (250, {'func': '$242load_deref.7', 'args': ['$v244.8'], 'kw_names': None, 'res': '$250call.9'}), (252, {}), (254, {}), (256, {}), (258, {}), (260, {'pred': '$250call.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={262: ('$phi198.0',), 270: ('$phi198.0',)})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=262 nstack_initial=1):
AdaptBlockInfo(insts=((262, {'res': '$v262.1'}), (268, {'retval': '$v262.1', 'castval': '$268return_value.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=270 nstack_initial=1):
AdaptBlockInfo(insts=((270, {}), (272, {'res': '$272load_deref.2'}), (274, {'res': '$v274.3'}), (276, {'res': '$max_value276.4'}), (278, {}), (280, {}), (282, {'func': '$272load_deref.2', 'args': ['$v274.3', '$max_value276.4'], 'kw_names': None, 'res': '$282call.5'}), (284, {}), (286, {}), (288, {}), (290, {}), (292, {'pred': '$282call.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={294: ('$phi270.0',), 298: ('$phi270.0',)})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=294 nstack_initial=1):
AdaptBlockInfo(insts=((294, {'res': '$v294.1'}), (296, {'value': '$v294.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={298: ('$phi294.0',)})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=298 nstack_initial=1):
AdaptBlockInfo(insts=((298, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={196: ('$phi298.0',)})
2023-11-07 09:01:26,209 [DEBUG] block_infos State(pc_initial=300 nstack_initial=0):
AdaptBlockInfo(insts=((300, {'res': '$max_value300.0'}), (302, {'retval': '$max_value300.0', 'castval': '$302return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,209 [DEBUG] label 0:
    a = arg(0, name=a)                       ['a']
    $8load_attr.1 = getattr(value=a, attr=size) ['$8load_attr.1', 'a']
    $const18.2 = const(int, 0)               ['$const18.2']
    $20compare_op.3 = $8load_attr.1 == $const18.2 ['$20compare_op.3', '$8load_attr.1', '$const18.2']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($20compare_op.3, func=bool26, args=(Var($20compare_op.3, arraymath.py:570),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.3', '$26pred', 'bool26']
    branch $26pred, 28, 58                   ['$26pred']
label 28:
    $28load_global.0 = global(ValueError: <class 'ValueError'>) ['$28load_global.0']
    $const40.2 = const(str, zero-size array to reduction operation maximum which has no identity) ['$const40.2']
    $46call.3 = call $28load_global.0($const40.2, func=$28load_global.0, args=[Var($const40.2, arraymath.py:571)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.0', '$46call.3', '$const40.2']
    raise $46call.3                          ['$46call.3']
label 58:
    $58load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$58load_global.0']
    $70load_attr.2 = getattr(value=$58load_global.0, attr=nditer) ['$58load_global.0', '$70load_attr.2']
    it = call $70load_attr.2(a, func=$70load_attr.2, args=[Var(a, arraymath.py:569)], kws=(), vararg=None, varkwarg=None, target=None) ['$70load_attr.2', 'a', 'it']
    $98load_global.5 = global(next: <built-in function next>) ['$98load_global.5']
    $116call.8 = call $98load_global.5(it, func=$98load_global.5, args=[Var(it, arraymath.py:574)], kws=(), vararg=None, varkwarg=None, target=None) ['$116call.8', '$98load_global.5', 'it']
    $126load_method.10 = getattr(value=$116call.8, attr=take) ['$116call.8', '$126load_method.10']
    $const148.11 = const(int, 0)             ['$const148.11']
    max_value = call $126load_method.10($const148.11, func=$126load_method.10, args=[Var($const148.11, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$126load_method.10', '$const148.11', 'max_value']
    $168load_deref.14 = freevar(pre_return_func: <ufunc 'isnan'>) ['$168load_deref.14']
    $176call.16 = call $168load_deref.14(max_value, func=$168load_deref.14, args=[Var(max_value, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$168load_deref.14', '$176call.16', 'max_value']
    bool186 = global(bool: <class 'bool'>)   ['bool186']
    $186pred = call bool186($176call.16, func=bool186, args=(Var($176call.16, arraymath.py:576),), kws=(), vararg=None, varkwarg=None, target=None) ['$176call.16', '$186pred', 'bool186']
    branch $186pred, 188, 192                ['$186pred']
label 188:
    $190return_value.1 = cast(value=max_value) ['$190return_value.1', 'max_value']
    return $190return_value.1                ['$190return_value.1']
label 192:
    $194get_iter.1 = getiter(value=it)       ['$194get_iter.1', 'it']
    $phi196.0 = $194get_iter.1               ['$194get_iter.1', '$phi196.0']
    jump 196                                 []
label 196:
    $196for_iter.1 = iternext(value=$phi196.0) ['$196for_iter.1', '$phi196.0']
    $196for_iter.2 = pair_first(value=$196for_iter.1) ['$196for_iter.1', '$196for_iter.2']
    $196for_iter.3 = pair_second(value=$196for_iter.1) ['$196for_iter.1', '$196for_iter.3']
    $phi198.1 = $196for_iter.2               ['$196for_iter.2', '$phi198.1']
    branch $196for_iter.3, 198, 300          ['$196for_iter.3']
label 198:
    view = $phi198.1                         ['$phi198.1', 'view']
    $202load_method.4 = getattr(value=view, attr=item) ['$202load_method.4', 'view']
    v = call $202load_method.4(func=$202load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$202load_method.4', 'v']
    $242load_deref.7 = freevar(pre_return_func: <ufunc 'isnan'>) ['$242load_deref.7']
    $250call.9 = call $242load_deref.7(v, func=$242load_deref.7, args=[Var(v, arraymath.py:580)], kws=(), vararg=None, varkwarg=None, target=None) ['$242load_deref.7', '$250call.9', 'v']
    bool260 = global(bool: <class 'bool'>)   ['bool260']
    $260pred = call bool260($250call.9, func=bool260, args=(Var($250call.9, arraymath.py:581),), kws=(), vararg=None, varkwarg=None, target=None) ['$250call.9', '$260pred', 'bool260']
    branch $260pred, 262, 270                ['$260pred']
label 262:
    $268return_value.2 = cast(value=v)       ['$268return_value.2', 'v']
    return $268return_value.2                ['$268return_value.2']
label 270:
    $272load_deref.2 = freevar(comparator: <function max_comparator at 0x169bbd940>) ['$272load_deref.2']
    $282call.5 = call $272load_deref.2(v, max_value, func=$272load_deref.2, args=[Var(v, arraymath.py:580), Var(max_value, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None) ['$272load_deref.2', '$282call.5', 'max_value', 'v']
    bool292 = global(bool: <class 'bool'>)   ['bool292']
    $292pred = call bool292($282call.5, func=bool292, args=(Var($282call.5, arraymath.py:583),), kws=(), vararg=None, varkwarg=None, target=None) ['$282call.5', '$292pred', 'bool292']
    branch $292pred, 294, 298                ['$292pred']
label 294:
    max_value = v                            ['max_value', 'v']
    jump 298                                 []
label 298:
    jump 196                                 []
label 300:
    $302return_value.1 = cast(value=max_value) ['$302return_value.1', 'max_value']
    return $302return_value.1                ['$302return_value.1']

2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $8load_attr.1 = getattr(value=a, attr=size)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $const18.2 = const(int, 0)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $20compare_op.3 = $8load_attr.1 == $const18.2
2023-11-07 09:01:26,214 [DEBUG] on stmt: bool26 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $26pred = call bool26($20compare_op.3, func=bool26, args=(Var($20compare_op.3, arraymath.py:570),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: branch $26pred, 28, 58
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 28
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: $28load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $const40.2 = const(str, zero-size array to reduction operation maximum which has no identity)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $46call.3 = call $28load_global.0($const40.2, func=$28load_global.0, args=[Var($const40.2, arraymath.py:571)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 58
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: $58load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $70load_attr.2 = getattr(value=$58load_global.0, attr=nditer)
2023-11-07 09:01:26,214 [DEBUG] on stmt: it = call $70load_attr.2(a, func=$70load_attr.2, args=[Var(a, arraymath.py:569)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $98load_global.5 = global(next: <built-in function next>)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $116call.8 = call $98load_global.5(it, func=$98load_global.5, args=[Var(it, arraymath.py:574)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $126load_method.10 = getattr(value=$116call.8, attr=take)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $const148.11 = const(int, 0)
2023-11-07 09:01:26,214 [DEBUG] on stmt: max_value = call $126load_method.10($const148.11, func=$126load_method.10, args=[Var($const148.11, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $168load_deref.14 = freevar(pre_return_func: <ufunc 'isnan'>)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $176call.16 = call $168load_deref.14(max_value, func=$168load_deref.14, args=[Var(max_value, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: bool186 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $186pred = call bool186($176call.16, func=bool186, args=(Var($176call.16, arraymath.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: branch $186pred, 188, 192
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 188
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: $190return_value.1 = cast(value=max_value)
2023-11-07 09:01:26,214 [DEBUG] on stmt: return $190return_value.1
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 192
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: $194get_iter.1 = getiter(value=it)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $phi196.0 = $194get_iter.1
2023-11-07 09:01:26,214 [DEBUG] on stmt: jump 196
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 196
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: $196for_iter.1 = iternext(value=$phi196.0)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $196for_iter.2 = pair_first(value=$196for_iter.1)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $196for_iter.3 = pair_second(value=$196for_iter.1)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $phi198.1 = $196for_iter.2
2023-11-07 09:01:26,214 [DEBUG] on stmt: branch $196for_iter.3, 198, 300
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 198
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: view = $phi198.1
2023-11-07 09:01:26,214 [DEBUG] on stmt: $202load_method.4 = getattr(value=view, attr=item)
2023-11-07 09:01:26,214 [DEBUG] on stmt: v = call $202load_method.4(func=$202load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $242load_deref.7 = freevar(pre_return_func: <ufunc 'isnan'>)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $250call.9 = call $242load_deref.7(v, func=$242load_deref.7, args=[Var(v, arraymath.py:580)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: bool260 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $260pred = call bool260($250call.9, func=bool260, args=(Var($250call.9, arraymath.py:581),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: branch $260pred, 262, 270
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 262
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: $268return_value.2 = cast(value=v)
2023-11-07 09:01:26,214 [DEBUG] on stmt: return $268return_value.2
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 270
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: $272load_deref.2 = freevar(comparator: <function max_comparator at 0x169bbd940>)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $282call.5 = call $272load_deref.2(v, max_value, func=$272load_deref.2, args=[Var(v, arraymath.py:580), Var(max_value, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: bool292 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,214 [DEBUG] on stmt: $292pred = call bool292($282call.5, func=bool292, args=(Var($282call.5, arraymath.py:583),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,214 [DEBUG] on stmt: branch $292pred, 294, 298
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 294
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: max_value = v
2023-11-07 09:01:26,214 [DEBUG] on stmt: jump 298
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 298
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: jump 196
2023-11-07 09:01:26,214 [DEBUG] ==== SSA block analysis pass on 300
2023-11-07 09:01:26,214 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2825ef510>
2023-11-07 09:01:26,214 [DEBUG] on stmt: $302return_value.1 = cast(value=max_value)
2023-11-07 09:01:26,214 [DEBUG] on stmt: return $302return_value.1
2023-11-07 09:01:26,216 [DEBUG] defs defaultdict(<class 'list'>,
            {'$116call.8': [<numba.core.ir.Assign object at 0x28290d550>],
             '$126load_method.10': [<numba.core.ir.Assign object at 0x28290d950>],
             '$168load_deref.14': [<numba.core.ir.Assign object at 0x28290d990>],
             '$176call.16': [<numba.core.ir.Assign object at 0x28290e550>],
             '$186pred': [<numba.core.ir.Assign object at 0x28290e990>],
             '$190return_value.1': [<numba.core.ir.Assign object at 0x28290ed10>],
             '$194get_iter.1': [<numba.core.ir.Assign object at 0x28290f190>],
             '$196for_iter.1': [<numba.core.ir.Assign object at 0x28290f510>],
             '$196for_iter.2': [<numba.core.ir.Assign object at 0x28290f690>],
             '$196for_iter.3': [<numba.core.ir.Assign object at 0x28290f810>],
             '$202load_method.4': [<numba.core.ir.Assign object at 0x282910050>],
             '$20compare_op.3': [<numba.core.ir.Assign object at 0x28290a510>],
             '$242load_deref.7': [<numba.core.ir.Assign object at 0x282910590>],
             '$250call.9': [<numba.core.ir.Assign object at 0x282910990>],
             '$260pred': [<numba.core.ir.Assign object at 0x282910d50>],
             '$268return_value.2': [<numba.core.ir.Assign object at 0x282911190>],
             '$26pred': [<numba.core.ir.Assign object at 0x282908b10>],
             '$272load_deref.2': [<numba.core.ir.Assign object at 0x2829113d0>],
             '$282call.5': [<numba.core.ir.Assign object at 0x2829119d0>],
             '$28load_global.0': [<numba.core.ir.Assign object at 0x28290bb50>],
             '$292pred': [<numba.core.ir.Assign object at 0x282911e90>],
             '$302return_value.1': [<numba.core.ir.Assign object at 0x282912790>],
             '$46call.3': [<numba.core.ir.Assign object at 0x28290bf50>],
             '$58load_global.0': [<numba.core.ir.Assign object at 0x28290c350>],
             '$70load_attr.2': [<numba.core.ir.Assign object at 0x28290c650>],
             '$8load_attr.1': [<numba.core.ir.Assign object at 0x282909210>],
             '$98load_global.5': [<numba.core.ir.Assign object at 0x28290cfd0>],
             '$const148.11': [<numba.core.ir.Assign object at 0x28290dc10>],
             '$const18.2': [<numba.core.ir.Assign object at 0x28290a150>],
             '$const40.2': [<numba.core.ir.Assign object at 0x28290bd50>],
             '$phi196.0': [<numba.core.ir.Assign object at 0x28290ef90>],
             '$phi198.1': [<numba.core.ir.Assign object at 0x28290f8d0>],
             'a': [<numba.core.ir.Assign object at 0x2827fe450>],
             'bool186': [<numba.core.ir.Assign object at 0x28290e7d0>],
             'bool26': [<numba.core.ir.Assign object at 0x282909b90>],
             'bool260': [<numba.core.ir.Assign object at 0x282910bd0>],
             'bool292': [<numba.core.ir.Assign object at 0x282911c90>],
             'it': [<numba.core.ir.Assign object at 0x28290cb50>],
             'max_value': [<numba.core.ir.Assign object at 0x28290de10>,
                           <numba.core.ir.Assign object at 0x282912210>],
             'v': [<numba.core.ir.Assign object at 0x282910250>],
             'view': [<numba.core.ir.Assign object at 0x28290fb90>]})
2023-11-07 09:01:26,216 [DEBUG] SSA violators {'max_value'}
2023-11-07 09:01:26,216 [DEBUG] Fix SSA violator on var max_value
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $8load_attr.1 = getattr(value=a, attr=size)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $const18.2 = const(int, 0)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $20compare_op.3 = $8load_attr.1 == $const18.2
2023-11-07 09:01:26,216 [DEBUG] on stmt: bool26 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $26pred = call bool26($20compare_op.3, func=bool26, args=(Var($20compare_op.3, arraymath.py:570),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: branch $26pred, 28, 58
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 28
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: $28load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $const40.2 = const(str, zero-size array to reduction operation maximum which has no identity)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $46call.3 = call $28load_global.0($const40.2, func=$28load_global.0, args=[Var($const40.2, arraymath.py:571)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 58
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: $58load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $70load_attr.2 = getattr(value=$58load_global.0, attr=nditer)
2023-11-07 09:01:26,216 [DEBUG] on stmt: it = call $70load_attr.2(a, func=$70load_attr.2, args=[Var(a, arraymath.py:569)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $98load_global.5 = global(next: <built-in function next>)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $116call.8 = call $98load_global.5(it, func=$98load_global.5, args=[Var(it, arraymath.py:574)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $126load_method.10 = getattr(value=$116call.8, attr=take)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $const148.11 = const(int, 0)
2023-11-07 09:01:26,216 [DEBUG] on stmt: max_value = call $126load_method.10($const148.11, func=$126load_method.10, args=[Var($const148.11, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] first assign: max_value
2023-11-07 09:01:26,216 [DEBUG] replaced with: max_value = call $126load_method.10($const148.11, func=$126load_method.10, args=[Var($const148.11, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $168load_deref.14 = freevar(pre_return_func: <ufunc 'isnan'>)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $176call.16 = call $168load_deref.14(max_value, func=$168load_deref.14, args=[Var(max_value, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: bool186 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $186pred = call bool186($176call.16, func=bool186, args=(Var($176call.16, arraymath.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: branch $186pred, 188, 192
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 188
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: $190return_value.1 = cast(value=max_value)
2023-11-07 09:01:26,216 [DEBUG] on stmt: return $190return_value.1
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 192
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: $194get_iter.1 = getiter(value=it)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $phi196.0 = $194get_iter.1
2023-11-07 09:01:26,216 [DEBUG] on stmt: jump 196
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 196
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: $196for_iter.1 = iternext(value=$phi196.0)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $196for_iter.2 = pair_first(value=$196for_iter.1)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $196for_iter.3 = pair_second(value=$196for_iter.1)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $phi198.1 = $196for_iter.2
2023-11-07 09:01:26,216 [DEBUG] on stmt: branch $196for_iter.3, 198, 300
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 198
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: view = $phi198.1
2023-11-07 09:01:26,216 [DEBUG] on stmt: $202load_method.4 = getattr(value=view, attr=item)
2023-11-07 09:01:26,216 [DEBUG] on stmt: v = call $202load_method.4(func=$202load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $242load_deref.7 = freevar(pre_return_func: <ufunc 'isnan'>)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $250call.9 = call $242load_deref.7(v, func=$242load_deref.7, args=[Var(v, arraymath.py:580)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: bool260 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $260pred = call bool260($250call.9, func=bool260, args=(Var($250call.9, arraymath.py:581),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: branch $260pred, 262, 270
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 262
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: $268return_value.2 = cast(value=v)
2023-11-07 09:01:26,216 [DEBUG] on stmt: return $268return_value.2
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: $272load_deref.2 = freevar(comparator: <function max_comparator at 0x169bbd940>)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $282call.5 = call $272load_deref.2(v, max_value, func=$272load_deref.2, args=[Var(v, arraymath.py:580), Var(max_value, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: bool292 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,216 [DEBUG] on stmt: $292pred = call bool292($282call.5, func=bool292, args=(Var($282call.5, arraymath.py:583),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,216 [DEBUG] on stmt: branch $292pred, 294, 298
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 294
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: max_value = v
2023-11-07 09:01:26,216 [DEBUG] replaced with: max_value.1 = v
2023-11-07 09:01:26,216 [DEBUG] on stmt: jump 298
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 298
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: jump 196
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 300
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2827ffb50>
2023-11-07 09:01:26,216 [DEBUG] on stmt: $302return_value.1 = cast(value=max_value)
2023-11-07 09:01:26,216 [DEBUG] on stmt: return $302return_value.1
2023-11-07 09:01:26,216 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x2827fd7d0>],
             294: [<numba.core.ir.Assign object at 0x2827fd010>]})
2023-11-07 09:01:26,216 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,216 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,217 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $8load_attr.1 = getattr(value=a, attr=size)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $const18.2 = const(int, 0)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $20compare_op.3 = $8load_attr.1 == $const18.2
2023-11-07 09:01:26,217 [DEBUG] on stmt: bool26 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $26pred = call bool26($20compare_op.3, func=bool26, args=(Var($20compare_op.3, arraymath.py:570),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] on stmt: branch $26pred, 28, 58
2023-11-07 09:01:26,217 [DEBUG] ==== SSA block rewrite pass on 28
2023-11-07 09:01:26,217 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,217 [DEBUG] on stmt: $28load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $const40.2 = const(str, zero-size array to reduction operation maximum which has no identity)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $46call.3 = call $28load_global.0($const40.2, func=$28load_global.0, args=[Var($const40.2, arraymath.py:571)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] on stmt: <static> raise <class 'ValueError'>('zero-size array to reduction operation maximum which has no identity')
2023-11-07 09:01:26,217 [DEBUG] ==== SSA block rewrite pass on 58
2023-11-07 09:01:26,217 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,217 [DEBUG] on stmt: $58load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $70load_attr.2 = getattr(value=$58load_global.0, attr=nditer)
2023-11-07 09:01:26,217 [DEBUG] on stmt: it = call $70load_attr.2(a, func=$70load_attr.2, args=[Var(a, arraymath.py:569)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $98load_global.5 = global(next: <built-in function next>)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $116call.8 = call $98load_global.5(it, func=$98load_global.5, args=[Var(it, arraymath.py:574)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $126load_method.10 = getattr(value=$116call.8, attr=take)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $const148.11 = const(int, 0)
2023-11-07 09:01:26,217 [DEBUG] on stmt: max_value = call $126load_method.10($const148.11, func=$126load_method.10, args=[Var($const148.11, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $168load_deref.14 = freevar(pre_return_func: <ufunc 'isnan'>)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $176call.16 = call $168load_deref.14(max_value, func=$168load_deref.14, args=[Var(max_value, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] find_def var='max_value' stmt=$176call.16 = call $168load_deref.14(max_value, func=$168load_deref.14, args=[Var(max_value, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] on stmt: bool186 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $186pred = call bool186($176call.16, func=bool186, args=(Var($176call.16, arraymath.py:576),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] on stmt: branch $186pred, 188, 192
2023-11-07 09:01:26,217 [DEBUG] ==== SSA block rewrite pass on 188
2023-11-07 09:01:26,217 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,217 [DEBUG] on stmt: $190return_value.1 = cast(value=max_value)
2023-11-07 09:01:26,217 [DEBUG] find_def var='max_value' stmt=$190return_value.1 = cast(value=max_value)
2023-11-07 09:01:26,217 [DEBUG] find_def_from_top label 188
2023-11-07 09:01:26,217 [DEBUG] idom 58 from label 188
2023-11-07 09:01:26,217 [DEBUG] find_def_from_bottom label 58
2023-11-07 09:01:26,217 [DEBUG] on stmt: return $190return_value.1
2023-11-07 09:01:26,217 [DEBUG] ==== SSA block rewrite pass on 192
2023-11-07 09:01:26,217 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,217 [DEBUG] on stmt: $194get_iter.1 = getiter(value=it)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $phi196.0 = $194get_iter.1
2023-11-07 09:01:26,217 [DEBUG] on stmt: jump 196
2023-11-07 09:01:26,217 [DEBUG] ==== SSA block rewrite pass on 196
2023-11-07 09:01:26,217 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,217 [DEBUG] on stmt: $196for_iter.1 = iternext(value=$phi196.0)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $196for_iter.2 = pair_first(value=$196for_iter.1)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $196for_iter.3 = pair_second(value=$196for_iter.1)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $phi198.1 = $196for_iter.2
2023-11-07 09:01:26,217 [DEBUG] on stmt: branch $196for_iter.3, 198, 300
2023-11-07 09:01:26,217 [DEBUG] ==== SSA block rewrite pass on 198
2023-11-07 09:01:26,217 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,217 [DEBUG] on stmt: view = $phi198.1
2023-11-07 09:01:26,217 [DEBUG] on stmt: $202load_method.4 = getattr(value=view, attr=item)
2023-11-07 09:01:26,217 [DEBUG] on stmt: v = call $202load_method.4(func=$202load_method.4, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $242load_deref.7 = freevar(pre_return_func: <ufunc 'isnan'>)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $250call.9 = call $242load_deref.7(v, func=$242load_deref.7, args=[Var(v, arraymath.py:580)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] on stmt: bool260 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $260pred = call bool260($250call.9, func=bool260, args=(Var($250call.9, arraymath.py:581),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] on stmt: branch $260pred, 262, 270
2023-11-07 09:01:26,217 [DEBUG] ==== SSA block rewrite pass on 262
2023-11-07 09:01:26,217 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,217 [DEBUG] on stmt: $268return_value.2 = cast(value=v)
2023-11-07 09:01:26,217 [DEBUG] on stmt: return $268return_value.2
2023-11-07 09:01:26,217 [DEBUG] ==== SSA block rewrite pass on 270
2023-11-07 09:01:26,217 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,217 [DEBUG] on stmt: $272load_deref.2 = freevar(comparator: <function max_comparator at 0x169bbd940>)
2023-11-07 09:01:26,217 [DEBUG] on stmt: $282call.5 = call $272load_deref.2(v, max_value, func=$272load_deref.2, args=[Var(v, arraymath.py:580), Var(max_value, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] find_def var='max_value' stmt=$282call.5 = call $272load_deref.2(v, max_value, func=$272load_deref.2, args=[Var(v, arraymath.py:580), Var(max_value, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] find_def_from_top label 270
2023-11-07 09:01:26,217 [DEBUG] idom 198 from label 270
2023-11-07 09:01:26,217 [DEBUG] find_def_from_bottom label 198
2023-11-07 09:01:26,217 [DEBUG] find_def_from_top label 198
2023-11-07 09:01:26,217 [DEBUG] idom 196 from label 198
2023-11-07 09:01:26,217 [DEBUG] find_def_from_bottom label 196
2023-11-07 09:01:26,217 [DEBUG] find_def_from_top label 196
2023-11-07 09:01:26,217 [DEBUG] insert phi node max_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 196
2023-11-07 09:01:26,217 [DEBUG] find_def_from_bottom label 192
2023-11-07 09:01:26,217 [DEBUG] find_def_from_top label 192
2023-11-07 09:01:26,217 [DEBUG] idom 58 from label 192
2023-11-07 09:01:26,217 [DEBUG] find_def_from_bottom label 58
2023-11-07 09:01:26,217 [DEBUG] incoming_def max_value = call $126load_method.10($const148.11, func=$126load_method.10, args=[Var($const148.11, arraymath.py:575)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,217 [DEBUG] find_def_from_bottom label 298
2023-11-07 09:01:26,217 [DEBUG] find_def_from_top label 298
2023-11-07 09:01:26,217 [DEBUG] insert phi node max_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 298
2023-11-07 09:01:26,217 [DEBUG] find_def_from_bottom label 294
2023-11-07 09:01:26,217 [DEBUG] incoming_def max_value.1 = v
2023-11-07 09:01:26,217 [DEBUG] find_def_from_bottom label 270
2023-11-07 09:01:26,218 [DEBUG] find_def_from_top label 270
2023-11-07 09:01:26,218 [DEBUG] idom 198 from label 270
2023-11-07 09:01:26,218 [DEBUG] find_def_from_bottom label 198
2023-11-07 09:01:26,218 [DEBUG] find_def_from_top label 198
2023-11-07 09:01:26,218 [DEBUG] idom 196 from label 198
2023-11-07 09:01:26,218 [DEBUG] find_def_from_bottom label 196
2023-11-07 09:01:26,218 [DEBUG] incoming_def max_value.2 = phi(incoming_values=[Var(max_value, arraymath.py:575)], incoming_blocks=[192])
2023-11-07 09:01:26,218 [DEBUG] incoming_def max_value.3 = phi(incoming_values=[Var(max_value.1, arraymath.py:584), Var(max_value.2, arraymath.py:583)], incoming_blocks=[294, 270])
2023-11-07 09:01:26,218 [DEBUG] replaced with: $282call.5 = call $272load_deref.2(v, max_value.2, func=$272load_deref.2, args=[Var(v, arraymath.py:580), Var(max_value.2, arraymath.py:583)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,218 [DEBUG] on stmt: bool292 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,218 [DEBUG] on stmt: $292pred = call bool292($282call.5, func=bool292, args=(Var($282call.5, arraymath.py:583),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,218 [DEBUG] on stmt: branch $292pred, 294, 298
2023-11-07 09:01:26,218 [DEBUG] ==== SSA block rewrite pass on 294
2023-11-07 09:01:26,218 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,218 [DEBUG] on stmt: max_value.1 = v
2023-11-07 09:01:26,218 [DEBUG] on stmt: jump 298
2023-11-07 09:01:26,218 [DEBUG] ==== SSA block rewrite pass on 298
2023-11-07 09:01:26,218 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,218 [DEBUG] on stmt: jump 196
2023-11-07 09:01:26,218 [DEBUG] ==== SSA block rewrite pass on 300
2023-11-07 09:01:26,218 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827fcf90>
2023-11-07 09:01:26,218 [DEBUG] on stmt: $302return_value.1 = cast(value=max_value)
2023-11-07 09:01:26,218 [DEBUG] find_def var='max_value' stmt=$302return_value.1 = cast(value=max_value)
2023-11-07 09:01:26,218 [DEBUG] find_def_from_top label 300
2023-11-07 09:01:26,218 [DEBUG] idom 196 from label 300
2023-11-07 09:01:26,218 [DEBUG] find_def_from_bottom label 196
2023-11-07 09:01:26,218 [DEBUG] replaced with: $302return_value.1 = cast(value=max_value.2)
2023-11-07 09:01:26,218 [DEBUG] on stmt: return $302return_value.1
2023-11-07 09:01:26,220 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4499)
           2	RESUME(arg=0, lineno=4499)
           4	LOAD_FAST(arg=1, lineno=4500)
           6	LOAD_FAST(arg=0, lineno=4500)
           8	LOAD_ATTR(arg=0, lineno=4500)
          18	LOAD_CONST(arg=1, lineno=4500)
          20	BINARY_OP(arg=10, lineno=4500)
          24	COMPARE_OP(arg=4, lineno=4500)
          30	POP_JUMP_FORWARD_IF_TRUE(arg=12, lineno=4500)
          32	LOAD_FAST(arg=1, lineno=4500)
          34	LOAD_FAST(arg=0, lineno=4500)
          36	LOAD_ATTR(arg=0, lineno=4500)
          46	UNARY_NEGATIVE(arg=None, lineno=4500)
          48	COMPARE_OP(arg=0, lineno=4500)
          54	POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=4500)
>         56	LOAD_GLOBAL(arg=3, lineno=4501)
          68	LOAD_CONST(arg=2, lineno=4501)
          70	PRECALL(arg=1, lineno=4501)
          74	CALL(arg=1, lineno=4501)
          84	RAISE_VARARGS(arg=1, lineno=4501)
>         86	LOAD_FAST(arg=0, lineno=4502)
          88	LOAD_METHOD(arg=2, lineno=4502)
         110	PRECALL(arg=0, lineno=4502)
         114	CALL(arg=0, lineno=4502)
         124	LOAD_FAST(arg=1, lineno=4502)
         126	BINARY_SUBSCR(arg=None, lineno=4502)
         136	RETURN_VALUE(arg=None, lineno=4502)
2023-11-07 09:01:26,220 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,220 [DEBUG] stack: []
2023-11-07 09:01:26,220 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,220 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4499)
2023-11-07 09:01:26,221 [DEBUG] stack []
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=4499)
2023-11-07 09:01:26,221 [DEBUG] stack []
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack []
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$indices4.0']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=8, inst=LOAD_ATTR(arg=0, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$indices4.0', '$a6.1']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$indices4.0', '$8load_attr.2']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=20, inst=BINARY_OP(arg=10, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$indices4.0', '$8load_attr.2', '$const18.3']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=24, inst=COMPARE_OP(arg=4, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$indices4.0', '$binop_sub20.4']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=30, inst=POP_JUMP_FORWARD_IF_TRUE(arg=12, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$24compare_op.5']
2023-11-07 09:01:26,221 [DEBUG] end state. edges=[Edge(pc=32, stack=(), blockstack=(), npush=0), Edge(pc=56, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,221 [DEBUG] pending: deque([State(pc_initial=32 nstack_initial=0), State(pc_initial=56 nstack_initial=0)])
2023-11-07 09:01:26,221 [DEBUG] stack: []
2023-11-07 09:01:26,221 [DEBUG] state.pc_initial: State(pc_initial=32 nstack_initial=0)
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=32, inst=LOAD_FAST(arg=1, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack []
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=34, inst=LOAD_FAST(arg=0, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$indices32.0']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=36, inst=LOAD_ATTR(arg=0, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$indices32.0', '$a34.1']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=46, inst=UNARY_NEGATIVE(arg=None, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$indices32.0', '$36load_attr.2']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=48, inst=COMPARE_OP(arg=0, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$indices32.0', '$46unary_negative.3']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=54, inst=POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=4500)
2023-11-07 09:01:26,221 [DEBUG] stack ['$48compare_op.4']
2023-11-07 09:01:26,221 [DEBUG] end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=86, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,221 [DEBUG] pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=56 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2023-11-07 09:01:26,221 [DEBUG] stack: []
2023-11-07 09:01:26,221 [DEBUG] state.pc_initial: State(pc_initial=56 nstack_initial=0)
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=56, inst=LOAD_GLOBAL(arg=3, lineno=4501)
2023-11-07 09:01:26,221 [DEBUG] stack []
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=68, inst=LOAD_CONST(arg=2, lineno=4501)
2023-11-07 09:01:26,221 [DEBUG] stack ['$null$56.1', '$56load_global.0']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=70, inst=PRECALL(arg=1, lineno=4501)
2023-11-07 09:01:26,221 [DEBUG] stack ['$null$56.1', '$56load_global.0', '$const68.2']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=74, inst=CALL(arg=1, lineno=4501)
2023-11-07 09:01:26,221 [DEBUG] stack ['$null$56.1', '$56load_global.0', '$const68.2']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=84, inst=RAISE_VARARGS(arg=1, lineno=4501)
2023-11-07 09:01:26,221 [DEBUG] stack ['$74call.3']
2023-11-07 09:01:26,221 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,221 [DEBUG] pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=86 nstack_initial=0)])
2023-11-07 09:01:26,221 [DEBUG] pending: deque([State(pc_initial=86 nstack_initial=0)])
2023-11-07 09:01:26,221 [DEBUG] stack: []
2023-11-07 09:01:26,221 [DEBUG] state.pc_initial: State(pc_initial=86 nstack_initial=0)
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=86, inst=LOAD_FAST(arg=0, lineno=4502)
2023-11-07 09:01:26,221 [DEBUG] stack []
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=88, inst=LOAD_METHOD(arg=2, lineno=4502)
2023-11-07 09:01:26,221 [DEBUG] stack ['$a86.0']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=110, inst=PRECALL(arg=0, lineno=4502)
2023-11-07 09:01:26,221 [DEBUG] stack ['$null$88.1', '$88load_method.2']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=114, inst=CALL(arg=0, lineno=4502)
2023-11-07 09:01:26,221 [DEBUG] stack ['$null$88.1', '$88load_method.2']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=124, inst=LOAD_FAST(arg=1, lineno=4502)
2023-11-07 09:01:26,221 [DEBUG] stack ['$114call.3']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=126, inst=BINARY_SUBSCR(arg=None, lineno=4502)
2023-11-07 09:01:26,221 [DEBUG] stack ['$114call.3', '$indices124.4']
2023-11-07 09:01:26,221 [DEBUG] dispatch pc=136, inst=RETURN_VALUE(arg=None, lineno=4502)
2023-11-07 09:01:26,221 [DEBUG] stack ['$126binary_subscr.5']
2023-11-07 09:01:26,221 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,221 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,221 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=32 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=86 nstack_initial=0): set()})
2023-11-07 09:01:26,221 [DEBUG] defmap: {}
2023-11-07 09:01:26,221 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,221 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,221 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,221 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,221 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,221 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$indices4.0'}), (6, {'res': '$a6.1'}), (8, {'item': '$a6.1', 'res': '$8load_attr.2'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$const18.3'}), (20, {'op': '-', 'lhs': '$8load_attr.2', 'rhs': '$const18.3', 'res': '$binop_sub20.4'}), (22, {}), (24, {'lhs': '$indices4.0', 'rhs': '$binop_sub20.4', 'res': '$24compare_op.5'}), (26, {}), (28, {}), (30, {'pred': '$24compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={32: (), 56: ()})
2023-11-07 09:01:26,221 [DEBUG] block_infos State(pc_initial=32 nstack_initial=0):
AdaptBlockInfo(insts=((32, {'res': '$indices32.0'}), (34, {'res': '$a34.1'}), (36, {'item': '$a34.1', 'res': '$36load_attr.2'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'value': '$36load_attr.2', 'res': '$46unary_negative.3'}), (48, {'lhs': '$indices32.0', 'rhs': '$46unary_negative.3', 'res': '$48compare_op.4'}), (50, {}), (52, {}), (54, {'pred': '$48compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 86: ()})
2023-11-07 09:01:26,222 [DEBUG] block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'idx': 1, 'res': '$56load_global.0'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {'res': '$const68.2'}), (70, {}), (72, {}), (74, {'func': '$56load_global.0', 'args': ['$const68.2'], 'kw_names': None, 'res': '$74call.3'}), (76, {}), (78, {}), (80, {}), (82, {}), (84, {'exc': '$74call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,222 [DEBUG] block_infos State(pc_initial=86 nstack_initial=0):
AdaptBlockInfo(insts=((86, {'res': '$a86.0'}), (88, {'item': '$a86.0', 'res': '$88load_method.2'}), (90, {}), (92, {}), (94, {}), (96, {}), (98, {}), (100, {}), (102, {}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {}), (114, {'func': '$88load_method.2', 'args': [], 'kw_names': None, 'res': '$114call.3'}), (116, {}), (118, {}), (120, {}), (122, {}), (124, {'res': '$indices124.4'}), (126, {'index': '$indices124.4', 'target': '$114call.3', 'res': '$126binary_subscr.5'}), (128, {}), (130, {}), (132, {}), (134, {}), (136, {'retval': '$126binary_subscr.5', 'castval': '$136return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,222 [DEBUG] label 0:
    a = arg(0, name=a)                       ['a']
    indices = arg(1, name=indices)           ['indices']
    $8load_attr.2 = getattr(value=a, attr=size) ['$8load_attr.2', 'a']
    $const18.3 = const(int, 1)               ['$const18.3']
    $binop_sub20.4 = $8load_attr.2 - $const18.3 ['$8load_attr.2', '$binop_sub20.4', '$const18.3']
    $24compare_op.5 = indices > $binop_sub20.4 ['$24compare_op.5', '$binop_sub20.4', 'indices']
    bool30 = global(bool: <class 'bool'>)    ['bool30']
    $30pred = call bool30($24compare_op.5, func=bool30, args=(Var($24compare_op.5, arrayobj.py:4500),), kws=(), vararg=None, varkwarg=None, target=None) ['$24compare_op.5', '$30pred', 'bool30']
    branch $30pred, 56, 32                   ['$30pred']
label 32:
    $36load_attr.2 = getattr(value=a, attr=size) ['$36load_attr.2', 'a']
    $46unary_negative.3 = unary(fn=<built-in function neg>, value=$36load_attr.2) ['$36load_attr.2', '$46unary_negative.3']
    $48compare_op.4 = indices < $46unary_negative.3 ['$46unary_negative.3', '$48compare_op.4', 'indices']
    bool54 = global(bool: <class 'bool'>)    ['bool54']
    $54pred = call bool54($48compare_op.4, func=bool54, args=(Var($48compare_op.4, arrayobj.py:4500),), kws=(), vararg=None, varkwarg=None, target=None) ['$48compare_op.4', '$54pred', 'bool54']
    branch $54pred, 56, 86                   ['$54pred']
label 56:
    $56load_global.0 = global(IndexError: <class 'IndexError'>) ['$56load_global.0']
    $const68.2 = const(str, Index out of bounds) ['$const68.2']
    $74call.3 = call $56load_global.0($const68.2, func=$56load_global.0, args=[Var($const68.2, arrayobj.py:4501)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_global.0', '$74call.3', '$const68.2']
    raise $74call.3                          ['$74call.3']
label 86:
    $88load_method.2 = getattr(value=a, attr=ravel) ['$88load_method.2', 'a']
    $114call.3 = call $88load_method.2(func=$88load_method.2, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$114call.3', '$88load_method.2']
    $126binary_subscr.5 = getitem(value=$114call.3, index=indices, fn=<built-in function getitem>) ['$114call.3', '$126binary_subscr.5', 'indices']
    $136return_value.6 = cast(value=$126binary_subscr.5) ['$126binary_subscr.5', '$136return_value.6']
    return $136return_value.6                ['$136return_value.6']

2023-11-07 09:01:26,226 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,226 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2827f9e90>
2023-11-07 09:01:26,226 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,226 [DEBUG] on stmt: indices = arg(1, name=indices)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $8load_attr.2 = getattr(value=a, attr=size)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $const18.3 = const(int, 1)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $binop_sub20.4 = $8load_attr.2 - $const18.3
2023-11-07 09:01:26,226 [DEBUG] on stmt: $24compare_op.5 = indices > $binop_sub20.4
2023-11-07 09:01:26,226 [DEBUG] on stmt: bool30 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $30pred = call bool30($24compare_op.5, func=bool30, args=(Var($24compare_op.5, arrayobj.py:4500),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,226 [DEBUG] on stmt: branch $30pred, 56, 32
2023-11-07 09:01:26,226 [DEBUG] ==== SSA block analysis pass on 32
2023-11-07 09:01:26,226 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2827f9e90>
2023-11-07 09:01:26,226 [DEBUG] on stmt: $36load_attr.2 = getattr(value=a, attr=size)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $46unary_negative.3 = unary(fn=<built-in function neg>, value=$36load_attr.2)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $48compare_op.4 = indices < $46unary_negative.3
2023-11-07 09:01:26,226 [DEBUG] on stmt: bool54 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $54pred = call bool54($48compare_op.4, func=bool54, args=(Var($48compare_op.4, arrayobj.py:4500),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,226 [DEBUG] on stmt: branch $54pred, 56, 86
2023-11-07 09:01:26,226 [DEBUG] ==== SSA block analysis pass on 56
2023-11-07 09:01:26,226 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2827f9e90>
2023-11-07 09:01:26,226 [DEBUG] on stmt: $56load_global.0 = global(IndexError: <class 'IndexError'>)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $const68.2 = const(str, Index out of bounds)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $74call.3 = call $56load_global.0($const68.2, func=$56load_global.0, args=[Var($const68.2, arrayobj.py:4501)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,226 [DEBUG] on stmt: <static> raise <class 'IndexError'>('Index out of bounds')
2023-11-07 09:01:26,226 [DEBUG] ==== SSA block analysis pass on 86
2023-11-07 09:01:26,226 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2827f9e90>
2023-11-07 09:01:26,226 [DEBUG] on stmt: $88load_method.2 = getattr(value=a, attr=ravel)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $114call.3 = call $88load_method.2(func=$88load_method.2, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $126binary_subscr.5 = getitem(value=$114call.3, index=indices, fn=<built-in function getitem>)
2023-11-07 09:01:26,226 [DEBUG] on stmt: $136return_value.6 = cast(value=$126binary_subscr.5)
2023-11-07 09:01:26,226 [DEBUG] on stmt: return $136return_value.6
2023-11-07 09:01:26,226 [DEBUG] defs defaultdict(<class 'list'>,
            {'$114call.3': [<numba.core.ir.Assign object at 0x17f53c7d0>],
             '$126binary_subscr.5': [<numba.core.ir.Assign object at 0x2827364d0>],
             '$136return_value.6': [<numba.core.ir.Assign object at 0x282734090>],
             '$24compare_op.5': [<numba.core.ir.Assign object at 0x2827f8e10>],
             '$30pred': [<numba.core.ir.Assign object at 0x2827f8fd0>],
             '$36load_attr.2': [<numba.core.ir.Assign object at 0x2827f8050>],
             '$46unary_negative.3': [<numba.core.ir.Assign object at 0x2827f8910>],
             '$48compare_op.4': [<numba.core.ir.Assign object at 0x2827f86d0>],
             '$54pred': [<numba.core.ir.Assign object at 0x2827fbb90>],
             '$56load_global.0': [<numba.core.ir.Assign object at 0x2827faa50>],
             '$74call.3': [<numba.core.ir.Assign object at 0x2827fb990>],
             '$88load_method.2': [<numba.core.ir.Assign object at 0x2809e33d0>],
             '$8load_attr.2': [<numba.core.ir.Assign object at 0x2827f9610>],
             '$binop_sub20.4': [<numba.core.ir.Assign object at 0x2827f98d0>],
             '$const18.3': [<numba.core.ir.Assign object at 0x2827f9910>],
             '$const68.2': [<numba.core.ir.Assign object at 0x2827fb4d0>],
             'a': [<numba.core.ir.Assign object at 0x2827fa0d0>],
             'bool30': [<numba.core.ir.Assign object at 0x2827f8bd0>],
             'bool54': [<numba.core.ir.Assign object at 0x2827f9290>],
             'indices': [<numba.core.ir.Assign object at 0x2827fa050>]})
2023-11-07 09:01:26,226 [DEBUG] SSA violators set()
2023-11-07 09:01:26,234 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=2110)
           2	RESUME(arg=0, lineno=2110)
           4	LOAD_FAST(arg=0, lineno=2112)
           6	LOAD_METHOD(arg=0, lineno=2112)
          28	LOAD_FAST(arg=0, lineno=2112)
          30	LOAD_ATTR(arg=1, lineno=2112)
          40	PRECALL(arg=1, lineno=2112)
          44	CALL(arg=1, lineno=2112)
          54	RETURN_VALUE(arg=None, lineno=2112)
2023-11-07 09:01:26,234 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,234 [DEBUG] stack: []
2023-11-07 09:01:26,234 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,234 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=2110)
2023-11-07 09:01:26,234 [DEBUG] stack []
2023-11-07 09:01:26,234 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=2110)
2023-11-07 09:01:26,234 [DEBUG] stack []
2023-11-07 09:01:26,234 [DEBUG] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=2112)
2023-11-07 09:01:26,234 [DEBUG] stack []
2023-11-07 09:01:26,234 [DEBUG] dispatch pc=6, inst=LOAD_METHOD(arg=0, lineno=2112)
2023-11-07 09:01:26,234 [DEBUG] stack ['$ary4.0']
2023-11-07 09:01:26,234 [DEBUG] dispatch pc=28, inst=LOAD_FAST(arg=0, lineno=2112)
2023-11-07 09:01:26,234 [DEBUG] stack ['$null$6.1', '$6load_method.2']
2023-11-07 09:01:26,234 [DEBUG] dispatch pc=30, inst=LOAD_ATTR(arg=1, lineno=2112)
2023-11-07 09:01:26,234 [DEBUG] stack ['$null$6.1', '$6load_method.2', '$ary28.3']
2023-11-07 09:01:26,234 [DEBUG] dispatch pc=40, inst=PRECALL(arg=1, lineno=2112)
2023-11-07 09:01:26,234 [DEBUG] stack ['$null$6.1', '$6load_method.2', '$30load_attr.4']
2023-11-07 09:01:26,235 [DEBUG] dispatch pc=44, inst=CALL(arg=1, lineno=2112)
2023-11-07 09:01:26,235 [DEBUG] stack ['$null$6.1', '$6load_method.2', '$30load_attr.4']
2023-11-07 09:01:26,235 [DEBUG] dispatch pc=54, inst=RETURN_VALUE(arg=None, lineno=2112)
2023-11-07 09:01:26,235 [DEBUG] stack ['$44call.5']
2023-11-07 09:01:26,235 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,235 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,235 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,235 [DEBUG] defmap: {}
2023-11-07 09:01:26,235 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,235 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,235 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,235 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,235 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,235 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$ary4.0'}), (6, {'item': '$ary4.0', 'res': '$6load_method.2'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {'res': '$ary28.3'}), (30, {'item': '$ary28.3', 'res': '$30load_attr.4'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {'func': '$6load_method.2', 'args': ['$30load_attr.4'], 'kw_names': None, 'res': '$44call.5'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {'retval': '$44call.5', 'castval': '$54return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,235 [DEBUG] label 0:
    ary = arg(0, name=ary)                   ['ary']
    $6load_method.2 = getattr(value=ary, attr=reshape) ['$6load_method.2', 'ary']
    $30load_attr.4 = getattr(value=ary, attr=size) ['$30load_attr.4', 'ary']
    $44call.5 = call $6load_method.2($30load_attr.4, func=$6load_method.2, args=[Var($30load_attr.4, arrayobj.py:2112)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_attr.4', '$44call.5', '$6load_method.2']
    $54return_value.6 = cast(value=$44call.5) ['$44call.5', '$54return_value.6']
    return $54return_value.6                 ['$54return_value.6']

2023-11-07 09:01:26,237 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,237 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x282571f10>
2023-11-07 09:01:26,237 [DEBUG] on stmt: ary = arg(0, name=ary)
2023-11-07 09:01:26,237 [DEBUG] on stmt: $6load_method.2 = getattr(value=ary, attr=reshape)
2023-11-07 09:01:26,237 [DEBUG] on stmt: $30load_attr.4 = getattr(value=ary, attr=size)
2023-11-07 09:01:26,237 [DEBUG] on stmt: $44call.5 = call $6load_method.2($30load_attr.4, func=$6load_method.2, args=[Var($30load_attr.4, arrayobj.py:2112)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,237 [DEBUG] on stmt: $54return_value.6 = cast(value=$44call.5)
2023-11-07 09:01:26,237 [DEBUG] on stmt: return $54return_value.6
2023-11-07 09:01:26,237 [DEBUG] defs defaultdict(<class 'list'>,
            {'$30load_attr.4': [<numba.core.ir.Assign object at 0x282571510>],
             '$44call.5': [<numba.core.ir.Assign object at 0x282572d10>],
             '$54return_value.6': [<numba.core.ir.Assign object at 0x282571450>],
             '$6load_method.2': [<numba.core.ir.Assign object at 0x282572a50>],
             'ary': [<numba.core.ir.Assign object at 0x282573bd0>]})
2023-11-07 09:01:26,237 [DEBUG] SSA violators set()
2023-11-07 09:01:26,240 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=1973)
           2	RESUME(arg=0, lineno=1973)
           4	LOAD_CONST(arg=1, lineno=1974)
           6	STORE_FAST(arg=2, lineno=1974)
           8	LOAD_CONST(arg=2, lineno=1975)
          10	STORE_FAST(arg=3, lineno=1975)
          12	LOAD_GLOBAL(arg=1, lineno=1976)
          24	LOAD_FAST(arg=1, lineno=1976)
          26	PRECALL(arg=1, lineno=1976)
          30	CALL(arg=1, lineno=1976)
          40	GET_ITER(arg=None, lineno=1976)
>         42	FOR_ITER(arg=24, lineno=1976)
          44	UNPACK_SEQUENCE(arg=2, lineno=1976)
          48	STORE_FAST(arg=4, lineno=1976)
          50	STORE_FAST(arg=5, lineno=1976)
          52	LOAD_FAST(arg=5, lineno=1977)
          54	LOAD_CONST(arg=1, lineno=1977)
          56	COMPARE_OP(arg=0, lineno=1977)
          62	POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=1977)
          64	LOAD_FAST(arg=2, lineno=1978)
          66	LOAD_CONST(arg=2, lineno=1978)
          68	BINARY_OP(arg=13, lineno=1978)
          72	STORE_FAST(arg=2, lineno=1978)
          74	LOAD_FAST(arg=4, lineno=1979)
          76	STORE_FAST(arg=6, lineno=1979)
          78	JUMP_BACKWARD(arg=19, lineno=1979)
>         80	LOAD_FAST(arg=3, lineno=1981)
          82	LOAD_FAST(arg=5, lineno=1981)
          84	BINARY_OP(arg=18, lineno=1981)
          88	STORE_FAST(arg=3, lineno=1981)
          90	JUMP_BACKWARD(arg=25, lineno=1981)
>         92	LOAD_FAST(arg=2, lineno=1983)
          94	LOAD_CONST(arg=1, lineno=1983)
          96	COMPARE_OP(arg=2, lineno=1983)
         102	POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=1983)
         104	LOAD_FAST(arg=0, lineno=1984)
         106	LOAD_FAST(arg=3, lineno=1984)
         108	COMPARE_OP(arg=3, lineno=1984)
         114	POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=1984)
         116	LOAD_GLOBAL(arg=3, lineno=1985)
         128	LOAD_CONST(arg=3, lineno=1985)
         130	PRECALL(arg=1, lineno=1985)
         134	CALL(arg=1, lineno=1985)
         144	RAISE_VARARGS(arg=1, lineno=1985)
>        146	LOAD_CONST(arg=0, lineno=1984)
         148	RETURN_VALUE(arg=None, lineno=1984)
>        150	LOAD_FAST(arg=2, lineno=1987)
         152	LOAD_CONST(arg=2, lineno=1987)
         154	COMPARE_OP(arg=2, lineno=1987)
         160	POP_JUMP_FORWARD_IF_FALSE(arg=53, lineno=1987)
         162	LOAD_FAST(arg=3, lineno=1989)
         164	LOAD_CONST(arg=1, lineno=1989)
         166	COMPARE_OP(arg=2, lineno=1989)
         172	POP_JUMP_FORWARD_IF_FALSE(arg=9, lineno=1989)
         174	LOAD_CONST(arg=1, lineno=1990)
         176	STORE_FAST(arg=7, lineno=1990)
         178	LOAD_FAST(arg=0, lineno=1991)
         180	LOAD_CONST(arg=1, lineno=1991)
         182	COMPARE_OP(arg=2, lineno=1991)
         188	STORE_FAST(arg=8, lineno=1991)
         190	JUMP_FORWARD(arg=14, lineno=1991)
>        192	LOAD_FAST(arg=0, lineno=1993)
         194	LOAD_FAST(arg=3, lineno=1993)
         196	BINARY_OP(arg=2, lineno=1993)
         200	STORE_FAST(arg=7, lineno=1993)
         202	LOAD_FAST(arg=0, lineno=1994)
         204	LOAD_FAST(arg=3, lineno=1994)
         206	BINARY_OP(arg=6, lineno=1994)
         210	LOAD_CONST(arg=1, lineno=1994)
         212	COMPARE_OP(arg=2, lineno=1994)
         218	STORE_FAST(arg=8, lineno=1994)
>        220	LOAD_FAST(arg=8, lineno=1995)
         222	POP_JUMP_FORWARD_IF_TRUE(arg=15, lineno=1995)
         224	LOAD_GLOBAL(arg=3, lineno=1996)
         236	LOAD_CONST(arg=3, lineno=1996)
         238	PRECALL(arg=1, lineno=1996)
         242	CALL(arg=1, lineno=1996)
         252	RAISE_VARARGS(arg=1, lineno=1996)
>        254	LOAD_FAST(arg=7, lineno=1997)
         256	LOAD_FAST(arg=1, lineno=1997)
         258	LOAD_FAST(arg=6, lineno=1997)
         260	STORE_SUBSCR(arg=None, lineno=1997)
         264	LOAD_CONST(arg=0, lineno=1997)
         266	RETURN_VALUE(arg=None, lineno=1997)
>        268	LOAD_GLOBAL(arg=3, lineno=2000)
         280	LOAD_CONST(arg=4, lineno=2000)
         282	PRECALL(arg=1, lineno=2000)
         286	CALL(arg=1, lineno=2000)
         296	RAISE_VARARGS(arg=1, lineno=2000)
2023-11-07 09:01:26,240 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,240 [DEBUG] stack: []
2023-11-07 09:01:26,240 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=1973)
2023-11-07 09:01:26,240 [DEBUG] stack []
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=1973)
2023-11-07 09:01:26,240 [DEBUG] stack []
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=1974)
2023-11-07 09:01:26,240 [DEBUG] stack []
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=6, inst=STORE_FAST(arg=2, lineno=1974)
2023-11-07 09:01:26,240 [DEBUG] stack ['$const4.0']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=8, inst=LOAD_CONST(arg=2, lineno=1975)
2023-11-07 09:01:26,240 [DEBUG] stack []
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=10, inst=STORE_FAST(arg=3, lineno=1975)
2023-11-07 09:01:26,240 [DEBUG] stack ['$const8.1']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=1976)
2023-11-07 09:01:26,240 [DEBUG] stack []
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=24, inst=LOAD_FAST(arg=1, lineno=1976)
2023-11-07 09:01:26,240 [DEBUG] stack ['$null$12.3', '$12load_global.2']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=26, inst=PRECALL(arg=1, lineno=1976)
2023-11-07 09:01:26,240 [DEBUG] stack ['$null$12.3', '$12load_global.2', '$shape24.4']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=30, inst=CALL(arg=1, lineno=1976)
2023-11-07 09:01:26,240 [DEBUG] stack ['$null$12.3', '$12load_global.2', '$shape24.4']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=40, inst=GET_ITER(arg=None, lineno=1976)
2023-11-07 09:01:26,240 [DEBUG] stack ['$30call.5']
2023-11-07 09:01:26,240 [DEBUG] end state. edges=[Edge(pc=42, stack=('$40get_iter.6',), blockstack=(), npush=0)]
2023-11-07 09:01:26,240 [DEBUG] pending: deque([State(pc_initial=42 nstack_initial=1)])
2023-11-07 09:01:26,240 [DEBUG] stack: ['$phi42.0']
2023-11-07 09:01:26,240 [DEBUG] state.pc_initial: State(pc_initial=42 nstack_initial=1)
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=42, inst=FOR_ITER(arg=24, lineno=1976)
2023-11-07 09:01:26,240 [DEBUG] stack ['$phi42.0']
2023-11-07 09:01:26,240 [DEBUG] end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=44, stack=('$phi42.0', '$42for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,240 [DEBUG] pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=44 nstack_initial=2)])
2023-11-07 09:01:26,240 [DEBUG] stack: []
2023-11-07 09:01:26,240 [DEBUG] state.pc_initial: State(pc_initial=92 nstack_initial=0)
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=92, inst=LOAD_FAST(arg=2, lineno=1983)
2023-11-07 09:01:26,240 [DEBUG] stack []
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=94, inst=LOAD_CONST(arg=1, lineno=1983)
2023-11-07 09:01:26,240 [DEBUG] stack ['$num_neg_value92.0']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=96, inst=COMPARE_OP(arg=2, lineno=1983)
2023-11-07 09:01:26,240 [DEBUG] stack ['$num_neg_value92.0', '$const94.1']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=102, inst=POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=1983)
2023-11-07 09:01:26,240 [DEBUG] stack ['$96compare_op.2']
2023-11-07 09:01:26,240 [DEBUG] end state. edges=[Edge(pc=104, stack=(), blockstack=(), npush=0), Edge(pc=150, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,240 [DEBUG] pending: deque([State(pc_initial=44 nstack_initial=2), State(pc_initial=104 nstack_initial=0), State(pc_initial=150 nstack_initial=0)])
2023-11-07 09:01:26,240 [DEBUG] stack: ['$phi44.0', '$phi44.1']
2023-11-07 09:01:26,240 [DEBUG] state.pc_initial: State(pc_initial=44 nstack_initial=2)
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=44, inst=UNPACK_SEQUENCE(arg=2, lineno=1976)
2023-11-07 09:01:26,240 [DEBUG] stack ['$phi44.0', '$phi44.1']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=48, inst=STORE_FAST(arg=4, lineno=1976)
2023-11-07 09:01:26,240 [DEBUG] stack ['$phi44.0', '$44unpack_sequence.3', '$44unpack_sequence.2']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=50, inst=STORE_FAST(arg=5, lineno=1976)
2023-11-07 09:01:26,240 [DEBUG] stack ['$phi44.0', '$44unpack_sequence.3']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=52, inst=LOAD_FAST(arg=5, lineno=1977)
2023-11-07 09:01:26,240 [DEBUG] stack ['$phi44.0']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=54, inst=LOAD_CONST(arg=1, lineno=1977)
2023-11-07 09:01:26,240 [DEBUG] stack ['$phi44.0', '$s52.5']
2023-11-07 09:01:26,240 [DEBUG] dispatch pc=56, inst=COMPARE_OP(arg=0, lineno=1977)
2023-11-07 09:01:26,240 [DEBUG] stack ['$phi44.0', '$s52.5', '$const54.6']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=62, inst=POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=1977)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi44.0', '$56compare_op.7']
2023-11-07 09:01:26,241 [DEBUG] end state. edges=[Edge(pc=64, stack=('$phi44.0',), blockstack=(), npush=0), Edge(pc=80, stack=('$phi44.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,241 [DEBUG] pending: deque([State(pc_initial=104 nstack_initial=0), State(pc_initial=150 nstack_initial=0), State(pc_initial=64 nstack_initial=1), State(pc_initial=80 nstack_initial=1)])
2023-11-07 09:01:26,241 [DEBUG] stack: []
2023-11-07 09:01:26,241 [DEBUG] state.pc_initial: State(pc_initial=104 nstack_initial=0)
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=1984)
2023-11-07 09:01:26,241 [DEBUG] stack []
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=106, inst=LOAD_FAST(arg=3, lineno=1984)
2023-11-07 09:01:26,241 [DEBUG] stack ['$origsize104.0']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=108, inst=COMPARE_OP(arg=3, lineno=1984)
2023-11-07 09:01:26,241 [DEBUG] stack ['$origsize104.0', '$known_size106.1']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=114, inst=POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=1984)
2023-11-07 09:01:26,241 [DEBUG] stack ['$108compare_op.2']
2023-11-07 09:01:26,241 [DEBUG] end state. edges=[Edge(pc=116, stack=(), blockstack=(), npush=0), Edge(pc=146, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,241 [DEBUG] pending: deque([State(pc_initial=150 nstack_initial=0), State(pc_initial=64 nstack_initial=1), State(pc_initial=80 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0)])
2023-11-07 09:01:26,241 [DEBUG] stack: []
2023-11-07 09:01:26,241 [DEBUG] state.pc_initial: State(pc_initial=150 nstack_initial=0)
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=150, inst=LOAD_FAST(arg=2, lineno=1987)
2023-11-07 09:01:26,241 [DEBUG] stack []
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=152, inst=LOAD_CONST(arg=2, lineno=1987)
2023-11-07 09:01:26,241 [DEBUG] stack ['$num_neg_value150.0']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=154, inst=COMPARE_OP(arg=2, lineno=1987)
2023-11-07 09:01:26,241 [DEBUG] stack ['$num_neg_value150.0', '$const152.1']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=160, inst=POP_JUMP_FORWARD_IF_FALSE(arg=53, lineno=1987)
2023-11-07 09:01:26,241 [DEBUG] stack ['$154compare_op.2']
2023-11-07 09:01:26,241 [DEBUG] end state. edges=[Edge(pc=162, stack=(), blockstack=(), npush=0), Edge(pc=268, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,241 [DEBUG] pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=80 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0)])
2023-11-07 09:01:26,241 [DEBUG] stack: ['$phi64.0']
2023-11-07 09:01:26,241 [DEBUG] state.pc_initial: State(pc_initial=64 nstack_initial=1)
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=1978)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi64.0']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=66, inst=LOAD_CONST(arg=2, lineno=1978)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi64.0', '$num_neg_value64.1']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=68, inst=BINARY_OP(arg=13, lineno=1978)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi64.0', '$num_neg_value64.1', '$const66.2']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=72, inst=STORE_FAST(arg=2, lineno=1978)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi64.0', '$binop_iadd68.3']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=74, inst=LOAD_FAST(arg=4, lineno=1979)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi64.0']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=76, inst=STORE_FAST(arg=6, lineno=1979)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi64.0', '$ax74.4']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=78, inst=JUMP_BACKWARD(arg=19, lineno=1979)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi64.0']
2023-11-07 09:01:26,241 [DEBUG] end state. edges=[Edge(pc=42, stack=('$phi64.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,241 [DEBUG] pending: deque([State(pc_initial=80 nstack_initial=1), State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1)])
2023-11-07 09:01:26,241 [DEBUG] stack: ['$phi80.0']
2023-11-07 09:01:26,241 [DEBUG] state.pc_initial: State(pc_initial=80 nstack_initial=1)
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=80, inst=LOAD_FAST(arg=3, lineno=1981)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi80.0']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=82, inst=LOAD_FAST(arg=5, lineno=1981)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi80.0', '$known_size80.1']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=84, inst=BINARY_OP(arg=18, lineno=1981)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi80.0', '$known_size80.1', '$s82.2']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=88, inst=STORE_FAST(arg=3, lineno=1981)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi80.0', '$binop_imul84.3']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=90, inst=JUMP_BACKWARD(arg=25, lineno=1981)
2023-11-07 09:01:26,241 [DEBUG] stack ['$phi80.0']
2023-11-07 09:01:26,241 [DEBUG] end state. edges=[Edge(pc=42, stack=('$phi80.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,241 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1)])
2023-11-07 09:01:26,241 [DEBUG] stack: []
2023-11-07 09:01:26,241 [DEBUG] state.pc_initial: State(pc_initial=116 nstack_initial=0)
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=116, inst=LOAD_GLOBAL(arg=3, lineno=1985)
2023-11-07 09:01:26,241 [DEBUG] stack []
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=128, inst=LOAD_CONST(arg=3, lineno=1985)
2023-11-07 09:01:26,241 [DEBUG] stack ['$null$116.1', '$116load_global.0']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=130, inst=PRECALL(arg=1, lineno=1985)
2023-11-07 09:01:26,241 [DEBUG] stack ['$null$116.1', '$116load_global.0', '$const128.2']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=134, inst=CALL(arg=1, lineno=1985)
2023-11-07 09:01:26,241 [DEBUG] stack ['$null$116.1', '$116load_global.0', '$const128.2']
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=144, inst=RAISE_VARARGS(arg=1, lineno=1985)
2023-11-07 09:01:26,241 [DEBUG] stack ['$134call.3']
2023-11-07 09:01:26,241 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,241 [DEBUG] pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1)])
2023-11-07 09:01:26,241 [DEBUG] stack: []
2023-11-07 09:01:26,241 [DEBUG] state.pc_initial: State(pc_initial=146 nstack_initial=0)
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=146, inst=LOAD_CONST(arg=0, lineno=1984)
2023-11-07 09:01:26,241 [DEBUG] stack []
2023-11-07 09:01:26,241 [DEBUG] dispatch pc=148, inst=RETURN_VALUE(arg=None, lineno=1984)
2023-11-07 09:01:26,241 [DEBUG] stack ['$const146.0']
2023-11-07 09:01:26,241 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,242 [DEBUG] pending: deque([State(pc_initial=162 nstack_initial=0), State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1)])
2023-11-07 09:01:26,242 [DEBUG] stack: []
2023-11-07 09:01:26,242 [DEBUG] state.pc_initial: State(pc_initial=162 nstack_initial=0)
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=162, inst=LOAD_FAST(arg=3, lineno=1989)
2023-11-07 09:01:26,242 [DEBUG] stack []
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=164, inst=LOAD_CONST(arg=1, lineno=1989)
2023-11-07 09:01:26,242 [DEBUG] stack ['$known_size162.0']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=166, inst=COMPARE_OP(arg=2, lineno=1989)
2023-11-07 09:01:26,242 [DEBUG] stack ['$known_size162.0', '$const164.1']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=172, inst=POP_JUMP_FORWARD_IF_FALSE(arg=9, lineno=1989)
2023-11-07 09:01:26,242 [DEBUG] stack ['$166compare_op.2']
2023-11-07 09:01:26,242 [DEBUG] end state. edges=[Edge(pc=174, stack=(), blockstack=(), npush=0), Edge(pc=192, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,242 [DEBUG] pending: deque([State(pc_initial=268 nstack_initial=0), State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1), State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2023-11-07 09:01:26,242 [DEBUG] stack: []
2023-11-07 09:01:26,242 [DEBUG] state.pc_initial: State(pc_initial=268 nstack_initial=0)
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=268, inst=LOAD_GLOBAL(arg=3, lineno=2000)
2023-11-07 09:01:26,242 [DEBUG] stack []
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=280, inst=LOAD_CONST(arg=4, lineno=2000)
2023-11-07 09:01:26,242 [DEBUG] stack ['$null$268.1', '$268load_global.0']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=282, inst=PRECALL(arg=1, lineno=2000)
2023-11-07 09:01:26,242 [DEBUG] stack ['$null$268.1', '$268load_global.0', '$const280.2']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=286, inst=CALL(arg=1, lineno=2000)
2023-11-07 09:01:26,242 [DEBUG] stack ['$null$268.1', '$268load_global.0', '$const280.2']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=296, inst=RAISE_VARARGS(arg=1, lineno=2000)
2023-11-07 09:01:26,242 [DEBUG] stack ['$286call.3']
2023-11-07 09:01:26,242 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,242 [DEBUG] pending: deque([State(pc_initial=42 nstack_initial=1), State(pc_initial=42 nstack_initial=1), State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2023-11-07 09:01:26,242 [DEBUG] pending: deque([State(pc_initial=42 nstack_initial=1), State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2023-11-07 09:01:26,242 [DEBUG] pending: deque([State(pc_initial=174 nstack_initial=0), State(pc_initial=192 nstack_initial=0)])
2023-11-07 09:01:26,242 [DEBUG] stack: []
2023-11-07 09:01:26,242 [DEBUG] state.pc_initial: State(pc_initial=174 nstack_initial=0)
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=174, inst=LOAD_CONST(arg=1, lineno=1990)
2023-11-07 09:01:26,242 [DEBUG] stack []
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=176, inst=STORE_FAST(arg=7, lineno=1990)
2023-11-07 09:01:26,242 [DEBUG] stack ['$const174.0']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=178, inst=LOAD_FAST(arg=0, lineno=1991)
2023-11-07 09:01:26,242 [DEBUG] stack []
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=180, inst=LOAD_CONST(arg=1, lineno=1991)
2023-11-07 09:01:26,242 [DEBUG] stack ['$origsize178.1']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=182, inst=COMPARE_OP(arg=2, lineno=1991)
2023-11-07 09:01:26,242 [DEBUG] stack ['$origsize178.1', '$const180.2']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=188, inst=STORE_FAST(arg=8, lineno=1991)
2023-11-07 09:01:26,242 [DEBUG] stack ['$182compare_op.3']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=190, inst=JUMP_FORWARD(arg=14, lineno=1991)
2023-11-07 09:01:26,242 [DEBUG] stack []
2023-11-07 09:01:26,242 [DEBUG] end state. edges=[Edge(pc=220, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,242 [DEBUG] pending: deque([State(pc_initial=192 nstack_initial=0), State(pc_initial=220 nstack_initial=0)])
2023-11-07 09:01:26,242 [DEBUG] stack: []
2023-11-07 09:01:26,242 [DEBUG] state.pc_initial: State(pc_initial=192 nstack_initial=0)
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=192, inst=LOAD_FAST(arg=0, lineno=1993)
2023-11-07 09:01:26,242 [DEBUG] stack []
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=194, inst=LOAD_FAST(arg=3, lineno=1993)
2023-11-07 09:01:26,242 [DEBUG] stack ['$origsize192.0']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=196, inst=BINARY_OP(arg=2, lineno=1993)
2023-11-07 09:01:26,242 [DEBUG] stack ['$origsize192.0', '$known_size194.1']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=200, inst=STORE_FAST(arg=7, lineno=1993)
2023-11-07 09:01:26,242 [DEBUG] stack ['$binop_floordiv196.2']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=202, inst=LOAD_FAST(arg=0, lineno=1994)
2023-11-07 09:01:26,242 [DEBUG] stack []
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=204, inst=LOAD_FAST(arg=3, lineno=1994)
2023-11-07 09:01:26,242 [DEBUG] stack ['$origsize202.3']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=206, inst=BINARY_OP(arg=6, lineno=1994)
2023-11-07 09:01:26,242 [DEBUG] stack ['$origsize202.3', '$known_size204.4']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=210, inst=LOAD_CONST(arg=1, lineno=1994)
2023-11-07 09:01:26,242 [DEBUG] stack ['$binop_mod206.5']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=212, inst=COMPARE_OP(arg=2, lineno=1994)
2023-11-07 09:01:26,242 [DEBUG] stack ['$binop_mod206.5', '$const210.6']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=218, inst=STORE_FAST(arg=8, lineno=1994)
2023-11-07 09:01:26,242 [DEBUG] stack ['$212compare_op.7']
2023-11-07 09:01:26,242 [DEBUG] end state. edges=[Edge(pc=220, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,242 [DEBUG] pending: deque([State(pc_initial=220 nstack_initial=0), State(pc_initial=220 nstack_initial=0)])
2023-11-07 09:01:26,242 [DEBUG] stack: []
2023-11-07 09:01:26,242 [DEBUG] state.pc_initial: State(pc_initial=220 nstack_initial=0)
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=220, inst=LOAD_FAST(arg=8, lineno=1995)
2023-11-07 09:01:26,242 [DEBUG] stack []
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=222, inst=POP_JUMP_FORWARD_IF_TRUE(arg=15, lineno=1995)
2023-11-07 09:01:26,242 [DEBUG] stack ['$ok220.0']
2023-11-07 09:01:26,242 [DEBUG] end state. edges=[Edge(pc=224, stack=(), blockstack=(), npush=0), Edge(pc=254, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,242 [DEBUG] pending: deque([State(pc_initial=220 nstack_initial=0), State(pc_initial=224 nstack_initial=0), State(pc_initial=254 nstack_initial=0)])
2023-11-07 09:01:26,242 [DEBUG] pending: deque([State(pc_initial=224 nstack_initial=0), State(pc_initial=254 nstack_initial=0)])
2023-11-07 09:01:26,242 [DEBUG] stack: []
2023-11-07 09:01:26,242 [DEBUG] state.pc_initial: State(pc_initial=224 nstack_initial=0)
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=224, inst=LOAD_GLOBAL(arg=3, lineno=1996)
2023-11-07 09:01:26,242 [DEBUG] stack []
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=236, inst=LOAD_CONST(arg=3, lineno=1996)
2023-11-07 09:01:26,242 [DEBUG] stack ['$null$224.1', '$224load_global.0']
2023-11-07 09:01:26,242 [DEBUG] dispatch pc=238, inst=PRECALL(arg=1, lineno=1996)
2023-11-07 09:01:26,242 [DEBUG] stack ['$null$224.1', '$224load_global.0', '$const236.2']
2023-11-07 09:01:26,243 [DEBUG] dispatch pc=242, inst=CALL(arg=1, lineno=1996)
2023-11-07 09:01:26,243 [DEBUG] stack ['$null$224.1', '$224load_global.0', '$const236.2']
2023-11-07 09:01:26,243 [DEBUG] dispatch pc=252, inst=RAISE_VARARGS(arg=1, lineno=1996)
2023-11-07 09:01:26,243 [DEBUG] stack ['$242call.3']
2023-11-07 09:01:26,243 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,243 [DEBUG] pending: deque([State(pc_initial=254 nstack_initial=0)])
2023-11-07 09:01:26,243 [DEBUG] stack: []
2023-11-07 09:01:26,243 [DEBUG] state.pc_initial: State(pc_initial=254 nstack_initial=0)
2023-11-07 09:01:26,243 [DEBUG] dispatch pc=254, inst=LOAD_FAST(arg=7, lineno=1997)
2023-11-07 09:01:26,243 [DEBUG] stack []
2023-11-07 09:01:26,243 [DEBUG] dispatch pc=256, inst=LOAD_FAST(arg=1, lineno=1997)
2023-11-07 09:01:26,243 [DEBUG] stack ['$inferred254.0']
2023-11-07 09:01:26,243 [DEBUG] dispatch pc=258, inst=LOAD_FAST(arg=6, lineno=1997)
2023-11-07 09:01:26,243 [DEBUG] stack ['$inferred254.0', '$shape256.1']
2023-11-07 09:01:26,243 [DEBUG] dispatch pc=260, inst=STORE_SUBSCR(arg=None, lineno=1997)
2023-11-07 09:01:26,243 [DEBUG] stack ['$inferred254.0', '$shape256.1', '$neg_ax258.2']
2023-11-07 09:01:26,243 [DEBUG] dispatch pc=264, inst=LOAD_CONST(arg=0, lineno=1997)
2023-11-07 09:01:26,243 [DEBUG] stack []
2023-11-07 09:01:26,243 [DEBUG] dispatch pc=266, inst=RETURN_VALUE(arg=None, lineno=1997)
2023-11-07 09:01:26,243 [DEBUG] stack ['$const264.3']
2023-11-07 09:01:26,243 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,243 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,243 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=42 nstack_initial=1): {'$phi42.0'},
             State(pc_initial=44 nstack_initial=2): {'$phi44.1'},
             State(pc_initial=64 nstack_initial=1): set(),
             State(pc_initial=80 nstack_initial=1): set(),
             State(pc_initial=92 nstack_initial=0): set(),
             State(pc_initial=104 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=0): set(),
             State(pc_initial=146 nstack_initial=0): set(),
             State(pc_initial=150 nstack_initial=0): set(),
             State(pc_initial=162 nstack_initial=0): set(),
             State(pc_initial=174 nstack_initial=0): set(),
             State(pc_initial=192 nstack_initial=0): set(),
             State(pc_initial=220 nstack_initial=0): set(),
             State(pc_initial=224 nstack_initial=0): set(),
             State(pc_initial=254 nstack_initial=0): set(),
             State(pc_initial=268 nstack_initial=0): set()})
2023-11-07 09:01:26,243 [DEBUG] defmap: {'$phi42.0': State(pc_initial=0 nstack_initial=0),
 '$phi44.1': State(pc_initial=42 nstack_initial=1)}
2023-11-07 09:01:26,243 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi64.0', State(pc_initial=64 nstack_initial=1)),
                          ('$phi80.0', State(pc_initial=80 nstack_initial=1))},
             '$phi44.0': {('$phi42.0', State(pc_initial=42 nstack_initial=1))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi80.0': {('$phi44.0', State(pc_initial=44 nstack_initial=2))}})
2023-11-07 09:01:26,243 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi44.0', State(pc_initial=44 nstack_initial=2))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2023-11-07 09:01:26,243 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2023-11-07 09:01:26,243 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi42.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi44.1': {('$42for_iter.2',
                           State(pc_initial=42 nstack_initial=1))},
             '$phi64.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi80.0': {('$40get_iter.6',
                           State(pc_initial=0 nstack_initial=0))}})
2023-11-07 09:01:26,243 [DEBUG] keep phismap: {'$phi42.0': {('$40get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi44.1': {('$42for_iter.2', State(pc_initial=42 nstack_initial=1))}}
2023-11-07 09:01:26,243 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi42.0': '$40get_iter.6'},
             State(pc_initial=42 nstack_initial=1): {'$phi44.1': '$42for_iter.2'}})
2023-11-07 09:01:26,243 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$const4.0'}), (6, {'value': '$const4.0'}), (8, {'res': '$const8.1'}), (10, {'value': '$const8.1'}), (12, {'idx': 0, 'res': '$12load_global.2'}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {}), (24, {'res': '$shape24.4'}), (26, {}), (28, {}), (30, {'func': '$12load_global.2', 'args': ['$shape24.4'], 'kw_names': None, 'res': '$30call.5'}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {'value': '$30call.5', 'res': '$40get_iter.6'})), outgoing_phis={'$phi42.0': '$40get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$40get_iter.6',)})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=42 nstack_initial=1):
AdaptBlockInfo(insts=((42, {'iterator': '$phi42.0', 'pair': '$42for_iter.1', 'indval': '$42for_iter.2', 'pred': '$42for_iter.3'}),), outgoing_phis={'$phi44.1': '$42for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 44: ('$phi42.0', '$42for_iter.2')})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=44 nstack_initial=2):
AdaptBlockInfo(insts=((44, {'iterable': '$phi44.1', 'stores': ['$44unpack_sequence.2', '$44unpack_sequence.3'], 'tupleobj': '$44unpack_sequence.4'}), (46, {}), (48, {'value': '$44unpack_sequence.2'}), (50, {'value': '$44unpack_sequence.3'}), (52, {'res': '$s52.5'}), (54, {'res': '$const54.6'}), (56, {'lhs': '$s52.5', 'rhs': '$const54.6', 'res': '$56compare_op.7'}), (58, {}), (60, {}), (62, {'pred': '$56compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$phi44.0',), 80: ('$phi44.0',)})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=64 nstack_initial=1):
AdaptBlockInfo(insts=((64, {'res': '$num_neg_value64.1'}), (66, {'res': '$const66.2'}), (68, {'op': '+=', 'lhs': '$num_neg_value64.1', 'rhs': '$const66.2', 'res': '$binop_iadd68.3'}), (70, {}), (72, {'value': '$binop_iadd68.3'}), (74, {'res': '$ax74.4'}), (76, {'value': '$ax74.4'}), (78, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$phi64.0',)})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=80 nstack_initial=1):
AdaptBlockInfo(insts=((80, {'res': '$known_size80.1'}), (82, {'res': '$s82.2'}), (84, {'op': '*=', 'lhs': '$known_size80.1', 'rhs': '$s82.2', 'res': '$binop_imul84.3'}), (86, {}), (88, {'value': '$binop_imul84.3'}), (90, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={42: ('$phi80.0',)})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=92 nstack_initial=0):
AdaptBlockInfo(insts=((92, {'res': '$num_neg_value92.0'}), (94, {'res': '$const94.1'}), (96, {'lhs': '$num_neg_value92.0', 'rhs': '$const94.1', 'res': '$96compare_op.2'}), (98, {}), (100, {}), (102, {'pred': '$96compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={104: (), 150: ()})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=104 nstack_initial=0):
AdaptBlockInfo(insts=((104, {'res': '$origsize104.0'}), (106, {'res': '$known_size106.1'}), (108, {'lhs': '$origsize104.0', 'rhs': '$known_size106.1', 'res': '$108compare_op.2'}), (110, {}), (112, {}), (114, {'pred': '$108compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: (), 146: ()})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=116 nstack_initial=0):
AdaptBlockInfo(insts=((116, {'idx': 1, 'res': '$116load_global.0'}), (118, {}), (120, {}), (122, {}), (124, {}), (126, {}), (128, {'res': '$const128.2'}), (130, {}), (132, {}), (134, {'func': '$116load_global.0', 'args': ['$const128.2'], 'kw_names': None, 'res': '$134call.3'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {'exc': '$134call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=146 nstack_initial=0):
AdaptBlockInfo(insts=((146, {'res': '$const146.0'}), (148, {'retval': '$const146.0', 'castval': '$148return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=150 nstack_initial=0):
AdaptBlockInfo(insts=((150, {'res': '$num_neg_value150.0'}), (152, {'res': '$const152.1'}), (154, {'lhs': '$num_neg_value150.0', 'rhs': '$const152.1', 'res': '$154compare_op.2'}), (156, {}), (158, {}), (160, {'pred': '$154compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={162: (), 268: ()})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=162 nstack_initial=0):
AdaptBlockInfo(insts=((162, {'res': '$known_size162.0'}), (164, {'res': '$const164.1'}), (166, {'lhs': '$known_size162.0', 'rhs': '$const164.1', 'res': '$166compare_op.2'}), (168, {}), (170, {}), (172, {'pred': '$166compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={174: (), 192: ()})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=174 nstack_initial=0):
AdaptBlockInfo(insts=((174, {'res': '$const174.0'}), (176, {'value': '$const174.0'}), (178, {'res': '$origsize178.1'}), (180, {'res': '$const180.2'}), (182, {'lhs': '$origsize178.1', 'rhs': '$const180.2', 'res': '$182compare_op.3'}), (184, {}), (186, {}), (188, {'value': '$182compare_op.3'}), (190, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={220: ()})
2023-11-07 09:01:26,243 [DEBUG] block_infos State(pc_initial=192 nstack_initial=0):
AdaptBlockInfo(insts=((192, {'res': '$origsize192.0'}), (194, {'res': '$known_size194.1'}), (196, {'op': '//', 'lhs': '$origsize192.0', 'rhs': '$known_size194.1', 'res': '$binop_floordiv196.2'}), (198, {}), (200, {'value': '$binop_floordiv196.2'}), (202, {'res': '$origsize202.3'}), (204, {'res': '$known_size204.4'}), (206, {'op': '%', 'lhs': '$origsize202.3', 'rhs': '$known_size204.4', 'res': '$binop_mod206.5'}), (208, {}), (210, {'res': '$const210.6'}), (212, {'lhs': '$binop_mod206.5', 'rhs': '$const210.6', 'res': '$212compare_op.7'}), (214, {}), (216, {}), (218, {'value': '$212compare_op.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={220: ()})
2023-11-07 09:01:26,244 [DEBUG] block_infos State(pc_initial=220 nstack_initial=0):
AdaptBlockInfo(insts=((220, {'res': '$ok220.0'}), (222, {'pred': '$ok220.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={224: (), 254: ()})
2023-11-07 09:01:26,244 [DEBUG] block_infos State(pc_initial=224 nstack_initial=0):
AdaptBlockInfo(insts=((224, {'idx': 1, 'res': '$224load_global.0'}), (226, {}), (228, {}), (230, {}), (232, {}), (234, {}), (236, {'res': '$const236.2'}), (238, {}), (240, {}), (242, {'func': '$224load_global.0', 'args': ['$const236.2'], 'kw_names': None, 'res': '$242call.3'}), (244, {}), (246, {}), (248, {}), (250, {}), (252, {'exc': '$242call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,244 [DEBUG] block_infos State(pc_initial=254 nstack_initial=0):
AdaptBlockInfo(insts=((254, {'res': '$inferred254.0'}), (256, {'res': '$shape256.1'}), (258, {'res': '$neg_ax258.2'}), (260, {'target': '$shape256.1', 'index': '$neg_ax258.2', 'value': '$inferred254.0'}), (262, {}), (264, {'res': '$const264.3'}), (266, {'retval': '$const264.3', 'castval': '$266return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,244 [DEBUG] block_infos State(pc_initial=268 nstack_initial=0):
AdaptBlockInfo(insts=((268, {'idx': 1, 'res': '$268load_global.0'}), (270, {}), (272, {}), (274, {}), (276, {}), (278, {}), (280, {'res': '$const280.2'}), (282, {}), (284, {}), (286, {'func': '$268load_global.0', 'args': ['$const280.2'], 'kw_names': None, 'res': '$286call.3'}), (288, {}), (290, {}), (292, {}), (294, {}), (296, {'exc': '$286call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,244 [DEBUG] label 0:
    origsize = arg(0, name=origsize)         ['origsize']
    shape = arg(1, name=shape)               ['shape']
    num_neg_value = const(int, 0)            ['num_neg_value']
    known_size = const(int, 1)               ['known_size']
    $12load_global.2 = global(enumerate: <class 'enumerate'>) ['$12load_global.2']
    $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1973)], kws=(), vararg=None, varkwarg=None, target=None) ['$12load_global.2', '$30call.5', 'shape']
    $40get_iter.6 = getiter(value=$30call.5) ['$30call.5', '$40get_iter.6']
    $phi42.0 = $40get_iter.6                 ['$40get_iter.6', '$phi42.0']
    jump 42                                  []
label 42:
    $42for_iter.1 = iternext(value=$phi42.0) ['$42for_iter.1', '$phi42.0']
    $42for_iter.2 = pair_first(value=$42for_iter.1) ['$42for_iter.1', '$42for_iter.2']
    $42for_iter.3 = pair_second(value=$42for_iter.1) ['$42for_iter.1', '$42for_iter.3']
    $phi44.1 = $42for_iter.2                 ['$42for_iter.2', '$phi44.1']
    branch $42for_iter.3, 44, 92             ['$42for_iter.3']
label 44:
    $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2) ['$44unpack_sequence.4', '$phi44.1']
    $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.2', '$44unpack_sequence.4']
    $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>) ['$44unpack_sequence.3', '$44unpack_sequence.4']
    ax = $44unpack_sequence.2                ['$44unpack_sequence.2', 'ax']
    s = $44unpack_sequence.3                 ['$44unpack_sequence.3', 's']
    $const54.6 = const(int, 0)               ['$const54.6']
    $56compare_op.7 = s < $const54.6         ['$56compare_op.7', '$const54.6', 's']
    bool62 = global(bool: <class 'bool'>)    ['bool62']
    $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1977),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.7', '$62pred', 'bool62']
    branch $62pred, 64, 80                   ['$62pred']
label 64:
    $const66.2 = const(int, 1)               ['$const66.2']
    $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd68.3', '$const66.2', 'num_neg_value']
    num_neg_value = $binop_iadd68.3          ['$binop_iadd68.3', 'num_neg_value']
    neg_ax = ax                              ['ax', 'neg_ax']
    jump 42                                  []
label 80:
    $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul84.3', 'known_size', 's']
    known_size = $binop_imul84.3             ['$binop_imul84.3', 'known_size']
    jump 42                                  []
label 92:
    $const94.1 = const(int, 0)               ['$const94.1']
    $96compare_op.2 = num_neg_value == $const94.1 ['$96compare_op.2', '$const94.1', 'num_neg_value']
    bool102 = global(bool: <class 'bool'>)   ['bool102']
    $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1983),), kws=(), vararg=None, varkwarg=None, target=None) ['$102pred', '$96compare_op.2', 'bool102']
    branch $102pred, 104, 150                ['$102pred']
label 104:
    $108compare_op.2 = origsize != known_size ['$108compare_op.2', 'known_size', 'origsize']
    bool114 = global(bool: <class 'bool'>)   ['bool114']
    $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1984),), kws=(), vararg=None, varkwarg=None, target=None) ['$108compare_op.2', '$114pred', 'bool114']
    branch $114pred, 116, 146                ['$114pred']
label 116:
    $116load_global.0 = global(ValueError: <class 'ValueError'>) ['$116load_global.0']
    $const128.2 = const(str, total size of new array must be unchanged) ['$const128.2']
    $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1985)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_global.0', '$134call.3', '$const128.2']
    raise $134call.3                         ['$134call.3']
label 146:
    $const146.0 = const(NoneType, None)      ['$const146.0']
    $148return_value.1 = cast(value=$const146.0) ['$148return_value.1', '$const146.0']
    return $148return_value.1                ['$148return_value.1']
label 150:
    $const152.1 = const(int, 1)              ['$const152.1']
    $154compare_op.2 = num_neg_value == $const152.1 ['$154compare_op.2', '$const152.1', 'num_neg_value']
    bool160 = global(bool: <class 'bool'>)   ['bool160']
    $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1987),), kws=(), vararg=None, varkwarg=None, target=None) ['$154compare_op.2', '$160pred', 'bool160']
    branch $160pred, 162, 268                ['$160pred']
label 162:
    $const164.1 = const(int, 0)              ['$const164.1']
    $166compare_op.2 = known_size == $const164.1 ['$166compare_op.2', '$const164.1', 'known_size']
    bool172 = global(bool: <class 'bool'>)   ['bool172']
    $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None) ['$166compare_op.2', '$172pred', 'bool172']
    branch $172pred, 174, 192                ['$172pred']
label 174:
    inferred = const(int, 0)                 ['inferred']
    $const180.2 = const(int, 0)              ['$const180.2']
    ok = origsize == $const180.2             ['$const180.2', 'ok', 'origsize']
    jump 220                                 []
label 192:
    inferred = origsize // known_size        ['inferred', 'known_size', 'origsize']
    $binop_mod206.5 = origsize % known_size  ['$binop_mod206.5', 'known_size', 'origsize']
    $const210.6 = const(int, 0)              ['$const210.6']
    ok = $binop_mod206.5 == $const210.6      ['$binop_mod206.5', '$const210.6', 'ok']
    jump 220                                 []
label 220:
    bool222 = global(bool: <class 'bool'>)   ['bool222']
    $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None) ['$222pred', 'bool222', 'ok']
    branch $222pred, 254, 224                ['$222pred']
label 224:
    $224load_global.0 = global(ValueError: <class 'ValueError'>) ['$224load_global.0']
    $const236.2 = const(str, total size of new array must be unchanged) ['$const236.2']
    $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None) ['$224load_global.0', '$242call.3', '$const236.2']
    raise $242call.3                         ['$242call.3']
label 254:
    shape[neg_ax] = inferred                 ['inferred', 'neg_ax', 'shape']
    $const264.3 = const(NoneType, None)      ['$const264.3']
    $266return_value.4 = cast(value=$const264.3) ['$266return_value.4', '$const264.3']
    return $266return_value.4                ['$266return_value.4']
label 268:
    $268load_global.0 = global(ValueError: <class 'ValueError'>) ['$268load_global.0']
    $const280.2 = const(str, multiple negative shape values) ['$const280.2']
    $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2000)], kws=(), vararg=None, varkwarg=None, target=None) ['$268load_global.0', '$286call.3', '$const280.2']
    raise $286call.3                         ['$286call.3']

2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: origsize = arg(0, name=origsize)
2023-11-07 09:01:26,250 [DEBUG] on stmt: shape = arg(1, name=shape)
2023-11-07 09:01:26,250 [DEBUG] on stmt: num_neg_value = const(int, 0)
2023-11-07 09:01:26,250 [DEBUG] on stmt: known_size = const(int, 1)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1973)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $40get_iter.6 = getiter(value=$30call.5)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $phi42.0 = $40get_iter.6
2023-11-07 09:01:26,250 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 42
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $phi44.1 = $42for_iter.2
2023-11-07 09:01:26,250 [DEBUG] on stmt: branch $42for_iter.3, 44, 92
2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 44
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,250 [DEBUG] on stmt: ax = $44unpack_sequence.2
2023-11-07 09:01:26,250 [DEBUG] on stmt: s = $44unpack_sequence.3
2023-11-07 09:01:26,250 [DEBUG] on stmt: $const54.6 = const(int, 0)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $56compare_op.7 = s < $const54.6
2023-11-07 09:01:26,250 [DEBUG] on stmt: bool62 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1977),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,250 [DEBUG] on stmt: branch $62pred, 64, 80
2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 64
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: $const66.2 = const(int, 1)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,250 [DEBUG] on stmt: num_neg_value = $binop_iadd68.3
2023-11-07 09:01:26,250 [DEBUG] on stmt: neg_ax = ax
2023-11-07 09:01:26,250 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 80
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,250 [DEBUG] on stmt: known_size = $binop_imul84.3
2023-11-07 09:01:26,250 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 92
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: $const94.1 = const(int, 0)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $96compare_op.2 = num_neg_value == $const94.1
2023-11-07 09:01:26,250 [DEBUG] on stmt: bool102 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1983),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,250 [DEBUG] on stmt: branch $102pred, 104, 150
2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 104
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: $108compare_op.2 = origsize != known_size
2023-11-07 09:01:26,250 [DEBUG] on stmt: bool114 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1984),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,250 [DEBUG] on stmt: branch $114pred, 116, 146
2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 116
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1985)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,250 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 146
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: $const146.0 = const(NoneType, None)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $148return_value.1 = cast(value=$const146.0)
2023-11-07 09:01:26,250 [DEBUG] on stmt: return $148return_value.1
2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 150
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: $const152.1 = const(int, 1)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $154compare_op.2 = num_neg_value == $const152.1
2023-11-07 09:01:26,250 [DEBUG] on stmt: bool160 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1987),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,250 [DEBUG] on stmt: branch $160pred, 162, 268
2023-11-07 09:01:26,250 [DEBUG] ==== SSA block analysis pass on 162
2023-11-07 09:01:26,250 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,250 [DEBUG] on stmt: $const164.1 = const(int, 0)
2023-11-07 09:01:26,250 [DEBUG] on stmt: $166compare_op.2 = known_size == $const164.1
2023-11-07 09:01:26,251 [DEBUG] on stmt: bool172 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,251 [DEBUG] on stmt: branch $172pred, 174, 192
2023-11-07 09:01:26,251 [DEBUG] ==== SSA block analysis pass on 174
2023-11-07 09:01:26,251 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,251 [DEBUG] on stmt: inferred = const(int, 0)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $const180.2 = const(int, 0)
2023-11-07 09:01:26,251 [DEBUG] on stmt: ok = origsize == $const180.2
2023-11-07 09:01:26,251 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,251 [DEBUG] ==== SSA block analysis pass on 192
2023-11-07 09:01:26,251 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,251 [DEBUG] on stmt: inferred = origsize // known_size
2023-11-07 09:01:26,251 [DEBUG] on stmt: $binop_mod206.5 = origsize % known_size
2023-11-07 09:01:26,251 [DEBUG] on stmt: $const210.6 = const(int, 0)
2023-11-07 09:01:26,251 [DEBUG] on stmt: ok = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,251 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,251 [DEBUG] ==== SSA block analysis pass on 220
2023-11-07 09:01:26,251 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,251 [DEBUG] on stmt: bool222 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,251 [DEBUG] on stmt: branch $222pred, 254, 224
2023-11-07 09:01:26,251 [DEBUG] ==== SSA block analysis pass on 224
2023-11-07 09:01:26,251 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,251 [DEBUG] on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,251 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,251 [DEBUG] ==== SSA block analysis pass on 254
2023-11-07 09:01:26,251 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,251 [DEBUG] on stmt: shape[neg_ax] = inferred
2023-11-07 09:01:26,251 [DEBUG] on stmt: $const264.3 = const(NoneType, None)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $266return_value.4 = cast(value=$const264.3)
2023-11-07 09:01:26,251 [DEBUG] on stmt: return $266return_value.4
2023-11-07 09:01:26,251 [DEBUG] ==== SSA block analysis pass on 268
2023-11-07 09:01:26,251 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,251 [DEBUG] on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $const280.2 = const(str, multiple negative shape values)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2000)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,251 [DEBUG] on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2023-11-07 09:01:26,251 [DEBUG] ==== SSA block analysis pass on 269
2023-11-07 09:01:26,251 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28064e090>
2023-11-07 09:01:26,251 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,251 [DEBUG] defs defaultdict(<class 'list'>,
            {'$102pred': [<numba.core.ir.Assign object at 0x28279aa90>],
             '$108compare_op.2': [<numba.core.ir.Assign object at 0x282799250>],
             '$114pred': [<numba.core.ir.Assign object at 0x282799010>],
             '$116load_global.0': [<numba.core.ir.Assign object at 0x28279bb10>],
             '$12load_global.2': [<numba.core.ir.Assign object at 0x2825cc390>],
             '$134call.3': [<numba.core.ir.Assign object at 0x2827a8d90>],
             '$148return_value.1': [<numba.core.ir.Assign object at 0x2827ab2d0>],
             '$154compare_op.2': [<numba.core.ir.Assign object at 0x2827ab5d0>],
             '$160pred': [<numba.core.ir.Assign object at 0x2827aacd0>],
             '$166compare_op.2': [<numba.core.ir.Assign object at 0x2827ab410>],
             '$172pred': [<numba.core.ir.Assign object at 0x2827aad50>],
             '$222pred': [<numba.core.ir.Assign object at 0x2827a46d0>],
             '$224load_global.0': [<numba.core.ir.Assign object at 0x2827a48d0>],
             '$242call.3': [<numba.core.ir.Assign object at 0x28273ce10>],
             '$266return_value.4': [<numba.core.ir.Assign object at 0x282697910>],
             '$268load_global.0': [<numba.core.ir.Assign object at 0x282695e50>],
             '$286call.3': [<numba.core.ir.Assign object at 0x282694d90>],
             '$30call.5': [<numba.core.ir.Assign object at 0x282abc110>],
             '$40get_iter.6': [<numba.core.ir.Assign object at 0x282abc690>],
             '$42for_iter.1': [<numba.core.ir.Assign object at 0x2827d25d0>],
             '$42for_iter.2': [<numba.core.ir.Assign object at 0x2827d1510>],
             '$42for_iter.3': [<numba.core.ir.Assign object at 0x2827d0450>],
             '$44unpack_sequence.2': [<numba.core.ir.Assign object at 0x2827d29d0>],
             '$44unpack_sequence.3': [<numba.core.ir.Assign object at 0x2827d1cd0>],
             '$44unpack_sequence.4': [<numba.core.ir.Assign object at 0x2827d2490>],
             '$56compare_op.7': [<numba.core.ir.Assign object at 0x2827630d0>],
             '$62pred': [<numba.core.ir.Assign object at 0x2808a78d0>],
             '$96compare_op.2': [<numba.core.ir.Assign object at 0x282798710>],
             '$binop_iadd68.3': [<numba.core.ir.Assign object at 0x28279a690>],
             '$binop_imul84.3': [<numba.core.ir.Assign object at 0x28279bf50>],
             '$binop_mod206.5': [<numba.core.ir.Assign object at 0x2827a7610>],
             '$const128.2': [<numba.core.ir.Assign object at 0x282798bd0>],
             '$const146.0': [<numba.core.ir.Assign object at 0x2827abe90>],
             '$const152.1': [<numba.core.ir.Assign object at 0x2827aac50>],
             '$const164.1': [<numba.core.ir.Assign object at 0x2827a9c90>],
             '$const180.2': [<numba.core.ir.Assign object at 0x2827abc10>],
             '$const210.6': [<numba.core.ir.Assign object at 0x2827a7b10>],
             '$const236.2': [<numba.core.ir.Assign object at 0x28273d310>],
             '$const264.3': [<numba.core.ir.Assign object at 0x282695990>],
             '$const280.2': [<numba.core.ir.Assign object at 0x282694150>],
             '$const54.6': [<numba.core.ir.Assign object at 0x282762750>],
             '$const66.2': [<numba.core.ir.Assign object at 0x282798590>],
             '$const94.1': [<numba.core.ir.Assign object at 0x28279b150>],
             '$phi42.0': [<numba.core.ir.Assign object at 0x28272a790>],
             '$phi44.1': [<numba.core.ir.Assign object at 0x2827d2250>],
             'ax': [<numba.core.ir.Assign object at 0x2827d2f50>],
             'bool102': [<numba.core.ir.Assign object at 0x28279ac90>],
             'bool114': [<numba.core.ir.Assign object at 0x2827999d0>],
             'bool160': [<numba.core.ir.Assign object at 0x2827aabd0>],
             'bool172': [<numba.core.ir.Assign object at 0x2827a8b50>],
             'bool222': [<numba.core.ir.Assign object at 0x2827a4310>],
             'bool62': [<numba.core.ir.Assign object at 0x282763fd0>],
             'inferred': [<numba.core.ir.Assign object at 0x2827aa290>,
                          <numba.core.ir.Assign object at 0x2841f2ad0>],
             'known_size': [<numba.core.ir.Assign object at 0x28272ae90>,
                            <numba.core.ir.Assign object at 0x28279ba90>],
             'neg_ax': [<numba.core.ir.Assign object at 0x282799050>],
             'num_neg_value': [<numba.core.ir.Assign object at 0x28272a090>,
                               <numba.core.ir.Assign object at 0x28279acd0>],
             'ok': [<numba.core.ir.Assign object at 0x2827a8550>,
                    <numba.core.ir.Assign object at 0x2827a4950>],
             'origsize': [<numba.core.ir.Assign object at 0x282570f50>],
             's': [<numba.core.ir.Assign object at 0x2827d2ed0>],
             'shape': [<numba.core.ir.Assign object at 0x282754ad0>]})
2023-11-07 09:01:26,251 [DEBUG] SSA violators {'known_size', 'inferred', 'ok', 'num_neg_value'}
2023-11-07 09:01:26,251 [DEBUG] Fix SSA violator on var known_size
2023-11-07 09:01:26,251 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,251 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,251 [DEBUG] on stmt: origsize = arg(0, name=origsize)
2023-11-07 09:01:26,251 [DEBUG] on stmt: shape = arg(1, name=shape)
2023-11-07 09:01:26,251 [DEBUG] on stmt: num_neg_value = const(int, 0)
2023-11-07 09:01:26,251 [DEBUG] on stmt: known_size = const(int, 1)
2023-11-07 09:01:26,251 [DEBUG] first assign: known_size
2023-11-07 09:01:26,251 [DEBUG] replaced with: known_size = const(int, 1)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1973)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $40get_iter.6 = getiter(value=$30call.5)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $phi42.0 = $40get_iter.6
2023-11-07 09:01:26,251 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,251 [DEBUG] ==== SSA block rewrite pass on 42
2023-11-07 09:01:26,251 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,251 [DEBUG] on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $phi44.1 = $42for_iter.2
2023-11-07 09:01:26,251 [DEBUG] on stmt: branch $42for_iter.3, 44, 92
2023-11-07 09:01:26,251 [DEBUG] ==== SSA block rewrite pass on 44
2023-11-07 09:01:26,251 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,251 [DEBUG] on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,251 [DEBUG] on stmt: ax = $44unpack_sequence.2
2023-11-07 09:01:26,251 [DEBUG] on stmt: s = $44unpack_sequence.3
2023-11-07 09:01:26,251 [DEBUG] on stmt: $const54.6 = const(int, 0)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $56compare_op.7 = s < $const54.6
2023-11-07 09:01:26,251 [DEBUG] on stmt: bool62 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,251 [DEBUG] on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1977),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: branch $62pred, 64, 80
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 64
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const66.2 = const(int, 1)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,252 [DEBUG] on stmt: num_neg_value = $binop_iadd68.3
2023-11-07 09:01:26,252 [DEBUG] on stmt: neg_ax = ax
2023-11-07 09:01:26,252 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 80
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,252 [DEBUG] on stmt: known_size = $binop_imul84.3
2023-11-07 09:01:26,252 [DEBUG] replaced with: known_size.1 = $binop_imul84.3
2023-11-07 09:01:26,252 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 92
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const94.1 = const(int, 0)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $96compare_op.2 = num_neg_value == $const94.1
2023-11-07 09:01:26,252 [DEBUG] on stmt: bool102 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1983),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: branch $102pred, 104, 150
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 104
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: $108compare_op.2 = origsize != known_size
2023-11-07 09:01:26,252 [DEBUG] on stmt: bool114 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1984),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: branch $114pred, 116, 146
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 116
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1985)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 146
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const146.0 = const(NoneType, None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $148return_value.1 = cast(value=$const146.0)
2023-11-07 09:01:26,252 [DEBUG] on stmt: return $148return_value.1
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 150
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const152.1 = const(int, 1)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $154compare_op.2 = num_neg_value == $const152.1
2023-11-07 09:01:26,252 [DEBUG] on stmt: bool160 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1987),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: branch $160pred, 162, 268
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 162
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const164.1 = const(int, 0)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $166compare_op.2 = known_size == $const164.1
2023-11-07 09:01:26,252 [DEBUG] on stmt: bool172 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: branch $172pred, 174, 192
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 174
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: inferred = const(int, 0)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const180.2 = const(int, 0)
2023-11-07 09:01:26,252 [DEBUG] on stmt: ok = origsize == $const180.2
2023-11-07 09:01:26,252 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 192
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: inferred = origsize // known_size
2023-11-07 09:01:26,252 [DEBUG] on stmt: $binop_mod206.5 = origsize % known_size
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const210.6 = const(int, 0)
2023-11-07 09:01:26,252 [DEBUG] on stmt: ok = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,252 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 220
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: bool222 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: branch $222pred, 254, 224
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 224
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 254
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: shape[neg_ax] = inferred
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const264.3 = const(NoneType, None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $266return_value.4 = cast(value=$const264.3)
2023-11-07 09:01:26,252 [DEBUG] on stmt: return $266return_value.4
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 268
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $const280.2 = const(str, multiple negative shape values)
2023-11-07 09:01:26,252 [DEBUG] on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2000)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,252 [DEBUG] on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 269
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270f510>
2023-11-07 09:01:26,252 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,252 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x28270eb50>],
             80: [<numba.core.ir.Assign object at 0x28270e6d0>]})
2023-11-07 09:01:26,252 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,252 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,252 [DEBUG] on stmt: origsize = arg(0, name=origsize)
2023-11-07 09:01:26,253 [DEBUG] on stmt: shape = arg(1, name=shape)
2023-11-07 09:01:26,253 [DEBUG] on stmt: num_neg_value = const(int, 0)
2023-11-07 09:01:26,253 [DEBUG] on stmt: known_size = const(int, 1)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1973)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $40get_iter.6 = getiter(value=$30call.5)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $phi42.0 = $40get_iter.6
2023-11-07 09:01:26,253 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,253 [DEBUG] ==== SSA block rewrite pass on 42
2023-11-07 09:01:26,253 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,253 [DEBUG] on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $phi44.1 = $42for_iter.2
2023-11-07 09:01:26,253 [DEBUG] on stmt: branch $42for_iter.3, 44, 92
2023-11-07 09:01:26,253 [DEBUG] ==== SSA block rewrite pass on 44
2023-11-07 09:01:26,253 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,253 [DEBUG] on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,253 [DEBUG] on stmt: ax = $44unpack_sequence.2
2023-11-07 09:01:26,253 [DEBUG] on stmt: s = $44unpack_sequence.3
2023-11-07 09:01:26,253 [DEBUG] on stmt: $const54.6 = const(int, 0)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $56compare_op.7 = s < $const54.6
2023-11-07 09:01:26,253 [DEBUG] on stmt: bool62 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1977),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,253 [DEBUG] on stmt: branch $62pred, 64, 80
2023-11-07 09:01:26,253 [DEBUG] ==== SSA block rewrite pass on 64
2023-11-07 09:01:26,253 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,253 [DEBUG] on stmt: $const66.2 = const(int, 1)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,253 [DEBUG] on stmt: num_neg_value = $binop_iadd68.3
2023-11-07 09:01:26,253 [DEBUG] on stmt: neg_ax = ax
2023-11-07 09:01:26,253 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,253 [DEBUG] ==== SSA block rewrite pass on 80
2023-11-07 09:01:26,253 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,253 [DEBUG] on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,253 [DEBUG] find_def var='known_size' stmt=$binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,253 [DEBUG] find_def_from_top label 80
2023-11-07 09:01:26,253 [DEBUG] idom 44 from label 80
2023-11-07 09:01:26,253 [DEBUG] find_def_from_bottom label 44
2023-11-07 09:01:26,253 [DEBUG] find_def_from_top label 44
2023-11-07 09:01:26,253 [DEBUG] idom 42 from label 44
2023-11-07 09:01:26,253 [DEBUG] find_def_from_bottom label 42
2023-11-07 09:01:26,253 [DEBUG] find_def_from_top label 42
2023-11-07 09:01:26,253 [DEBUG] insert phi node known_size.2 = phi(incoming_values=[], incoming_blocks=[]) at 42
2023-11-07 09:01:26,253 [DEBUG] find_def_from_bottom label 0
2023-11-07 09:01:26,253 [DEBUG] incoming_def known_size = const(int, 1)
2023-11-07 09:01:26,253 [DEBUG] find_def_from_bottom label 269
2023-11-07 09:01:26,253 [DEBUG] find_def_from_top label 269
2023-11-07 09:01:26,253 [DEBUG] insert phi node known_size.3 = phi(incoming_values=[], incoming_blocks=[]) at 269
2023-11-07 09:01:26,253 [DEBUG] find_def_from_bottom label 64
2023-11-07 09:01:26,253 [DEBUG] find_def_from_top label 64
2023-11-07 09:01:26,253 [DEBUG] idom 44 from label 64
2023-11-07 09:01:26,253 [DEBUG] find_def_from_bottom label 44
2023-11-07 09:01:26,253 [DEBUG] find_def_from_top label 44
2023-11-07 09:01:26,253 [DEBUG] idom 42 from label 44
2023-11-07 09:01:26,253 [DEBUG] find_def_from_bottom label 42
2023-11-07 09:01:26,253 [DEBUG] incoming_def known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1975)], incoming_blocks=[0])
2023-11-07 09:01:26,253 [DEBUG] find_def_from_bottom label 80
2023-11-07 09:01:26,253 [DEBUG] incoming_def known_size.1 = $binop_imul84.3
2023-11-07 09:01:26,253 [DEBUG] incoming_def known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1981), Var(known_size.1, arrayobj.py:1981)], incoming_blocks=[64, 80])
2023-11-07 09:01:26,253 [DEBUG] replaced with: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,253 [DEBUG] on stmt: known_size.1 = $binop_imul84.3
2023-11-07 09:01:26,253 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,253 [DEBUG] ==== SSA block rewrite pass on 92
2023-11-07 09:01:26,253 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,253 [DEBUG] on stmt: $const94.1 = const(int, 0)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $96compare_op.2 = num_neg_value == $const94.1
2023-11-07 09:01:26,253 [DEBUG] on stmt: bool102 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1983),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,253 [DEBUG] on stmt: branch $102pred, 104, 150
2023-11-07 09:01:26,253 [DEBUG] ==== SSA block rewrite pass on 104
2023-11-07 09:01:26,253 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,253 [DEBUG] on stmt: $108compare_op.2 = origsize != known_size
2023-11-07 09:01:26,253 [DEBUG] find_def var='known_size' stmt=$108compare_op.2 = origsize != known_size
2023-11-07 09:01:26,253 [DEBUG] find_def_from_top label 104
2023-11-07 09:01:26,253 [DEBUG] idom 92 from label 104
2023-11-07 09:01:26,253 [DEBUG] find_def_from_bottom label 92
2023-11-07 09:01:26,253 [DEBUG] find_def_from_top label 92
2023-11-07 09:01:26,253 [DEBUG] idom 42 from label 92
2023-11-07 09:01:26,253 [DEBUG] find_def_from_bottom label 42
2023-11-07 09:01:26,253 [DEBUG] replaced with: $108compare_op.2 = origsize != known_size.2
2023-11-07 09:01:26,253 [DEBUG] on stmt: bool114 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,253 [DEBUG] on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1984),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,253 [DEBUG] on stmt: branch $114pred, 116, 146
2023-11-07 09:01:26,253 [DEBUG] ==== SSA block rewrite pass on 116
2023-11-07 09:01:26,253 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,253 [DEBUG] on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1985)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,254 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,254 [DEBUG] ==== SSA block rewrite pass on 146
2023-11-07 09:01:26,254 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,254 [DEBUG] on stmt: $const146.0 = const(NoneType, None)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $148return_value.1 = cast(value=$const146.0)
2023-11-07 09:01:26,254 [DEBUG] on stmt: return $148return_value.1
2023-11-07 09:01:26,254 [DEBUG] ==== SSA block rewrite pass on 150
2023-11-07 09:01:26,254 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,254 [DEBUG] on stmt: $const152.1 = const(int, 1)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $154compare_op.2 = num_neg_value == $const152.1
2023-11-07 09:01:26,254 [DEBUG] on stmt: bool160 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1987),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,254 [DEBUG] on stmt: branch $160pred, 162, 268
2023-11-07 09:01:26,254 [DEBUG] ==== SSA block rewrite pass on 162
2023-11-07 09:01:26,254 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,254 [DEBUG] on stmt: $const164.1 = const(int, 0)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $166compare_op.2 = known_size == $const164.1
2023-11-07 09:01:26,254 [DEBUG] find_def var='known_size' stmt=$166compare_op.2 = known_size == $const164.1
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 162
2023-11-07 09:01:26,254 [DEBUG] idom 150 from label 162
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 150
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 150
2023-11-07 09:01:26,254 [DEBUG] idom 92 from label 150
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 92
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 92
2023-11-07 09:01:26,254 [DEBUG] idom 42 from label 92
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 42
2023-11-07 09:01:26,254 [DEBUG] replaced with: $166compare_op.2 = known_size.2 == $const164.1
2023-11-07 09:01:26,254 [DEBUG] on stmt: bool172 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,254 [DEBUG] on stmt: branch $172pred, 174, 192
2023-11-07 09:01:26,254 [DEBUG] ==== SSA block rewrite pass on 174
2023-11-07 09:01:26,254 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,254 [DEBUG] on stmt: inferred = const(int, 0)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $const180.2 = const(int, 0)
2023-11-07 09:01:26,254 [DEBUG] on stmt: ok = origsize == $const180.2
2023-11-07 09:01:26,254 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,254 [DEBUG] ==== SSA block rewrite pass on 192
2023-11-07 09:01:26,254 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,254 [DEBUG] on stmt: inferred = origsize // known_size
2023-11-07 09:01:26,254 [DEBUG] find_def var='known_size' stmt=inferred = origsize // known_size
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 192
2023-11-07 09:01:26,254 [DEBUG] idom 162 from label 192
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 162
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 162
2023-11-07 09:01:26,254 [DEBUG] idom 150 from label 162
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 150
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 150
2023-11-07 09:01:26,254 [DEBUG] idom 92 from label 150
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 92
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 92
2023-11-07 09:01:26,254 [DEBUG] idom 42 from label 92
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 42
2023-11-07 09:01:26,254 [DEBUG] replaced with: inferred = origsize // known_size.2
2023-11-07 09:01:26,254 [DEBUG] on stmt: $binop_mod206.5 = origsize % known_size
2023-11-07 09:01:26,254 [DEBUG] find_def var='known_size' stmt=$binop_mod206.5 = origsize % known_size
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 192
2023-11-07 09:01:26,254 [DEBUG] idom 162 from label 192
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 162
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 162
2023-11-07 09:01:26,254 [DEBUG] idom 150 from label 162
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 150
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 150
2023-11-07 09:01:26,254 [DEBUG] idom 92 from label 150
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 92
2023-11-07 09:01:26,254 [DEBUG] find_def_from_top label 92
2023-11-07 09:01:26,254 [DEBUG] idom 42 from label 92
2023-11-07 09:01:26,254 [DEBUG] find_def_from_bottom label 42
2023-11-07 09:01:26,254 [DEBUG] replaced with: $binop_mod206.5 = origsize % known_size.2
2023-11-07 09:01:26,254 [DEBUG] on stmt: $const210.6 = const(int, 0)
2023-11-07 09:01:26,254 [DEBUG] on stmt: ok = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,254 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,254 [DEBUG] ==== SSA block rewrite pass on 220
2023-11-07 09:01:26,254 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,254 [DEBUG] on stmt: bool222 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,254 [DEBUG] on stmt: branch $222pred, 254, 224
2023-11-07 09:01:26,254 [DEBUG] ==== SSA block rewrite pass on 224
2023-11-07 09:01:26,254 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,254 [DEBUG] on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,254 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,254 [DEBUG] ==== SSA block rewrite pass on 254
2023-11-07 09:01:26,254 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,254 [DEBUG] on stmt: shape[neg_ax] = inferred
2023-11-07 09:01:26,254 [DEBUG] on stmt: $const264.3 = const(NoneType, None)
2023-11-07 09:01:26,254 [DEBUG] on stmt: $266return_value.4 = cast(value=$const264.3)
2023-11-07 09:01:26,254 [DEBUG] on stmt: return $266return_value.4
2023-11-07 09:01:26,254 [DEBUG] ==== SSA block rewrite pass on 268
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $const280.2 = const(str, multiple negative shape values)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2000)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,255 [DEBUG] on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 269
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282527f10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,255 [DEBUG] Fix SSA violator on var inferred
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: origsize = arg(0, name=origsize)
2023-11-07 09:01:26,255 [DEBUG] on stmt: shape = arg(1, name=shape)
2023-11-07 09:01:26,255 [DEBUG] on stmt: num_neg_value = const(int, 0)
2023-11-07 09:01:26,255 [DEBUG] on stmt: known_size = const(int, 1)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1973)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $40get_iter.6 = getiter(value=$30call.5)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $phi42.0 = $40get_iter.6
2023-11-07 09:01:26,255 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 42
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1975), Var(known_size.3, arrayobj.py:1981)], incoming_blocks=[0, 269])
2023-11-07 09:01:26,255 [DEBUG] on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $phi44.1 = $42for_iter.2
2023-11-07 09:01:26,255 [DEBUG] on stmt: branch $42for_iter.3, 44, 92
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 44
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,255 [DEBUG] on stmt: ax = $44unpack_sequence.2
2023-11-07 09:01:26,255 [DEBUG] on stmt: s = $44unpack_sequence.3
2023-11-07 09:01:26,255 [DEBUG] on stmt: $const54.6 = const(int, 0)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $56compare_op.7 = s < $const54.6
2023-11-07 09:01:26,255 [DEBUG] on stmt: bool62 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1977),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,255 [DEBUG] on stmt: branch $62pred, 64, 80
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 64
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: $const66.2 = const(int, 1)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,255 [DEBUG] on stmt: num_neg_value = $binop_iadd68.3
2023-11-07 09:01:26,255 [DEBUG] on stmt: neg_ax = ax
2023-11-07 09:01:26,255 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 80
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,255 [DEBUG] on stmt: known_size.1 = $binop_imul84.3
2023-11-07 09:01:26,255 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 92
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: $const94.1 = const(int, 0)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $96compare_op.2 = num_neg_value == $const94.1
2023-11-07 09:01:26,255 [DEBUG] on stmt: bool102 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1983),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,255 [DEBUG] on stmt: branch $102pred, 104, 150
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 104
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: $108compare_op.2 = origsize != known_size.2
2023-11-07 09:01:26,255 [DEBUG] on stmt: bool114 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1984),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,255 [DEBUG] on stmt: branch $114pred, 116, 146
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 116
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1985)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,255 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 146
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: $const146.0 = const(NoneType, None)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $148return_value.1 = cast(value=$const146.0)
2023-11-07 09:01:26,255 [DEBUG] on stmt: return $148return_value.1
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 150
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: $const152.1 = const(int, 1)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $154compare_op.2 = num_neg_value == $const152.1
2023-11-07 09:01:26,255 [DEBUG] on stmt: bool160 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1987),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,255 [DEBUG] on stmt: branch $160pred, 162, 268
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 162
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: $const164.1 = const(int, 0)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $166compare_op.2 = known_size.2 == $const164.1
2023-11-07 09:01:26,255 [DEBUG] on stmt: bool172 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,255 [DEBUG] on stmt: branch $172pred, 174, 192
2023-11-07 09:01:26,255 [DEBUG] ==== SSA block rewrite pass on 174
2023-11-07 09:01:26,255 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,255 [DEBUG] on stmt: inferred = const(int, 0)
2023-11-07 09:01:26,255 [DEBUG] first assign: inferred
2023-11-07 09:01:26,255 [DEBUG] replaced with: inferred = const(int, 0)
2023-11-07 09:01:26,255 [DEBUG] on stmt: $const180.2 = const(int, 0)
2023-11-07 09:01:26,255 [DEBUG] on stmt: ok = origsize == $const180.2
2023-11-07 09:01:26,256 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 192
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,256 [DEBUG] on stmt: inferred = origsize // known_size.2
2023-11-07 09:01:26,256 [DEBUG] replaced with: inferred.1 = origsize // known_size.2
2023-11-07 09:01:26,256 [DEBUG] on stmt: $binop_mod206.5 = origsize % known_size.2
2023-11-07 09:01:26,256 [DEBUG] on stmt: $const210.6 = const(int, 0)
2023-11-07 09:01:26,256 [DEBUG] on stmt: ok = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,256 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 220
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,256 [DEBUG] on stmt: bool222 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,256 [DEBUG] on stmt: branch $222pred, 254, 224
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 224
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,256 [DEBUG] on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,256 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 254
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,256 [DEBUG] on stmt: shape[neg_ax] = inferred
2023-11-07 09:01:26,256 [DEBUG] on stmt: $const264.3 = const(NoneType, None)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $266return_value.4 = cast(value=$const264.3)
2023-11-07 09:01:26,256 [DEBUG] on stmt: return $266return_value.4
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 268
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,256 [DEBUG] on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $const280.2 = const(str, multiple negative shape values)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2000)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,256 [DEBUG] on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 269
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28270cb10>
2023-11-07 09:01:26,256 [DEBUG] on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1981), Var(known_size.1, arrayobj.py:1981)], incoming_blocks=[64, 80])
2023-11-07 09:01:26,256 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,256 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {174: [<numba.core.ir.Assign object at 0x2825254d0>],
             192: [<numba.core.ir.Assign object at 0x282527f10>]})
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,256 [DEBUG] on stmt: origsize = arg(0, name=origsize)
2023-11-07 09:01:26,256 [DEBUG] on stmt: shape = arg(1, name=shape)
2023-11-07 09:01:26,256 [DEBUG] on stmt: num_neg_value = const(int, 0)
2023-11-07 09:01:26,256 [DEBUG] on stmt: known_size = const(int, 1)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1973)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $40get_iter.6 = getiter(value=$30call.5)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $phi42.0 = $40get_iter.6
2023-11-07 09:01:26,256 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 42
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,256 [DEBUG] on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1975), Var(known_size.3, arrayobj.py:1981)], incoming_blocks=[0, 269])
2023-11-07 09:01:26,256 [DEBUG] on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $phi44.1 = $42for_iter.2
2023-11-07 09:01:26,256 [DEBUG] on stmt: branch $42for_iter.3, 44, 92
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 44
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,256 [DEBUG] on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,256 [DEBUG] on stmt: ax = $44unpack_sequence.2
2023-11-07 09:01:26,256 [DEBUG] on stmt: s = $44unpack_sequence.3
2023-11-07 09:01:26,256 [DEBUG] on stmt: $const54.6 = const(int, 0)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $56compare_op.7 = s < $const54.6
2023-11-07 09:01:26,256 [DEBUG] on stmt: bool62 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1977),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,256 [DEBUG] on stmt: branch $62pred, 64, 80
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 64
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,256 [DEBUG] on stmt: $const66.2 = const(int, 1)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,256 [DEBUG] on stmt: num_neg_value = $binop_iadd68.3
2023-11-07 09:01:26,256 [DEBUG] on stmt: neg_ax = ax
2023-11-07 09:01:26,256 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 80
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,256 [DEBUG] on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,256 [DEBUG] on stmt: known_size.1 = $binop_imul84.3
2023-11-07 09:01:26,256 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 92
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,256 [DEBUG] on stmt: $const94.1 = const(int, 0)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $96compare_op.2 = num_neg_value == $const94.1
2023-11-07 09:01:26,256 [DEBUG] on stmt: bool102 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1983),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,256 [DEBUG] on stmt: branch $102pred, 104, 150
2023-11-07 09:01:26,256 [DEBUG] ==== SSA block rewrite pass on 104
2023-11-07 09:01:26,256 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,256 [DEBUG] on stmt: $108compare_op.2 = origsize != known_size.2
2023-11-07 09:01:26,256 [DEBUG] on stmt: bool114 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,256 [DEBUG] on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1984),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,256 [DEBUG] on stmt: branch $114pred, 116, 146
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 116
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1985)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,257 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 146
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: $const146.0 = const(NoneType, None)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $148return_value.1 = cast(value=$const146.0)
2023-11-07 09:01:26,257 [DEBUG] on stmt: return $148return_value.1
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 150
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: $const152.1 = const(int, 1)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $154compare_op.2 = num_neg_value == $const152.1
2023-11-07 09:01:26,257 [DEBUG] on stmt: bool160 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1987),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,257 [DEBUG] on stmt: branch $160pred, 162, 268
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 162
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: $const164.1 = const(int, 0)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $166compare_op.2 = known_size.2 == $const164.1
2023-11-07 09:01:26,257 [DEBUG] on stmt: bool172 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,257 [DEBUG] on stmt: branch $172pred, 174, 192
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 174
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: inferred = const(int, 0)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $const180.2 = const(int, 0)
2023-11-07 09:01:26,257 [DEBUG] on stmt: ok = origsize == $const180.2
2023-11-07 09:01:26,257 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 192
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: inferred.1 = origsize // known_size.2
2023-11-07 09:01:26,257 [DEBUG] on stmt: $binop_mod206.5 = origsize % known_size.2
2023-11-07 09:01:26,257 [DEBUG] on stmt: $const210.6 = const(int, 0)
2023-11-07 09:01:26,257 [DEBUG] on stmt: ok = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,257 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 220
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: bool222 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,257 [DEBUG] on stmt: branch $222pred, 254, 224
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 224
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,257 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 254
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: shape[neg_ax] = inferred
2023-11-07 09:01:26,257 [DEBUG] find_def var='inferred' stmt=shape[neg_ax] = inferred
2023-11-07 09:01:26,257 [DEBUG] find_def_from_top label 254
2023-11-07 09:01:26,257 [DEBUG] idom 220 from label 254
2023-11-07 09:01:26,257 [DEBUG] find_def_from_bottom label 220
2023-11-07 09:01:26,257 [DEBUG] find_def_from_top label 220
2023-11-07 09:01:26,257 [DEBUG] insert phi node inferred.2 = phi(incoming_values=[], incoming_blocks=[]) at 220
2023-11-07 09:01:26,257 [DEBUG] find_def_from_bottom label 192
2023-11-07 09:01:26,257 [DEBUG] incoming_def inferred.1 = origsize // known_size.2
2023-11-07 09:01:26,257 [DEBUG] find_def_from_bottom label 174
2023-11-07 09:01:26,257 [DEBUG] incoming_def inferred = const(int, 0)
2023-11-07 09:01:26,257 [DEBUG] replaced with: shape[neg_ax] = inferred.2
2023-11-07 09:01:26,257 [DEBUG] on stmt: $const264.3 = const(NoneType, None)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $266return_value.4 = cast(value=$const264.3)
2023-11-07 09:01:26,257 [DEBUG] on stmt: return $266return_value.4
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 268
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $const280.2 = const(str, multiple negative shape values)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2000)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,257 [DEBUG] on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 269
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282729110>
2023-11-07 09:01:26,257 [DEBUG] on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1981), Var(known_size.1, arrayobj.py:1981)], incoming_blocks=[64, 80])
2023-11-07 09:01:26,257 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,257 [DEBUG] Fix SSA violator on var ok
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,257 [DEBUG] on stmt: origsize = arg(0, name=origsize)
2023-11-07 09:01:26,257 [DEBUG] on stmt: shape = arg(1, name=shape)
2023-11-07 09:01:26,257 [DEBUG] on stmt: num_neg_value = const(int, 0)
2023-11-07 09:01:26,257 [DEBUG] on stmt: known_size = const(int, 1)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1973)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $40get_iter.6 = getiter(value=$30call.5)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $phi42.0 = $40get_iter.6
2023-11-07 09:01:26,257 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,257 [DEBUG] ==== SSA block rewrite pass on 42
2023-11-07 09:01:26,257 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,257 [DEBUG] on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1975), Var(known_size.3, arrayobj.py:1981)], incoming_blocks=[0, 269])
2023-11-07 09:01:26,257 [DEBUG] on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2023-11-07 09:01:26,257 [DEBUG] on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $phi44.1 = $42for_iter.2
2023-11-07 09:01:26,258 [DEBUG] on stmt: branch $42for_iter.3, 44, 92
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 44
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,258 [DEBUG] on stmt: ax = $44unpack_sequence.2
2023-11-07 09:01:26,258 [DEBUG] on stmt: s = $44unpack_sequence.3
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const54.6 = const(int, 0)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $56compare_op.7 = s < $const54.6
2023-11-07 09:01:26,258 [DEBUG] on stmt: bool62 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1977),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,258 [DEBUG] on stmt: branch $62pred, 64, 80
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 64
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const66.2 = const(int, 1)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,258 [DEBUG] on stmt: num_neg_value = $binop_iadd68.3
2023-11-07 09:01:26,258 [DEBUG] on stmt: neg_ax = ax
2023-11-07 09:01:26,258 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 80
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,258 [DEBUG] on stmt: known_size.1 = $binop_imul84.3
2023-11-07 09:01:26,258 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 92
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const94.1 = const(int, 0)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $96compare_op.2 = num_neg_value == $const94.1
2023-11-07 09:01:26,258 [DEBUG] on stmt: bool102 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1983),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,258 [DEBUG] on stmt: branch $102pred, 104, 150
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 104
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: $108compare_op.2 = origsize != known_size.2
2023-11-07 09:01:26,258 [DEBUG] on stmt: bool114 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1984),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,258 [DEBUG] on stmt: branch $114pred, 116, 146
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 116
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1985)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,258 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 146
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const146.0 = const(NoneType, None)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $148return_value.1 = cast(value=$const146.0)
2023-11-07 09:01:26,258 [DEBUG] on stmt: return $148return_value.1
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 150
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const152.1 = const(int, 1)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $154compare_op.2 = num_neg_value == $const152.1
2023-11-07 09:01:26,258 [DEBUG] on stmt: bool160 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1987),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,258 [DEBUG] on stmt: branch $160pred, 162, 268
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 162
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const164.1 = const(int, 0)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $166compare_op.2 = known_size.2 == $const164.1
2023-11-07 09:01:26,258 [DEBUG] on stmt: bool172 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,258 [DEBUG] on stmt: branch $172pred, 174, 192
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 174
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: inferred = const(int, 0)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const180.2 = const(int, 0)
2023-11-07 09:01:26,258 [DEBUG] on stmt: ok = origsize == $const180.2
2023-11-07 09:01:26,258 [DEBUG] first assign: ok
2023-11-07 09:01:26,258 [DEBUG] replaced with: ok = origsize == $const180.2
2023-11-07 09:01:26,258 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 192
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: inferred.1 = origsize // known_size.2
2023-11-07 09:01:26,258 [DEBUG] on stmt: $binop_mod206.5 = origsize % known_size.2
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const210.6 = const(int, 0)
2023-11-07 09:01:26,258 [DEBUG] on stmt: ok = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,258 [DEBUG] replaced with: ok.1 = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,258 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 220
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1993), Var(inferred, arrayobj.py:1990)], incoming_blocks=[192, 174])
2023-11-07 09:01:26,258 [DEBUG] on stmt: bool222 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,258 [DEBUG] on stmt: branch $222pred, 254, 224
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 224
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,258 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,258 [DEBUG] ==== SSA block rewrite pass on 254
2023-11-07 09:01:26,258 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,258 [DEBUG] on stmt: shape[neg_ax] = inferred.2
2023-11-07 09:01:26,258 [DEBUG] on stmt: $const264.3 = const(NoneType, None)
2023-11-07 09:01:26,258 [DEBUG] on stmt: $266return_value.4 = cast(value=$const264.3)
2023-11-07 09:01:26,259 [DEBUG] on stmt: return $266return_value.4
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 268
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,259 [DEBUG] on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $const280.2 = const(str, multiple negative shape values)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2000)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,259 [DEBUG] on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 269
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2826963d0>
2023-11-07 09:01:26,259 [DEBUG] on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1981), Var(known_size.1, arrayobj.py:1981)], incoming_blocks=[64, 80])
2023-11-07 09:01:26,259 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,259 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {174: [<numba.core.ir.Assign object at 0x28270f1d0>],
             192: [<numba.core.ir.Assign object at 0x28270e490>]})
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: origsize = arg(0, name=origsize)
2023-11-07 09:01:26,259 [DEBUG] on stmt: shape = arg(1, name=shape)
2023-11-07 09:01:26,259 [DEBUG] on stmt: num_neg_value = const(int, 0)
2023-11-07 09:01:26,259 [DEBUG] on stmt: known_size = const(int, 1)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1973)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $40get_iter.6 = getiter(value=$30call.5)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $phi42.0 = $40get_iter.6
2023-11-07 09:01:26,259 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 42
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1975), Var(known_size.3, arrayobj.py:1981)], incoming_blocks=[0, 269])
2023-11-07 09:01:26,259 [DEBUG] on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $phi44.1 = $42for_iter.2
2023-11-07 09:01:26,259 [DEBUG] on stmt: branch $42for_iter.3, 44, 92
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 44
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,259 [DEBUG] on stmt: ax = $44unpack_sequence.2
2023-11-07 09:01:26,259 [DEBUG] on stmt: s = $44unpack_sequence.3
2023-11-07 09:01:26,259 [DEBUG] on stmt: $const54.6 = const(int, 0)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $56compare_op.7 = s < $const54.6
2023-11-07 09:01:26,259 [DEBUG] on stmt: bool62 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1977),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,259 [DEBUG] on stmt: branch $62pred, 64, 80
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 64
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: $const66.2 = const(int, 1)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,259 [DEBUG] on stmt: num_neg_value = $binop_iadd68.3
2023-11-07 09:01:26,259 [DEBUG] on stmt: neg_ax = ax
2023-11-07 09:01:26,259 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 80
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,259 [DEBUG] on stmt: known_size.1 = $binop_imul84.3
2023-11-07 09:01:26,259 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 92
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: $const94.1 = const(int, 0)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $96compare_op.2 = num_neg_value == $const94.1
2023-11-07 09:01:26,259 [DEBUG] on stmt: bool102 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1983),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,259 [DEBUG] on stmt: branch $102pred, 104, 150
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 104
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: $108compare_op.2 = origsize != known_size.2
2023-11-07 09:01:26,259 [DEBUG] on stmt: bool114 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1984),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,259 [DEBUG] on stmt: branch $114pred, 116, 146
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 116
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1985)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,259 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 146
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: $const146.0 = const(NoneType, None)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $148return_value.1 = cast(value=$const146.0)
2023-11-07 09:01:26,259 [DEBUG] on stmt: return $148return_value.1
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 150
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: $const152.1 = const(int, 1)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $154compare_op.2 = num_neg_value == $const152.1
2023-11-07 09:01:26,259 [DEBUG] on stmt: bool160 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1987),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,259 [DEBUG] on stmt: branch $160pred, 162, 268
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 162
2023-11-07 09:01:26,259 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,259 [DEBUG] on stmt: $const164.1 = const(int, 0)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $166compare_op.2 = known_size.2 == $const164.1
2023-11-07 09:01:26,259 [DEBUG] on stmt: bool172 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,259 [DEBUG] on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,259 [DEBUG] on stmt: branch $172pred, 174, 192
2023-11-07 09:01:26,259 [DEBUG] ==== SSA block rewrite pass on 174
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: inferred = const(int, 0)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $const180.2 = const(int, 0)
2023-11-07 09:01:26,260 [DEBUG] on stmt: ok = origsize == $const180.2
2023-11-07 09:01:26,260 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 192
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: inferred.1 = origsize // known_size.2
2023-11-07 09:01:26,260 [DEBUG] on stmt: $binop_mod206.5 = origsize % known_size.2
2023-11-07 09:01:26,260 [DEBUG] on stmt: $const210.6 = const(int, 0)
2023-11-07 09:01:26,260 [DEBUG] on stmt: ok.1 = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,260 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 220
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1993), Var(inferred, arrayobj.py:1990)], incoming_blocks=[192, 174])
2023-11-07 09:01:26,260 [DEBUG] on stmt: bool222 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,260 [DEBUG] find_def var='ok' stmt=$222pred = call bool222(ok, func=bool222, args=(Var(ok, arrayobj.py:1991),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,260 [DEBUG] find_def_from_top label 220
2023-11-07 09:01:26,260 [DEBUG] insert phi node ok.2 = phi(incoming_values=[], incoming_blocks=[]) at 220
2023-11-07 09:01:26,260 [DEBUG] find_def_from_bottom label 192
2023-11-07 09:01:26,260 [DEBUG] incoming_def ok.1 = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,260 [DEBUG] find_def_from_bottom label 174
2023-11-07 09:01:26,260 [DEBUG] incoming_def ok = origsize == $const180.2
2023-11-07 09:01:26,260 [DEBUG] replaced with: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:1995),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,260 [DEBUG] on stmt: branch $222pred, 254, 224
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 224
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,260 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 254
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: shape[neg_ax] = inferred.2
2023-11-07 09:01:26,260 [DEBUG] on stmt: $const264.3 = const(NoneType, None)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $266return_value.4 = cast(value=$const264.3)
2023-11-07 09:01:26,260 [DEBUG] on stmt: return $266return_value.4
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 268
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $const280.2 = const(str, multiple negative shape values)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2000)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,260 [DEBUG] on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 269
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282525d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1981), Var(known_size.1, arrayobj.py:1981)], incoming_blocks=[64, 80])
2023-11-07 09:01:26,260 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,260 [DEBUG] Fix SSA violator on var num_neg_value
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: origsize = arg(0, name=origsize)
2023-11-07 09:01:26,260 [DEBUG] on stmt: shape = arg(1, name=shape)
2023-11-07 09:01:26,260 [DEBUG] on stmt: num_neg_value = const(int, 0)
2023-11-07 09:01:26,260 [DEBUG] first assign: num_neg_value
2023-11-07 09:01:26,260 [DEBUG] replaced with: num_neg_value = const(int, 0)
2023-11-07 09:01:26,260 [DEBUG] on stmt: known_size = const(int, 1)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1973)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $40get_iter.6 = getiter(value=$30call.5)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $phi42.0 = $40get_iter.6
2023-11-07 09:01:26,260 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 42
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1975), Var(known_size.3, arrayobj.py:1981)], incoming_blocks=[0, 269])
2023-11-07 09:01:26,260 [DEBUG] on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $phi44.1 = $42for_iter.2
2023-11-07 09:01:26,260 [DEBUG] on stmt: branch $42for_iter.3, 44, 92
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 44
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,260 [DEBUG] on stmt: ax = $44unpack_sequence.2
2023-11-07 09:01:26,260 [DEBUG] on stmt: s = $44unpack_sequence.3
2023-11-07 09:01:26,260 [DEBUG] on stmt: $const54.6 = const(int, 0)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $56compare_op.7 = s < $const54.6
2023-11-07 09:01:26,260 [DEBUG] on stmt: bool62 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1977),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,260 [DEBUG] on stmt: branch $62pred, 64, 80
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 64
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: $const66.2 = const(int, 1)
2023-11-07 09:01:26,260 [DEBUG] on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,260 [DEBUG] on stmt: num_neg_value = $binop_iadd68.3
2023-11-07 09:01:26,260 [DEBUG] replaced with: num_neg_value.1 = $binop_iadd68.3
2023-11-07 09:01:26,260 [DEBUG] on stmt: neg_ax = ax
2023-11-07 09:01:26,260 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,260 [DEBUG] ==== SSA block rewrite pass on 80
2023-11-07 09:01:26,260 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,260 [DEBUG] on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,261 [DEBUG] on stmt: known_size.1 = $binop_imul84.3
2023-11-07 09:01:26,261 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 92
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: $const94.1 = const(int, 0)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $96compare_op.2 = num_neg_value == $const94.1
2023-11-07 09:01:26,261 [DEBUG] on stmt: bool102 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1983),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: branch $102pred, 104, 150
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 104
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: $108compare_op.2 = origsize != known_size.2
2023-11-07 09:01:26,261 [DEBUG] on stmt: bool114 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1984),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: branch $114pred, 116, 146
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 116
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1985)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 146
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: $const146.0 = const(NoneType, None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $148return_value.1 = cast(value=$const146.0)
2023-11-07 09:01:26,261 [DEBUG] on stmt: return $148return_value.1
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 150
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: $const152.1 = const(int, 1)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $154compare_op.2 = num_neg_value == $const152.1
2023-11-07 09:01:26,261 [DEBUG] on stmt: bool160 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1987),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: branch $160pred, 162, 268
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 162
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: $const164.1 = const(int, 0)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $166compare_op.2 = known_size.2 == $const164.1
2023-11-07 09:01:26,261 [DEBUG] on stmt: bool172 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: branch $172pred, 174, 192
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 174
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: inferred = const(int, 0)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $const180.2 = const(int, 0)
2023-11-07 09:01:26,261 [DEBUG] on stmt: ok = origsize == $const180.2
2023-11-07 09:01:26,261 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 192
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: inferred.1 = origsize // known_size.2
2023-11-07 09:01:26,261 [DEBUG] on stmt: $binop_mod206.5 = origsize % known_size.2
2023-11-07 09:01:26,261 [DEBUG] on stmt: $const210.6 = const(int, 0)
2023-11-07 09:01:26,261 [DEBUG] on stmt: ok.1 = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,261 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 220
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1994), Var(ok, arrayobj.py:1991)], incoming_blocks=[192, 174])
2023-11-07 09:01:26,261 [DEBUG] on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1993), Var(inferred, arrayobj.py:1990)], incoming_blocks=[192, 174])
2023-11-07 09:01:26,261 [DEBUG] on stmt: bool222 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:1995),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: branch $222pred, 254, 224
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 224
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 254
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: shape[neg_ax] = inferred.2
2023-11-07 09:01:26,261 [DEBUG] on stmt: $const264.3 = const(NoneType, None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $266return_value.4 = cast(value=$const264.3)
2023-11-07 09:01:26,261 [DEBUG] on stmt: return $266return_value.4
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 268
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $const280.2 = const(str, multiple negative shape values)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2000)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 269
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282728d10>
2023-11-07 09:01:26,261 [DEBUG] on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1981), Var(known_size.1, arrayobj.py:1981)], incoming_blocks=[64, 80])
2023-11-07 09:01:26,261 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,261 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x28270e810>],
             64: [<numba.core.ir.Assign object at 0x282526890>]})
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,261 [DEBUG] on stmt: origsize = arg(0, name=origsize)
2023-11-07 09:01:26,261 [DEBUG] on stmt: shape = arg(1, name=shape)
2023-11-07 09:01:26,261 [DEBUG] on stmt: num_neg_value = const(int, 0)
2023-11-07 09:01:26,261 [DEBUG] on stmt: known_size = const(int, 1)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $12load_global.2 = global(enumerate: <class 'enumerate'>)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $30call.5 = call $12load_global.2(shape, func=$12load_global.2, args=[Var(shape, arrayobj.py:1973)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $40get_iter.6 = getiter(value=$30call.5)
2023-11-07 09:01:26,261 [DEBUG] on stmt: $phi42.0 = $40get_iter.6
2023-11-07 09:01:26,261 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,261 [DEBUG] ==== SSA block rewrite pass on 42
2023-11-07 09:01:26,261 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,262 [DEBUG] on stmt: known_size.2 = phi(incoming_values=[Var(known_size, arrayobj.py:1975), Var(known_size.3, arrayobj.py:1981)], incoming_blocks=[0, 269])
2023-11-07 09:01:26,262 [DEBUG] on stmt: $42for_iter.1 = iternext(value=$phi42.0)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $42for_iter.2 = pair_first(value=$42for_iter.1)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $42for_iter.3 = pair_second(value=$42for_iter.1)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $phi44.1 = $42for_iter.2
2023-11-07 09:01:26,262 [DEBUG] on stmt: branch $42for_iter.3, 44, 92
2023-11-07 09:01:26,262 [DEBUG] ==== SSA block rewrite pass on 44
2023-11-07 09:01:26,262 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,262 [DEBUG] on stmt: $44unpack_sequence.4 = exhaust_iter(value=$phi44.1, count=2)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $44unpack_sequence.2 = static_getitem(value=$44unpack_sequence.4, index=0, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $44unpack_sequence.3 = static_getitem(value=$44unpack_sequence.4, index=1, index_var=None, fn=<built-in function getitem>)
2023-11-07 09:01:26,262 [DEBUG] on stmt: ax = $44unpack_sequence.2
2023-11-07 09:01:26,262 [DEBUG] on stmt: s = $44unpack_sequence.3
2023-11-07 09:01:26,262 [DEBUG] on stmt: $const54.6 = const(int, 0)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $56compare_op.7 = s < $const54.6
2023-11-07 09:01:26,262 [DEBUG] on stmt: bool62 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $62pred = call bool62($56compare_op.7, func=bool62, args=(Var($56compare_op.7, arrayobj.py:1977),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,262 [DEBUG] on stmt: branch $62pred, 64, 80
2023-11-07 09:01:26,262 [DEBUG] ==== SSA block rewrite pass on 64
2023-11-07 09:01:26,262 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,262 [DEBUG] on stmt: $const66.2 = const(int, 1)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,262 [DEBUG] find_def var='num_neg_value' stmt=$binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,262 [DEBUG] find_def_from_top label 64
2023-11-07 09:01:26,262 [DEBUG] idom 44 from label 64
2023-11-07 09:01:26,262 [DEBUG] find_def_from_bottom label 44
2023-11-07 09:01:26,262 [DEBUG] find_def_from_top label 44
2023-11-07 09:01:26,262 [DEBUG] idom 42 from label 44
2023-11-07 09:01:26,262 [DEBUG] find_def_from_bottom label 42
2023-11-07 09:01:26,262 [DEBUG] find_def_from_top label 42
2023-11-07 09:01:26,262 [DEBUG] insert phi node num_neg_value.2 = phi(incoming_values=[], incoming_blocks=[]) at 42
2023-11-07 09:01:26,262 [DEBUG] find_def_from_bottom label 0
2023-11-07 09:01:26,262 [DEBUG] incoming_def num_neg_value = const(int, 0)
2023-11-07 09:01:26,262 [DEBUG] find_def_from_bottom label 269
2023-11-07 09:01:26,262 [DEBUG] find_def_from_top label 269
2023-11-07 09:01:26,262 [DEBUG] insert phi node num_neg_value.3 = phi(incoming_values=[], incoming_blocks=[]) at 269
2023-11-07 09:01:26,262 [DEBUG] find_def_from_bottom label 64
2023-11-07 09:01:26,262 [DEBUG] incoming_def num_neg_value.1 = $binop_iadd68.3
2023-11-07 09:01:26,262 [DEBUG] find_def_from_bottom label 80
2023-11-07 09:01:26,262 [DEBUG] find_def_from_top label 80
2023-11-07 09:01:26,262 [DEBUG] idom 44 from label 80
2023-11-07 09:01:26,262 [DEBUG] find_def_from_bottom label 44
2023-11-07 09:01:26,262 [DEBUG] find_def_from_top label 44
2023-11-07 09:01:26,262 [DEBUG] idom 42 from label 44
2023-11-07 09:01:26,262 [DEBUG] find_def_from_bottom label 42
2023-11-07 09:01:26,262 [DEBUG] incoming_def num_neg_value.2 = phi(incoming_values=[Var(num_neg_value, arrayobj.py:1974)], incoming_blocks=[0])
2023-11-07 09:01:26,262 [DEBUG] incoming_def num_neg_value.3 = phi(incoming_values=[Var(num_neg_value.1, arrayobj.py:1978), Var(num_neg_value.2, arrayobj.py:1978)], incoming_blocks=[64, 80])
2023-11-07 09:01:26,262 [DEBUG] replaced with: $binop_iadd68.3 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=num_neg_value.2, rhs=$const66.2, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,262 [DEBUG] on stmt: num_neg_value.1 = $binop_iadd68.3
2023-11-07 09:01:26,262 [DEBUG] on stmt: neg_ax = ax
2023-11-07 09:01:26,262 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,262 [DEBUG] ==== SSA block rewrite pass on 80
2023-11-07 09:01:26,262 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,262 [DEBUG] on stmt: $binop_imul84.3 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=known_size.2, rhs=s, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,262 [DEBUG] on stmt: known_size.1 = $binop_imul84.3
2023-11-07 09:01:26,262 [DEBUG] on stmt: jump 269
2023-11-07 09:01:26,262 [DEBUG] ==== SSA block rewrite pass on 92
2023-11-07 09:01:26,262 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,262 [DEBUG] on stmt: $const94.1 = const(int, 0)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $96compare_op.2 = num_neg_value == $const94.1
2023-11-07 09:01:26,262 [DEBUG] find_def var='num_neg_value' stmt=$96compare_op.2 = num_neg_value == $const94.1
2023-11-07 09:01:26,262 [DEBUG] find_def_from_top label 92
2023-11-07 09:01:26,262 [DEBUG] idom 42 from label 92
2023-11-07 09:01:26,262 [DEBUG] find_def_from_bottom label 42
2023-11-07 09:01:26,262 [DEBUG] replaced with: $96compare_op.2 = num_neg_value.2 == $const94.1
2023-11-07 09:01:26,262 [DEBUG] on stmt: bool102 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $102pred = call bool102($96compare_op.2, func=bool102, args=(Var($96compare_op.2, arrayobj.py:1983),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,262 [DEBUG] on stmt: branch $102pred, 104, 150
2023-11-07 09:01:26,262 [DEBUG] ==== SSA block rewrite pass on 104
2023-11-07 09:01:26,262 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,262 [DEBUG] on stmt: $108compare_op.2 = origsize != known_size.2
2023-11-07 09:01:26,262 [DEBUG] on stmt: bool114 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $114pred = call bool114($108compare_op.2, func=bool114, args=(Var($108compare_op.2, arrayobj.py:1984),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,262 [DEBUG] on stmt: branch $114pred, 116, 146
2023-11-07 09:01:26,262 [DEBUG] ==== SSA block rewrite pass on 116
2023-11-07 09:01:26,262 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,262 [DEBUG] on stmt: $116load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $const128.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $134call.3 = call $116load_global.0($const128.2, func=$116load_global.0, args=[Var($const128.2, arrayobj.py:1985)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,262 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,262 [DEBUG] ==== SSA block rewrite pass on 146
2023-11-07 09:01:26,262 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,262 [DEBUG] on stmt: $const146.0 = const(NoneType, None)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $148return_value.1 = cast(value=$const146.0)
2023-11-07 09:01:26,262 [DEBUG] on stmt: return $148return_value.1
2023-11-07 09:01:26,262 [DEBUG] ==== SSA block rewrite pass on 150
2023-11-07 09:01:26,262 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,262 [DEBUG] on stmt: $const152.1 = const(int, 1)
2023-11-07 09:01:26,262 [DEBUG] on stmt: $154compare_op.2 = num_neg_value == $const152.1
2023-11-07 09:01:26,262 [DEBUG] find_def var='num_neg_value' stmt=$154compare_op.2 = num_neg_value == $const152.1
2023-11-07 09:01:26,262 [DEBUG] find_def_from_top label 150
2023-11-07 09:01:26,262 [DEBUG] idom 92 from label 150
2023-11-07 09:01:26,262 [DEBUG] find_def_from_bottom label 92
2023-11-07 09:01:26,262 [DEBUG] find_def_from_top label 92
2023-11-07 09:01:26,262 [DEBUG] idom 42 from label 92
2023-11-07 09:01:26,263 [DEBUG] find_def_from_bottom label 42
2023-11-07 09:01:26,263 [DEBUG] replaced with: $154compare_op.2 = num_neg_value.2 == $const152.1
2023-11-07 09:01:26,263 [DEBUG] on stmt: bool160 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,263 [DEBUG] on stmt: $160pred = call bool160($154compare_op.2, func=bool160, args=(Var($154compare_op.2, arrayobj.py:1987),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,263 [DEBUG] on stmt: branch $160pred, 162, 268
2023-11-07 09:01:26,263 [DEBUG] ==== SSA block rewrite pass on 162
2023-11-07 09:01:26,263 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,263 [DEBUG] on stmt: $const164.1 = const(int, 0)
2023-11-07 09:01:26,263 [DEBUG] on stmt: $166compare_op.2 = known_size.2 == $const164.1
2023-11-07 09:01:26,263 [DEBUG] on stmt: bool172 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,263 [DEBUG] on stmt: $172pred = call bool172($166compare_op.2, func=bool172, args=(Var($166compare_op.2, arrayobj.py:1989),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,263 [DEBUG] on stmt: branch $172pred, 174, 192
2023-11-07 09:01:26,263 [DEBUG] ==== SSA block rewrite pass on 174
2023-11-07 09:01:26,263 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,263 [DEBUG] on stmt: inferred = const(int, 0)
2023-11-07 09:01:26,263 [DEBUG] on stmt: $const180.2 = const(int, 0)
2023-11-07 09:01:26,263 [DEBUG] on stmt: ok = origsize == $const180.2
2023-11-07 09:01:26,263 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,263 [DEBUG] ==== SSA block rewrite pass on 192
2023-11-07 09:01:26,263 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,263 [DEBUG] on stmt: inferred.1 = origsize // known_size.2
2023-11-07 09:01:26,263 [DEBUG] on stmt: $binop_mod206.5 = origsize % known_size.2
2023-11-07 09:01:26,263 [DEBUG] on stmt: $const210.6 = const(int, 0)
2023-11-07 09:01:26,263 [DEBUG] on stmt: ok.1 = $binop_mod206.5 == $const210.6
2023-11-07 09:01:26,263 [DEBUG] on stmt: jump 220
2023-11-07 09:01:26,263 [DEBUG] ==== SSA block rewrite pass on 220
2023-11-07 09:01:26,263 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,263 [DEBUG] on stmt: ok.2 = phi(incoming_values=[Var(ok.1, arrayobj.py:1994), Var(ok, arrayobj.py:1991)], incoming_blocks=[192, 174])
2023-11-07 09:01:26,263 [DEBUG] on stmt: inferred.2 = phi(incoming_values=[Var(inferred.1, arrayobj.py:1993), Var(inferred, arrayobj.py:1990)], incoming_blocks=[192, 174])
2023-11-07 09:01:26,263 [DEBUG] on stmt: bool222 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,263 [DEBUG] on stmt: $222pred = call bool222(ok.2, func=bool222, args=(Var(ok.2, arrayobj.py:1995),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,263 [DEBUG] on stmt: branch $222pred, 254, 224
2023-11-07 09:01:26,263 [DEBUG] ==== SSA block rewrite pass on 224
2023-11-07 09:01:26,263 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,263 [DEBUG] on stmt: $224load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,263 [DEBUG] on stmt: $const236.2 = const(str, total size of new array must be unchanged)
2023-11-07 09:01:26,263 [DEBUG] on stmt: $242call.3 = call $224load_global.0($const236.2, func=$224load_global.0, args=[Var($const236.2, arrayobj.py:1996)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,263 [DEBUG] on stmt: <static> raise <class 'ValueError'>('total size of new array must be unchanged')
2023-11-07 09:01:26,263 [DEBUG] ==== SSA block rewrite pass on 254
2023-11-07 09:01:26,263 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,263 [DEBUG] on stmt: shape[neg_ax] = inferred.2
2023-11-07 09:01:26,263 [DEBUG] on stmt: $const264.3 = const(NoneType, None)
2023-11-07 09:01:26,263 [DEBUG] on stmt: $266return_value.4 = cast(value=$const264.3)
2023-11-07 09:01:26,263 [DEBUG] on stmt: return $266return_value.4
2023-11-07 09:01:26,263 [DEBUG] ==== SSA block rewrite pass on 268
2023-11-07 09:01:26,263 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,263 [DEBUG] on stmt: $268load_global.0 = global(ValueError: <class 'ValueError'>)
2023-11-07 09:01:26,263 [DEBUG] on stmt: $const280.2 = const(str, multiple negative shape values)
2023-11-07 09:01:26,263 [DEBUG] on stmt: $286call.3 = call $268load_global.0($const280.2, func=$268load_global.0, args=[Var($const280.2, arrayobj.py:2000)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,263 [DEBUG] on stmt: <static> raise <class 'ValueError'>('multiple negative shape values')
2023-11-07 09:01:26,263 [DEBUG] ==== SSA block rewrite pass on 269
2023-11-07 09:01:26,263 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x282697f50>
2023-11-07 09:01:26,263 [DEBUG] on stmt: known_size.3 = phi(incoming_values=[Var(known_size.2, arrayobj.py:1981), Var(known_size.1, arrayobj.py:1981)], incoming_blocks=[64, 80])
2023-11-07 09:01:26,263 [DEBUG] on stmt: jump 42
2023-11-07 09:01:26,327 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=482)
           2	RESUME(arg=0, lineno=482)
           4	LOAD_FAST(arg=0, lineno=484)
           6	LOAD_FAST(arg=1, lineno=484)
           8	COMPARE_OP(arg=4, lineno=484)
          14	RETURN_VALUE(arg=None, lineno=484)
2023-11-07 09:01:26,327 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,327 [DEBUG] stack: []
2023-11-07 09:01:26,327 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,327 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=482)
2023-11-07 09:01:26,327 [DEBUG] stack []
2023-11-07 09:01:26,327 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=482)
2023-11-07 09:01:26,327 [DEBUG] stack []
2023-11-07 09:01:26,327 [DEBUG] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=484)
2023-11-07 09:01:26,327 [DEBUG] stack []
2023-11-07 09:01:26,327 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=484)
2023-11-07 09:01:26,327 [DEBUG] stack ['$a4.0']
2023-11-07 09:01:26,327 [DEBUG] dispatch pc=8, inst=COMPARE_OP(arg=4, lineno=484)
2023-11-07 09:01:26,327 [DEBUG] stack ['$a4.0', '$min_val6.1']
2023-11-07 09:01:26,327 [DEBUG] dispatch pc=14, inst=RETURN_VALUE(arg=None, lineno=484)
2023-11-07 09:01:26,327 [DEBUG] stack ['$8compare_op.2']
2023-11-07 09:01:26,328 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,328 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,328 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,328 [DEBUG] defmap: {}
2023-11-07 09:01:26,328 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,328 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,328 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,328 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,328 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,328 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'res': '$min_val6.1'}), (8, {'lhs': '$a4.0', 'rhs': '$min_val6.1', 'res': '$8compare_op.2'}), (10, {}), (12, {}), (14, {'retval': '$8compare_op.2', 'castval': '$14return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,328 [DEBUG] label 0:
    a = arg(0, name=a)                       ['a']
    min_val = arg(1, name=min_val)           ['min_val']
    $8compare_op.2 = a > min_val             ['$8compare_op.2', 'a', 'min_val']
    $14return_value.3 = cast(value=$8compare_op.2) ['$14return_value.3', '$8compare_op.2']
    return $14return_value.3                 ['$14return_value.3']

2023-11-07 09:01:26,331 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,331 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x28296b610>
2023-11-07 09:01:26,331 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,331 [DEBUG] on stmt: min_val = arg(1, name=min_val)
2023-11-07 09:01:26,331 [DEBUG] on stmt: $8compare_op.2 = a > min_val
2023-11-07 09:01:26,331 [DEBUG] on stmt: $14return_value.3 = cast(value=$8compare_op.2)
2023-11-07 09:01:26,331 [DEBUG] on stmt: return $14return_value.3
2023-11-07 09:01:26,331 [DEBUG] defs defaultdict(<class 'list'>,
            {'$14return_value.3': [<numba.core.ir.Assign object at 0x28296b150>],
             '$8compare_op.2': [<numba.core.ir.Assign object at 0x28296af90>],
             'a': [<numba.core.ir.Assign object at 0x28296a910>],
             'min_val': [<numba.core.ir.Assign object at 0x28296aa10>]})
2023-11-07 09:01:26,331 [DEBUG] SSA violators set()
2023-11-07 09:01:26,383 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=438)
           2	COPY_FREE_VARS(arg=1, lineno=438)
           4	RESUME(arg=0, lineno=438)
           6	LOAD_DEREF(arg=3, lineno=441)
           8	STORE_FAST(arg=1, lineno=441)
          10	LOAD_GLOBAL(arg=1, lineno=442)
          22	LOAD_ATTR(arg=1, lineno=442)
          32	LOAD_FAST(arg=0, lineno=442)
          34	PRECALL(arg=1, lineno=442)
          38	CALL(arg=1, lineno=442)
          48	GET_ITER(arg=None, lineno=442)
>         50	FOR_ITER(arg=25, lineno=442)
          52	STORE_FAST(arg=2, lineno=442)
          54	LOAD_FAST(arg=1, lineno=443)
          56	LOAD_FAST(arg=2, lineno=443)
          58	LOAD_METHOD(arg=2, lineno=443)
          80	PRECALL(arg=0, lineno=443)
          84	CALL(arg=0, lineno=443)
          94	BINARY_OP(arg=13, lineno=443)
          98	STORE_FAST(arg=1, lineno=443)
         100	JUMP_BACKWARD(arg=26, lineno=443)
>        102	LOAD_FAST(arg=1, lineno=444)
         104	LOAD_FAST(arg=0, lineno=444)
         106	LOAD_ATTR(arg=3, lineno=444)
         116	BINARY_OP(arg=11, lineno=444)
         120	RETURN_VALUE(arg=None, lineno=444)
2023-11-07 09:01:26,383 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,383 [DEBUG] stack: []
2023-11-07 09:01:26,383 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=438)
2023-11-07 09:01:26,383 [DEBUG] stack []
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=438)
2023-11-07 09:01:26,383 [DEBUG] stack []
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=438)
2023-11-07 09:01:26,383 [DEBUG] stack []
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=6, inst=LOAD_DEREF(arg=3, lineno=441)
2023-11-07 09:01:26,383 [DEBUG] stack []
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=8, inst=STORE_FAST(arg=1, lineno=441)
2023-11-07 09:01:26,383 [DEBUG] stack ['$6load_deref.0']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=10, inst=LOAD_GLOBAL(arg=1, lineno=442)
2023-11-07 09:01:26,383 [DEBUG] stack []
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=22, inst=LOAD_ATTR(arg=1, lineno=442)
2023-11-07 09:01:26,383 [DEBUG] stack ['$null$10.2', '$10load_global.1']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=442)
2023-11-07 09:01:26,383 [DEBUG] stack ['$null$10.2', '$22load_attr.3']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=34, inst=PRECALL(arg=1, lineno=442)
2023-11-07 09:01:26,383 [DEBUG] stack ['$null$10.2', '$22load_attr.3', '$a32.4']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=38, inst=CALL(arg=1, lineno=442)
2023-11-07 09:01:26,383 [DEBUG] stack ['$null$10.2', '$22load_attr.3', '$a32.4']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=48, inst=GET_ITER(arg=None, lineno=442)
2023-11-07 09:01:26,383 [DEBUG] stack ['$38call.5']
2023-11-07 09:01:26,383 [DEBUG] end state. edges=[Edge(pc=50, stack=('$48get_iter.6',), blockstack=(), npush=0)]
2023-11-07 09:01:26,383 [DEBUG] pending: deque([State(pc_initial=50 nstack_initial=1)])
2023-11-07 09:01:26,383 [DEBUG] stack: ['$phi50.0']
2023-11-07 09:01:26,383 [DEBUG] state.pc_initial: State(pc_initial=50 nstack_initial=1)
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=50, inst=FOR_ITER(arg=25, lineno=442)
2023-11-07 09:01:26,383 [DEBUG] stack ['$phi50.0']
2023-11-07 09:01:26,383 [DEBUG] end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=52, stack=('$phi50.0', '$50for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,383 [DEBUG] pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=52 nstack_initial=2)])
2023-11-07 09:01:26,383 [DEBUG] stack: []
2023-11-07 09:01:26,383 [DEBUG] state.pc_initial: State(pc_initial=102 nstack_initial=0)
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=444)
2023-11-07 09:01:26,383 [DEBUG] stack []
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=104, inst=LOAD_FAST(arg=0, lineno=444)
2023-11-07 09:01:26,383 [DEBUG] stack ['$c102.0']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=106, inst=LOAD_ATTR(arg=3, lineno=444)
2023-11-07 09:01:26,383 [DEBUG] stack ['$c102.0', '$a104.1']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=116, inst=BINARY_OP(arg=11, lineno=444)
2023-11-07 09:01:26,383 [DEBUG] stack ['$c102.0', '$106load_attr.2']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=444)
2023-11-07 09:01:26,383 [DEBUG] stack ['$binop_truediv116.3']
2023-11-07 09:01:26,383 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,383 [DEBUG] pending: deque([State(pc_initial=52 nstack_initial=2)])
2023-11-07 09:01:26,383 [DEBUG] stack: ['$phi52.0', '$phi52.1']
2023-11-07 09:01:26,383 [DEBUG] state.pc_initial: State(pc_initial=52 nstack_initial=2)
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=52, inst=STORE_FAST(arg=2, lineno=442)
2023-11-07 09:01:26,383 [DEBUG] stack ['$phi52.0', '$phi52.1']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=54, inst=LOAD_FAST(arg=1, lineno=443)
2023-11-07 09:01:26,383 [DEBUG] stack ['$phi52.0']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=56, inst=LOAD_FAST(arg=2, lineno=443)
2023-11-07 09:01:26,383 [DEBUG] stack ['$phi52.0', '$c54.2']
2023-11-07 09:01:26,383 [DEBUG] dispatch pc=58, inst=LOAD_METHOD(arg=2, lineno=443)
2023-11-07 09:01:26,383 [DEBUG] stack ['$phi52.0', '$c54.2', '$v56.3']
2023-11-07 09:01:26,384 [DEBUG] dispatch pc=80, inst=PRECALL(arg=0, lineno=443)
2023-11-07 09:01:26,384 [DEBUG] stack ['$phi52.0', '$c54.2', '$null$58.4', '$58load_method.5']
2023-11-07 09:01:26,384 [DEBUG] dispatch pc=84, inst=CALL(arg=0, lineno=443)
2023-11-07 09:01:26,384 [DEBUG] stack ['$phi52.0', '$c54.2', '$null$58.4', '$58load_method.5']
2023-11-07 09:01:26,384 [DEBUG] dispatch pc=94, inst=BINARY_OP(arg=13, lineno=443)
2023-11-07 09:01:26,384 [DEBUG] stack ['$phi52.0', '$c54.2', '$84call.6']
2023-11-07 09:01:26,384 [DEBUG] dispatch pc=98, inst=STORE_FAST(arg=1, lineno=443)
2023-11-07 09:01:26,384 [DEBUG] stack ['$phi52.0', '$binop_iadd94.7']
2023-11-07 09:01:26,384 [DEBUG] dispatch pc=100, inst=JUMP_BACKWARD(arg=26, lineno=443)
2023-11-07 09:01:26,384 [DEBUG] stack ['$phi52.0']
2023-11-07 09:01:26,384 [DEBUG] end state. edges=[Edge(pc=50, stack=('$phi52.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,384 [DEBUG] pending: deque([State(pc_initial=50 nstack_initial=1)])
2023-11-07 09:01:26,384 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,384 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=1): {'$phi50.0'},
             State(pc_initial=52 nstack_initial=2): {'$phi52.1'},
             State(pc_initial=102 nstack_initial=0): set()})
2023-11-07 09:01:26,384 [DEBUG] defmap: {'$phi50.0': State(pc_initial=0 nstack_initial=0),
 '$phi52.1': State(pc_initial=50 nstack_initial=1)}
2023-11-07 09:01:26,384 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi50.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi52.0', State(pc_initial=52 nstack_initial=2))},
             '$phi52.0': {('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))}})
2023-11-07 09:01:26,384 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi50.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi50.0', State(pc_initial=50 nstack_initial=1))},
             '$phi52.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))}})
2023-11-07 09:01:26,384 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi50.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))}})
2023-11-07 09:01:26,384 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi50.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.0': {('$48get_iter.6',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi52.1': {('$50for_iter.2',
                           State(pc_initial=50 nstack_initial=1))}})
2023-11-07 09:01:26,384 [DEBUG] keep phismap: {'$phi50.0': {('$48get_iter.6', State(pc_initial=0 nstack_initial=0))},
 '$phi52.1': {('$50for_iter.2', State(pc_initial=50 nstack_initial=1))}}
2023-11-07 09:01:26,384 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi50.0': '$48get_iter.6'},
             State(pc_initial=50 nstack_initial=1): {'$phi52.1': '$50for_iter.2'}})
2023-11-07 09:01:26,384 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,384 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$6load_deref.0'}), (8, {'value': '$6load_deref.0'}), (10, {'idx': 0, 'res': '$10load_global.1'}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {}), (22, {'item': '$10load_global.1', 'res': '$22load_attr.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$a32.4'}), (34, {}), (36, {}), (38, {'func': '$22load_attr.3', 'args': ['$a32.4'], 'kw_names': None, 'res': '$38call.5'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'value': '$38call.5', 'res': '$48get_iter.6'})), outgoing_phis={'$phi50.0': '$48get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$48get_iter.6',)})
2023-11-07 09:01:26,384 [DEBUG] block_infos State(pc_initial=50 nstack_initial=1):
AdaptBlockInfo(insts=((50, {'iterator': '$phi50.0', 'pair': '$50for_iter.1', 'indval': '$50for_iter.2', 'pred': '$50for_iter.3'}),), outgoing_phis={'$phi52.1': '$50for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 52: ('$phi50.0', '$50for_iter.2')})
2023-11-07 09:01:26,384 [DEBUG] block_infos State(pc_initial=52 nstack_initial=2):
AdaptBlockInfo(insts=((52, {'value': '$phi52.1'}), (54, {'res': '$c54.2'}), (56, {'res': '$v56.3'}), (58, {'item': '$v56.3', 'res': '$58load_method.5'}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {}), (80, {}), (82, {}), (84, {'func': '$58load_method.5', 'args': [], 'kw_names': None, 'res': '$84call.6'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'op': '+=', 'lhs': '$c54.2', 'rhs': '$84call.6', 'res': '$binop_iadd94.7'}), (96, {}), (98, {'value': '$binop_iadd94.7'}), (100, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={50: ('$phi52.0',)})
2023-11-07 09:01:26,384 [DEBUG] block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$c102.0'}), (104, {'res': '$a104.1'}), (106, {'item': '$a104.1', 'res': '$106load_attr.2'}), (108, {}), (110, {}), (112, {}), (114, {}), (116, {'op': '/', 'lhs': '$c102.0', 'rhs': '$106load_attr.2', 'res': '$binop_truediv116.3'}), (118, {}), (120, {'retval': '$binop_truediv116.3', 'castval': '$120return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,384 [DEBUG] label 0:
    a = arg(0, name=a)                       ['a']
    c = freevar(acc_init: 0.0)               ['c']
    $10load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$10load_global.1']
    $22load_attr.3 = getattr(value=$10load_global.1, attr=nditer) ['$10load_global.1', '$22load_attr.3']
    $38call.5 = call $22load_attr.3(a, func=$22load_attr.3, args=[Var(a, arraymath.py:438)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_attr.3', '$38call.5', 'a']
    $48get_iter.6 = getiter(value=$38call.5) ['$38call.5', '$48get_iter.6']
    $phi50.0 = $48get_iter.6                 ['$48get_iter.6', '$phi50.0']
    jump 50                                  []
label 50:
    $50for_iter.1 = iternext(value=$phi50.0) ['$50for_iter.1', '$phi50.0']
    $50for_iter.2 = pair_first(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.2']
    $50for_iter.3 = pair_second(value=$50for_iter.1) ['$50for_iter.1', '$50for_iter.3']
    $phi52.1 = $50for_iter.2                 ['$50for_iter.2', '$phi52.1']
    branch $50for_iter.3, 52, 102            ['$50for_iter.3']
label 52:
    v = $phi52.1                             ['$phi52.1', 'v']
    $58load_method.5 = getattr(value=v, attr=item) ['$58load_method.5', 'v']
    $84call.6 = call $58load_method.5(func=$58load_method.5, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$58load_method.5', '$84call.6']
    $binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined) ['$84call.6', '$binop_iadd94.7', 'c']
    c = $binop_iadd94.7                      ['$binop_iadd94.7', 'c']
    jump 50                                  []
label 102:
    $106load_attr.2 = getattr(value=a, attr=size) ['$106load_attr.2', 'a']
    $binop_truediv116.3 = c / $106load_attr.2 ['$106load_attr.2', '$binop_truediv116.3', 'c']
    $120return_value.4 = cast(value=$binop_truediv116.3) ['$120return_value.4', '$binop_truediv116.3']
    return $120return_value.4                ['$120return_value.4']

2023-11-07 09:01:26,387 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,387 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x293309e90>
2023-11-07 09:01:26,387 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,387 [DEBUG] on stmt: c = freevar(acc_init: 0.0)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $10load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $22load_attr.3 = getattr(value=$10load_global.1, attr=nditer)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $38call.5 = call $22load_attr.3(a, func=$22load_attr.3, args=[Var(a, arraymath.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $48get_iter.6 = getiter(value=$38call.5)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $phi50.0 = $48get_iter.6
2023-11-07 09:01:26,387 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,387 [DEBUG] ==== SSA block analysis pass on 50
2023-11-07 09:01:26,387 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x293309e90>
2023-11-07 09:01:26,387 [DEBUG] on stmt: $50for_iter.1 = iternext(value=$phi50.0)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $phi52.1 = $50for_iter.2
2023-11-07 09:01:26,387 [DEBUG] on stmt: branch $50for_iter.3, 52, 102
2023-11-07 09:01:26,387 [DEBUG] ==== SSA block analysis pass on 52
2023-11-07 09:01:26,387 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x293309e90>
2023-11-07 09:01:26,387 [DEBUG] on stmt: v = $phi52.1
2023-11-07 09:01:26,387 [DEBUG] on stmt: $58load_method.5 = getattr(value=v, attr=item)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $84call.6 = call $58load_method.5(func=$58load_method.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,387 [DEBUG] on stmt: c = $binop_iadd94.7
2023-11-07 09:01:26,387 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,387 [DEBUG] ==== SSA block analysis pass on 102
2023-11-07 09:01:26,387 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x293309e90>
2023-11-07 09:01:26,387 [DEBUG] on stmt: $106load_attr.2 = getattr(value=a, attr=size)
2023-11-07 09:01:26,387 [DEBUG] on stmt: $binop_truediv116.3 = c / $106load_attr.2
2023-11-07 09:01:26,387 [DEBUG] on stmt: $120return_value.4 = cast(value=$binop_truediv116.3)
2023-11-07 09:01:26,387 [DEBUG] on stmt: return $120return_value.4
2023-11-07 09:01:26,388 [DEBUG] defs defaultdict(<class 'list'>,
            {'$106load_attr.2': [<numba.core.ir.Assign object at 0x29330bed0>],
             '$10load_global.1': [<numba.core.ir.Assign object at 0x293309a10>],
             '$120return_value.4': [<numba.core.ir.Assign object at 0x29330c410>],
             '$22load_attr.3': [<numba.core.ir.Assign object at 0x293309b90>],
             '$38call.5': [<numba.core.ir.Assign object at 0x293309fd0>],
             '$48get_iter.6': [<numba.core.ir.Assign object at 0x29330a1d0>],
             '$50for_iter.1': [<numba.core.ir.Assign object at 0x29330a550>],
             '$50for_iter.2': [<numba.core.ir.Assign object at 0x29330a6d0>],
             '$50for_iter.3': [<numba.core.ir.Assign object at 0x29330a850>],
             '$58load_method.5': [<numba.core.ir.Assign object at 0x29330b250>],
             '$84call.6': [<numba.core.ir.Assign object at 0x29330b450>],
             '$binop_iadd94.7': [<numba.core.ir.Assign object at 0x29330b710>],
             '$binop_truediv116.3': [<numba.core.ir.Assign object at 0x29330c1d0>],
             '$phi50.0': [<numba.core.ir.Assign object at 0x293309710>],
             '$phi52.1': [<numba.core.ir.Assign object at 0x29330a910>],
             'a': [<numba.core.ir.Assign object at 0x293308bd0>],
             'c': [<numba.core.ir.Assign object at 0x293308710>,
                   <numba.core.ir.Assign object at 0x29330b890>],
             'v': [<numba.core.ir.Assign object at 0x29330abd0>]})
2023-11-07 09:01:26,388 [DEBUG] SSA violators {'c'}
2023-11-07 09:01:26,388 [DEBUG] Fix SSA violator on var c
2023-11-07 09:01:26,388 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,388 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29330d110>
2023-11-07 09:01:26,388 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,388 [DEBUG] on stmt: c = freevar(acc_init: 0.0)
2023-11-07 09:01:26,388 [DEBUG] first assign: c
2023-11-07 09:01:26,388 [DEBUG] replaced with: c = freevar(acc_init: 0.0)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $10load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $22load_attr.3 = getattr(value=$10load_global.1, attr=nditer)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $38call.5 = call $22load_attr.3(a, func=$22load_attr.3, args=[Var(a, arraymath.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $48get_iter.6 = getiter(value=$38call.5)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $phi50.0 = $48get_iter.6
2023-11-07 09:01:26,388 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,388 [DEBUG] ==== SSA block rewrite pass on 50
2023-11-07 09:01:26,388 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29330d110>
2023-11-07 09:01:26,388 [DEBUG] on stmt: $50for_iter.1 = iternext(value=$phi50.0)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $phi52.1 = $50for_iter.2
2023-11-07 09:01:26,388 [DEBUG] on stmt: branch $50for_iter.3, 52, 102
2023-11-07 09:01:26,388 [DEBUG] ==== SSA block rewrite pass on 52
2023-11-07 09:01:26,388 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29330d110>
2023-11-07 09:01:26,388 [DEBUG] on stmt: v = $phi52.1
2023-11-07 09:01:26,388 [DEBUG] on stmt: $58load_method.5 = getattr(value=v, attr=item)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $84call.6 = call $58load_method.5(func=$58load_method.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,388 [DEBUG] on stmt: c = $binop_iadd94.7
2023-11-07 09:01:26,388 [DEBUG] replaced with: c.1 = $binop_iadd94.7
2023-11-07 09:01:26,388 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,388 [DEBUG] ==== SSA block rewrite pass on 102
2023-11-07 09:01:26,388 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29330d110>
2023-11-07 09:01:26,388 [DEBUG] on stmt: $106load_attr.2 = getattr(value=a, attr=size)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $binop_truediv116.3 = c / $106load_attr.2
2023-11-07 09:01:26,388 [DEBUG] on stmt: $120return_value.4 = cast(value=$binop_truediv116.3)
2023-11-07 09:01:26,388 [DEBUG] on stmt: return $120return_value.4
2023-11-07 09:01:26,388 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x29330d050>],
             52: [<numba.core.ir.Assign object at 0x29330c910>]})
2023-11-07 09:01:26,388 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,388 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29330d190>
2023-11-07 09:01:26,388 [DEBUG] on stmt: a = arg(0, name=a)
2023-11-07 09:01:26,388 [DEBUG] on stmt: c = freevar(acc_init: 0.0)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $10load_global.1 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $22load_attr.3 = getattr(value=$10load_global.1, attr=nditer)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $38call.5 = call $22load_attr.3(a, func=$22load_attr.3, args=[Var(a, arraymath.py:438)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $48get_iter.6 = getiter(value=$38call.5)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $phi50.0 = $48get_iter.6
2023-11-07 09:01:26,388 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,388 [DEBUG] ==== SSA block rewrite pass on 50
2023-11-07 09:01:26,388 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29330d190>
2023-11-07 09:01:26,388 [DEBUG] on stmt: $50for_iter.1 = iternext(value=$phi50.0)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $50for_iter.2 = pair_first(value=$50for_iter.1)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $50for_iter.3 = pair_second(value=$50for_iter.1)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $phi52.1 = $50for_iter.2
2023-11-07 09:01:26,388 [DEBUG] on stmt: branch $50for_iter.3, 52, 102
2023-11-07 09:01:26,388 [DEBUG] ==== SSA block rewrite pass on 52
2023-11-07 09:01:26,388 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29330d190>
2023-11-07 09:01:26,388 [DEBUG] on stmt: v = $phi52.1
2023-11-07 09:01:26,388 [DEBUG] on stmt: $58load_method.5 = getattr(value=v, attr=item)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $84call.6 = call $58load_method.5(func=$58load_method.5, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,388 [DEBUG] find_def var='c' stmt=$binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,388 [DEBUG] find_def_from_top label 52
2023-11-07 09:01:26,388 [DEBUG] idom 50 from label 52
2023-11-07 09:01:26,388 [DEBUG] find_def_from_bottom label 50
2023-11-07 09:01:26,388 [DEBUG] find_def_from_top label 50
2023-11-07 09:01:26,388 [DEBUG] insert phi node c.2 = phi(incoming_values=[], incoming_blocks=[]) at 50
2023-11-07 09:01:26,388 [DEBUG] find_def_from_bottom label 0
2023-11-07 09:01:26,388 [DEBUG] incoming_def c = freevar(acc_init: 0.0)
2023-11-07 09:01:26,388 [DEBUG] find_def_from_bottom label 52
2023-11-07 09:01:26,388 [DEBUG] incoming_def c.1 = $binop_iadd94.7
2023-11-07 09:01:26,388 [DEBUG] replaced with: $binop_iadd94.7 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=c.2, rhs=$84call.6, static_lhs=Undefined, static_rhs=Undefined)
2023-11-07 09:01:26,388 [DEBUG] on stmt: c.1 = $binop_iadd94.7
2023-11-07 09:01:26,388 [DEBUG] on stmt: jump 50
2023-11-07 09:01:26,388 [DEBUG] ==== SSA block rewrite pass on 102
2023-11-07 09:01:26,388 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29330d190>
2023-11-07 09:01:26,388 [DEBUG] on stmt: $106load_attr.2 = getattr(value=a, attr=size)
2023-11-07 09:01:26,388 [DEBUG] on stmt: $binop_truediv116.3 = c / $106load_attr.2
2023-11-07 09:01:26,388 [DEBUG] find_def var='c' stmt=$binop_truediv116.3 = c / $106load_attr.2
2023-11-07 09:01:26,388 [DEBUG] find_def_from_top label 102
2023-11-07 09:01:26,388 [DEBUG] idom 50 from label 102
2023-11-07 09:01:26,388 [DEBUG] find_def_from_bottom label 50
2023-11-07 09:01:26,388 [DEBUG] replaced with: $binop_truediv116.3 = c.2 / $106load_attr.2
2023-11-07 09:01:26,388 [DEBUG] on stmt: $120return_value.4 = cast(value=$binop_truediv116.3)
2023-11-07 09:01:26,388 [DEBUG] on stmt: return $120return_value.4
2023-11-07 09:01:26,438 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_FAST(arg=0, lineno=1)
           6	LOAD_CONST(arg=1, lineno=1)
           8	COMPARE_OP(arg=4, lineno=1)
          14	RETURN_VALUE(arg=None, lineno=1)
2023-11-07 09:01:26,438 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,438 [DEBUG] stack: []
2023-11-07 09:01:26,438 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,438 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-11-07 09:01:26,438 [DEBUG] stack []
2023-11-07 09:01:26,438 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-11-07 09:01:26,438 [DEBUG] stack []
2023-11-07 09:01:26,438 [DEBUG] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=1)
2023-11-07 09:01:26,438 [DEBUG] stack []
2023-11-07 09:01:26,438 [DEBUG] dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=1)
2023-11-07 09:01:26,438 [DEBUG] stack ['$ith_distances_14.0']
2023-11-07 09:01:26,438 [DEBUG] dispatch pc=8, inst=COMPARE_OP(arg=4, lineno=1)
2023-11-07 09:01:26,438 [DEBUG] stack ['$ith_distances_14.0', '$const6.1']
2023-11-07 09:01:26,438 [DEBUG] dispatch pc=14, inst=RETURN_VALUE(arg=None, lineno=1)
2023-11-07 09:01:26,438 [DEBUG] stack ['$8compare_op.2']
2023-11-07 09:01:26,438 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,438 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,438 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,438 [DEBUG] defmap: {}
2023-11-07 09:01:26,438 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,438 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,438 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,438 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,438 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,438 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$ith_distances_14.0'}), (6, {'res': '$const6.1'}), (8, {'lhs': '$ith_distances_14.0', 'rhs': '$const6.1', 'res': '$8compare_op.2'}), (10, {}), (12, {}), (14, {'retval': '$8compare_op.2', 'castval': '$14return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,438 [DEBUG] label 0:
    ith_distances_1 = arg(0, name=ith_distances_1) ['ith_distances_1']
    $const6.1 = const(float, 0.0)            ['$const6.1']
    $8compare_op.2 = ith_distances_1 > $const6.1 ['$8compare_op.2', '$const6.1', 'ith_distances_1']
    $14return_value.3 = cast(value=$8compare_op.2) ['$14return_value.3', '$8compare_op.2']
    return $14return_value.3                 ['$14return_value.3']

2023-11-07 09:01:26,440 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,440 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x293343fd0>
2023-11-07 09:01:26,440 [DEBUG] on stmt: ith_distances_1 = arg(0, name=ith_distances_1)
2023-11-07 09:01:26,440 [DEBUG] on stmt: $const6.1 = const(float, 0.0)
2023-11-07 09:01:26,440 [DEBUG] on stmt: $8compare_op.2 = ith_distances_1 > $const6.1
2023-11-07 09:01:26,440 [DEBUG] on stmt: $14return_value.3 = cast(value=$8compare_op.2)
2023-11-07 09:01:26,440 [DEBUG] on stmt: return $14return_value.3
2023-11-07 09:01:26,440 [DEBUG] defs defaultdict(<class 'list'>,
            {'$14return_value.3': [<numba.core.ir.Assign object at 0x293341f10>],
             '$8compare_op.2': [<numba.core.ir.Assign object at 0x293342a50>],
             '$const6.1': [<numba.core.ir.Assign object at 0x293342890>],
             'ith_distances_1': [<numba.core.ir.Assign object at 0x293342510>]})
2023-11-07 09:01:26,440 [DEBUG] SSA violators set()
2023-11-07 09:01:26,542 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=349)
           2	RESUME(arg=0, lineno=349)
           4	LOAD_FAST(arg=0, lineno=407)
           6	LOAD_ATTR(arg=0, lineno=407)
          16	LOAD_CONST(arg=1, lineno=407)
          18	BINARY_SUBSCR(arg=None, lineno=407)
          28	STORE_FAST(arg=6, lineno=407)
          30	LOAD_FAST(arg=0, lineno=408)
          32	LOAD_ATTR(arg=0, lineno=408)
          42	LOAD_CONST(arg=2, lineno=408)
          44	BINARY_SUBSCR(arg=None, lineno=408)
          54	STORE_FAST(arg=7, lineno=408)
          56	LOAD_GLOBAL(arg=3, lineno=410)
          68	LOAD_ATTR(arg=2, lineno=410)
          78	LOAD_FAST(arg=0, lineno=410)
          80	LOAD_ATTR(arg=3, lineno=410)
          90	LOAD_GLOBAL(arg=2, lineno=410)
         102	LOAD_ATTR(arg=4, lineno=410)
         112	KW_NAMES(arg=3, lineno=410)
         114	PRECALL(arg=2, lineno=410)
         118	CALL(arg=2, lineno=410)
         128	STORE_FAST(arg=8, lineno=410)
         130	LOAD_GLOBAL(arg=3, lineno=411)
         142	LOAD_ATTR(arg=2, lineno=411)
         152	LOAD_FAST(arg=0, lineno=411)
         154	LOAD_ATTR(arg=3, lineno=411)
         164	LOAD_GLOBAL(arg=2, lineno=411)
         176	LOAD_ATTR(arg=4, lineno=411)
         186	KW_NAMES(arg=3, lineno=411)
         188	PRECALL(arg=2, lineno=411)
         192	CALL(arg=2, lineno=411)
         202	STORE_FAST(arg=9, lineno=411)
         204	LOAD_GLOBAL(arg=3, lineno=412)
         216	LOAD_ATTR(arg=2, lineno=412)
         226	LOAD_FAST(arg=0, lineno=412)
         228	LOAD_ATTR(arg=3, lineno=412)
         238	LOAD_GLOBAL(arg=2, lineno=412)
         250	LOAD_ATTR(arg=5, lineno=412)
         260	KW_NAMES(arg=3, lineno=412)
         262	PRECALL(arg=2, lineno=412)
         266	CALL(arg=2, lineno=412)
         276	STORE_FAST(arg=10, lineno=412)
         278	LOAD_FAST(arg=4, lineno=413)
         280	POP_JUMP_FORWARD_IF_FALSE(arg=38, lineno=413)
         282	LOAD_GLOBAL(arg=3, lineno=414)
         294	LOAD_ATTR(arg=2, lineno=414)
         304	LOAD_FAST(arg=0, lineno=414)
         306	LOAD_ATTR(arg=3, lineno=414)
         316	LOAD_GLOBAL(arg=2, lineno=414)
         328	LOAD_ATTR(arg=5, lineno=414)
         338	KW_NAMES(arg=3, lineno=414)
         340	PRECALL(arg=2, lineno=414)
         344	CALL(arg=2, lineno=414)
         354	STORE_FAST(arg=11, lineno=414)
         356	JUMP_FORWARD(arg=2, lineno=414)
>        358	LOAD_CONST(arg=4, lineno=416)
         360	STORE_FAST(arg=11, lineno=416)
>        362	LOAD_GLOBAL(arg=13, lineno=418)
         374	LOAD_FAST(arg=6, lineno=418)
         376	PRECALL(arg=1, lineno=418)
         380	CALL(arg=1, lineno=418)
         390	GET_ITER(arg=None, lineno=418)
>        392	FOR_ITER(arg=206, lineno=418)
         394	STORE_FAST(arg=12, lineno=418)
         396	LOAD_GLOBAL(arg=13, lineno=419)
         408	LOAD_FAST(arg=7, lineno=419)
         410	PRECALL(arg=1, lineno=419)
         414	CALL(arg=1, lineno=419)
         424	GET_ITER(arg=None, lineno=419)
>        426	FOR_ITER(arg=188, lineno=419)
         428	STORE_FAST(arg=13, lineno=419)
         430	LOAD_FAST(arg=0, lineno=420)
         432	LOAD_FAST(arg=12, lineno=420)
         434	LOAD_FAST(arg=13, lineno=420)
         436	BUILD_TUPLE(arg=2, lineno=420)
         438	BINARY_SUBSCR(arg=None, lineno=420)
         448	LOAD_CONST(arg=5, lineno=420)
         450	COMPARE_OP(arg=2, lineno=420)
         456	POP_JUMP_FORWARD_IF_FALSE(arg=1, lineno=420)
         458	JUMP_BACKWARD(arg=17, lineno=421)
>        460	LOAD_FAST(arg=5, lineno=424)
         462	LOAD_CONST(arg=6, lineno=424)
         464	COMPARE_OP(arg=2, lineno=424)
         470	LOAD_FAST(arg=0, lineno=424)
         472	LOAD_FAST(arg=12, lineno=424)
         474	LOAD_FAST(arg=13, lineno=424)
         476	BUILD_TUPLE(arg=2, lineno=424)
         478	BINARY_SUBSCR(arg=None, lineno=424)
         488	LOAD_FAST(arg=12, lineno=424)
         490	COMPARE_OP(arg=2, lineno=424)
         496	BINARY_OP(arg=1, lineno=424)
         500	POP_JUMP_FORWARD_IF_FALSE(arg=3, lineno=424)
         502	LOAD_CONST(arg=7, lineno=425)
         504	STORE_FAST(arg=14, lineno=425)
         506	JUMP_FORWARD(arg=85, lineno=425)
>        508	LOAD_FAST(arg=1, lineno=426)
         510	LOAD_FAST(arg=12, lineno=426)
         512	LOAD_FAST(arg=13, lineno=426)
         514	BUILD_TUPLE(arg=2, lineno=426)
         516	BINARY_SUBSCR(arg=None, lineno=426)
         526	LOAD_FAST(arg=3, lineno=426)
         528	LOAD_FAST(arg=12, lineno=426)
         530	BINARY_SUBSCR(arg=None, lineno=426)
         540	BINARY_OP(arg=10, lineno=426)
         544	LOAD_CONST(arg=7, lineno=426)
         546	COMPARE_OP(arg=1, lineno=426)
         552	POP_JUMP_FORWARD_IF_TRUE(arg=12, lineno=426)
         554	LOAD_FAST(arg=2, lineno=426)
         556	LOAD_FAST(arg=12, lineno=426)
         558	BINARY_SUBSCR(arg=None, lineno=426)
         568	LOAD_CONST(arg=7, lineno=426)
         570	COMPARE_OP(arg=2, lineno=426)
         576	POP_JUMP_FORWARD_IF_FALSE(arg=3, lineno=426)
>        578	LOAD_CONST(arg=8, lineno=427)
         580	STORE_FAST(arg=14, lineno=427)
         582	JUMP_FORWARD(arg=47, lineno=427)
>        584	LOAD_GLOBAL(arg=3, lineno=429)
         596	LOAD_ATTR(arg=7, lineno=429)
         606	LOAD_FAST(arg=1, lineno=429)
         608	LOAD_FAST(arg=12, lineno=429)
         610	LOAD_FAST(arg=13, lineno=429)
         612	BUILD_TUPLE(arg=2, lineno=429)
         614	BINARY_SUBSCR(arg=None, lineno=429)
         624	LOAD_FAST(arg=3, lineno=429)
         626	LOAD_FAST(arg=12, lineno=429)
         628	BINARY_SUBSCR(arg=None, lineno=429)
         638	BINARY_OP(arg=10, lineno=429)
         642	LOAD_FAST(arg=2, lineno=429)
         644	LOAD_FAST(arg=12, lineno=429)
         646	BINARY_SUBSCR(arg=None, lineno=429)
         656	BINARY_OP(arg=11, lineno=429)
         660	UNARY_NEGATIVE(arg=None, lineno=429)
         662	PRECALL(arg=1, lineno=429)
         666	CALL(arg=1, lineno=429)
         676	STORE_FAST(arg=14, lineno=429)
>        678	LOAD_FAST(arg=12, lineno=431)
         680	LOAD_FAST(arg=8, lineno=431)
         682	LOAD_FAST(arg=12, lineno=431)
         684	LOAD_FAST(arg=7, lineno=431)
         686	BINARY_OP(arg=5, lineno=431)
         690	LOAD_FAST(arg=13, lineno=431)
         692	BINARY_OP(arg=0, lineno=431)
         696	STORE_SUBSCR(arg=None, lineno=431)
         700	LOAD_FAST(arg=0, lineno=432)
         702	LOAD_FAST(arg=12, lineno=432)
         704	LOAD_FAST(arg=13, lineno=432)
         706	BUILD_TUPLE(arg=2, lineno=432)
         708	BINARY_SUBSCR(arg=None, lineno=432)
         718	LOAD_FAST(arg=9, lineno=432)
         720	LOAD_FAST(arg=12, lineno=432)
         722	LOAD_FAST(arg=7, lineno=432)
         724	BINARY_OP(arg=5, lineno=432)
         728	LOAD_FAST(arg=13, lineno=432)
         730	BINARY_OP(arg=0, lineno=432)
         734	STORE_SUBSCR(arg=None, lineno=432)
         738	LOAD_FAST(arg=14, lineno=433)
         740	LOAD_FAST(arg=10, lineno=433)
         742	LOAD_FAST(arg=12, lineno=433)
         744	LOAD_FAST(arg=7, lineno=433)
         746	BINARY_OP(arg=5, lineno=433)
         750	LOAD_FAST(arg=13, lineno=433)
         752	BINARY_OP(arg=0, lineno=433)
         756	STORE_SUBSCR(arg=None, lineno=433)
         760	LOAD_FAST(arg=4, lineno=434)
         762	POP_JUMP_FORWARD_IF_FALSE(arg=19, lineno=434)
         764	LOAD_FAST(arg=1, lineno=435)
         766	LOAD_FAST(arg=12, lineno=435)
         768	LOAD_FAST(arg=13, lineno=435)
         770	BUILD_TUPLE(arg=2, lineno=435)
         772	BINARY_SUBSCR(arg=None, lineno=435)
         782	LOAD_FAST(arg=11, lineno=435)
         784	LOAD_FAST(arg=12, lineno=435)
         786	LOAD_FAST(arg=7, lineno=435)
         788	BINARY_OP(arg=5, lineno=435)
         792	LOAD_FAST(arg=13, lineno=435)
         794	BINARY_OP(arg=0, lineno=435)
         798	STORE_SUBSCR(arg=None, lineno=435)
>        802	JUMP_BACKWARD(arg=189, lineno=435)
>        804	JUMP_BACKWARD(arg=207, lineno=419)
>        806	LOAD_FAST(arg=8, lineno=437)
         808	LOAD_FAST(arg=9, lineno=437)
         810	LOAD_FAST(arg=10, lineno=437)
         812	LOAD_FAST(arg=11, lineno=437)
         814	BUILD_TUPLE(arg=4, lineno=437)
         816	RETURN_VALUE(arg=None, lineno=437)
2023-11-07 09:01:26,542 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,542 [DEBUG] stack: []
2023-11-07 09:01:26,542 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=349)
2023-11-07 09:01:26,542 [DEBUG] stack []
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=349)
2023-11-07 09:01:26,542 [DEBUG] stack []
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=407)
2023-11-07 09:01:26,542 [DEBUG] stack []
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=6, inst=LOAD_ATTR(arg=0, lineno=407)
2023-11-07 09:01:26,542 [DEBUG] stack ['$knn_indices4.0']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=16, inst=LOAD_CONST(arg=1, lineno=407)
2023-11-07 09:01:26,542 [DEBUG] stack ['$6load_attr.1']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=18, inst=BINARY_SUBSCR(arg=None, lineno=407)
2023-11-07 09:01:26,542 [DEBUG] stack ['$6load_attr.1', '$const16.2']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=28, inst=STORE_FAST(arg=6, lineno=407)
2023-11-07 09:01:26,542 [DEBUG] stack ['$18binary_subscr.3']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=408)
2023-11-07 09:01:26,542 [DEBUG] stack []
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=32, inst=LOAD_ATTR(arg=0, lineno=408)
2023-11-07 09:01:26,542 [DEBUG] stack ['$knn_indices30.4']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=42, inst=LOAD_CONST(arg=2, lineno=408)
2023-11-07 09:01:26,542 [DEBUG] stack ['$32load_attr.5']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=44, inst=BINARY_SUBSCR(arg=None, lineno=408)
2023-11-07 09:01:26,542 [DEBUG] stack ['$32load_attr.5', '$const42.6']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=54, inst=STORE_FAST(arg=7, lineno=408)
2023-11-07 09:01:26,542 [DEBUG] stack ['$44binary_subscr.7']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=56, inst=LOAD_GLOBAL(arg=3, lineno=410)
2023-11-07 09:01:26,542 [DEBUG] stack []
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=68, inst=LOAD_ATTR(arg=2, lineno=410)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$56.9', '$56load_global.8']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=78, inst=LOAD_FAST(arg=0, lineno=410)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$56.9', '$68load_attr.10']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=80, inst=LOAD_ATTR(arg=3, lineno=410)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$56.9', '$68load_attr.10', '$knn_indices78.11']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=90, inst=LOAD_GLOBAL(arg=2, lineno=410)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$56.9', '$68load_attr.10', '$80load_attr.12']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=102, inst=LOAD_ATTR(arg=4, lineno=410)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$56.9', '$68load_attr.10', '$80load_attr.12', '$90load_global.13']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=112, inst=KW_NAMES(arg=3, lineno=410)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$56.9', '$68load_attr.10', '$80load_attr.12', '$102load_attr.14']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=114, inst=PRECALL(arg=2, lineno=410)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$56.9', '$68load_attr.10', '$80load_attr.12', '$102load_attr.14']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=118, inst=CALL(arg=2, lineno=410)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$56.9', '$68load_attr.10', '$80load_attr.12', '$102load_attr.14']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=128, inst=STORE_FAST(arg=8, lineno=410)
2023-11-07 09:01:26,542 [DEBUG] stack ['$118call.15']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=130, inst=LOAD_GLOBAL(arg=3, lineno=411)
2023-11-07 09:01:26,542 [DEBUG] stack []
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=142, inst=LOAD_ATTR(arg=2, lineno=411)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$130.17', '$130load_global.16']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=152, inst=LOAD_FAST(arg=0, lineno=411)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$130.17', '$142load_attr.18']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=154, inst=LOAD_ATTR(arg=3, lineno=411)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$130.17', '$142load_attr.18', '$knn_indices152.19']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=164, inst=LOAD_GLOBAL(arg=2, lineno=411)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$130.17', '$142load_attr.18', '$154load_attr.20']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=176, inst=LOAD_ATTR(arg=4, lineno=411)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$130.17', '$142load_attr.18', '$154load_attr.20', '$164load_global.21']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=186, inst=KW_NAMES(arg=3, lineno=411)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$130.17', '$142load_attr.18', '$154load_attr.20', '$176load_attr.22']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=188, inst=PRECALL(arg=2, lineno=411)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$130.17', '$142load_attr.18', '$154load_attr.20', '$176load_attr.22']
2023-11-07 09:01:26,542 [DEBUG] dispatch pc=192, inst=CALL(arg=2, lineno=411)
2023-11-07 09:01:26,542 [DEBUG] stack ['$null$130.17', '$142load_attr.18', '$154load_attr.20', '$176load_attr.22']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=202, inst=STORE_FAST(arg=9, lineno=411)
2023-11-07 09:01:26,543 [DEBUG] stack ['$192call.23']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=204, inst=LOAD_GLOBAL(arg=3, lineno=412)
2023-11-07 09:01:26,543 [DEBUG] stack []
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=216, inst=LOAD_ATTR(arg=2, lineno=412)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$204.25', '$204load_global.24']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=226, inst=LOAD_FAST(arg=0, lineno=412)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$204.25', '$216load_attr.26']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=228, inst=LOAD_ATTR(arg=3, lineno=412)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$204.25', '$216load_attr.26', '$knn_indices226.27']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=238, inst=LOAD_GLOBAL(arg=2, lineno=412)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$204.25', '$216load_attr.26', '$228load_attr.28']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=250, inst=LOAD_ATTR(arg=5, lineno=412)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$204.25', '$216load_attr.26', '$228load_attr.28', '$238load_global.29']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=260, inst=KW_NAMES(arg=3, lineno=412)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$204.25', '$216load_attr.26', '$228load_attr.28', '$250load_attr.30']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=262, inst=PRECALL(arg=2, lineno=412)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$204.25', '$216load_attr.26', '$228load_attr.28', '$250load_attr.30']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=266, inst=CALL(arg=2, lineno=412)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$204.25', '$216load_attr.26', '$228load_attr.28', '$250load_attr.30']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=276, inst=STORE_FAST(arg=10, lineno=412)
2023-11-07 09:01:26,543 [DEBUG] stack ['$266call.31']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=278, inst=LOAD_FAST(arg=4, lineno=413)
2023-11-07 09:01:26,543 [DEBUG] stack []
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=280, inst=POP_JUMP_FORWARD_IF_FALSE(arg=38, lineno=413)
2023-11-07 09:01:26,543 [DEBUG] stack ['$return_dists278.32']
2023-11-07 09:01:26,543 [DEBUG] end state. edges=[Edge(pc=282, stack=(), blockstack=(), npush=0), Edge(pc=358, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,543 [DEBUG] pending: deque([State(pc_initial=282 nstack_initial=0), State(pc_initial=358 nstack_initial=0)])
2023-11-07 09:01:26,543 [DEBUG] stack: []
2023-11-07 09:01:26,543 [DEBUG] state.pc_initial: State(pc_initial=282 nstack_initial=0)
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=282, inst=LOAD_GLOBAL(arg=3, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack []
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=294, inst=LOAD_ATTR(arg=2, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$282.1', '$282load_global.0']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=304, inst=LOAD_FAST(arg=0, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$282.1', '$294load_attr.2']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=306, inst=LOAD_ATTR(arg=3, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$282.1', '$294load_attr.2', '$knn_indices304.3']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=316, inst=LOAD_GLOBAL(arg=2, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$282.1', '$294load_attr.2', '$306load_attr.4']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=328, inst=LOAD_ATTR(arg=5, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$282.1', '$294load_attr.2', '$306load_attr.4', '$316load_global.5']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=338, inst=KW_NAMES(arg=3, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$282.1', '$294load_attr.2', '$306load_attr.4', '$328load_attr.6']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=340, inst=PRECALL(arg=2, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$282.1', '$294load_attr.2', '$306load_attr.4', '$328load_attr.6']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=344, inst=CALL(arg=2, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$282.1', '$294load_attr.2', '$306load_attr.4', '$328load_attr.6']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=354, inst=STORE_FAST(arg=11, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack ['$344call.7']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=356, inst=JUMP_FORWARD(arg=2, lineno=414)
2023-11-07 09:01:26,543 [DEBUG] stack []
2023-11-07 09:01:26,543 [DEBUG] end state. edges=[Edge(pc=362, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,543 [DEBUG] pending: deque([State(pc_initial=358 nstack_initial=0), State(pc_initial=362 nstack_initial=0)])
2023-11-07 09:01:26,543 [DEBUG] stack: []
2023-11-07 09:01:26,543 [DEBUG] state.pc_initial: State(pc_initial=358 nstack_initial=0)
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=358, inst=LOAD_CONST(arg=4, lineno=416)
2023-11-07 09:01:26,543 [DEBUG] stack []
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=360, inst=STORE_FAST(arg=11, lineno=416)
2023-11-07 09:01:26,543 [DEBUG] stack ['$const358.0']
2023-11-07 09:01:26,543 [DEBUG] end state. edges=[Edge(pc=362, stack=(), blockstack=(), npush=0)]
2023-11-07 09:01:26,543 [DEBUG] pending: deque([State(pc_initial=362 nstack_initial=0), State(pc_initial=362 nstack_initial=0)])
2023-11-07 09:01:26,543 [DEBUG] stack: []
2023-11-07 09:01:26,543 [DEBUG] state.pc_initial: State(pc_initial=362 nstack_initial=0)
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=362, inst=LOAD_GLOBAL(arg=13, lineno=418)
2023-11-07 09:01:26,543 [DEBUG] stack []
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=374, inst=LOAD_FAST(arg=6, lineno=418)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$362.1', '$362load_global.0']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=376, inst=PRECALL(arg=1, lineno=418)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$362.1', '$362load_global.0', '$n_samples374.2']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=380, inst=CALL(arg=1, lineno=418)
2023-11-07 09:01:26,543 [DEBUG] stack ['$null$362.1', '$362load_global.0', '$n_samples374.2']
2023-11-07 09:01:26,543 [DEBUG] dispatch pc=390, inst=GET_ITER(arg=None, lineno=418)
2023-11-07 09:01:26,543 [DEBUG] stack ['$380call.3']
2023-11-07 09:01:26,543 [DEBUG] end state. edges=[Edge(pc=392, stack=('$390get_iter.4',), blockstack=(), npush=0)]
2023-11-07 09:01:26,543 [DEBUG] pending: deque([State(pc_initial=362 nstack_initial=0), State(pc_initial=392 nstack_initial=1)])
2023-11-07 09:01:26,543 [DEBUG] pending: deque([State(pc_initial=392 nstack_initial=1)])
2023-11-07 09:01:26,544 [DEBUG] stack: ['$phi392.0']
2023-11-07 09:01:26,544 [DEBUG] state.pc_initial: State(pc_initial=392 nstack_initial=1)
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=392, inst=FOR_ITER(arg=206, lineno=418)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi392.0']
2023-11-07 09:01:26,544 [DEBUG] end state. edges=[Edge(pc=806, stack=(), blockstack=(), npush=0), Edge(pc=394, stack=('$phi392.0', '$392for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,544 [DEBUG] pending: deque([State(pc_initial=806 nstack_initial=0), State(pc_initial=394 nstack_initial=2)])
2023-11-07 09:01:26,544 [DEBUG] stack: []
2023-11-07 09:01:26,544 [DEBUG] state.pc_initial: State(pc_initial=806 nstack_initial=0)
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=806, inst=LOAD_FAST(arg=8, lineno=437)
2023-11-07 09:01:26,544 [DEBUG] stack []
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=808, inst=LOAD_FAST(arg=9, lineno=437)
2023-11-07 09:01:26,544 [DEBUG] stack ['$rows806.0']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=810, inst=LOAD_FAST(arg=10, lineno=437)
2023-11-07 09:01:26,544 [DEBUG] stack ['$rows806.0', '$cols808.1']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=812, inst=LOAD_FAST(arg=11, lineno=437)
2023-11-07 09:01:26,544 [DEBUG] stack ['$rows806.0', '$cols808.1', '$vals810.2']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=814, inst=BUILD_TUPLE(arg=4, lineno=437)
2023-11-07 09:01:26,544 [DEBUG] stack ['$rows806.0', '$cols808.1', '$vals810.2', '$dists812.3']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=816, inst=RETURN_VALUE(arg=None, lineno=437)
2023-11-07 09:01:26,544 [DEBUG] stack ['$814build_tuple.4']
2023-11-07 09:01:26,544 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,544 [DEBUG] pending: deque([State(pc_initial=394 nstack_initial=2)])
2023-11-07 09:01:26,544 [DEBUG] stack: ['$phi394.0', '$phi394.1']
2023-11-07 09:01:26,544 [DEBUG] state.pc_initial: State(pc_initial=394 nstack_initial=2)
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=394, inst=STORE_FAST(arg=12, lineno=418)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi394.0', '$phi394.1']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=396, inst=LOAD_GLOBAL(arg=13, lineno=419)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi394.0']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=408, inst=LOAD_FAST(arg=7, lineno=419)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi394.0', '$null$396.3', '$396load_global.2']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=410, inst=PRECALL(arg=1, lineno=419)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi394.0', '$null$396.3', '$396load_global.2', '$n_neighbors408.4']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=414, inst=CALL(arg=1, lineno=419)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi394.0', '$null$396.3', '$396load_global.2', '$n_neighbors408.4']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=424, inst=GET_ITER(arg=None, lineno=419)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi394.0', '$414call.5']
2023-11-07 09:01:26,544 [DEBUG] end state. edges=[Edge(pc=426, stack=('$phi394.0', '$424get_iter.6'), blockstack=(), npush=0)]
2023-11-07 09:01:26,544 [DEBUG] pending: deque([State(pc_initial=426 nstack_initial=2)])
2023-11-07 09:01:26,544 [DEBUG] stack: ['$phi426.0', '$phi426.1']
2023-11-07 09:01:26,544 [DEBUG] state.pc_initial: State(pc_initial=426 nstack_initial=2)
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=426, inst=FOR_ITER(arg=188, lineno=419)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi426.0', '$phi426.1']
2023-11-07 09:01:26,544 [DEBUG] end state. edges=[Edge(pc=804, stack=('$phi426.0',), blockstack=(), npush=0), Edge(pc=428, stack=('$phi426.0', '$phi426.1', '$426for_iter.3'), blockstack=(), npush=0)]
2023-11-07 09:01:26,544 [DEBUG] pending: deque([State(pc_initial=804 nstack_initial=1), State(pc_initial=428 nstack_initial=3)])
2023-11-07 09:01:26,544 [DEBUG] stack: ['$phi804.0']
2023-11-07 09:01:26,544 [DEBUG] state.pc_initial: State(pc_initial=804 nstack_initial=1)
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=804, inst=JUMP_BACKWARD(arg=207, lineno=419)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi804.0']
2023-11-07 09:01:26,544 [DEBUG] end state. edges=[Edge(pc=392, stack=('$phi804.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,544 [DEBUG] pending: deque([State(pc_initial=428 nstack_initial=3), State(pc_initial=392 nstack_initial=1)])
2023-11-07 09:01:26,544 [DEBUG] stack: ['$phi428.0', '$phi428.1', '$phi428.2']
2023-11-07 09:01:26,544 [DEBUG] state.pc_initial: State(pc_initial=428 nstack_initial=3)
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=428, inst=STORE_FAST(arg=13, lineno=419)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi428.0', '$phi428.1', '$phi428.2']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=430, inst=LOAD_FAST(arg=0, lineno=420)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi428.0', '$phi428.1']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=432, inst=LOAD_FAST(arg=12, lineno=420)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi428.0', '$phi428.1', '$knn_indices430.3']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=434, inst=LOAD_FAST(arg=13, lineno=420)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi428.0', '$phi428.1', '$knn_indices430.3', '$i432.4']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=436, inst=BUILD_TUPLE(arg=2, lineno=420)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi428.0', '$phi428.1', '$knn_indices430.3', '$i432.4', '$j434.5']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=438, inst=BINARY_SUBSCR(arg=None, lineno=420)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi428.0', '$phi428.1', '$knn_indices430.3', '$436build_tuple.6']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=448, inst=LOAD_CONST(arg=5, lineno=420)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi428.0', '$phi428.1', '$438binary_subscr.7']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=450, inst=COMPARE_OP(arg=2, lineno=420)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi428.0', '$phi428.1', '$438binary_subscr.7', '$const448.8']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=456, inst=POP_JUMP_FORWARD_IF_FALSE(arg=1, lineno=420)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi428.0', '$phi428.1', '$450compare_op.9']
2023-11-07 09:01:26,544 [DEBUG] end state. edges=[Edge(pc=458, stack=('$phi428.0', '$phi428.1'), blockstack=(), npush=0), Edge(pc=460, stack=('$phi428.0', '$phi428.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,544 [DEBUG] pending: deque([State(pc_initial=392 nstack_initial=1), State(pc_initial=458 nstack_initial=2), State(pc_initial=460 nstack_initial=2)])
2023-11-07 09:01:26,544 [DEBUG] pending: deque([State(pc_initial=458 nstack_initial=2), State(pc_initial=460 nstack_initial=2)])
2023-11-07 09:01:26,544 [DEBUG] stack: ['$phi458.0', '$phi458.1']
2023-11-07 09:01:26,544 [DEBUG] state.pc_initial: State(pc_initial=458 nstack_initial=2)
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=458, inst=JUMP_BACKWARD(arg=17, lineno=421)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi458.0', '$phi458.1']
2023-11-07 09:01:26,544 [DEBUG] end state. edges=[Edge(pc=426, stack=('$phi458.0', '$phi458.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,544 [DEBUG] pending: deque([State(pc_initial=460 nstack_initial=2), State(pc_initial=426 nstack_initial=2)])
2023-11-07 09:01:26,544 [DEBUG] stack: ['$phi460.0', '$phi460.1']
2023-11-07 09:01:26,544 [DEBUG] state.pc_initial: State(pc_initial=460 nstack_initial=2)
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=460, inst=LOAD_FAST(arg=5, lineno=424)
2023-11-07 09:01:26,544 [DEBUG] stack ['$phi460.0', '$phi460.1']
2023-11-07 09:01:26,544 [DEBUG] dispatch pc=462, inst=LOAD_CONST(arg=6, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$bipartite460.2']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=464, inst=COMPARE_OP(arg=2, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$bipartite460.2', '$const462.3']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=470, inst=LOAD_FAST(arg=0, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$464compare_op.4']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=472, inst=LOAD_FAST(arg=12, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$464compare_op.4', '$knn_indices470.5']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=474, inst=LOAD_FAST(arg=13, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$464compare_op.4', '$knn_indices470.5', '$i472.6']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=476, inst=BUILD_TUPLE(arg=2, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$464compare_op.4', '$knn_indices470.5', '$i472.6', '$j474.7']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=478, inst=BINARY_SUBSCR(arg=None, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$464compare_op.4', '$knn_indices470.5', '$476build_tuple.8']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=488, inst=LOAD_FAST(arg=12, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$464compare_op.4', '$478binary_subscr.9']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=490, inst=COMPARE_OP(arg=2, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$464compare_op.4', '$478binary_subscr.9', '$i488.10']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=496, inst=BINARY_OP(arg=1, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$464compare_op.4', '$490compare_op.11']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=500, inst=POP_JUMP_FORWARD_IF_FALSE(arg=3, lineno=424)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi460.0', '$phi460.1', '$binop_and_496.12']
2023-11-07 09:01:26,545 [DEBUG] end state. edges=[Edge(pc=502, stack=('$phi460.0', '$phi460.1'), blockstack=(), npush=0), Edge(pc=508, stack=('$phi460.0', '$phi460.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,545 [DEBUG] pending: deque([State(pc_initial=426 nstack_initial=2), State(pc_initial=502 nstack_initial=2), State(pc_initial=508 nstack_initial=2)])
2023-11-07 09:01:26,545 [DEBUG] pending: deque([State(pc_initial=502 nstack_initial=2), State(pc_initial=508 nstack_initial=2)])
2023-11-07 09:01:26,545 [DEBUG] stack: ['$phi502.0', '$phi502.1']
2023-11-07 09:01:26,545 [DEBUG] state.pc_initial: State(pc_initial=502 nstack_initial=2)
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=502, inst=LOAD_CONST(arg=7, lineno=425)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi502.0', '$phi502.1']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=504, inst=STORE_FAST(arg=14, lineno=425)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi502.0', '$phi502.1', '$const502.2']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=506, inst=JUMP_FORWARD(arg=85, lineno=425)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi502.0', '$phi502.1']
2023-11-07 09:01:26,545 [DEBUG] end state. edges=[Edge(pc=678, stack=('$phi502.0', '$phi502.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,545 [DEBUG] pending: deque([State(pc_initial=508 nstack_initial=2), State(pc_initial=678 nstack_initial=2)])
2023-11-07 09:01:26,545 [DEBUG] stack: ['$phi508.0', '$phi508.1']
2023-11-07 09:01:26,545 [DEBUG] state.pc_initial: State(pc_initial=508 nstack_initial=2)
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=508, inst=LOAD_FAST(arg=1, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=510, inst=LOAD_FAST(arg=12, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$knn_dists508.2']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=512, inst=LOAD_FAST(arg=13, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$knn_dists508.2', '$i510.3']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=514, inst=BUILD_TUPLE(arg=2, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$knn_dists508.2', '$i510.3', '$j512.4']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=516, inst=BINARY_SUBSCR(arg=None, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$knn_dists508.2', '$514build_tuple.5']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=526, inst=LOAD_FAST(arg=3, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$516binary_subscr.6']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=528, inst=LOAD_FAST(arg=12, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$516binary_subscr.6', '$rhos526.7']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=530, inst=BINARY_SUBSCR(arg=None, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$516binary_subscr.6', '$rhos526.7', '$i528.8']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=540, inst=BINARY_OP(arg=10, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$516binary_subscr.6', '$530binary_subscr.9']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=544, inst=LOAD_CONST(arg=7, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$binop_sub540.10']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=546, inst=COMPARE_OP(arg=1, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$binop_sub540.10', '$const544.11']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=552, inst=POP_JUMP_FORWARD_IF_TRUE(arg=12, lineno=426)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi508.0', '$phi508.1', '$546compare_op.12']
2023-11-07 09:01:26,545 [DEBUG] end state. edges=[Edge(pc=554, stack=('$phi508.0', '$phi508.1'), blockstack=(), npush=0), Edge(pc=578, stack=('$phi508.0', '$phi508.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,545 [DEBUG] pending: deque([State(pc_initial=678 nstack_initial=2), State(pc_initial=554 nstack_initial=2), State(pc_initial=578 nstack_initial=2)])
2023-11-07 09:01:26,545 [DEBUG] stack: ['$phi678.0', '$phi678.1']
2023-11-07 09:01:26,545 [DEBUG] state.pc_initial: State(pc_initial=678 nstack_initial=2)
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=678, inst=LOAD_FAST(arg=12, lineno=431)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi678.0', '$phi678.1']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=680, inst=LOAD_FAST(arg=8, lineno=431)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi678.0', '$phi678.1', '$i678.2']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=682, inst=LOAD_FAST(arg=12, lineno=431)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi678.0', '$phi678.1', '$i678.2', '$rows680.3']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=684, inst=LOAD_FAST(arg=7, lineno=431)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi678.0', '$phi678.1', '$i678.2', '$rows680.3', '$i682.4']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=686, inst=BINARY_OP(arg=5, lineno=431)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi678.0', '$phi678.1', '$i678.2', '$rows680.3', '$i682.4', '$n_neighbors684.5']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=690, inst=LOAD_FAST(arg=13, lineno=431)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi678.0', '$phi678.1', '$i678.2', '$rows680.3', '$binop_mul686.6']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=692, inst=BINARY_OP(arg=0, lineno=431)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi678.0', '$phi678.1', '$i678.2', '$rows680.3', '$binop_mul686.6', '$j690.7']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=696, inst=STORE_SUBSCR(arg=None, lineno=431)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi678.0', '$phi678.1', '$i678.2', '$rows680.3', '$binop_add692.8']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=700, inst=LOAD_FAST(arg=0, lineno=432)
2023-11-07 09:01:26,545 [DEBUG] stack ['$phi678.0', '$phi678.1']
2023-11-07 09:01:26,545 [DEBUG] dispatch pc=702, inst=LOAD_FAST(arg=12, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$knn_indices700.9']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=704, inst=LOAD_FAST(arg=13, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$knn_indices700.9', '$i702.10']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=706, inst=BUILD_TUPLE(arg=2, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$knn_indices700.9', '$i702.10', '$j704.11']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=708, inst=BINARY_SUBSCR(arg=None, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$knn_indices700.9', '$706build_tuple.12']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=718, inst=LOAD_FAST(arg=9, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$708binary_subscr.13']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=720, inst=LOAD_FAST(arg=12, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$708binary_subscr.13', '$cols718.14']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=722, inst=LOAD_FAST(arg=7, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$708binary_subscr.13', '$cols718.14', '$i720.15']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=724, inst=BINARY_OP(arg=5, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$708binary_subscr.13', '$cols718.14', '$i720.15', '$n_neighbors722.16']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=728, inst=LOAD_FAST(arg=13, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$708binary_subscr.13', '$cols718.14', '$binop_mul724.17']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=730, inst=BINARY_OP(arg=0, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$708binary_subscr.13', '$cols718.14', '$binop_mul724.17', '$j728.18']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=734, inst=STORE_SUBSCR(arg=None, lineno=432)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$708binary_subscr.13', '$cols718.14', '$binop_add730.19']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=738, inst=LOAD_FAST(arg=14, lineno=433)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=740, inst=LOAD_FAST(arg=10, lineno=433)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$val738.20']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=742, inst=LOAD_FAST(arg=12, lineno=433)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$val738.20', '$vals740.21']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=744, inst=LOAD_FAST(arg=7, lineno=433)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$val738.20', '$vals740.21', '$i742.22']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=746, inst=BINARY_OP(arg=5, lineno=433)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$val738.20', '$vals740.21', '$i742.22', '$n_neighbors744.23']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=750, inst=LOAD_FAST(arg=13, lineno=433)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$val738.20', '$vals740.21', '$binop_mul746.24']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=752, inst=BINARY_OP(arg=0, lineno=433)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$val738.20', '$vals740.21', '$binop_mul746.24', '$j750.25']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=756, inst=STORE_SUBSCR(arg=None, lineno=433)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$val738.20', '$vals740.21', '$binop_add752.26']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=760, inst=LOAD_FAST(arg=4, lineno=434)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=762, inst=POP_JUMP_FORWARD_IF_FALSE(arg=19, lineno=434)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi678.0', '$phi678.1', '$return_dists760.27']
2023-11-07 09:01:26,546 [DEBUG] end state. edges=[Edge(pc=764, stack=('$phi678.0', '$phi678.1'), blockstack=(), npush=0), Edge(pc=802, stack=('$phi678.0', '$phi678.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,546 [DEBUG] pending: deque([State(pc_initial=554 nstack_initial=2), State(pc_initial=578 nstack_initial=2), State(pc_initial=764 nstack_initial=2), State(pc_initial=802 nstack_initial=2)])
2023-11-07 09:01:26,546 [DEBUG] stack: ['$phi554.0', '$phi554.1']
2023-11-07 09:01:26,546 [DEBUG] state.pc_initial: State(pc_initial=554 nstack_initial=2)
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=554, inst=LOAD_FAST(arg=2, lineno=426)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi554.0', '$phi554.1']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=556, inst=LOAD_FAST(arg=12, lineno=426)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi554.0', '$phi554.1', '$sigmas554.2']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=558, inst=BINARY_SUBSCR(arg=None, lineno=426)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi554.0', '$phi554.1', '$sigmas554.2', '$i556.3']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=568, inst=LOAD_CONST(arg=7, lineno=426)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi554.0', '$phi554.1', '$558binary_subscr.4']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=570, inst=COMPARE_OP(arg=2, lineno=426)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi554.0', '$phi554.1', '$558binary_subscr.4', '$const568.5']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=576, inst=POP_JUMP_FORWARD_IF_FALSE(arg=3, lineno=426)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi554.0', '$phi554.1', '$570compare_op.6']
2023-11-07 09:01:26,546 [DEBUG] end state. edges=[Edge(pc=578, stack=('$phi554.0', '$phi554.1'), blockstack=(), npush=0), Edge(pc=584, stack=('$phi554.0', '$phi554.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,546 [DEBUG] pending: deque([State(pc_initial=578 nstack_initial=2), State(pc_initial=764 nstack_initial=2), State(pc_initial=802 nstack_initial=2), State(pc_initial=578 nstack_initial=2), State(pc_initial=584 nstack_initial=2)])
2023-11-07 09:01:26,546 [DEBUG] stack: ['$phi578.0', '$phi578.1']
2023-11-07 09:01:26,546 [DEBUG] state.pc_initial: State(pc_initial=578 nstack_initial=2)
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=578, inst=LOAD_CONST(arg=8, lineno=427)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi578.0', '$phi578.1']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=580, inst=STORE_FAST(arg=14, lineno=427)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi578.0', '$phi578.1', '$const578.2']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=582, inst=JUMP_FORWARD(arg=47, lineno=427)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi578.0', '$phi578.1']
2023-11-07 09:01:26,546 [DEBUG] end state. edges=[Edge(pc=678, stack=('$phi578.0', '$phi578.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,546 [DEBUG] pending: deque([State(pc_initial=764 nstack_initial=2), State(pc_initial=802 nstack_initial=2), State(pc_initial=578 nstack_initial=2), State(pc_initial=584 nstack_initial=2), State(pc_initial=678 nstack_initial=2)])
2023-11-07 09:01:26,546 [DEBUG] stack: ['$phi764.0', '$phi764.1']
2023-11-07 09:01:26,546 [DEBUG] state.pc_initial: State(pc_initial=764 nstack_initial=2)
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=764, inst=LOAD_FAST(arg=1, lineno=435)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi764.0', '$phi764.1']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=766, inst=LOAD_FAST(arg=12, lineno=435)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi764.0', '$phi764.1', '$knn_dists764.2']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=768, inst=LOAD_FAST(arg=13, lineno=435)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi764.0', '$phi764.1', '$knn_dists764.2', '$i766.3']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=770, inst=BUILD_TUPLE(arg=2, lineno=435)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi764.0', '$phi764.1', '$knn_dists764.2', '$i766.3', '$j768.4']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=772, inst=BINARY_SUBSCR(arg=None, lineno=435)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi764.0', '$phi764.1', '$knn_dists764.2', '$770build_tuple.5']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=782, inst=LOAD_FAST(arg=11, lineno=435)
2023-11-07 09:01:26,546 [DEBUG] stack ['$phi764.0', '$phi764.1', '$772binary_subscr.6']
2023-11-07 09:01:26,546 [DEBUG] dispatch pc=784, inst=LOAD_FAST(arg=12, lineno=435)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi764.0', '$phi764.1', '$772binary_subscr.6', '$dists782.7']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=786, inst=LOAD_FAST(arg=7, lineno=435)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi764.0', '$phi764.1', '$772binary_subscr.6', '$dists782.7', '$i784.8']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=788, inst=BINARY_OP(arg=5, lineno=435)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi764.0', '$phi764.1', '$772binary_subscr.6', '$dists782.7', '$i784.8', '$n_neighbors786.9']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=792, inst=LOAD_FAST(arg=13, lineno=435)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi764.0', '$phi764.1', '$772binary_subscr.6', '$dists782.7', '$binop_mul788.10']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=794, inst=BINARY_OP(arg=0, lineno=435)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi764.0', '$phi764.1', '$772binary_subscr.6', '$dists782.7', '$binop_mul788.10', '$j792.11']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=798, inst=STORE_SUBSCR(arg=None, lineno=435)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi764.0', '$phi764.1', '$772binary_subscr.6', '$dists782.7', '$binop_add794.12']
2023-11-07 09:01:26,547 [DEBUG] end state. edges=[Edge(pc=802, stack=('$phi764.0', '$phi764.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,547 [DEBUG] pending: deque([State(pc_initial=802 nstack_initial=2), State(pc_initial=578 nstack_initial=2), State(pc_initial=584 nstack_initial=2), State(pc_initial=678 nstack_initial=2), State(pc_initial=802 nstack_initial=2)])
2023-11-07 09:01:26,547 [DEBUG] stack: ['$phi802.0', '$phi802.1']
2023-11-07 09:01:26,547 [DEBUG] state.pc_initial: State(pc_initial=802 nstack_initial=2)
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=802, inst=JUMP_BACKWARD(arg=189, lineno=435)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi802.0', '$phi802.1']
2023-11-07 09:01:26,547 [DEBUG] end state. edges=[Edge(pc=426, stack=('$phi802.0', '$phi802.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,547 [DEBUG] pending: deque([State(pc_initial=578 nstack_initial=2), State(pc_initial=584 nstack_initial=2), State(pc_initial=678 nstack_initial=2), State(pc_initial=802 nstack_initial=2), State(pc_initial=426 nstack_initial=2)])
2023-11-07 09:01:26,547 [DEBUG] pending: deque([State(pc_initial=584 nstack_initial=2), State(pc_initial=678 nstack_initial=2), State(pc_initial=802 nstack_initial=2), State(pc_initial=426 nstack_initial=2)])
2023-11-07 09:01:26,547 [DEBUG] stack: ['$phi584.0', '$phi584.1']
2023-11-07 09:01:26,547 [DEBUG] state.pc_initial: State(pc_initial=584 nstack_initial=2)
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=584, inst=LOAD_GLOBAL(arg=3, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=596, inst=LOAD_ATTR(arg=7, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$584load_global.2']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=606, inst=LOAD_FAST(arg=1, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=608, inst=LOAD_FAST(arg=12, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$knn_dists606.5']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=610, inst=LOAD_FAST(arg=13, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$knn_dists606.5', '$i608.6']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=612, inst=BUILD_TUPLE(arg=2, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$knn_dists606.5', '$i608.6', '$j610.7']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=614, inst=BINARY_SUBSCR(arg=None, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$knn_dists606.5', '$612build_tuple.8']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=624, inst=LOAD_FAST(arg=3, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$614binary_subscr.9']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=626, inst=LOAD_FAST(arg=12, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$614binary_subscr.9', '$rhos624.10']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=628, inst=BINARY_SUBSCR(arg=None, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$614binary_subscr.9', '$rhos624.10', '$i626.11']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=638, inst=BINARY_OP(arg=10, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$614binary_subscr.9', '$628binary_subscr.12']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=642, inst=LOAD_FAST(arg=2, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$binop_sub638.13']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=644, inst=LOAD_FAST(arg=12, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$binop_sub638.13', '$sigmas642.14']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=646, inst=BINARY_SUBSCR(arg=None, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$binop_sub638.13', '$sigmas642.14', '$i644.15']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=656, inst=BINARY_OP(arg=11, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$binop_sub638.13', '$646binary_subscr.16']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=660, inst=UNARY_NEGATIVE(arg=None, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$binop_truediv656.17']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=662, inst=PRECALL(arg=1, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$660unary_negative.18']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=666, inst=CALL(arg=1, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$null$584.3', '$596load_attr.4', '$660unary_negative.18']
2023-11-07 09:01:26,547 [DEBUG] dispatch pc=676, inst=STORE_FAST(arg=14, lineno=429)
2023-11-07 09:01:26,547 [DEBUG] stack ['$phi584.0', '$phi584.1', '$666call.19']
2023-11-07 09:01:26,547 [DEBUG] end state. edges=[Edge(pc=678, stack=('$phi584.0', '$phi584.1'), blockstack=(), npush=0)]
2023-11-07 09:01:26,547 [DEBUG] pending: deque([State(pc_initial=678 nstack_initial=2), State(pc_initial=802 nstack_initial=2), State(pc_initial=426 nstack_initial=2), State(pc_initial=678 nstack_initial=2)])
2023-11-07 09:01:26,547 [DEBUG] pending: deque([State(pc_initial=802 nstack_initial=2), State(pc_initial=426 nstack_initial=2), State(pc_initial=678 nstack_initial=2)])
2023-11-07 09:01:26,547 [DEBUG] pending: deque([State(pc_initial=426 nstack_initial=2), State(pc_initial=678 nstack_initial=2)])
2023-11-07 09:01:26,547 [DEBUG] pending: deque([State(pc_initial=678 nstack_initial=2)])
2023-11-07 09:01:26,547 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,547 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=282 nstack_initial=0): set(),
             State(pc_initial=358 nstack_initial=0): set(),
             State(pc_initial=362 nstack_initial=0): set(),
             State(pc_initial=392 nstack_initial=1): {'$phi392.0'},
             State(pc_initial=394 nstack_initial=2): {'$phi394.1'},
             State(pc_initial=426 nstack_initial=2): {'$phi426.1'},
             State(pc_initial=428 nstack_initial=3): {'$phi428.2'},
             State(pc_initial=458 nstack_initial=2): set(),
             State(pc_initial=460 nstack_initial=2): set(),
             State(pc_initial=502 nstack_initial=2): set(),
             State(pc_initial=508 nstack_initial=2): set(),
             State(pc_initial=554 nstack_initial=2): set(),
             State(pc_initial=578 nstack_initial=2): set(),
             State(pc_initial=584 nstack_initial=2): set(),
             State(pc_initial=678 nstack_initial=2): set(),
             State(pc_initial=764 nstack_initial=2): set(),
             State(pc_initial=802 nstack_initial=2): set(),
             State(pc_initial=804 nstack_initial=1): set(),
             State(pc_initial=806 nstack_initial=0): set()})
2023-11-07 09:01:26,548 [DEBUG] defmap: {'$phi392.0': State(pc_initial=362 nstack_initial=0),
 '$phi394.1': State(pc_initial=392 nstack_initial=1),
 '$phi426.1': State(pc_initial=394 nstack_initial=2),
 '$phi428.2': State(pc_initial=426 nstack_initial=2)}
2023-11-07 09:01:26,548 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi392.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi804.0',
                            State(pc_initial=804 nstack_initial=1))},
             '$phi394.0': {('$phi392.0',
                            State(pc_initial=392 nstack_initial=1))},
             '$phi394.1': {('$392for_iter.2',
                            State(pc_initial=392 nstack_initial=1))},
             '$phi426.0': {('$phi394.0',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi458.0',
                            State(pc_initial=458 nstack_initial=2)),
                           ('$phi802.0',
                            State(pc_initial=802 nstack_initial=2))},
             '$phi426.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi458.1',
                            State(pc_initial=458 nstack_initial=2)),
                           ('$phi802.1',
                            State(pc_initial=802 nstack_initial=2))},
             '$phi428.0': {('$phi426.0',
                            State(pc_initial=426 nstack_initial=2))},
             '$phi428.1': {('$phi426.1',
                            State(pc_initial=426 nstack_initial=2))},
             '$phi428.2': {('$426for_iter.3',
                            State(pc_initial=426 nstack_initial=2))},
             '$phi458.0': {('$phi428.0',
                            State(pc_initial=428 nstack_initial=3))},
             '$phi458.1': {('$phi428.1',
                            State(pc_initial=428 nstack_initial=3))},
             '$phi460.0': {('$phi428.0',
                            State(pc_initial=428 nstack_initial=3))},
             '$phi460.1': {('$phi428.1',
                            State(pc_initial=428 nstack_initial=3))},
             '$phi502.0': {('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi502.1': {('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi508.0': {('$phi460.0',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi508.1': {('$phi460.1',
                            State(pc_initial=460 nstack_initial=2))},
             '$phi554.0': {('$phi508.0',
                            State(pc_initial=508 nstack_initial=2))},
             '$phi554.1': {('$phi508.1',
                            State(pc_initial=508 nstack_initial=2))},
             '$phi578.0': {('$phi508.0',
                            State(pc_initial=508 nstack_initial=2)),
                           ('$phi554.0',
                            State(pc_initial=554 nstack_initial=2))},
             '$phi578.1': {('$phi508.1',
                            State(pc_initial=508 nstack_initial=2)),
                           ('$phi554.1',
                            State(pc_initial=554 nstack_initial=2))},
             '$phi584.0': {('$phi554.0',
                            State(pc_initial=554 nstack_initial=2))},
             '$phi584.1': {('$phi554.1',
                            State(pc_initial=554 nstack_initial=2))},
             '$phi678.0': {('$phi502.0',
                            State(pc_initial=502 nstack_initial=2)),
                           ('$phi578.0',
                            State(pc_initial=578 nstack_initial=2)),
                           ('$phi584.0',
                            State(pc_initial=584 nstack_initial=2))},
             '$phi678.1': {('$phi502.1',
                            State(pc_initial=502 nstack_initial=2)),
                           ('$phi578.1',
                            State(pc_initial=578 nstack_initial=2)),
                           ('$phi584.1',
                            State(pc_initial=584 nstack_initial=2))},
             '$phi764.0': {('$phi678.0',
                            State(pc_initial=678 nstack_initial=2))},
             '$phi764.1': {('$phi678.1',
                            State(pc_initial=678 nstack_initial=2))},
             '$phi802.0': {('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi802.1': {('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi804.0': {('$phi426.0',
                            State(pc_initial=426 nstack_initial=2))}})
2023-11-07 09:01:26,548 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi392.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi426.0',
                            State(pc_initial=426 nstack_initial=2))},
             '$phi394.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi426.0',
                            State(pc_initial=426 nstack_initial=2))},
             '$phi394.1': {('$392for_iter.2',
                            State(pc_initial=392 nstack_initial=1))},
             '$phi426.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi426.0',
                            State(pc_initial=426 nstack_initial=2)),
                           ('$phi428.0',
                            State(pc_initial=428 nstack_initial=3)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi426.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi428.1',
                            State(pc_initial=428 nstack_initial=3)),
                           ('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi428.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi428.0',
                            State(pc_initial=428 nstack_initial=3)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi428.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi428.1',
                            State(pc_initial=428 nstack_initial=3)),
                           ('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi428.2': {('$426for_iter.3',
                            State(pc_initial=426 nstack_initial=2))},
             '$phi458.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi458.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi460.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi460.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi502.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi502.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi508.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi508.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi554.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi554.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi578.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi578.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi584.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi584.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi678.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi678.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi678.1',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi764.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi764.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2)),
                           ('$phi764.1',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi802.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi802.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi804.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi428.0',
                            State(pc_initial=428 nstack_initial=3)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))}})
2023-11-07 09:01:26,548 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi392.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi428.0',
                            State(pc_initial=428 nstack_initial=3)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi394.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0)),
                           ('$phi428.0',
                            State(pc_initial=428 nstack_initial=3)),
                           ('$phi678.0',
                            State(pc_initial=678 nstack_initial=2)),
                           ('$phi764.0',
                            State(pc_initial=764 nstack_initial=2))},
             '$phi394.1': {('$392for_iter.2',
                            State(pc_initial=392 nstack_initial=1))},
             '$phi426.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi426.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi428.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi428.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi428.2': {('$426for_iter.3',
                            State(pc_initial=426 nstack_initial=2))},
             '$phi458.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi458.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi460.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi460.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi502.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi502.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi508.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi508.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi554.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi554.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi578.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi578.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi584.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi584.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi678.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi678.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi764.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi764.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi802.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi802.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi804.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))}})
2023-11-07 09:01:26,549 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi392.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi394.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi394.1': {('$392for_iter.2',
                            State(pc_initial=392 nstack_initial=1))},
             '$phi426.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi426.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi428.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi428.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi428.2': {('$426for_iter.3',
                            State(pc_initial=426 nstack_initial=2))},
             '$phi458.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi458.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi460.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi460.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi502.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi502.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi508.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi508.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi554.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi554.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi578.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi578.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi584.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi584.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi678.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi678.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi764.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi764.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi802.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi802.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi804.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))}})
2023-11-07 09:01:26,549 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi392.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi394.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi394.1': {('$392for_iter.2',
                            State(pc_initial=392 nstack_initial=1))},
             '$phi426.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi426.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi428.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi428.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi428.2': {('$426for_iter.3',
                            State(pc_initial=426 nstack_initial=2))},
             '$phi458.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi458.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi460.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi460.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi502.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi502.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi508.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi508.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi554.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi554.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi578.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi578.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi584.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi584.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi678.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi678.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi764.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi764.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi802.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))},
             '$phi802.1': {('$424get_iter.6',
                            State(pc_initial=394 nstack_initial=2))},
             '$phi804.0': {('$390get_iter.4',
                            State(pc_initial=362 nstack_initial=0))}})
2023-11-07 09:01:26,549 [DEBUG] keep phismap: {'$phi392.0': {('$390get_iter.4', State(pc_initial=362 nstack_initial=0))},
 '$phi394.1': {('$392for_iter.2', State(pc_initial=392 nstack_initial=1))},
 '$phi426.1': {('$424get_iter.6', State(pc_initial=394 nstack_initial=2))},
 '$phi428.2': {('$426for_iter.3', State(pc_initial=426 nstack_initial=2))}}
2023-11-07 09:01:26,549 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=362 nstack_initial=0): {'$phi392.0': '$390get_iter.4'},
             State(pc_initial=392 nstack_initial=1): {'$phi394.1': '$392for_iter.2'},
             State(pc_initial=394 nstack_initial=2): {'$phi426.1': '$424get_iter.6'},
             State(pc_initial=426 nstack_initial=2): {'$phi428.2': '$426for_iter.3'}})
2023-11-07 09:01:26,549 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,549 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$knn_indices4.0'}), (6, {'item': '$knn_indices4.0', 'res': '$6load_attr.1'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$const16.2'}), (18, {'index': '$const16.2', 'target': '$6load_attr.1', 'res': '$18binary_subscr.3'}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {'value': '$18binary_subscr.3'}), (30, {'res': '$knn_indices30.4'}), (32, {'item': '$knn_indices30.4', 'res': '$32load_attr.5'}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {'res': '$const42.6'}), (44, {'index': '$const42.6', 'target': '$32load_attr.5', 'res': '$44binary_subscr.7'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {'value': '$44binary_subscr.7'}), (56, {'idx': 1, 'res': '$56load_global.8'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {'item': '$56load_global.8', 'res': '$68load_attr.10'}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'res': '$knn_indices78.11'}), (80, {'item': '$knn_indices78.11', 'res': '$80load_attr.12'}), (82, {}), (84, {}), (86, {}), (88, {}), (90, {'idx': 1, 'res': '$90load_global.13'}), (92, {}), (94, {}), (96, {}), (98, {}), (100, {}), (102, {'item': '$90load_global.13', 'res': '$102load_attr.14'}), (104, {}), (106, {}), (108, {}), (110, {}), (114, {}), (116, {}), (118, {'func': '$68load_attr.10', 'args': ['$80load_attr.12', '$102load_attr.14'], 'kw_names': 3, 'res': '$118call.15'}), (120, {}), (122, {}), (124, {}), (126, {}), (128, {'value': '$118call.15'}), (130, {'idx': 1, 'res': '$130load_global.16'}), (132, {}), (134, {}), (136, {}), (138, {}), (140, {}), (142, {'item': '$130load_global.16', 'res': '$142load_attr.18'}), (144, {}), (146, {}), (148, {}), (150, {}), (152, {'res': '$knn_indices152.19'}), (154, {'item': '$knn_indices152.19', 'res': '$154load_attr.20'}), (156, {}), (158, {}), (160, {}), (162, {}), (164, {'idx': 1, 'res': '$164load_global.21'}), (166, {}), (168, {}), (170, {}), (172, {}), (174, {}), (176, {'item': '$164load_global.21', 'res': '$176load_attr.22'}), (178, {}), (180, {}), (182, {}), (184, {}), (188, {}), (190, {}), (192, {'func': '$142load_attr.18', 'args': ['$154load_attr.20', '$176load_attr.22'], 'kw_names': 3, 'res': '$192call.23'}), (194, {}), (196, {}), (198, {}), (200, {}), (202, {'value': '$192call.23'}), (204, {'idx': 1, 'res': '$204load_global.24'}), (206, {}), (208, {}), (210, {}), (212, {}), (214, {}), (216, {'item': '$204load_global.24', 'res': '$216load_attr.26'}), (218, {}), (220, {}), (222, {}), (224, {}), (226, {'res': '$knn_indices226.27'}), (228, {'item': '$knn_indices226.27', 'res': '$228load_attr.28'}), (230, {}), (232, {}), (234, {}), (236, {}), (238, {'idx': 1, 'res': '$238load_global.29'}), (240, {}), (242, {}), (244, {}), (246, {}), (248, {}), (250, {'item': '$238load_global.29', 'res': '$250load_attr.30'}), (252, {}), (254, {}), (256, {}), (258, {}), (262, {}), (264, {}), (266, {'func': '$216load_attr.26', 'args': ['$228load_attr.28', '$250load_attr.30'], 'kw_names': 3, 'res': '$266call.31'}), (268, {}), (270, {}), (272, {}), (274, {}), (276, {'value': '$266call.31'}), (278, {'res': '$return_dists278.32'}), (280, {'pred': '$return_dists278.32'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: (), 358: ()})
2023-11-07 09:01:26,549 [DEBUG] block_infos State(pc_initial=282 nstack_initial=0):
AdaptBlockInfo(insts=((282, {'idx': 1, 'res': '$282load_global.0'}), (284, {}), (286, {}), (288, {}), (290, {}), (292, {}), (294, {'item': '$282load_global.0', 'res': '$294load_attr.2'}), (296, {}), (298, {}), (300, {}), (302, {}), (304, {'res': '$knn_indices304.3'}), (306, {'item': '$knn_indices304.3', 'res': '$306load_attr.4'}), (308, {}), (310, {}), (312, {}), (314, {}), (316, {'idx': 1, 'res': '$316load_global.5'}), (318, {}), (320, {}), (322, {}), (324, {}), (326, {}), (328, {'item': '$316load_global.5', 'res': '$328load_attr.6'}), (330, {}), (332, {}), (334, {}), (336, {}), (340, {}), (342, {}), (344, {'func': '$294load_attr.2', 'args': ['$306load_attr.4', '$328load_attr.6'], 'kw_names': 3, 'res': '$344call.7'}), (346, {}), (348, {}), (350, {}), (352, {}), (354, {'value': '$344call.7'}), (356, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={362: ()})
2023-11-07 09:01:26,549 [DEBUG] block_infos State(pc_initial=358 nstack_initial=0):
AdaptBlockInfo(insts=((358, {'res': '$const358.0'}), (360, {'value': '$const358.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={362: ()})
2023-11-07 09:01:26,549 [DEBUG] block_infos State(pc_initial=362 nstack_initial=0):
AdaptBlockInfo(insts=((362, {'idx': 6, 'res': '$362load_global.0'}), (364, {}), (366, {}), (368, {}), (370, {}), (372, {}), (374, {'res': '$n_samples374.2'}), (376, {}), (378, {}), (380, {'func': '$362load_global.0', 'args': ['$n_samples374.2'], 'kw_names': None, 'res': '$380call.3'}), (382, {}), (384, {}), (386, {}), (388, {}), (390, {'value': '$380call.3', 'res': '$390get_iter.4'})), outgoing_phis={'$phi392.0': '$390get_iter.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={392: ('$390get_iter.4',)})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=392 nstack_initial=1):
AdaptBlockInfo(insts=((392, {'iterator': '$phi392.0', 'pair': '$392for_iter.1', 'indval': '$392for_iter.2', 'pred': '$392for_iter.3'}),), outgoing_phis={'$phi394.1': '$392for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={806: (), 394: ('$phi392.0', '$392for_iter.2')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=394 nstack_initial=2):
AdaptBlockInfo(insts=((394, {'value': '$phi394.1'}), (396, {'idx': 6, 'res': '$396load_global.2'}), (398, {}), (400, {}), (402, {}), (404, {}), (406, {}), (408, {'res': '$n_neighbors408.4'}), (410, {}), (412, {}), (414, {'func': '$396load_global.2', 'args': ['$n_neighbors408.4'], 'kw_names': None, 'res': '$414call.5'}), (416, {}), (418, {}), (420, {}), (422, {}), (424, {'value': '$414call.5', 'res': '$424get_iter.6'})), outgoing_phis={'$phi426.1': '$424get_iter.6'}, blockstack=(), active_try_block=None, outgoing_edgepushed={426: ('$phi394.0', '$424get_iter.6')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=426 nstack_initial=2):
AdaptBlockInfo(insts=((426, {'iterator': '$phi426.1', 'pair': '$426for_iter.2', 'indval': '$426for_iter.3', 'pred': '$426for_iter.4'}),), outgoing_phis={'$phi428.2': '$426for_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={804: ('$phi426.0',), 428: ('$phi426.0', '$phi426.1', '$426for_iter.3')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=428 nstack_initial=3):
AdaptBlockInfo(insts=((428, {'value': '$phi428.2'}), (430, {'res': '$knn_indices430.3'}), (432, {'res': '$i432.4'}), (434, {'res': '$j434.5'}), (436, {'items': ['$i432.4', '$j434.5'], 'res': '$436build_tuple.6'}), (438, {'index': '$436build_tuple.6', 'target': '$knn_indices430.3', 'res': '$438binary_subscr.7'}), (440, {}), (442, {}), (444, {}), (446, {}), (448, {'res': '$const448.8'}), (450, {'lhs': '$438binary_subscr.7', 'rhs': '$const448.8', 'res': '$450compare_op.9'}), (452, {}), (454, {}), (456, {'pred': '$450compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={458: ('$phi428.0', '$phi428.1'), 460: ('$phi428.0', '$phi428.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=458 nstack_initial=2):
AdaptBlockInfo(insts=((458, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={426: ('$phi458.0', '$phi458.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=460 nstack_initial=2):
AdaptBlockInfo(insts=((460, {'res': '$bipartite460.2'}), (462, {'res': '$const462.3'}), (464, {'lhs': '$bipartite460.2', 'rhs': '$const462.3', 'res': '$464compare_op.4'}), (466, {}), (468, {}), (470, {'res': '$knn_indices470.5'}), (472, {'res': '$i472.6'}), (474, {'res': '$j474.7'}), (476, {'items': ['$i472.6', '$j474.7'], 'res': '$476build_tuple.8'}), (478, {'index': '$476build_tuple.8', 'target': '$knn_indices470.5', 'res': '$478binary_subscr.9'}), (480, {}), (482, {}), (484, {}), (486, {}), (488, {'res': '$i488.10'}), (490, {'lhs': '$478binary_subscr.9', 'rhs': '$i488.10', 'res': '$490compare_op.11'}), (492, {}), (494, {}), (496, {'op': '&', 'lhs': '$464compare_op.4', 'rhs': '$490compare_op.11', 'res': '$binop_and_496.12'}), (498, {}), (500, {'pred': '$binop_and_496.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={502: ('$phi460.0', '$phi460.1'), 508: ('$phi460.0', '$phi460.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=502 nstack_initial=2):
AdaptBlockInfo(insts=((502, {'res': '$const502.2'}), (504, {'value': '$const502.2'}), (506, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={678: ('$phi502.0', '$phi502.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=508 nstack_initial=2):
AdaptBlockInfo(insts=((508, {'res': '$knn_dists508.2'}), (510, {'res': '$i510.3'}), (512, {'res': '$j512.4'}), (514, {'items': ['$i510.3', '$j512.4'], 'res': '$514build_tuple.5'}), (516, {'index': '$514build_tuple.5', 'target': '$knn_dists508.2', 'res': '$516binary_subscr.6'}), (518, {}), (520, {}), (522, {}), (524, {}), (526, {'res': '$rhos526.7'}), (528, {'res': '$i528.8'}), (530, {'index': '$i528.8', 'target': '$rhos526.7', 'res': '$530binary_subscr.9'}), (532, {}), (534, {}), (536, {}), (538, {}), (540, {'op': '-', 'lhs': '$516binary_subscr.6', 'rhs': '$530binary_subscr.9', 'res': '$binop_sub540.10'}), (542, {}), (544, {'res': '$const544.11'}), (546, {'lhs': '$binop_sub540.10', 'rhs': '$const544.11', 'res': '$546compare_op.12'}), (548, {}), (550, {}), (552, {'pred': '$546compare_op.12'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={554: ('$phi508.0', '$phi508.1'), 578: ('$phi508.0', '$phi508.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=554 nstack_initial=2):
AdaptBlockInfo(insts=((554, {'res': '$sigmas554.2'}), (556, {'res': '$i556.3'}), (558, {'index': '$i556.3', 'target': '$sigmas554.2', 'res': '$558binary_subscr.4'}), (560, {}), (562, {}), (564, {}), (566, {}), (568, {'res': '$const568.5'}), (570, {'lhs': '$558binary_subscr.4', 'rhs': '$const568.5', 'res': '$570compare_op.6'}), (572, {}), (574, {}), (576, {'pred': '$570compare_op.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={578: ('$phi554.0', '$phi554.1'), 584: ('$phi554.0', '$phi554.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=578 nstack_initial=2):
AdaptBlockInfo(insts=((578, {'res': '$const578.2'}), (580, {'value': '$const578.2'}), (582, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={678: ('$phi578.0', '$phi578.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=584 nstack_initial=2):
AdaptBlockInfo(insts=((584, {'idx': 1, 'res': '$584load_global.2'}), (586, {}), (588, {}), (590, {}), (592, {}), (594, {}), (596, {'item': '$584load_global.2', 'res': '$596load_attr.4'}), (598, {}), (600, {}), (602, {}), (604, {}), (606, {'res': '$knn_dists606.5'}), (608, {'res': '$i608.6'}), (610, {'res': '$j610.7'}), (612, {'items': ['$i608.6', '$j610.7'], 'res': '$612build_tuple.8'}), (614, {'index': '$612build_tuple.8', 'target': '$knn_dists606.5', 'res': '$614binary_subscr.9'}), (616, {}), (618, {}), (620, {}), (622, {}), (624, {'res': '$rhos624.10'}), (626, {'res': '$i626.11'}), (628, {'index': '$i626.11', 'target': '$rhos624.10', 'res': '$628binary_subscr.12'}), (630, {}), (632, {}), (634, {}), (636, {}), (638, {'op': '-', 'lhs': '$614binary_subscr.9', 'rhs': '$628binary_subscr.12', 'res': '$binop_sub638.13'}), (640, {}), (642, {'res': '$sigmas642.14'}), (644, {'res': '$i644.15'}), (646, {'index': '$i644.15', 'target': '$sigmas642.14', 'res': '$646binary_subscr.16'}), (648, {}), (650, {}), (652, {}), (654, {}), (656, {'op': '/', 'lhs': '$binop_sub638.13', 'rhs': '$646binary_subscr.16', 'res': '$binop_truediv656.17'}), (658, {}), (660, {'value': '$binop_truediv656.17', 'res': '$660unary_negative.18'}), (662, {}), (664, {}), (666, {'func': '$596load_attr.4', 'args': ['$660unary_negative.18'], 'kw_names': None, 'res': '$666call.19'}), (668, {}), (670, {}), (672, {}), (674, {}), (676, {'value': '$666call.19'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={678: ('$phi584.0', '$phi584.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=678 nstack_initial=2):
AdaptBlockInfo(insts=((678, {'res': '$i678.2'}), (680, {'res': '$rows680.3'}), (682, {'res': '$i682.4'}), (684, {'res': '$n_neighbors684.5'}), (686, {'op': '*', 'lhs': '$i682.4', 'rhs': '$n_neighbors684.5', 'res': '$binop_mul686.6'}), (688, {}), (690, {'res': '$j690.7'}), (692, {'op': '+', 'lhs': '$binop_mul686.6', 'rhs': '$j690.7', 'res': '$binop_add692.8'}), (694, {}), (696, {'target': '$rows680.3', 'index': '$binop_add692.8', 'value': '$i678.2'}), (698, {}), (700, {'res': '$knn_indices700.9'}), (702, {'res': '$i702.10'}), (704, {'res': '$j704.11'}), (706, {'items': ['$i702.10', '$j704.11'], 'res': '$706build_tuple.12'}), (708, {'index': '$706build_tuple.12', 'target': '$knn_indices700.9', 'res': '$708binary_subscr.13'}), (710, {}), (712, {}), (714, {}), (716, {}), (718, {'res': '$cols718.14'}), (720, {'res': '$i720.15'}), (722, {'res': '$n_neighbors722.16'}), (724, {'op': '*', 'lhs': '$i720.15', 'rhs': '$n_neighbors722.16', 'res': '$binop_mul724.17'}), (726, {}), (728, {'res': '$j728.18'}), (730, {'op': '+', 'lhs': '$binop_mul724.17', 'rhs': '$j728.18', 'res': '$binop_add730.19'}), (732, {}), (734, {'target': '$cols718.14', 'index': '$binop_add730.19', 'value': '$708binary_subscr.13'}), (736, {}), (738, {'res': '$val738.20'}), (740, {'res': '$vals740.21'}), (742, {'res': '$i742.22'}), (744, {'res': '$n_neighbors744.23'}), (746, {'op': '*', 'lhs': '$i742.22', 'rhs': '$n_neighbors744.23', 'res': '$binop_mul746.24'}), (748, {}), (750, {'res': '$j750.25'}), (752, {'op': '+', 'lhs': '$binop_mul746.24', 'rhs': '$j750.25', 'res': '$binop_add752.26'}), (754, {}), (756, {'target': '$vals740.21', 'index': '$binop_add752.26', 'value': '$val738.20'}), (758, {}), (760, {'res': '$return_dists760.27'}), (762, {'pred': '$return_dists760.27'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={764: ('$phi678.0', '$phi678.1'), 802: ('$phi678.0', '$phi678.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=764 nstack_initial=2):
AdaptBlockInfo(insts=((764, {'res': '$knn_dists764.2'}), (766, {'res': '$i766.3'}), (768, {'res': '$j768.4'}), (770, {'items': ['$i766.3', '$j768.4'], 'res': '$770build_tuple.5'}), (772, {'index': '$770build_tuple.5', 'target': '$knn_dists764.2', 'res': '$772binary_subscr.6'}), (774, {}), (776, {}), (778, {}), (780, {}), (782, {'res': '$dists782.7'}), (784, {'res': '$i784.8'}), (786, {'res': '$n_neighbors786.9'}), (788, {'op': '*', 'lhs': '$i784.8', 'rhs': '$n_neighbors786.9', 'res': '$binop_mul788.10'}), (790, {}), (792, {'res': '$j792.11'}), (794, {'op': '+', 'lhs': '$binop_mul788.10', 'rhs': '$j792.11', 'res': '$binop_add794.12'}), (796, {}), (798, {'target': '$dists782.7', 'index': '$binop_add794.12', 'value': '$772binary_subscr.6'}), (800, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={802: ('$phi764.0', '$phi764.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=802 nstack_initial=2):
AdaptBlockInfo(insts=((802, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={426: ('$phi802.0', '$phi802.1')})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=804 nstack_initial=1):
AdaptBlockInfo(insts=((804, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={392: ('$phi804.0',)})
2023-11-07 09:01:26,550 [DEBUG] block_infos State(pc_initial=806 nstack_initial=0):
AdaptBlockInfo(insts=((806, {'res': '$rows806.0'}), (808, {'res': '$cols808.1'}), (810, {'res': '$vals810.2'}), (812, {'res': '$dists812.3'}), (814, {'items': ['$rows806.0', '$cols808.1', '$vals810.2', '$dists812.3'], 'res': '$814build_tuple.4'}), (816, {'retval': '$814build_tuple.4', 'castval': '$816return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,551 [DEBUG] label 0:
    knn_indices = arg(0, name=knn_indices)   ['knn_indices']
    knn_dists = arg(1, name=knn_dists)       ['knn_dists']
    sigmas = arg(2, name=sigmas)             ['sigmas']
    rhos = arg(3, name=rhos)                 ['rhos']
    return_dists = arg(4, name=return_dists) ['return_dists']
    bipartite = arg(5, name=bipartite)       ['bipartite']
    $6load_attr.1 = getattr(value=knn_indices, attr=shape) ['$6load_attr.1', 'knn_indices']
    $const16.2 = const(int, 0)               ['$const16.2']
    n_samples = getitem(value=$6load_attr.1, index=$const16.2, fn=<built-in function getitem>) ['$6load_attr.1', '$const16.2', 'n_samples']
    $32load_attr.5 = getattr(value=knn_indices, attr=shape) ['$32load_attr.5', 'knn_indices']
    $const42.6 = const(int, 1)               ['$const42.6']
    n_neighbors = getitem(value=$32load_attr.5, index=$const42.6, fn=<built-in function getitem>) ['$32load_attr.5', '$const42.6', 'n_neighbors']
    $56load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$56load_global.8']
    $68load_attr.10 = getattr(value=$56load_global.8, attr=zeros) ['$56load_global.8', '$68load_attr.10']
    $80load_attr.12 = getattr(value=knn_indices, attr=size) ['$80load_attr.12', 'knn_indices']
    $90load_global.13 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$90load_global.13']
    $102load_attr.14 = getattr(value=$90load_global.13, attr=int32) ['$102load_attr.14', '$90load_global.13']
    rows = call $68load_attr.10($80load_attr.12, func=$68load_attr.10, args=[Var($80load_attr.12, umap_.py:410)], kws=[('dtype', Var($102load_attr.14, umap_.py:410))], vararg=None, varkwarg=None, target=None) ['$102load_attr.14', '$68load_attr.10', '$80load_attr.12', 'rows']
    $130load_global.16 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$130load_global.16']
    $142load_attr.18 = getattr(value=$130load_global.16, attr=zeros) ['$130load_global.16', '$142load_attr.18']
    $154load_attr.20 = getattr(value=knn_indices, attr=size) ['$154load_attr.20', 'knn_indices']
    $164load_global.21 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$164load_global.21']
    $176load_attr.22 = getattr(value=$164load_global.21, attr=int32) ['$164load_global.21', '$176load_attr.22']
    cols = call $142load_attr.18($154load_attr.20, func=$142load_attr.18, args=[Var($154load_attr.20, umap_.py:411)], kws=[('dtype', Var($176load_attr.22, umap_.py:411))], vararg=None, varkwarg=None, target=None) ['$142load_attr.18', '$154load_attr.20', '$176load_attr.22', 'cols']
    $204load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$204load_global.24']
    $216load_attr.26 = getattr(value=$204load_global.24, attr=zeros) ['$204load_global.24', '$216load_attr.26']
    $228load_attr.28 = getattr(value=knn_indices, attr=size) ['$228load_attr.28', 'knn_indices']
    $238load_global.29 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$238load_global.29']
    $250load_attr.30 = getattr(value=$238load_global.29, attr=float32) ['$238load_global.29', '$250load_attr.30']
    vals = call $216load_attr.26($228load_attr.28, func=$216load_attr.26, args=[Var($228load_attr.28, umap_.py:412)], kws=[('dtype', Var($250load_attr.30, umap_.py:412))], vararg=None, varkwarg=None, target=None) ['$216load_attr.26', '$228load_attr.28', '$250load_attr.30', 'vals']
    bool280 = global(bool: <class 'bool'>)   ['bool280']
    $280pred = call bool280(return_dists, func=bool280, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None) ['$280pred', 'bool280', 'return_dists']
    branch $280pred, 282, 358                ['$280pred']
label 282:
    $282load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$282load_global.0']
    $294load_attr.2 = getattr(value=$282load_global.0, attr=zeros) ['$282load_global.0', '$294load_attr.2']
    $306load_attr.4 = getattr(value=knn_indices, attr=size) ['$306load_attr.4', 'knn_indices']
    $316load_global.5 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$316load_global.5']
    $328load_attr.6 = getattr(value=$316load_global.5, attr=float32) ['$316load_global.5', '$328load_attr.6']
    dists = call $294load_attr.2($306load_attr.4, func=$294load_attr.2, args=[Var($306load_attr.4, umap_.py:414)], kws=[('dtype', Var($328load_attr.6, umap_.py:414))], vararg=None, varkwarg=None, target=None) ['$294load_attr.2', '$306load_attr.4', '$328load_attr.6', 'dists']
    jump 362                                 []
label 358:
    dists = const(NoneType, None)            ['dists']
    jump 362                                 []
label 362:
    $362load_global.0 = global(range: <class 'range'>) ['$362load_global.0']
    $380call.3 = call $362load_global.0(n_samples, func=$362load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None) ['$362load_global.0', '$380call.3', 'n_samples']
    $390get_iter.4 = getiter(value=$380call.3) ['$380call.3', '$390get_iter.4']
    $phi392.0 = $390get_iter.4               ['$390get_iter.4', '$phi392.0']
    jump 392                                 []
label 392:
    $392for_iter.1 = iternext(value=$phi392.0) ['$392for_iter.1', '$phi392.0']
    $392for_iter.2 = pair_first(value=$392for_iter.1) ['$392for_iter.1', '$392for_iter.2']
    $392for_iter.3 = pair_second(value=$392for_iter.1) ['$392for_iter.1', '$392for_iter.3']
    $phi394.1 = $392for_iter.2               ['$392for_iter.2', '$phi394.1']
    branch $392for_iter.3, 394, 806          ['$392for_iter.3']
label 394:
    i = $phi394.1                            ['$phi394.1', 'i']
    $396load_global.2 = global(range: <class 'range'>) ['$396load_global.2']
    $414call.5 = call $396load_global.2(n_neighbors, func=$396load_global.2, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None) ['$396load_global.2', '$414call.5', 'n_neighbors']
    $424get_iter.6 = getiter(value=$414call.5) ['$414call.5', '$424get_iter.6']
    $phi426.1 = $424get_iter.6               ['$424get_iter.6', '$phi426.1']
    jump 426                                 []
label 426:
    $426for_iter.2 = iternext(value=$phi426.1) ['$426for_iter.2', '$phi426.1']
    $426for_iter.3 = pair_first(value=$426for_iter.2) ['$426for_iter.2', '$426for_iter.3']
    $426for_iter.4 = pair_second(value=$426for_iter.2) ['$426for_iter.2', '$426for_iter.4']
    $phi428.2 = $426for_iter.3               ['$426for_iter.3', '$phi428.2']
    branch $426for_iter.4, 428, 804          ['$426for_iter.4']
label 428:
    j = $phi428.2                            ['$phi428.2', 'j']
    $436build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$436build_tuple.6', 'i', 'j']
    $438binary_subscr.7 = getitem(value=knn_indices, index=$436build_tuple.6, fn=<built-in function getitem>) ['$436build_tuple.6', '$438binary_subscr.7', 'knn_indices']
    $const448.8 = const(int, -1)             ['$const448.8']
    $450compare_op.9 = $438binary_subscr.7 == $const448.8 ['$438binary_subscr.7', '$450compare_op.9', '$const448.8']
    bool456 = global(bool: <class 'bool'>)   ['bool456']
    $456pred = call bool456($450compare_op.9, func=bool456, args=(Var($450compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None) ['$450compare_op.9', '$456pred', 'bool456']
    branch $456pred, 458, 460                ['$456pred']
label 458:
    jump 426                                 []
label 460:
    $const462.3 = const(bool, False)         ['$const462.3']
    $464compare_op.4 = bipartite == $const462.3 ['$464compare_op.4', '$const462.3', 'bipartite']
    $476build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$476build_tuple.8', 'i', 'j']
    $478binary_subscr.9 = getitem(value=knn_indices, index=$476build_tuple.8, fn=<built-in function getitem>) ['$476build_tuple.8', '$478binary_subscr.9', 'knn_indices']
    $490compare_op.11 = $478binary_subscr.9 == i ['$478binary_subscr.9', '$490compare_op.11', 'i']
    $binop_and_496.12 = $464compare_op.4 & $490compare_op.11 ['$464compare_op.4', '$490compare_op.11', '$binop_and_496.12']
    bool500 = global(bool: <class 'bool'>)   ['bool500']
    $500pred = call bool500($binop_and_496.12, func=bool500, args=(Var($binop_and_496.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None) ['$500pred', '$binop_and_496.12', 'bool500']
    branch $500pred, 502, 508                ['$500pred']
label 502:
    val = const(float, 0.0)                  ['val']
    jump 678                                 []
label 508:
    $514build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$514build_tuple.5', 'i', 'j']
    $516binary_subscr.6 = getitem(value=knn_dists, index=$514build_tuple.5, fn=<built-in function getitem>) ['$514build_tuple.5', '$516binary_subscr.6', 'knn_dists']
    $530binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>) ['$530binary_subscr.9', 'i', 'rhos']
    $binop_sub540.10 = $516binary_subscr.6 - $530binary_subscr.9 ['$516binary_subscr.6', '$530binary_subscr.9', '$binop_sub540.10']
    $const544.11 = const(float, 0.0)         ['$const544.11']
    $546compare_op.12 = $binop_sub540.10 <= $const544.11 ['$546compare_op.12', '$binop_sub540.10', '$const544.11']
    bool552 = global(bool: <class 'bool'>)   ['bool552']
    $552pred = call bool552($546compare_op.12, func=bool552, args=(Var($546compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None) ['$546compare_op.12', '$552pred', 'bool552']
    branch $552pred, 578, 554                ['$552pred']
label 554:
    $558binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$558binary_subscr.4', 'i', 'sigmas']
    $const568.5 = const(float, 0.0)          ['$const568.5']
    $570compare_op.6 = $558binary_subscr.4 == $const568.5 ['$558binary_subscr.4', '$570compare_op.6', '$const568.5']
    bool576 = global(bool: <class 'bool'>)   ['bool576']
    $576pred = call bool576($570compare_op.6, func=bool576, args=(Var($570compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None) ['$570compare_op.6', '$576pred', 'bool576']
    branch $576pred, 578, 584                ['$576pred']
label 578:
    val = const(float, 1.0)                  ['val']
    jump 678                                 []
label 584:
    $584load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$584load_global.2']
    $596load_attr.4 = getattr(value=$584load_global.2, attr=exp) ['$584load_global.2', '$596load_attr.4']
    $612build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$612build_tuple.8', 'i', 'j']
    $614binary_subscr.9 = getitem(value=knn_dists, index=$612build_tuple.8, fn=<built-in function getitem>) ['$612build_tuple.8', '$614binary_subscr.9', 'knn_dists']
    $628binary_subscr.12 = getitem(value=rhos, index=i, fn=<built-in function getitem>) ['$628binary_subscr.12', 'i', 'rhos']
    $binop_sub638.13 = $614binary_subscr.9 - $628binary_subscr.12 ['$614binary_subscr.9', '$628binary_subscr.12', '$binop_sub638.13']
    $646binary_subscr.16 = getitem(value=sigmas, index=i, fn=<built-in function getitem>) ['$646binary_subscr.16', 'i', 'sigmas']
    $binop_truediv656.17 = $binop_sub638.13 / $646binary_subscr.16 ['$646binary_subscr.16', '$binop_sub638.13', '$binop_truediv656.17']
    $660unary_negative.18 = unary(fn=<built-in function neg>, value=$binop_truediv656.17) ['$660unary_negative.18', '$binop_truediv656.17']
    val = call $596load_attr.4($660unary_negative.18, func=$596load_attr.4, args=[Var($660unary_negative.18, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None) ['$596load_attr.4', '$660unary_negative.18', 'val']
    jump 678                                 []
label 678:
    $binop_mul686.6 = i * n_neighbors        ['$binop_mul686.6', 'i', 'n_neighbors']
    $binop_add692.8 = $binop_mul686.6 + j    ['$binop_add692.8', '$binop_mul686.6', 'j']
    rows[$binop_add692.8] = i                ['$binop_add692.8', 'i', 'rows']
    $706build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$706build_tuple.12', 'i', 'j']
    $708binary_subscr.13 = getitem(value=knn_indices, index=$706build_tuple.12, fn=<built-in function getitem>) ['$706build_tuple.12', '$708binary_subscr.13', 'knn_indices']
    $binop_mul724.17 = i * n_neighbors       ['$binop_mul724.17', 'i', 'n_neighbors']
    $binop_add730.19 = $binop_mul724.17 + j  ['$binop_add730.19', '$binop_mul724.17', 'j']
    cols[$binop_add730.19] = $708binary_subscr.13 ['$708binary_subscr.13', '$binop_add730.19', 'cols']
    $binop_mul746.24 = i * n_neighbors       ['$binop_mul746.24', 'i', 'n_neighbors']
    $binop_add752.26 = $binop_mul746.24 + j  ['$binop_add752.26', '$binop_mul746.24', 'j']
    vals[$binop_add752.26] = val             ['$binop_add752.26', 'val', 'vals']
    bool762 = global(bool: <class 'bool'>)   ['bool762']
    $762pred = call bool762(return_dists, func=bool762, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None) ['$762pred', 'bool762', 'return_dists']
    branch $762pred, 764, 802                ['$762pred']
label 764:
    $770build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)]) ['$770build_tuple.5', 'i', 'j']
    $772binary_subscr.6 = getitem(value=knn_dists, index=$770build_tuple.5, fn=<built-in function getitem>) ['$770build_tuple.5', '$772binary_subscr.6', 'knn_dists']
    $binop_mul788.10 = i * n_neighbors       ['$binop_mul788.10', 'i', 'n_neighbors']
    $binop_add794.12 = $binop_mul788.10 + j  ['$binop_add794.12', '$binop_mul788.10', 'j']
    dists[$binop_add794.12] = $772binary_subscr.6 ['$772binary_subscr.6', '$binop_add794.12', 'dists']
    jump 802                                 []
label 802:
    jump 426                                 []
label 804:
    jump 392                                 []
label 806:
    $814build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists, umap_.py:414)]) ['$814build_tuple.4', 'cols', 'dists', 'rows', 'vals']
    $816return_value.5 = cast(value=$814build_tuple.4) ['$814build_tuple.4', '$816return_value.5']
    return $816return_value.5                ['$816return_value.5']

2023-11-07 09:01:26,560 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,560 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,560 [DEBUG] on stmt: knn_indices = arg(0, name=knn_indices)
2023-11-07 09:01:26,560 [DEBUG] on stmt: knn_dists = arg(1, name=knn_dists)
2023-11-07 09:01:26,560 [DEBUG] on stmt: sigmas = arg(2, name=sigmas)
2023-11-07 09:01:26,560 [DEBUG] on stmt: rhos = arg(3, name=rhos)
2023-11-07 09:01:26,560 [DEBUG] on stmt: return_dists = arg(4, name=return_dists)
2023-11-07 09:01:26,560 [DEBUG] on stmt: bipartite = arg(5, name=bipartite)
2023-11-07 09:01:26,560 [DEBUG] on stmt: $6load_attr.1 = getattr(value=knn_indices, attr=shape)
2023-11-07 09:01:26,560 [DEBUG] on stmt: $const16.2 = const(int, 0)
2023-11-07 09:01:26,560 [DEBUG] on stmt: n_samples = static_getitem(value=$6load_attr.1, index=0, index_var=$const16.2, fn=<built-in function getitem>)
2023-11-07 09:01:26,560 [DEBUG] on stmt: $32load_attr.5 = getattr(value=knn_indices, attr=shape)
2023-11-07 09:01:26,560 [DEBUG] on stmt: $const42.6 = const(int, 1)
2023-11-07 09:01:26,560 [DEBUG] on stmt: n_neighbors = static_getitem(value=$32load_attr.5, index=1, index_var=$const42.6, fn=<built-in function getitem>)
2023-11-07 09:01:26,560 [DEBUG] on stmt: $56load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,560 [DEBUG] on stmt: $68load_attr.10 = getattr(value=$56load_global.8, attr=zeros)
2023-11-07 09:01:26,560 [DEBUG] on stmt: $80load_attr.12 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $90load_global.13 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $102load_attr.14 = getattr(value=$90load_global.13, attr=int32)
2023-11-07 09:01:26,561 [DEBUG] on stmt: rows = call $68load_attr.10($80load_attr.12, func=$68load_attr.10, args=[Var($80load_attr.12, umap_.py:410)], kws=[('dtype', Var($102load_attr.14, umap_.py:410))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $130load_global.16 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $142load_attr.18 = getattr(value=$130load_global.16, attr=zeros)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $154load_attr.20 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $164load_global.21 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $176load_attr.22 = getattr(value=$164load_global.21, attr=int32)
2023-11-07 09:01:26,561 [DEBUG] on stmt: cols = call $142load_attr.18($154load_attr.20, func=$142load_attr.18, args=[Var($154load_attr.20, umap_.py:411)], kws=[('dtype', Var($176load_attr.22, umap_.py:411))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $204load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $216load_attr.26 = getattr(value=$204load_global.24, attr=zeros)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $228load_attr.28 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $238load_global.29 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $250load_attr.30 = getattr(value=$238load_global.29, attr=float32)
2023-11-07 09:01:26,561 [DEBUG] on stmt: vals = call $216load_attr.26($228load_attr.28, func=$216load_attr.26, args=[Var($228load_attr.28, umap_.py:412)], kws=[('dtype', Var($250load_attr.30, umap_.py:412))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,561 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $280pred = call bool280(return_dists, func=bool280, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,561 [DEBUG] on stmt: branch $280pred, 282, 358
2023-11-07 09:01:26,561 [DEBUG] ==== SSA block analysis pass on 282
2023-11-07 09:01:26,561 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,561 [DEBUG] on stmt: $282load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $294load_attr.2 = getattr(value=$282load_global.0, attr=zeros)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $306load_attr.4 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $316load_global.5 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $328load_attr.6 = getattr(value=$316load_global.5, attr=float32)
2023-11-07 09:01:26,561 [DEBUG] on stmt: dists = call $294load_attr.2($306load_attr.4, func=$294load_attr.2, args=[Var($306load_attr.4, umap_.py:414)], kws=[('dtype', Var($328load_attr.6, umap_.py:414))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,561 [DEBUG] on stmt: jump 362
2023-11-07 09:01:26,561 [DEBUG] ==== SSA block analysis pass on 358
2023-11-07 09:01:26,561 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,561 [DEBUG] on stmt: dists = const(NoneType, None)
2023-11-07 09:01:26,561 [DEBUG] on stmt: jump 362
2023-11-07 09:01:26,561 [DEBUG] ==== SSA block analysis pass on 362
2023-11-07 09:01:26,561 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,561 [DEBUG] on stmt: $362load_global.0 = global(range: <class 'range'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $380call.3 = call $362load_global.0(n_samples, func=$362load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $390get_iter.4 = getiter(value=$380call.3)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $phi392.0 = $390get_iter.4
2023-11-07 09:01:26,561 [DEBUG] on stmt: jump 392
2023-11-07 09:01:26,561 [DEBUG] ==== SSA block analysis pass on 392
2023-11-07 09:01:26,561 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,561 [DEBUG] on stmt: $392for_iter.1 = iternext(value=$phi392.0)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $392for_iter.2 = pair_first(value=$392for_iter.1)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $392for_iter.3 = pair_second(value=$392for_iter.1)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $phi394.1 = $392for_iter.2
2023-11-07 09:01:26,561 [DEBUG] on stmt: branch $392for_iter.3, 394, 806
2023-11-07 09:01:26,561 [DEBUG] ==== SSA block analysis pass on 394
2023-11-07 09:01:26,561 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,561 [DEBUG] on stmt: i = $phi394.1
2023-11-07 09:01:26,561 [DEBUG] on stmt: $396load_global.2 = global(range: <class 'range'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $414call.5 = call $396load_global.2(n_neighbors, func=$396load_global.2, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $424get_iter.6 = getiter(value=$414call.5)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $phi426.1 = $424get_iter.6
2023-11-07 09:01:26,561 [DEBUG] on stmt: jump 426
2023-11-07 09:01:26,561 [DEBUG] ==== SSA block analysis pass on 426
2023-11-07 09:01:26,561 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,561 [DEBUG] on stmt: $426for_iter.2 = iternext(value=$phi426.1)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $426for_iter.3 = pair_first(value=$426for_iter.2)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $426for_iter.4 = pair_second(value=$426for_iter.2)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $phi428.2 = $426for_iter.3
2023-11-07 09:01:26,561 [DEBUG] on stmt: branch $426for_iter.4, 428, 804
2023-11-07 09:01:26,561 [DEBUG] ==== SSA block analysis pass on 428
2023-11-07 09:01:26,561 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,561 [DEBUG] on stmt: j = $phi428.2
2023-11-07 09:01:26,561 [DEBUG] on stmt: $436build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,561 [DEBUG] on stmt: $438binary_subscr.7 = getitem(value=knn_indices, index=$436build_tuple.6, fn=<built-in function getitem>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $const448.8 = const(int, -1)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $450compare_op.9 = $438binary_subscr.7 == $const448.8
2023-11-07 09:01:26,561 [DEBUG] on stmt: bool456 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $456pred = call bool456($450compare_op.9, func=bool456, args=(Var($450compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,561 [DEBUG] on stmt: branch $456pred, 458, 460
2023-11-07 09:01:26,561 [DEBUG] ==== SSA block analysis pass on 458
2023-11-07 09:01:26,561 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,561 [DEBUG] on stmt: jump 807
2023-11-07 09:01:26,561 [DEBUG] ==== SSA block analysis pass on 460
2023-11-07 09:01:26,561 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,561 [DEBUG] on stmt: $const462.3 = const(bool, False)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $464compare_op.4 = bipartite == $const462.3
2023-11-07 09:01:26,561 [DEBUG] on stmt: $476build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,561 [DEBUG] on stmt: $478binary_subscr.9 = getitem(value=knn_indices, index=$476build_tuple.8, fn=<built-in function getitem>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $490compare_op.11 = $478binary_subscr.9 == i
2023-11-07 09:01:26,561 [DEBUG] on stmt: $binop_and_496.12 = $464compare_op.4 & $490compare_op.11
2023-11-07 09:01:26,561 [DEBUG] on stmt: bool500 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,561 [DEBUG] on stmt: $500pred = call bool500($binop_and_496.12, func=bool500, args=(Var($binop_and_496.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,561 [DEBUG] on stmt: branch $500pred, 502, 508
2023-11-07 09:01:26,561 [DEBUG] ==== SSA block analysis pass on 502
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: val = const(float, 0.0)
2023-11-07 09:01:26,562 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,562 [DEBUG] ==== SSA block analysis pass on 508
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: $514build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,562 [DEBUG] on stmt: $516binary_subscr.6 = getitem(value=knn_dists, index=$514build_tuple.5, fn=<built-in function getitem>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $530binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_sub540.10 = $516binary_subscr.6 - $530binary_subscr.9
2023-11-07 09:01:26,562 [DEBUG] on stmt: $const544.11 = const(float, 0.0)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $546compare_op.12 = $binop_sub540.10 <= $const544.11
2023-11-07 09:01:26,562 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $552pred = call bool552($546compare_op.12, func=bool552, args=(Var($546compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,562 [DEBUG] on stmt: branch $552pred, 578, 554
2023-11-07 09:01:26,562 [DEBUG] ==== SSA block analysis pass on 554
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: $558binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $const568.5 = const(float, 0.0)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $570compare_op.6 = $558binary_subscr.4 == $const568.5
2023-11-07 09:01:26,562 [DEBUG] on stmt: bool576 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $576pred = call bool576($570compare_op.6, func=bool576, args=(Var($570compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,562 [DEBUG] on stmt: branch $576pred, 578, 584
2023-11-07 09:01:26,562 [DEBUG] ==== SSA block analysis pass on 578
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: val = const(float, 1.0)
2023-11-07 09:01:26,562 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,562 [DEBUG] ==== SSA block analysis pass on 584
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: $584load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $596load_attr.4 = getattr(value=$584load_global.2, attr=exp)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $612build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,562 [DEBUG] on stmt: $614binary_subscr.9 = getitem(value=knn_dists, index=$612build_tuple.8, fn=<built-in function getitem>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $628binary_subscr.12 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_sub638.13 = $614binary_subscr.9 - $628binary_subscr.12
2023-11-07 09:01:26,562 [DEBUG] on stmt: $646binary_subscr.16 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_truediv656.17 = $binop_sub638.13 / $646binary_subscr.16
2023-11-07 09:01:26,562 [DEBUG] on stmt: $660unary_negative.18 = unary(fn=<built-in function neg>, value=$binop_truediv656.17)
2023-11-07 09:01:26,562 [DEBUG] on stmt: val = call $596load_attr.4($660unary_negative.18, func=$596load_attr.4, args=[Var($660unary_negative.18, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,562 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,562 [DEBUG] ==== SSA block analysis pass on 678
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_mul686.6 = i * n_neighbors
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_add692.8 = $binop_mul686.6 + j
2023-11-07 09:01:26,562 [DEBUG] on stmt: rows[$binop_add692.8] = i
2023-11-07 09:01:26,562 [DEBUG] on stmt: $706build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,562 [DEBUG] on stmt: $708binary_subscr.13 = getitem(value=knn_indices, index=$706build_tuple.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_mul724.17 = i * n_neighbors
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_add730.19 = $binop_mul724.17 + j
2023-11-07 09:01:26,562 [DEBUG] on stmt: cols[$binop_add730.19] = $708binary_subscr.13
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_mul746.24 = i * n_neighbors
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_add752.26 = $binop_mul746.24 + j
2023-11-07 09:01:26,562 [DEBUG] on stmt: vals[$binop_add752.26] = val
2023-11-07 09:01:26,562 [DEBUG] on stmt: bool762 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $762pred = call bool762(return_dists, func=bool762, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,562 [DEBUG] on stmt: branch $762pred, 764, 802
2023-11-07 09:01:26,562 [DEBUG] ==== SSA block analysis pass on 764
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: $770build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,562 [DEBUG] on stmt: $772binary_subscr.6 = getitem(value=knn_dists, index=$770build_tuple.5, fn=<built-in function getitem>)
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_mul788.10 = i * n_neighbors
2023-11-07 09:01:26,562 [DEBUG] on stmt: $binop_add794.12 = $binop_mul788.10 + j
2023-11-07 09:01:26,562 [DEBUG] on stmt: dists[$binop_add794.12] = $772binary_subscr.6
2023-11-07 09:01:26,562 [DEBUG] on stmt: jump 802
2023-11-07 09:01:26,562 [DEBUG] ==== SSA block analysis pass on 802
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: jump 807
2023-11-07 09:01:26,562 [DEBUG] ==== SSA block analysis pass on 804
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: jump 392
2023-11-07 09:01:26,562 [DEBUG] ==== SSA block analysis pass on 806
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: $814build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists, umap_.py:414)])
2023-11-07 09:01:26,562 [DEBUG] on stmt: $816return_value.5 = cast(value=$814build_tuple.4)
2023-11-07 09:01:26,562 [DEBUG] on stmt: return $816return_value.5
2023-11-07 09:01:26,562 [DEBUG] ==== SSA block analysis pass on 807
2023-11-07 09:01:26,562 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x280890b10>
2023-11-07 09:01:26,562 [DEBUG] on stmt: jump 426
2023-11-07 09:01:26,563 [DEBUG] defs defaultdict(<class 'list'>,
            {'$102load_attr.14': [<numba.core.ir.Assign object at 0x2935035d0>],
             '$130load_global.16': [<numba.core.ir.Assign object at 0x293503bd0>],
             '$142load_attr.18': [<numba.core.ir.Assign object at 0x293503d90>],
             '$154load_attr.20': [<numba.core.ir.Assign object at 0x293508110>],
             '$164load_global.21': [<numba.core.ir.Assign object at 0x293508350>],
             '$176load_attr.22': [<numba.core.ir.Assign object at 0x293508510>],
             '$204load_global.24': [<numba.core.ir.Assign object at 0x293508a10>],
             '$216load_attr.26': [<numba.core.ir.Assign object at 0x293508c10>],
             '$228load_attr.28': [<numba.core.ir.Assign object at 0x293508f90>],
             '$238load_global.29': [<numba.core.ir.Assign object at 0x293509110>],
             '$250load_attr.30': [<numba.core.ir.Assign object at 0x293509310>],
             '$280pred': [<numba.core.ir.Assign object at 0x293509b50>],
             '$282load_global.0': [<numba.core.ir.Assign object at 0x293508d50>],
             '$294load_attr.2': [<numba.core.ir.Assign object at 0x293509d50>],
             '$306load_attr.4': [<numba.core.ir.Assign object at 0x29350a150>],
             '$316load_global.5': [<numba.core.ir.Assign object at 0x29350a350>],
             '$328load_attr.6': [<numba.core.ir.Assign object at 0x29350a590>],
             '$32load_attr.5': [<numba.core.ir.Assign object at 0x2825ab350>],
             '$362load_global.0': [<numba.core.ir.Assign object at 0x29350aed0>],
             '$380call.3': [<numba.core.ir.Assign object at 0x29350b390>],
             '$390get_iter.4': [<numba.core.ir.Assign object at 0x29350b610>],
             '$392for_iter.1': [<numba.core.ir.Assign object at 0x29350b9d0>],
             '$392for_iter.2': [<numba.core.ir.Assign object at 0x29350bb50>],
             '$392for_iter.3': [<numba.core.ir.Assign object at 0x29350bcd0>],
             '$396load_global.2': [<numba.core.ir.Assign object at 0x29350c250>],
             '$414call.5': [<numba.core.ir.Assign object at 0x29350c7d0>],
             '$424get_iter.6': [<numba.core.ir.Assign object at 0x29350cb10>],
             '$426for_iter.2': [<numba.core.ir.Assign object at 0x29350cf10>],
             '$426for_iter.3': [<numba.core.ir.Assign object at 0x29350d090>],
             '$426for_iter.4': [<numba.core.ir.Assign object at 0x29350d210>],
             '$436build_tuple.6': [<numba.core.ir.Assign object at 0x29350dd10>],
             '$438binary_subscr.7': [<numba.core.ir.Assign object at 0x29350df10>],
             '$450compare_op.9': [<numba.core.ir.Assign object at 0x29350e410>],
             '$456pred': [<numba.core.ir.Assign object at 0x29350e7d0>],
             '$464compare_op.4': [<numba.core.ir.Assign object at 0x29350ef10>],
             '$476build_tuple.8': [<numba.core.ir.Assign object at 0x29350f6d0>],
             '$478binary_subscr.9': [<numba.core.ir.Assign object at 0x29350f890>],
             '$490compare_op.11': [<numba.core.ir.Assign object at 0x29350fbd0>],
             '$500pred': [<numba.core.ir.Assign object at 0x2935102d0>],
             '$514build_tuple.5': [<numba.core.ir.Assign object at 0x293510d90>],
             '$516binary_subscr.6': [<numba.core.ir.Assign object at 0x293510f90>],
             '$530binary_subscr.9': [<numba.core.ir.Assign object at 0x293511610>],
             '$546compare_op.12': [<numba.core.ir.Assign object at 0x293511bd0>],
             '$552pred': [<numba.core.ir.Assign object at 0x293512010>],
             '$558binary_subscr.4': [<numba.core.ir.Assign object at 0x293512490>],
             '$56load_global.8': [<numba.core.ir.Assign object at 0x293372910>],
             '$570compare_op.6': [<numba.core.ir.Assign object at 0x293512850>],
             '$576pred': [<numba.core.ir.Assign object at 0x293512c50>],
             '$584load_global.2': [<numba.core.ir.Assign object at 0x293513190>],
             '$596load_attr.4': [<numba.core.ir.Assign object at 0x293513350>],
             '$612build_tuple.8': [<numba.core.ir.Assign object at 0x293513b10>],
             '$614binary_subscr.9': [<numba.core.ir.Assign object at 0x293513d10>],
             '$628binary_subscr.12': [<numba.core.ir.Assign object at 0x293518250>],
             '$646binary_subscr.16': [<numba.core.ir.Assign object at 0x293518a10>],
             '$660unary_negative.18': [<numba.core.ir.Assign object at 0x293518f10>],
             '$68load_attr.10': [<numba.core.ir.Assign object at 0x293502150>],
             '$6load_attr.1': [<numba.core.ir.Assign object at 0x29330e110>],
             '$706build_tuple.12': [<numba.core.ir.Assign object at 0x29351a550>],
             '$708binary_subscr.13': [<numba.core.ir.Assign object at 0x29351a710>],
             '$762pred': [<numba.core.ir.Assign object at 0x29351c490>],
             '$770build_tuple.5': [<numba.core.ir.Assign object at 0x29351c710>],
             '$772binary_subscr.6': [<numba.core.ir.Assign object at 0x29351c910>],
             '$80load_attr.12': [<numba.core.ir.Assign object at 0x293503210>],
             '$814build_tuple.4': [<numba.core.ir.Assign object at 0x29351e0d0>],
             '$816return_value.5': [<numba.core.ir.Assign object at 0x29351e350>],
             '$90load_global.13': [<numba.core.ir.Assign object at 0x293503410>],
             '$binop_add692.8': [<numba.core.ir.Assign object at 0x293519dd0>],
             '$binop_add730.19': [<numba.core.ir.Assign object at 0x29351b190>],
             '$binop_add752.26': [<numba.core.ir.Assign object at 0x29351be50>],
             '$binop_add794.12': [<numba.core.ir.Assign object at 0x29351d450>],
             '$binop_and_496.12': [<numba.core.ir.Assign object at 0x29350fe90>],
             '$binop_mul686.6': [<numba.core.ir.Assign object at 0x2935199d0>],
             '$binop_mul724.17': [<numba.core.ir.Assign object at 0x29351ae50>],
             '$binop_mul746.24': [<numba.core.ir.Assign object at 0x29351bad0>],
             '$binop_mul788.10': [<numba.core.ir.Assign object at 0x29351d090>],
             '$binop_sub540.10': [<numba.core.ir.Assign object at 0x293511850>],
             '$binop_sub638.13': [<numba.core.ir.Assign object at 0x2935184d0>],
             '$binop_truediv656.17': [<numba.core.ir.Assign object at 0x293518d10>],
             '$const16.2': [<numba.core.ir.Assign object at 0x29336e550>],
             '$const42.6': [<numba.core.ir.Assign object at 0x2933713d0>],
             '$const448.8': [<numba.core.ir.Assign object at 0x29350e1d0>],
             '$const462.3': [<numba.core.ir.Assign object at 0x29350ed10>],
             '$const544.11': [<numba.core.ir.Assign object at 0x293511990>],
             '$const568.5': [<numba.core.ir.Assign object at 0x293512650>],
             '$phi392.0': [<numba.core.ir.Assign object at 0x29350b150>],
             '$phi394.1': [<numba.core.ir.Assign object at 0x29350bd90>],
             '$phi426.1': [<numba.core.ir.Assign object at 0x29350c550>],
             '$phi428.2': [<numba.core.ir.Assign object at 0x29350d2d0>],
             'bipartite': [<numba.core.ir.Assign object at 0x282741390>],
             'bool280': [<numba.core.ir.Assign object at 0x293509990>],
             'bool456': [<numba.core.ir.Assign object at 0x29350e650>],
             'bool500': [<numba.core.ir.Assign object at 0x293510110>],
             'bool552': [<numba.core.ir.Assign object at 0x293511e50>],
             'bool576': [<numba.core.ir.Assign object at 0x293512a90>],
             'bool762': [<numba.core.ir.Assign object at 0x29351c2d0>],
             'cols': [<numba.core.ir.Assign object at 0x293508750>],
             'dists': [<numba.core.ir.Assign object at 0x29350a890>,
                       <numba.core.ir.Assign object at 0x29350ac50>],
             'i': [<numba.core.ir.Assign object at 0x29350c090>],
             'j': [<numba.core.ir.Assign object at 0x29350d590>],
             'knn_dists': [<numba.core.ir.Assign object at 0x28274fb50>],
             'knn_indices': [<numba.core.ir.Assign object at 0x282912b50>],
             'n_neighbors': [<numba.core.ir.Assign object at 0x28273fe50>],
             'n_samples': [<numba.core.ir.Assign object at 0x28273c850>],
             'return_dists': [<numba.core.ir.Assign object at 0x28273a150>],
             'rhos': [<numba.core.ir.Assign object at 0x280a92a50>],
             'rows': [<numba.core.ir.Assign object at 0x293503810>],
             'sigmas': [<numba.core.ir.Assign object at 0x28274dcd0>],
             'val': [<numba.core.ir.Assign object at 0x293510450>,
                     <numba.core.ir.Assign object at 0x293512e50>,
                     <numba.core.ir.Assign object at 0x293519150>],
             'vals': [<numba.core.ir.Assign object at 0x293509550>]})
2023-11-07 09:01:26,563 [DEBUG] SSA violators {'dists', 'val'}
2023-11-07 09:01:26,563 [DEBUG] Fix SSA violator on var dists
2023-11-07 09:01:26,563 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,563 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,563 [DEBUG] on stmt: knn_indices = arg(0, name=knn_indices)
2023-11-07 09:01:26,563 [DEBUG] on stmt: knn_dists = arg(1, name=knn_dists)
2023-11-07 09:01:26,563 [DEBUG] on stmt: sigmas = arg(2, name=sigmas)
2023-11-07 09:01:26,563 [DEBUG] on stmt: rhos = arg(3, name=rhos)
2023-11-07 09:01:26,563 [DEBUG] on stmt: return_dists = arg(4, name=return_dists)
2023-11-07 09:01:26,563 [DEBUG] on stmt: bipartite = arg(5, name=bipartite)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $6load_attr.1 = getattr(value=knn_indices, attr=shape)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $const16.2 = const(int, 0)
2023-11-07 09:01:26,563 [DEBUG] on stmt: n_samples = static_getitem(value=$6load_attr.1, index=0, index_var=$const16.2, fn=<built-in function getitem>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $32load_attr.5 = getattr(value=knn_indices, attr=shape)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $const42.6 = const(int, 1)
2023-11-07 09:01:26,563 [DEBUG] on stmt: n_neighbors = static_getitem(value=$32load_attr.5, index=1, index_var=$const42.6, fn=<built-in function getitem>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $56load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $68load_attr.10 = getattr(value=$56load_global.8, attr=zeros)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $80load_attr.12 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $90load_global.13 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $102load_attr.14 = getattr(value=$90load_global.13, attr=int32)
2023-11-07 09:01:26,563 [DEBUG] on stmt: rows = call $68load_attr.10($80load_attr.12, func=$68load_attr.10, args=[Var($80load_attr.12, umap_.py:410)], kws=[('dtype', Var($102load_attr.14, umap_.py:410))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $130load_global.16 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $142load_attr.18 = getattr(value=$130load_global.16, attr=zeros)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $154load_attr.20 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $164load_global.21 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $176load_attr.22 = getattr(value=$164load_global.21, attr=int32)
2023-11-07 09:01:26,563 [DEBUG] on stmt: cols = call $142load_attr.18($154load_attr.20, func=$142load_attr.18, args=[Var($154load_attr.20, umap_.py:411)], kws=[('dtype', Var($176load_attr.22, umap_.py:411))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $204load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $216load_attr.26 = getattr(value=$204load_global.24, attr=zeros)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $228load_attr.28 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $238load_global.29 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $250load_attr.30 = getattr(value=$238load_global.29, attr=float32)
2023-11-07 09:01:26,563 [DEBUG] on stmt: vals = call $216load_attr.26($228load_attr.28, func=$216load_attr.26, args=[Var($228load_attr.28, umap_.py:412)], kws=[('dtype', Var($250load_attr.30, umap_.py:412))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,563 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $280pred = call bool280(return_dists, func=bool280, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,563 [DEBUG] on stmt: branch $280pred, 282, 358
2023-11-07 09:01:26,563 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:26,563 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,563 [DEBUG] on stmt: $282load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $294load_attr.2 = getattr(value=$282load_global.0, attr=zeros)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $306load_attr.4 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $316load_global.5 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $328load_attr.6 = getattr(value=$316load_global.5, attr=float32)
2023-11-07 09:01:26,563 [DEBUG] on stmt: dists = call $294load_attr.2($306load_attr.4, func=$294load_attr.2, args=[Var($306load_attr.4, umap_.py:414)], kws=[('dtype', Var($328load_attr.6, umap_.py:414))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,563 [DEBUG] first assign: dists
2023-11-07 09:01:26,563 [DEBUG] replaced with: dists = call $294load_attr.2($306load_attr.4, func=$294load_attr.2, args=[Var($306load_attr.4, umap_.py:414)], kws=[('dtype', Var($328load_attr.6, umap_.py:414))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,563 [DEBUG] on stmt: jump 362
2023-11-07 09:01:26,563 [DEBUG] ==== SSA block rewrite pass on 358
2023-11-07 09:01:26,563 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,563 [DEBUG] on stmt: dists = const(NoneType, None)
2023-11-07 09:01:26,563 [DEBUG] replaced with: dists.1 = const(NoneType, None)
2023-11-07 09:01:26,563 [DEBUG] on stmt: jump 362
2023-11-07 09:01:26,563 [DEBUG] ==== SSA block rewrite pass on 362
2023-11-07 09:01:26,563 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,563 [DEBUG] on stmt: $362load_global.0 = global(range: <class 'range'>)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $380call.3 = call $362load_global.0(n_samples, func=$362load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,563 [DEBUG] on stmt: $390get_iter.4 = getiter(value=$380call.3)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $phi392.0 = $390get_iter.4
2023-11-07 09:01:26,564 [DEBUG] on stmt: jump 392
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 392
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: $392for_iter.1 = iternext(value=$phi392.0)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $392for_iter.2 = pair_first(value=$392for_iter.1)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $392for_iter.3 = pair_second(value=$392for_iter.1)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $phi394.1 = $392for_iter.2
2023-11-07 09:01:26,564 [DEBUG] on stmt: branch $392for_iter.3, 394, 806
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 394
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: i = $phi394.1
2023-11-07 09:01:26,564 [DEBUG] on stmt: $396load_global.2 = global(range: <class 'range'>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $414call.5 = call $396load_global.2(n_neighbors, func=$396load_global.2, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $424get_iter.6 = getiter(value=$414call.5)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $phi426.1 = $424get_iter.6
2023-11-07 09:01:26,564 [DEBUG] on stmt: jump 426
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 426
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: $426for_iter.2 = iternext(value=$phi426.1)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $426for_iter.3 = pair_first(value=$426for_iter.2)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $426for_iter.4 = pair_second(value=$426for_iter.2)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $phi428.2 = $426for_iter.3
2023-11-07 09:01:26,564 [DEBUG] on stmt: branch $426for_iter.4, 428, 804
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 428
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: j = $phi428.2
2023-11-07 09:01:26,564 [DEBUG] on stmt: $436build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,564 [DEBUG] on stmt: $438binary_subscr.7 = getitem(value=knn_indices, index=$436build_tuple.6, fn=<built-in function getitem>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $const448.8 = const(int, -1)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $450compare_op.9 = $438binary_subscr.7 == $const448.8
2023-11-07 09:01:26,564 [DEBUG] on stmt: bool456 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $456pred = call bool456($450compare_op.9, func=bool456, args=(Var($450compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,564 [DEBUG] on stmt: branch $456pred, 458, 460
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 458
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: jump 807
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 460
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: $const462.3 = const(bool, False)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $464compare_op.4 = bipartite == $const462.3
2023-11-07 09:01:26,564 [DEBUG] on stmt: $476build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,564 [DEBUG] on stmt: $478binary_subscr.9 = getitem(value=knn_indices, index=$476build_tuple.8, fn=<built-in function getitem>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $490compare_op.11 = $478binary_subscr.9 == i
2023-11-07 09:01:26,564 [DEBUG] on stmt: $binop_and_496.12 = $464compare_op.4 & $490compare_op.11
2023-11-07 09:01:26,564 [DEBUG] on stmt: bool500 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $500pred = call bool500($binop_and_496.12, func=bool500, args=(Var($binop_and_496.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,564 [DEBUG] on stmt: branch $500pred, 502, 508
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 502
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: val = const(float, 0.0)
2023-11-07 09:01:26,564 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 508
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: $514build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,564 [DEBUG] on stmt: $516binary_subscr.6 = getitem(value=knn_dists, index=$514build_tuple.5, fn=<built-in function getitem>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $530binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $binop_sub540.10 = $516binary_subscr.6 - $530binary_subscr.9
2023-11-07 09:01:26,564 [DEBUG] on stmt: $const544.11 = const(float, 0.0)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $546compare_op.12 = $binop_sub540.10 <= $const544.11
2023-11-07 09:01:26,564 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $552pred = call bool552($546compare_op.12, func=bool552, args=(Var($546compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,564 [DEBUG] on stmt: branch $552pred, 578, 554
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: $558binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $const568.5 = const(float, 0.0)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $570compare_op.6 = $558binary_subscr.4 == $const568.5
2023-11-07 09:01:26,564 [DEBUG] on stmt: bool576 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $576pred = call bool576($570compare_op.6, func=bool576, args=(Var($570compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,564 [DEBUG] on stmt: branch $576pred, 578, 584
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 578
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: val = const(float, 1.0)
2023-11-07 09:01:26,564 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 584
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: $584load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $596load_attr.4 = getattr(value=$584load_global.2, attr=exp)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $612build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,564 [DEBUG] on stmt: $614binary_subscr.9 = getitem(value=knn_dists, index=$612build_tuple.8, fn=<built-in function getitem>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $628binary_subscr.12 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $binop_sub638.13 = $614binary_subscr.9 - $628binary_subscr.12
2023-11-07 09:01:26,564 [DEBUG] on stmt: $646binary_subscr.16 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,564 [DEBUG] on stmt: $binop_truediv656.17 = $binop_sub638.13 / $646binary_subscr.16
2023-11-07 09:01:26,564 [DEBUG] on stmt: $660unary_negative.18 = unary(fn=<built-in function neg>, value=$binop_truediv656.17)
2023-11-07 09:01:26,564 [DEBUG] on stmt: val = call $596load_attr.4($660unary_negative.18, func=$596load_attr.4, args=[Var($660unary_negative.18, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,564 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,564 [DEBUG] ==== SSA block rewrite pass on 678
2023-11-07 09:01:26,564 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,564 [DEBUG] on stmt: $binop_mul686.6 = i * n_neighbors
2023-11-07 09:01:26,564 [DEBUG] on stmt: $binop_add692.8 = $binop_mul686.6 + j
2023-11-07 09:01:26,564 [DEBUG] on stmt: rows[$binop_add692.8] = i
2023-11-07 09:01:26,564 [DEBUG] on stmt: $706build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,565 [DEBUG] on stmt: $708binary_subscr.13 = getitem(value=knn_indices, index=$706build_tuple.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $binop_mul724.17 = i * n_neighbors
2023-11-07 09:01:26,565 [DEBUG] on stmt: $binop_add730.19 = $binop_mul724.17 + j
2023-11-07 09:01:26,565 [DEBUG] on stmt: cols[$binop_add730.19] = $708binary_subscr.13
2023-11-07 09:01:26,565 [DEBUG] on stmt: $binop_mul746.24 = i * n_neighbors
2023-11-07 09:01:26,565 [DEBUG] on stmt: $binop_add752.26 = $binop_mul746.24 + j
2023-11-07 09:01:26,565 [DEBUG] on stmt: vals[$binop_add752.26] = val
2023-11-07 09:01:26,565 [DEBUG] on stmt: bool762 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $762pred = call bool762(return_dists, func=bool762, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,565 [DEBUG] on stmt: branch $762pred, 764, 802
2023-11-07 09:01:26,565 [DEBUG] ==== SSA block rewrite pass on 764
2023-11-07 09:01:26,565 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,565 [DEBUG] on stmt: $770build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,565 [DEBUG] on stmt: $772binary_subscr.6 = getitem(value=knn_dists, index=$770build_tuple.5, fn=<built-in function getitem>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $binop_mul788.10 = i * n_neighbors
2023-11-07 09:01:26,565 [DEBUG] on stmt: $binop_add794.12 = $binop_mul788.10 + j
2023-11-07 09:01:26,565 [DEBUG] on stmt: dists[$binop_add794.12] = $772binary_subscr.6
2023-11-07 09:01:26,565 [DEBUG] on stmt: jump 802
2023-11-07 09:01:26,565 [DEBUG] ==== SSA block rewrite pass on 802
2023-11-07 09:01:26,565 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,565 [DEBUG] on stmt: jump 807
2023-11-07 09:01:26,565 [DEBUG] ==== SSA block rewrite pass on 804
2023-11-07 09:01:26,565 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,565 [DEBUG] on stmt: jump 392
2023-11-07 09:01:26,565 [DEBUG] ==== SSA block rewrite pass on 806
2023-11-07 09:01:26,565 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,565 [DEBUG] on stmt: $814build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists, umap_.py:414)])
2023-11-07 09:01:26,565 [DEBUG] on stmt: $816return_value.5 = cast(value=$814build_tuple.4)
2023-11-07 09:01:26,565 [DEBUG] on stmt: return $816return_value.5
2023-11-07 09:01:26,565 [DEBUG] ==== SSA block rewrite pass on 807
2023-11-07 09:01:26,565 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x282750ad0>
2023-11-07 09:01:26,565 [DEBUG] on stmt: jump 426
2023-11-07 09:01:26,565 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {282: [<numba.core.ir.Assign object at 0x280903c10>],
             358: [<numba.core.ir.Assign object at 0x282753b10>]})
2023-11-07 09:01:26,565 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,565 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,565 [DEBUG] on stmt: knn_indices = arg(0, name=knn_indices)
2023-11-07 09:01:26,565 [DEBUG] on stmt: knn_dists = arg(1, name=knn_dists)
2023-11-07 09:01:26,565 [DEBUG] on stmt: sigmas = arg(2, name=sigmas)
2023-11-07 09:01:26,565 [DEBUG] on stmt: rhos = arg(3, name=rhos)
2023-11-07 09:01:26,565 [DEBUG] on stmt: return_dists = arg(4, name=return_dists)
2023-11-07 09:01:26,565 [DEBUG] on stmt: bipartite = arg(5, name=bipartite)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $6load_attr.1 = getattr(value=knn_indices, attr=shape)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $const16.2 = const(int, 0)
2023-11-07 09:01:26,565 [DEBUG] on stmt: n_samples = static_getitem(value=$6load_attr.1, index=0, index_var=$const16.2, fn=<built-in function getitem>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $32load_attr.5 = getattr(value=knn_indices, attr=shape)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $const42.6 = const(int, 1)
2023-11-07 09:01:26,565 [DEBUG] on stmt: n_neighbors = static_getitem(value=$32load_attr.5, index=1, index_var=$const42.6, fn=<built-in function getitem>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $56load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $68load_attr.10 = getattr(value=$56load_global.8, attr=zeros)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $80load_attr.12 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $90load_global.13 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $102load_attr.14 = getattr(value=$90load_global.13, attr=int32)
2023-11-07 09:01:26,565 [DEBUG] on stmt: rows = call $68load_attr.10($80load_attr.12, func=$68load_attr.10, args=[Var($80load_attr.12, umap_.py:410)], kws=[('dtype', Var($102load_attr.14, umap_.py:410))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $130load_global.16 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $142load_attr.18 = getattr(value=$130load_global.16, attr=zeros)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $154load_attr.20 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $164load_global.21 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $176load_attr.22 = getattr(value=$164load_global.21, attr=int32)
2023-11-07 09:01:26,565 [DEBUG] on stmt: cols = call $142load_attr.18($154load_attr.20, func=$142load_attr.18, args=[Var($154load_attr.20, umap_.py:411)], kws=[('dtype', Var($176load_attr.22, umap_.py:411))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $204load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $216load_attr.26 = getattr(value=$204load_global.24, attr=zeros)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $228load_attr.28 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $238load_global.29 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $250load_attr.30 = getattr(value=$238load_global.29, attr=float32)
2023-11-07 09:01:26,565 [DEBUG] on stmt: vals = call $216load_attr.26($228load_attr.28, func=$216load_attr.26, args=[Var($228load_attr.28, umap_.py:412)], kws=[('dtype', Var($250load_attr.30, umap_.py:412))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,565 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $280pred = call bool280(return_dists, func=bool280, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,565 [DEBUG] on stmt: branch $280pred, 282, 358
2023-11-07 09:01:26,565 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:26,565 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,565 [DEBUG] on stmt: $282load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $294load_attr.2 = getattr(value=$282load_global.0, attr=zeros)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $306load_attr.4 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $316load_global.5 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $328load_attr.6 = getattr(value=$316load_global.5, attr=float32)
2023-11-07 09:01:26,565 [DEBUG] on stmt: dists = call $294load_attr.2($306load_attr.4, func=$294load_attr.2, args=[Var($306load_attr.4, umap_.py:414)], kws=[('dtype', Var($328load_attr.6, umap_.py:414))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,565 [DEBUG] on stmt: jump 362
2023-11-07 09:01:26,565 [DEBUG] ==== SSA block rewrite pass on 358
2023-11-07 09:01:26,565 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,565 [DEBUG] on stmt: dists.1 = const(NoneType, None)
2023-11-07 09:01:26,565 [DEBUG] on stmt: jump 362
2023-11-07 09:01:26,565 [DEBUG] ==== SSA block rewrite pass on 362
2023-11-07 09:01:26,565 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,565 [DEBUG] on stmt: $362load_global.0 = global(range: <class 'range'>)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $380call.3 = call $362load_global.0(n_samples, func=$362load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,565 [DEBUG] on stmt: $390get_iter.4 = getiter(value=$380call.3)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $phi392.0 = $390get_iter.4
2023-11-07 09:01:26,566 [DEBUG] on stmt: jump 392
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 392
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: $392for_iter.1 = iternext(value=$phi392.0)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $392for_iter.2 = pair_first(value=$392for_iter.1)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $392for_iter.3 = pair_second(value=$392for_iter.1)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $phi394.1 = $392for_iter.2
2023-11-07 09:01:26,566 [DEBUG] on stmt: branch $392for_iter.3, 394, 806
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 394
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: i = $phi394.1
2023-11-07 09:01:26,566 [DEBUG] on stmt: $396load_global.2 = global(range: <class 'range'>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $414call.5 = call $396load_global.2(n_neighbors, func=$396load_global.2, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $424get_iter.6 = getiter(value=$414call.5)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $phi426.1 = $424get_iter.6
2023-11-07 09:01:26,566 [DEBUG] on stmt: jump 426
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 426
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: $426for_iter.2 = iternext(value=$phi426.1)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $426for_iter.3 = pair_first(value=$426for_iter.2)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $426for_iter.4 = pair_second(value=$426for_iter.2)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $phi428.2 = $426for_iter.3
2023-11-07 09:01:26,566 [DEBUG] on stmt: branch $426for_iter.4, 428, 804
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 428
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: j = $phi428.2
2023-11-07 09:01:26,566 [DEBUG] on stmt: $436build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,566 [DEBUG] on stmt: $438binary_subscr.7 = getitem(value=knn_indices, index=$436build_tuple.6, fn=<built-in function getitem>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $const448.8 = const(int, -1)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $450compare_op.9 = $438binary_subscr.7 == $const448.8
2023-11-07 09:01:26,566 [DEBUG] on stmt: bool456 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $456pred = call bool456($450compare_op.9, func=bool456, args=(Var($450compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,566 [DEBUG] on stmt: branch $456pred, 458, 460
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 458
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: jump 807
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 460
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: $const462.3 = const(bool, False)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $464compare_op.4 = bipartite == $const462.3
2023-11-07 09:01:26,566 [DEBUG] on stmt: $476build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,566 [DEBUG] on stmt: $478binary_subscr.9 = getitem(value=knn_indices, index=$476build_tuple.8, fn=<built-in function getitem>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $490compare_op.11 = $478binary_subscr.9 == i
2023-11-07 09:01:26,566 [DEBUG] on stmt: $binop_and_496.12 = $464compare_op.4 & $490compare_op.11
2023-11-07 09:01:26,566 [DEBUG] on stmt: bool500 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $500pred = call bool500($binop_and_496.12, func=bool500, args=(Var($binop_and_496.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,566 [DEBUG] on stmt: branch $500pred, 502, 508
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 502
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: val = const(float, 0.0)
2023-11-07 09:01:26,566 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 508
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: $514build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,566 [DEBUG] on stmt: $516binary_subscr.6 = getitem(value=knn_dists, index=$514build_tuple.5, fn=<built-in function getitem>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $530binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $binop_sub540.10 = $516binary_subscr.6 - $530binary_subscr.9
2023-11-07 09:01:26,566 [DEBUG] on stmt: $const544.11 = const(float, 0.0)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $546compare_op.12 = $binop_sub540.10 <= $const544.11
2023-11-07 09:01:26,566 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $552pred = call bool552($546compare_op.12, func=bool552, args=(Var($546compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,566 [DEBUG] on stmt: branch $552pred, 578, 554
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: $558binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $const568.5 = const(float, 0.0)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $570compare_op.6 = $558binary_subscr.4 == $const568.5
2023-11-07 09:01:26,566 [DEBUG] on stmt: bool576 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $576pred = call bool576($570compare_op.6, func=bool576, args=(Var($570compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,566 [DEBUG] on stmt: branch $576pred, 578, 584
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 578
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: val = const(float, 1.0)
2023-11-07 09:01:26,566 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,566 [DEBUG] ==== SSA block rewrite pass on 584
2023-11-07 09:01:26,566 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,566 [DEBUG] on stmt: $584load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $596load_attr.4 = getattr(value=$584load_global.2, attr=exp)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $612build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,566 [DEBUG] on stmt: $614binary_subscr.9 = getitem(value=knn_dists, index=$612build_tuple.8, fn=<built-in function getitem>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $628binary_subscr.12 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $binop_sub638.13 = $614binary_subscr.9 - $628binary_subscr.12
2023-11-07 09:01:26,566 [DEBUG] on stmt: $646binary_subscr.16 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,566 [DEBUG] on stmt: $binop_truediv656.17 = $binop_sub638.13 / $646binary_subscr.16
2023-11-07 09:01:26,566 [DEBUG] on stmt: $660unary_negative.18 = unary(fn=<built-in function neg>, value=$binop_truediv656.17)
2023-11-07 09:01:26,566 [DEBUG] on stmt: val = call $596load_attr.4($660unary_negative.18, func=$596load_attr.4, args=[Var($660unary_negative.18, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,567 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,567 [DEBUG] ==== SSA block rewrite pass on 678
2023-11-07 09:01:26,567 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,567 [DEBUG] on stmt: $binop_mul686.6 = i * n_neighbors
2023-11-07 09:01:26,567 [DEBUG] on stmt: $binop_add692.8 = $binop_mul686.6 + j
2023-11-07 09:01:26,567 [DEBUG] on stmt: rows[$binop_add692.8] = i
2023-11-07 09:01:26,567 [DEBUG] on stmt: $706build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,567 [DEBUG] on stmt: $708binary_subscr.13 = getitem(value=knn_indices, index=$706build_tuple.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,567 [DEBUG] on stmt: $binop_mul724.17 = i * n_neighbors
2023-11-07 09:01:26,567 [DEBUG] on stmt: $binop_add730.19 = $binop_mul724.17 + j
2023-11-07 09:01:26,567 [DEBUG] on stmt: cols[$binop_add730.19] = $708binary_subscr.13
2023-11-07 09:01:26,567 [DEBUG] on stmt: $binop_mul746.24 = i * n_neighbors
2023-11-07 09:01:26,567 [DEBUG] on stmt: $binop_add752.26 = $binop_mul746.24 + j
2023-11-07 09:01:26,567 [DEBUG] on stmt: vals[$binop_add752.26] = val
2023-11-07 09:01:26,567 [DEBUG] on stmt: bool762 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,567 [DEBUG] on stmt: $762pred = call bool762(return_dists, func=bool762, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,567 [DEBUG] on stmt: branch $762pred, 764, 802
2023-11-07 09:01:26,567 [DEBUG] ==== SSA block rewrite pass on 764
2023-11-07 09:01:26,567 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,567 [DEBUG] on stmt: $770build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,567 [DEBUG] on stmt: $772binary_subscr.6 = getitem(value=knn_dists, index=$770build_tuple.5, fn=<built-in function getitem>)
2023-11-07 09:01:26,567 [DEBUG] on stmt: $binop_mul788.10 = i * n_neighbors
2023-11-07 09:01:26,567 [DEBUG] on stmt: $binop_add794.12 = $binop_mul788.10 + j
2023-11-07 09:01:26,567 [DEBUG] on stmt: dists[$binop_add794.12] = $772binary_subscr.6
2023-11-07 09:01:26,567 [DEBUG] find_def var='dists' stmt=dists[$binop_add794.12] = $772binary_subscr.6
2023-11-07 09:01:26,567 [DEBUG] find_def_from_top label 764
2023-11-07 09:01:26,567 [DEBUG] idom 678 from label 764
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 678
2023-11-07 09:01:26,567 [DEBUG] find_def_from_top label 678
2023-11-07 09:01:26,567 [DEBUG] idom 460 from label 678
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 460
2023-11-07 09:01:26,567 [DEBUG] find_def_from_top label 460
2023-11-07 09:01:26,567 [DEBUG] idom 428 from label 460
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 428
2023-11-07 09:01:26,567 [DEBUG] find_def_from_top label 428
2023-11-07 09:01:26,567 [DEBUG] idom 426 from label 428
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 426
2023-11-07 09:01:26,567 [DEBUG] find_def_from_top label 426
2023-11-07 09:01:26,567 [DEBUG] idom 394 from label 426
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 394
2023-11-07 09:01:26,567 [DEBUG] find_def_from_top label 394
2023-11-07 09:01:26,567 [DEBUG] idom 392 from label 394
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 392
2023-11-07 09:01:26,567 [DEBUG] find_def_from_top label 392
2023-11-07 09:01:26,567 [DEBUG] idom 362 from label 392
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 362
2023-11-07 09:01:26,567 [DEBUG] find_def_from_top label 362
2023-11-07 09:01:26,567 [DEBUG] insert phi node dists.2 = phi(incoming_values=[], incoming_blocks=[]) at 362
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 282
2023-11-07 09:01:26,567 [DEBUG] incoming_def dists = call $294load_attr.2($306load_attr.4, func=$294load_attr.2, args=[Var($306load_attr.4, umap_.py:414)], kws=[('dtype', Var($328load_attr.6, umap_.py:414))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 358
2023-11-07 09:01:26,567 [DEBUG] incoming_def dists.1 = const(NoneType, None)
2023-11-07 09:01:26,567 [DEBUG] replaced with: dists.2[$binop_add794.12] = $772binary_subscr.6
2023-11-07 09:01:26,567 [DEBUG] on stmt: jump 802
2023-11-07 09:01:26,567 [DEBUG] ==== SSA block rewrite pass on 802
2023-11-07 09:01:26,567 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,567 [DEBUG] on stmt: jump 807
2023-11-07 09:01:26,567 [DEBUG] ==== SSA block rewrite pass on 804
2023-11-07 09:01:26,567 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,567 [DEBUG] on stmt: jump 392
2023-11-07 09:01:26,567 [DEBUG] ==== SSA block rewrite pass on 806
2023-11-07 09:01:26,567 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,567 [DEBUG] on stmt: $814build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists, umap_.py:414)])
2023-11-07 09:01:26,567 [DEBUG] find_def var='dists' stmt=$814build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists, umap_.py:414)])
2023-11-07 09:01:26,567 [DEBUG] find_def_from_top label 806
2023-11-07 09:01:26,567 [DEBUG] idom 392 from label 806
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 392
2023-11-07 09:01:26,567 [DEBUG] find_def_from_top label 392
2023-11-07 09:01:26,567 [DEBUG] idom 362 from label 392
2023-11-07 09:01:26,567 [DEBUG] find_def_from_bottom label 362
2023-11-07 09:01:26,567 [DEBUG] replaced with: $814build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists.2, umap_.py:435)])
2023-11-07 09:01:26,567 [DEBUG] on stmt: $816return_value.5 = cast(value=$814build_tuple.4)
2023-11-07 09:01:26,567 [DEBUG] on stmt: return $816return_value.5
2023-11-07 09:01:26,567 [DEBUG] ==== SSA block rewrite pass on 807
2023-11-07 09:01:26,567 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2825a8450>
2023-11-07 09:01:26,567 [DEBUG] on stmt: jump 426
2023-11-07 09:01:26,567 [DEBUG] Fix SSA violator on var val
2023-11-07 09:01:26,567 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,567 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,567 [DEBUG] on stmt: knn_indices = arg(0, name=knn_indices)
2023-11-07 09:01:26,567 [DEBUG] on stmt: knn_dists = arg(1, name=knn_dists)
2023-11-07 09:01:26,567 [DEBUG] on stmt: sigmas = arg(2, name=sigmas)
2023-11-07 09:01:26,567 [DEBUG] on stmt: rhos = arg(3, name=rhos)
2023-11-07 09:01:26,567 [DEBUG] on stmt: return_dists = arg(4, name=return_dists)
2023-11-07 09:01:26,567 [DEBUG] on stmt: bipartite = arg(5, name=bipartite)
2023-11-07 09:01:26,567 [DEBUG] on stmt: $6load_attr.1 = getattr(value=knn_indices, attr=shape)
2023-11-07 09:01:26,567 [DEBUG] on stmt: $const16.2 = const(int, 0)
2023-11-07 09:01:26,567 [DEBUG] on stmt: n_samples = static_getitem(value=$6load_attr.1, index=0, index_var=$const16.2, fn=<built-in function getitem>)
2023-11-07 09:01:26,567 [DEBUG] on stmt: $32load_attr.5 = getattr(value=knn_indices, attr=shape)
2023-11-07 09:01:26,567 [DEBUG] on stmt: $const42.6 = const(int, 1)
2023-11-07 09:01:26,568 [DEBUG] on stmt: n_neighbors = static_getitem(value=$32load_attr.5, index=1, index_var=$const42.6, fn=<built-in function getitem>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $56load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $68load_attr.10 = getattr(value=$56load_global.8, attr=zeros)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $80load_attr.12 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $90load_global.13 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $102load_attr.14 = getattr(value=$90load_global.13, attr=int32)
2023-11-07 09:01:26,568 [DEBUG] on stmt: rows = call $68load_attr.10($80load_attr.12, func=$68load_attr.10, args=[Var($80load_attr.12, umap_.py:410)], kws=[('dtype', Var($102load_attr.14, umap_.py:410))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $130load_global.16 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $142load_attr.18 = getattr(value=$130load_global.16, attr=zeros)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $154load_attr.20 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $164load_global.21 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $176load_attr.22 = getattr(value=$164load_global.21, attr=int32)
2023-11-07 09:01:26,568 [DEBUG] on stmt: cols = call $142load_attr.18($154load_attr.20, func=$142load_attr.18, args=[Var($154load_attr.20, umap_.py:411)], kws=[('dtype', Var($176load_attr.22, umap_.py:411))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $204load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $216load_attr.26 = getattr(value=$204load_global.24, attr=zeros)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $228load_attr.28 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $238load_global.29 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $250load_attr.30 = getattr(value=$238load_global.29, attr=float32)
2023-11-07 09:01:26,568 [DEBUG] on stmt: vals = call $216load_attr.26($228load_attr.28, func=$216load_attr.26, args=[Var($228load_attr.28, umap_.py:412)], kws=[('dtype', Var($250load_attr.30, umap_.py:412))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,568 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $280pred = call bool280(return_dists, func=bool280, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,568 [DEBUG] on stmt: branch $280pred, 282, 358
2023-11-07 09:01:26,568 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:26,568 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,568 [DEBUG] on stmt: $282load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $294load_attr.2 = getattr(value=$282load_global.0, attr=zeros)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $306load_attr.4 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $316load_global.5 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $328load_attr.6 = getattr(value=$316load_global.5, attr=float32)
2023-11-07 09:01:26,568 [DEBUG] on stmt: dists = call $294load_attr.2($306load_attr.4, func=$294load_attr.2, args=[Var($306load_attr.4, umap_.py:414)], kws=[('dtype', Var($328load_attr.6, umap_.py:414))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,568 [DEBUG] on stmt: jump 362
2023-11-07 09:01:26,568 [DEBUG] ==== SSA block rewrite pass on 358
2023-11-07 09:01:26,568 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,568 [DEBUG] on stmt: dists.1 = const(NoneType, None)
2023-11-07 09:01:26,568 [DEBUG] on stmt: jump 362
2023-11-07 09:01:26,568 [DEBUG] ==== SSA block rewrite pass on 362
2023-11-07 09:01:26,568 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,568 [DEBUG] on stmt: dists.2 = phi(incoming_values=[Var(dists, umap_.py:414), Var(dists.1, umap_.py:416)], incoming_blocks=[282, 358])
2023-11-07 09:01:26,568 [DEBUG] on stmt: $362load_global.0 = global(range: <class 'range'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $380call.3 = call $362load_global.0(n_samples, func=$362load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $390get_iter.4 = getiter(value=$380call.3)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $phi392.0 = $390get_iter.4
2023-11-07 09:01:26,568 [DEBUG] on stmt: jump 392
2023-11-07 09:01:26,568 [DEBUG] ==== SSA block rewrite pass on 392
2023-11-07 09:01:26,568 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,568 [DEBUG] on stmt: $392for_iter.1 = iternext(value=$phi392.0)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $392for_iter.2 = pair_first(value=$392for_iter.1)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $392for_iter.3 = pair_second(value=$392for_iter.1)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $phi394.1 = $392for_iter.2
2023-11-07 09:01:26,568 [DEBUG] on stmt: branch $392for_iter.3, 394, 806
2023-11-07 09:01:26,568 [DEBUG] ==== SSA block rewrite pass on 394
2023-11-07 09:01:26,568 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,568 [DEBUG] on stmt: i = $phi394.1
2023-11-07 09:01:26,568 [DEBUG] on stmt: $396load_global.2 = global(range: <class 'range'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $414call.5 = call $396load_global.2(n_neighbors, func=$396load_global.2, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $424get_iter.6 = getiter(value=$414call.5)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $phi426.1 = $424get_iter.6
2023-11-07 09:01:26,568 [DEBUG] on stmt: jump 426
2023-11-07 09:01:26,568 [DEBUG] ==== SSA block rewrite pass on 426
2023-11-07 09:01:26,568 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,568 [DEBUG] on stmt: $426for_iter.2 = iternext(value=$phi426.1)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $426for_iter.3 = pair_first(value=$426for_iter.2)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $426for_iter.4 = pair_second(value=$426for_iter.2)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $phi428.2 = $426for_iter.3
2023-11-07 09:01:26,568 [DEBUG] on stmt: branch $426for_iter.4, 428, 804
2023-11-07 09:01:26,568 [DEBUG] ==== SSA block rewrite pass on 428
2023-11-07 09:01:26,568 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,568 [DEBUG] on stmt: j = $phi428.2
2023-11-07 09:01:26,568 [DEBUG] on stmt: $436build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,568 [DEBUG] on stmt: $438binary_subscr.7 = getitem(value=knn_indices, index=$436build_tuple.6, fn=<built-in function getitem>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $const448.8 = const(int, -1)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $450compare_op.9 = $438binary_subscr.7 == $const448.8
2023-11-07 09:01:26,568 [DEBUG] on stmt: bool456 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $456pred = call bool456($450compare_op.9, func=bool456, args=(Var($450compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,568 [DEBUG] on stmt: branch $456pred, 458, 460
2023-11-07 09:01:26,568 [DEBUG] ==== SSA block rewrite pass on 458
2023-11-07 09:01:26,568 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,568 [DEBUG] on stmt: jump 807
2023-11-07 09:01:26,568 [DEBUG] ==== SSA block rewrite pass on 460
2023-11-07 09:01:26,568 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,568 [DEBUG] on stmt: $const462.3 = const(bool, False)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $464compare_op.4 = bipartite == $const462.3
2023-11-07 09:01:26,568 [DEBUG] on stmt: $476build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,568 [DEBUG] on stmt: $478binary_subscr.9 = getitem(value=knn_indices, index=$476build_tuple.8, fn=<built-in function getitem>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $490compare_op.11 = $478binary_subscr.9 == i
2023-11-07 09:01:26,568 [DEBUG] on stmt: $binop_and_496.12 = $464compare_op.4 & $490compare_op.11
2023-11-07 09:01:26,568 [DEBUG] on stmt: bool500 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,568 [DEBUG] on stmt: $500pred = call bool500($binop_and_496.12, func=bool500, args=(Var($binop_and_496.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,568 [DEBUG] on stmt: branch $500pred, 502, 508
2023-11-07 09:01:26,568 [DEBUG] ==== SSA block rewrite pass on 502
2023-11-07 09:01:26,568 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,568 [DEBUG] on stmt: val = const(float, 0.0)
2023-11-07 09:01:26,568 [DEBUG] first assign: val
2023-11-07 09:01:26,568 [DEBUG] replaced with: val = const(float, 0.0)
2023-11-07 09:01:26,569 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 508
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: $514build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,569 [DEBUG] on stmt: $516binary_subscr.6 = getitem(value=knn_dists, index=$514build_tuple.5, fn=<built-in function getitem>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $530binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_sub540.10 = $516binary_subscr.6 - $530binary_subscr.9
2023-11-07 09:01:26,569 [DEBUG] on stmt: $const544.11 = const(float, 0.0)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $546compare_op.12 = $binop_sub540.10 <= $const544.11
2023-11-07 09:01:26,569 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $552pred = call bool552($546compare_op.12, func=bool552, args=(Var($546compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,569 [DEBUG] on stmt: branch $552pred, 578, 554
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: $558binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $const568.5 = const(float, 0.0)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $570compare_op.6 = $558binary_subscr.4 == $const568.5
2023-11-07 09:01:26,569 [DEBUG] on stmt: bool576 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $576pred = call bool576($570compare_op.6, func=bool576, args=(Var($570compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,569 [DEBUG] on stmt: branch $576pred, 578, 584
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 578
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: val = const(float, 1.0)
2023-11-07 09:01:26,569 [DEBUG] replaced with: val.1 = const(float, 1.0)
2023-11-07 09:01:26,569 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 584
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: $584load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $596load_attr.4 = getattr(value=$584load_global.2, attr=exp)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $612build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,569 [DEBUG] on stmt: $614binary_subscr.9 = getitem(value=knn_dists, index=$612build_tuple.8, fn=<built-in function getitem>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $628binary_subscr.12 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_sub638.13 = $614binary_subscr.9 - $628binary_subscr.12
2023-11-07 09:01:26,569 [DEBUG] on stmt: $646binary_subscr.16 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_truediv656.17 = $binop_sub638.13 / $646binary_subscr.16
2023-11-07 09:01:26,569 [DEBUG] on stmt: $660unary_negative.18 = unary(fn=<built-in function neg>, value=$binop_truediv656.17)
2023-11-07 09:01:26,569 [DEBUG] on stmt: val = call $596load_attr.4($660unary_negative.18, func=$596load_attr.4, args=[Var($660unary_negative.18, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,569 [DEBUG] replaced with: val.2 = call $596load_attr.4($660unary_negative.18, func=$596load_attr.4, args=[Var($660unary_negative.18, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,569 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 678
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_mul686.6 = i * n_neighbors
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_add692.8 = $binop_mul686.6 + j
2023-11-07 09:01:26,569 [DEBUG] on stmt: rows[$binop_add692.8] = i
2023-11-07 09:01:26,569 [DEBUG] on stmt: $706build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,569 [DEBUG] on stmt: $708binary_subscr.13 = getitem(value=knn_indices, index=$706build_tuple.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_mul724.17 = i * n_neighbors
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_add730.19 = $binop_mul724.17 + j
2023-11-07 09:01:26,569 [DEBUG] on stmt: cols[$binop_add730.19] = $708binary_subscr.13
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_mul746.24 = i * n_neighbors
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_add752.26 = $binop_mul746.24 + j
2023-11-07 09:01:26,569 [DEBUG] on stmt: vals[$binop_add752.26] = val
2023-11-07 09:01:26,569 [DEBUG] on stmt: bool762 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $762pred = call bool762(return_dists, func=bool762, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,569 [DEBUG] on stmt: branch $762pred, 764, 802
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 764
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: $770build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,569 [DEBUG] on stmt: $772binary_subscr.6 = getitem(value=knn_dists, index=$770build_tuple.5, fn=<built-in function getitem>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_mul788.10 = i * n_neighbors
2023-11-07 09:01:26,569 [DEBUG] on stmt: $binop_add794.12 = $binop_mul788.10 + j
2023-11-07 09:01:26,569 [DEBUG] on stmt: dists.2[$binop_add794.12] = $772binary_subscr.6
2023-11-07 09:01:26,569 [DEBUG] on stmt: jump 802
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 802
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: jump 807
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 804
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: jump 392
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 806
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: $814build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists.2, umap_.py:435)])
2023-11-07 09:01:26,569 [DEBUG] on stmt: $816return_value.5 = cast(value=$814build_tuple.4)
2023-11-07 09:01:26,569 [DEBUG] on stmt: return $816return_value.5
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 807
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2825ce9d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: jump 426
2023-11-07 09:01:26,569 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {502: [<numba.core.ir.Assign object at 0x2825a8450>],
             578: [<numba.core.ir.Assign object at 0x293501c10>],
             584: [<numba.core.ir.Assign object at 0x293501cd0>]})
2023-11-07 09:01:26,569 [DEBUG] ==== SSA block rewrite pass on 0
2023-11-07 09:01:26,569 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,569 [DEBUG] on stmt: knn_indices = arg(0, name=knn_indices)
2023-11-07 09:01:26,569 [DEBUG] on stmt: knn_dists = arg(1, name=knn_dists)
2023-11-07 09:01:26,569 [DEBUG] on stmt: sigmas = arg(2, name=sigmas)
2023-11-07 09:01:26,569 [DEBUG] on stmt: rhos = arg(3, name=rhos)
2023-11-07 09:01:26,569 [DEBUG] on stmt: return_dists = arg(4, name=return_dists)
2023-11-07 09:01:26,569 [DEBUG] on stmt: bipartite = arg(5, name=bipartite)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $6load_attr.1 = getattr(value=knn_indices, attr=shape)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $const16.2 = const(int, 0)
2023-11-07 09:01:26,569 [DEBUG] on stmt: n_samples = static_getitem(value=$6load_attr.1, index=0, index_var=$const16.2, fn=<built-in function getitem>)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $32load_attr.5 = getattr(value=knn_indices, attr=shape)
2023-11-07 09:01:26,569 [DEBUG] on stmt: $const42.6 = const(int, 1)
2023-11-07 09:01:26,570 [DEBUG] on stmt: n_neighbors = static_getitem(value=$32load_attr.5, index=1, index_var=$const42.6, fn=<built-in function getitem>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $56load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $68load_attr.10 = getattr(value=$56load_global.8, attr=zeros)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $80load_attr.12 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $90load_global.13 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $102load_attr.14 = getattr(value=$90load_global.13, attr=int32)
2023-11-07 09:01:26,570 [DEBUG] on stmt: rows = call $68load_attr.10($80load_attr.12, func=$68load_attr.10, args=[Var($80load_attr.12, umap_.py:410)], kws=[('dtype', Var($102load_attr.14, umap_.py:410))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $130load_global.16 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $142load_attr.18 = getattr(value=$130load_global.16, attr=zeros)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $154load_attr.20 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $164load_global.21 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $176load_attr.22 = getattr(value=$164load_global.21, attr=int32)
2023-11-07 09:01:26,570 [DEBUG] on stmt: cols = call $142load_attr.18($154load_attr.20, func=$142load_attr.18, args=[Var($154load_attr.20, umap_.py:411)], kws=[('dtype', Var($176load_attr.22, umap_.py:411))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $204load_global.24 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $216load_attr.26 = getattr(value=$204load_global.24, attr=zeros)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $228load_attr.28 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $238load_global.29 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $250load_attr.30 = getattr(value=$238load_global.29, attr=float32)
2023-11-07 09:01:26,570 [DEBUG] on stmt: vals = call $216load_attr.26($228load_attr.28, func=$216load_attr.26, args=[Var($228load_attr.28, umap_.py:412)], kws=[('dtype', Var($250load_attr.30, umap_.py:412))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,570 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $280pred = call bool280(return_dists, func=bool280, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,570 [DEBUG] on stmt: branch $280pred, 282, 358
2023-11-07 09:01:26,570 [DEBUG] ==== SSA block rewrite pass on 282
2023-11-07 09:01:26,570 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,570 [DEBUG] on stmt: $282load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $294load_attr.2 = getattr(value=$282load_global.0, attr=zeros)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $306load_attr.4 = getattr(value=knn_indices, attr=size)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $316load_global.5 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $328load_attr.6 = getattr(value=$316load_global.5, attr=float32)
2023-11-07 09:01:26,570 [DEBUG] on stmt: dists = call $294load_attr.2($306load_attr.4, func=$294load_attr.2, args=[Var($306load_attr.4, umap_.py:414)], kws=[('dtype', Var($328load_attr.6, umap_.py:414))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,570 [DEBUG] on stmt: jump 362
2023-11-07 09:01:26,570 [DEBUG] ==== SSA block rewrite pass on 358
2023-11-07 09:01:26,570 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,570 [DEBUG] on stmt: dists.1 = const(NoneType, None)
2023-11-07 09:01:26,570 [DEBUG] on stmt: jump 362
2023-11-07 09:01:26,570 [DEBUG] ==== SSA block rewrite pass on 362
2023-11-07 09:01:26,570 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,570 [DEBUG] on stmt: dists.2 = phi(incoming_values=[Var(dists, umap_.py:414), Var(dists.1, umap_.py:416)], incoming_blocks=[282, 358])
2023-11-07 09:01:26,570 [DEBUG] on stmt: $362load_global.0 = global(range: <class 'range'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $380call.3 = call $362load_global.0(n_samples, func=$362load_global.0, args=[Var(n_samples, umap_.py:407)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $390get_iter.4 = getiter(value=$380call.3)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $phi392.0 = $390get_iter.4
2023-11-07 09:01:26,570 [DEBUG] on stmt: jump 392
2023-11-07 09:01:26,570 [DEBUG] ==== SSA block rewrite pass on 392
2023-11-07 09:01:26,570 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,570 [DEBUG] on stmt: $392for_iter.1 = iternext(value=$phi392.0)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $392for_iter.2 = pair_first(value=$392for_iter.1)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $392for_iter.3 = pair_second(value=$392for_iter.1)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $phi394.1 = $392for_iter.2
2023-11-07 09:01:26,570 [DEBUG] on stmt: branch $392for_iter.3, 394, 806
2023-11-07 09:01:26,570 [DEBUG] ==== SSA block rewrite pass on 394
2023-11-07 09:01:26,570 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,570 [DEBUG] on stmt: i = $phi394.1
2023-11-07 09:01:26,570 [DEBUG] on stmt: $396load_global.2 = global(range: <class 'range'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $414call.5 = call $396load_global.2(n_neighbors, func=$396load_global.2, args=[Var(n_neighbors, umap_.py:408)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $424get_iter.6 = getiter(value=$414call.5)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $phi426.1 = $424get_iter.6
2023-11-07 09:01:26,570 [DEBUG] on stmt: jump 426
2023-11-07 09:01:26,570 [DEBUG] ==== SSA block rewrite pass on 426
2023-11-07 09:01:26,570 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,570 [DEBUG] on stmt: $426for_iter.2 = iternext(value=$phi426.1)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $426for_iter.3 = pair_first(value=$426for_iter.2)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $426for_iter.4 = pair_second(value=$426for_iter.2)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $phi428.2 = $426for_iter.3
2023-11-07 09:01:26,570 [DEBUG] on stmt: branch $426for_iter.4, 428, 804
2023-11-07 09:01:26,570 [DEBUG] ==== SSA block rewrite pass on 428
2023-11-07 09:01:26,570 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,570 [DEBUG] on stmt: j = $phi428.2
2023-11-07 09:01:26,570 [DEBUG] on stmt: $436build_tuple.6 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,570 [DEBUG] on stmt: $438binary_subscr.7 = getitem(value=knn_indices, index=$436build_tuple.6, fn=<built-in function getitem>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $const448.8 = const(int, -1)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $450compare_op.9 = $438binary_subscr.7 == $const448.8
2023-11-07 09:01:26,570 [DEBUG] on stmt: bool456 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $456pred = call bool456($450compare_op.9, func=bool456, args=(Var($450compare_op.9, umap_.py:420),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,570 [DEBUG] on stmt: branch $456pred, 458, 460
2023-11-07 09:01:26,570 [DEBUG] ==== SSA block rewrite pass on 458
2023-11-07 09:01:26,570 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,570 [DEBUG] on stmt: jump 807
2023-11-07 09:01:26,570 [DEBUG] ==== SSA block rewrite pass on 460
2023-11-07 09:01:26,570 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,570 [DEBUG] on stmt: $const462.3 = const(bool, False)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $464compare_op.4 = bipartite == $const462.3
2023-11-07 09:01:26,570 [DEBUG] on stmt: $476build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,570 [DEBUG] on stmt: $478binary_subscr.9 = getitem(value=knn_indices, index=$476build_tuple.8, fn=<built-in function getitem>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $490compare_op.11 = $478binary_subscr.9 == i
2023-11-07 09:01:26,570 [DEBUG] on stmt: $binop_and_496.12 = $464compare_op.4 & $490compare_op.11
2023-11-07 09:01:26,570 [DEBUG] on stmt: bool500 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,570 [DEBUG] on stmt: $500pred = call bool500($binop_and_496.12, func=bool500, args=(Var($binop_and_496.12, umap_.py:424),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,570 [DEBUG] on stmt: branch $500pred, 502, 508
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 502
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: val = const(float, 0.0)
2023-11-07 09:01:26,571 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 508
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: $514build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,571 [DEBUG] on stmt: $516binary_subscr.6 = getitem(value=knn_dists, index=$514build_tuple.5, fn=<built-in function getitem>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $530binary_subscr.9 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_sub540.10 = $516binary_subscr.6 - $530binary_subscr.9
2023-11-07 09:01:26,571 [DEBUG] on stmt: $const544.11 = const(float, 0.0)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $546compare_op.12 = $binop_sub540.10 <= $const544.11
2023-11-07 09:01:26,571 [DEBUG] on stmt: bool552 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $552pred = call bool552($546compare_op.12, func=bool552, args=(Var($546compare_op.12, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,571 [DEBUG] on stmt: branch $552pred, 578, 554
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 554
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: $558binary_subscr.4 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $const568.5 = const(float, 0.0)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $570compare_op.6 = $558binary_subscr.4 == $const568.5
2023-11-07 09:01:26,571 [DEBUG] on stmt: bool576 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $576pred = call bool576($570compare_op.6, func=bool576, args=(Var($570compare_op.6, umap_.py:426),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,571 [DEBUG] on stmt: branch $576pred, 578, 584
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 578
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: val.1 = const(float, 1.0)
2023-11-07 09:01:26,571 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 584
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: $584load_global.2 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $596load_attr.4 = getattr(value=$584load_global.2, attr=exp)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $612build_tuple.8 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,571 [DEBUG] on stmt: $614binary_subscr.9 = getitem(value=knn_dists, index=$612build_tuple.8, fn=<built-in function getitem>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $628binary_subscr.12 = getitem(value=rhos, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_sub638.13 = $614binary_subscr.9 - $628binary_subscr.12
2023-11-07 09:01:26,571 [DEBUG] on stmt: $646binary_subscr.16 = getitem(value=sigmas, index=i, fn=<built-in function getitem>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_truediv656.17 = $binop_sub638.13 / $646binary_subscr.16
2023-11-07 09:01:26,571 [DEBUG] on stmt: $660unary_negative.18 = unary(fn=<built-in function neg>, value=$binop_truediv656.17)
2023-11-07 09:01:26,571 [DEBUG] on stmt: val.2 = call $596load_attr.4($660unary_negative.18, func=$596load_attr.4, args=[Var($660unary_negative.18, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,571 [DEBUG] on stmt: jump 678
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 678
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_mul686.6 = i * n_neighbors
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_add692.8 = $binop_mul686.6 + j
2023-11-07 09:01:26,571 [DEBUG] on stmt: rows[$binop_add692.8] = i
2023-11-07 09:01:26,571 [DEBUG] on stmt: $706build_tuple.12 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,571 [DEBUG] on stmt: $708binary_subscr.13 = getitem(value=knn_indices, index=$706build_tuple.12, fn=<built-in function getitem>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_mul724.17 = i * n_neighbors
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_add730.19 = $binop_mul724.17 + j
2023-11-07 09:01:26,571 [DEBUG] on stmt: cols[$binop_add730.19] = $708binary_subscr.13
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_mul746.24 = i * n_neighbors
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_add752.26 = $binop_mul746.24 + j
2023-11-07 09:01:26,571 [DEBUG] on stmt: vals[$binop_add752.26] = val
2023-11-07 09:01:26,571 [DEBUG] find_def var='val' stmt=vals[$binop_add752.26] = val
2023-11-07 09:01:26,571 [DEBUG] find_def_from_top label 678
2023-11-07 09:01:26,571 [DEBUG] insert phi node val.3 = phi(incoming_values=[], incoming_blocks=[]) at 678
2023-11-07 09:01:26,571 [DEBUG] find_def_from_bottom label 584
2023-11-07 09:01:26,571 [DEBUG] incoming_def val.2 = call $596load_attr.4($660unary_negative.18, func=$596load_attr.4, args=[Var($660unary_negative.18, umap_.py:429)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,571 [DEBUG] find_def_from_bottom label 578
2023-11-07 09:01:26,571 [DEBUG] incoming_def val.1 = const(float, 1.0)
2023-11-07 09:01:26,571 [DEBUG] find_def_from_bottom label 502
2023-11-07 09:01:26,571 [DEBUG] incoming_def val = const(float, 0.0)
2023-11-07 09:01:26,571 [DEBUG] replaced with: vals[$binop_add752.26] = val.3
2023-11-07 09:01:26,571 [DEBUG] on stmt: bool762 = global(bool: <class 'bool'>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $762pred = call bool762(return_dists, func=bool762, args=(Var(return_dists, umap_.py:349),), kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,571 [DEBUG] on stmt: branch $762pred, 764, 802
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 764
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: $770build_tuple.5 = build_tuple(items=[Var(i, umap_.py:418), Var(j, umap_.py:419)])
2023-11-07 09:01:26,571 [DEBUG] on stmt: $772binary_subscr.6 = getitem(value=knn_dists, index=$770build_tuple.5, fn=<built-in function getitem>)
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_mul788.10 = i * n_neighbors
2023-11-07 09:01:26,571 [DEBUG] on stmt: $binop_add794.12 = $binop_mul788.10 + j
2023-11-07 09:01:26,571 [DEBUG] on stmt: dists.2[$binop_add794.12] = $772binary_subscr.6
2023-11-07 09:01:26,571 [DEBUG] on stmt: jump 802
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 802
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: jump 807
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 804
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: jump 392
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 806
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: $814build_tuple.4 = build_tuple(items=[Var(rows, umap_.py:410), Var(cols, umap_.py:411), Var(vals, umap_.py:412), Var(dists.2, umap_.py:435)])
2023-11-07 09:01:26,571 [DEBUG] on stmt: $816return_value.5 = cast(value=$814build_tuple.4)
2023-11-07 09:01:26,571 [DEBUG] on stmt: return $816return_value.5
2023-11-07 09:01:26,571 [DEBUG] ==== SSA block rewrite pass on 807
2023-11-07 09:01:26,571 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2827530d0>
2023-11-07 09:01:26,571 [DEBUG] on stmt: jump 426
2023-11-07 09:01:26,574 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4319)
           2	RESUME(arg=0, lineno=4319)
           4	LOAD_GLOBAL(arg=1, lineno=4320)
          16	LOAD_ATTR(arg=1, lineno=4320)
          26	LOAD_FAST(arg=0, lineno=4320)
          28	LOAD_FAST(arg=1, lineno=4320)
          30	KW_NAMES(arg=1, lineno=4320)
          32	PRECALL(arg=2, lineno=4320)
          36	CALL(arg=2, lineno=4320)
          46	STORE_FAST(arg=2, lineno=4320)
          48	LOAD_FAST(arg=2, lineno=4321)
          50	LOAD_METHOD(arg=2, lineno=4321)
          72	PRECALL(arg=0, lineno=4321)
          76	CALL(arg=0, lineno=4321)
          86	POP_TOP(arg=None, lineno=4321)
          88	LOAD_FAST(arg=2, lineno=4322)
          90	RETURN_VALUE(arg=None, lineno=4322)
2023-11-07 09:01:26,574 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,574 [DEBUG] stack: []
2023-11-07 09:01:26,574 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,574 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4319)
2023-11-07 09:01:26,574 [DEBUG] stack []
2023-11-07 09:01:26,574 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=4319)
2023-11-07 09:01:26,574 [DEBUG] stack []
2023-11-07 09:01:26,574 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4320)
2023-11-07 09:01:26,574 [DEBUG] stack []
2023-11-07 09:01:26,574 [DEBUG] dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=4320)
2023-11-07 09:01:26,574 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,574 [DEBUG] dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4320)
2023-11-07 09:01:26,574 [DEBUG] stack ['$null$4.1', '$16load_attr.2']
2023-11-07 09:01:26,574 [DEBUG] dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4320)
2023-11-07 09:01:26,574 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3']
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=30, inst=KW_NAMES(arg=1, lineno=4320)
2023-11-07 09:01:26,575 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=32, inst=PRECALL(arg=2, lineno=4320)
2023-11-07 09:01:26,575 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=36, inst=CALL(arg=2, lineno=4320)
2023-11-07 09:01:26,575 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=46, inst=STORE_FAST(arg=2, lineno=4320)
2023-11-07 09:01:26,575 [DEBUG] stack ['$36call.5']
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=4321)
2023-11-07 09:01:26,575 [DEBUG] stack []
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=4321)
2023-11-07 09:01:26,575 [DEBUG] stack ['$arr48.6']
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=72, inst=PRECALL(arg=0, lineno=4321)
2023-11-07 09:01:26,575 [DEBUG] stack ['$null$50.7', '$50load_method.8']
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=76, inst=CALL(arg=0, lineno=4321)
2023-11-07 09:01:26,575 [DEBUG] stack ['$null$50.7', '$50load_method.8']
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=86, inst=POP_TOP(arg=None, lineno=4321)
2023-11-07 09:01:26,575 [DEBUG] stack ['$76call.9']
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=4322)
2023-11-07 09:01:26,575 [DEBUG] stack []
2023-11-07 09:01:26,575 [DEBUG] dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=4322)
2023-11-07 09:01:26,575 [DEBUG] stack ['$arr88.10']
2023-11-07 09:01:26,575 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,575 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,575 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,575 [DEBUG] defmap: {}
2023-11-07 09:01:26,575 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,575 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,575 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,575 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,575 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,575 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$shape26.3'}), (28, {'res': '$dtype28.4'}), (32, {}), (34, {}), (36, {'func': '$16load_attr.2', 'args': ['$shape26.3', '$dtype28.4'], 'kw_names': 1, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'value': '$36call.5'}), (48, {'res': '$arr48.6'}), (50, {'item': '$arr48.6', 'res': '$50load_method.8'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {'func': '$50load_method.8', 'args': [], 'kw_names': None, 'res': '$76call.9'}), (78, {}), (80, {}), (82, {}), (84, {}), (88, {'res': '$arr88.10'}), (90, {'retval': '$arr88.10', 'castval': '$90return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,575 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4319)], kws=[('dtype', Var(dtype, arrayobj.py:4319))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', 'arr', 'dtype', 'shape']
    $50load_method.8 = getattr(value=arr, attr=_zero_fill) ['$50load_method.8', 'arr']
    $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_method.8', '$76call.9']
    $90return_value.11 = cast(value=arr)     ['$90return_value.11', 'arr']
    return $90return_value.11                ['$90return_value.11']

2023-11-07 09:01:26,577 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,577 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2935210d0>
2023-11-07 09:01:26,577 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-11-07 09:01:26,577 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-11-07 09:01:26,577 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,577 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2023-11-07 09:01:26,577 [DEBUG] on stmt: arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4319)], kws=[('dtype', Var(dtype, arrayobj.py:4319))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,577 [DEBUG] on stmt: $50load_method.8 = getattr(value=arr, attr=_zero_fill)
2023-11-07 09:01:26,577 [DEBUG] on stmt: $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,577 [DEBUG] on stmt: $90return_value.11 = cast(value=arr)
2023-11-07 09:01:26,577 [DEBUG] on stmt: return $90return_value.11
2023-11-07 09:01:26,577 [DEBUG] defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [<numba.core.ir.Assign object at 0x29351c950>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x29351d650>],
             '$50load_method.8': [<numba.core.ir.Assign object at 0x293520f10>],
             '$76call.9': [<numba.core.ir.Assign object at 0x2935211d0>],
             '$90return_value.11': [<numba.core.ir.Assign object at 0x293521510>],
             'arr': [<numba.core.ir.Assign object at 0x29351f910>],
             'dtype': [<numba.core.ir.Assign object at 0x29350cbd0>],
             'shape': [<numba.core.ir.Assign object at 0x29350da90>]})
2023-11-07 09:01:26,577 [DEBUG] SSA violators set()
2023-11-07 09:01:26,578 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4251)
           2	COPY_FREE_VARS(arg=1, lineno=4251)
           4	RESUME(arg=0, lineno=4251)
           6	LOAD_GLOBAL(arg=1, lineno=4252)
          18	LOAD_FAST(arg=0, lineno=4252)
          20	LOAD_FAST(arg=1, lineno=4252)
          22	LOAD_DEREF(arg=2, lineno=4252)
          24	PRECALL(arg=3, lineno=4252)
          28	CALL(arg=3, lineno=4252)
          38	RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:26,578 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,578 [DEBUG] stack: []
2023-11-07 09:01:26,578 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,578 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4251)
2023-11-07 09:01:26,578 [DEBUG] stack []
2023-11-07 09:01:26,578 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4251)
2023-11-07 09:01:26,578 [DEBUG] stack []
2023-11-07 09:01:26,578 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=4251)
2023-11-07 09:01:26,578 [DEBUG] stack []
2023-11-07 09:01:26,578 [DEBUG] dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4252)
2023-11-07 09:01:26,578 [DEBUG] stack []
2023-11-07 09:01:26,579 [DEBUG] dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4252)
2023-11-07 09:01:26,579 [DEBUG] stack ['$null$6.1', '$6load_global.0']
2023-11-07 09:01:26,579 [DEBUG] dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4252)
2023-11-07 09:01:26,579 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2023-11-07 09:01:26,579 [DEBUG] dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4252)
2023-11-07 09:01:26,579 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2023-11-07 09:01:26,579 [DEBUG] dispatch pc=24, inst=PRECALL(arg=3, lineno=4252)
2023-11-07 09:01:26,579 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:26,579 [DEBUG] dispatch pc=28, inst=CALL(arg=3, lineno=4252)
2023-11-07 09:01:26,579 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:26,579 [DEBUG] dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:26,579 [DEBUG] stack ['$28call.5']
2023-11-07 09:01:26,579 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,579 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,579 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,579 [DEBUG] defmap: {}
2023-11-07 09:01:26,579 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,579 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,579 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,579 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,579 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,579 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,579 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(int32, 1d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2023-11-07 09:01:26,583 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,583 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2935290d0>
2023-11-07 09:01:26,583 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-11-07 09:01:26,583 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-11-07 09:01:26,583 [DEBUG] on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-11-07 09:01:26,583 [DEBUG] on stmt: $22load_deref.4 = freevar(retty: array(int32, 1d, C))
2023-11-07 09:01:26,583 [DEBUG] on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,583 [DEBUG] on stmt: $38return_value.6 = cast(value=$28call.5)
2023-11-07 09:01:26,583 [DEBUG] on stmt: return $38return_value.6
2023-11-07 09:01:26,583 [DEBUG] defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x293528fd0>],
             '$28call.5': [<numba.core.ir.Assign object at 0x293529210>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x2935293d0>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x293528a50>],
             'dtype': [<numba.core.ir.Assign object at 0x293528810>],
             'shape': [<numba.core.ir.Assign object at 0x293528710>]})
2023-11-07 09:01:26,583 [DEBUG] SSA violators set()
2023-11-07 09:01:26,600 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4310)
           2	RESUME(arg=0, lineno=4310)
           4	LOAD_GLOBAL(arg=1, lineno=4311)
          16	LOAD_FAST(arg=0, lineno=4311)
          18	PRECALL(arg=1, lineno=4311)
          22	CALL(arg=1, lineno=4311)
          32	POP_TOP(arg=None, lineno=4311)
          34	LOAD_CONST(arg=0, lineno=4311)
          36	RETURN_VALUE(arg=None, lineno=4311)
2023-11-07 09:01:26,600 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,600 [DEBUG] stack: []
2023-11-07 09:01:26,600 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,600 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4310)
2023-11-07 09:01:26,600 [DEBUG] stack []
2023-11-07 09:01:26,600 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=4310)
2023-11-07 09:01:26,601 [DEBUG] stack []
2023-11-07 09:01:26,601 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4311)
2023-11-07 09:01:26,601 [DEBUG] stack []
2023-11-07 09:01:26,601 [DEBUG] dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=4311)
2023-11-07 09:01:26,601 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,601 [DEBUG] dispatch pc=18, inst=PRECALL(arg=1, lineno=4311)
2023-11-07 09:01:26,601 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$self16.2']
2023-11-07 09:01:26,601 [DEBUG] dispatch pc=22, inst=CALL(arg=1, lineno=4311)
2023-11-07 09:01:26,601 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$self16.2']
2023-11-07 09:01:26,601 [DEBUG] dispatch pc=32, inst=POP_TOP(arg=None, lineno=4311)
2023-11-07 09:01:26,601 [DEBUG] stack ['$22call.3']
2023-11-07 09:01:26,601 [DEBUG] dispatch pc=34, inst=LOAD_CONST(arg=0, lineno=4311)
2023-11-07 09:01:26,601 [DEBUG] stack []
2023-11-07 09:01:26,601 [DEBUG] dispatch pc=36, inst=RETURN_VALUE(arg=None, lineno=4311)
2023-11-07 09:01:26,601 [DEBUG] stack ['$const34.4']
2023-11-07 09:01:26,601 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,601 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,601 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,601 [DEBUG] defmap: {}
2023-11-07 09:01:26,601 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,601 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,601 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,601 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,601 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,601 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$self16.2'}), (18, {}), (20, {}), (22, {'func': '$4load_global.0', 'args': ['$self16.2'], 'kw_names': None, 'res': '$22call.3'}), (24, {}), (26, {}), (28, {}), (30, {}), (34, {'res': '$const34.4'}), (36, {'retval': '$const34.4', 'castval': '$36return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,601 [DEBUG] label 0:
    self = arg(0, name=self)                 ['self']
    $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$4load_global.0']
    $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4310)], kws=(), vararg=None, varkwarg=None, target=None) ['$22call.3', '$4load_global.0', 'self']
    $const34.4 = const(NoneType, None)       ['$const34.4']
    $36return_value.5 = cast(value=$const34.4) ['$36return_value.5', '$const34.4']
    return $36return_value.5                 ['$36return_value.5']

2023-11-07 09:01:26,604 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,604 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x293550890>
2023-11-07 09:01:26,604 [DEBUG] on stmt: self = arg(0, name=self)
2023-11-07 09:01:26,604 [DEBUG] on stmt: $4load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
2023-11-07 09:01:26,604 [DEBUG] on stmt: $22call.3 = call $4load_global.0(self, func=$4load_global.0, args=[Var(self, arrayobj.py:4310)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,604 [DEBUG] on stmt: $const34.4 = const(NoneType, None)
2023-11-07 09:01:26,604 [DEBUG] on stmt: $36return_value.5 = cast(value=$const34.4)
2023-11-07 09:01:26,604 [DEBUG] on stmt: return $36return_value.5
2023-11-07 09:01:26,604 [DEBUG] defs defaultdict(<class 'list'>,
            {'$22call.3': [<numba.core.ir.Assign object at 0x29354f3d0>],
             '$36return_value.5': [<numba.core.ir.Assign object at 0x29354f7d0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x29354f0d0>],
             '$const34.4': [<numba.core.ir.Assign object at 0x29354f610>],
             'self': [<numba.core.ir.Assign object at 0x29354ee90>]})
2023-11-07 09:01:26,604 [DEBUG] SSA violators set()
2023-11-07 09:01:26,629 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4319)
           2	RESUME(arg=0, lineno=4319)
           4	LOAD_GLOBAL(arg=1, lineno=4320)
          16	LOAD_ATTR(arg=1, lineno=4320)
          26	LOAD_FAST(arg=0, lineno=4320)
          28	LOAD_FAST(arg=1, lineno=4320)
          30	KW_NAMES(arg=1, lineno=4320)
          32	PRECALL(arg=2, lineno=4320)
          36	CALL(arg=2, lineno=4320)
          46	STORE_FAST(arg=2, lineno=4320)
          48	LOAD_FAST(arg=2, lineno=4321)
          50	LOAD_METHOD(arg=2, lineno=4321)
          72	PRECALL(arg=0, lineno=4321)
          76	CALL(arg=0, lineno=4321)
          86	POP_TOP(arg=None, lineno=4321)
          88	LOAD_FAST(arg=2, lineno=4322)
          90	RETURN_VALUE(arg=None, lineno=4322)
2023-11-07 09:01:26,629 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,629 [DEBUG] stack: []
2023-11-07 09:01:26,629 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,629 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4319)
2023-11-07 09:01:26,629 [DEBUG] stack []
2023-11-07 09:01:26,629 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=4319)
2023-11-07 09:01:26,629 [DEBUG] stack []
2023-11-07 09:01:26,629 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=4320)
2023-11-07 09:01:26,629 [DEBUG] stack []
2023-11-07 09:01:26,629 [DEBUG] dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=4320)
2023-11-07 09:01:26,629 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,629 [DEBUG] dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=4320)
2023-11-07 09:01:26,629 [DEBUG] stack ['$null$4.1', '$16load_attr.2']
2023-11-07 09:01:26,629 [DEBUG] dispatch pc=28, inst=LOAD_FAST(arg=1, lineno=4320)
2023-11-07 09:01:26,629 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3']
2023-11-07 09:01:26,629 [DEBUG] dispatch pc=30, inst=KW_NAMES(arg=1, lineno=4320)
2023-11-07 09:01:26,629 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2023-11-07 09:01:26,629 [DEBUG] dispatch pc=32, inst=PRECALL(arg=2, lineno=4320)
2023-11-07 09:01:26,630 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2023-11-07 09:01:26,630 [DEBUG] dispatch pc=36, inst=CALL(arg=2, lineno=4320)
2023-11-07 09:01:26,630 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$shape26.3', '$dtype28.4']
2023-11-07 09:01:26,630 [DEBUG] dispatch pc=46, inst=STORE_FAST(arg=2, lineno=4320)
2023-11-07 09:01:26,630 [DEBUG] stack ['$36call.5']
2023-11-07 09:01:26,630 [DEBUG] dispatch pc=48, inst=LOAD_FAST(arg=2, lineno=4321)
2023-11-07 09:01:26,630 [DEBUG] stack []
2023-11-07 09:01:26,630 [DEBUG] dispatch pc=50, inst=LOAD_METHOD(arg=2, lineno=4321)
2023-11-07 09:01:26,630 [DEBUG] stack ['$arr48.6']
2023-11-07 09:01:26,630 [DEBUG] dispatch pc=72, inst=PRECALL(arg=0, lineno=4321)
2023-11-07 09:01:26,630 [DEBUG] stack ['$null$50.7', '$50load_method.8']
2023-11-07 09:01:26,630 [DEBUG] dispatch pc=76, inst=CALL(arg=0, lineno=4321)
2023-11-07 09:01:26,630 [DEBUG] stack ['$null$50.7', '$50load_method.8']
2023-11-07 09:01:26,630 [DEBUG] dispatch pc=86, inst=POP_TOP(arg=None, lineno=4321)
2023-11-07 09:01:26,630 [DEBUG] stack ['$76call.9']
2023-11-07 09:01:26,630 [DEBUG] dispatch pc=88, inst=LOAD_FAST(arg=2, lineno=4322)
2023-11-07 09:01:26,630 [DEBUG] stack []
2023-11-07 09:01:26,630 [DEBUG] dispatch pc=90, inst=RETURN_VALUE(arg=None, lineno=4322)
2023-11-07 09:01:26,630 [DEBUG] stack ['$arr88.10']
2023-11-07 09:01:26,630 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,630 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,630 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,630 [DEBUG] defmap: {}
2023-11-07 09:01:26,630 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,630 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,630 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,630 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,630 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,630 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$shape26.3'}), (28, {'res': '$dtype28.4'}), (32, {}), (34, {}), (36, {'func': '$16load_attr.2', 'args': ['$shape26.3', '$dtype28.4'], 'kw_names': 1, 'res': '$36call.5'}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {'value': '$36call.5'}), (48, {'res': '$arr48.6'}), (50, {'item': '$arr48.6', 'res': '$50load_method.8'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {'func': '$50load_method.8', 'args': [], 'kw_names': None, 'res': '$76call.9'}), (78, {}), (80, {}), (82, {}), (84, {}), (88, {'res': '$arr88.10'}), (90, {'retval': '$arr88.10', 'castval': '$90return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,630 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4319)], kws=[('dtype', Var(dtype, arrayobj.py:4319))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', 'arr', 'dtype', 'shape']
    $50load_method.8 = getattr(value=arr, attr=_zero_fill) ['$50load_method.8', 'arr']
    $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$50load_method.8', '$76call.9']
    $90return_value.11 = cast(value=arr)     ['$90return_value.11', 'arr']
    return $90return_value.11                ['$90return_value.11']

2023-11-07 09:01:26,632 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,632 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x293539c10>
2023-11-07 09:01:26,632 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-11-07 09:01:26,632 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-11-07 09:01:26,632 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-11-07 09:01:26,632 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2023-11-07 09:01:26,632 [DEBUG] on stmt: arr = call $16load_attr.2(shape, func=$16load_attr.2, args=[Var(shape, arrayobj.py:4319)], kws=[('dtype', Var(dtype, arrayobj.py:4319))], vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,632 [DEBUG] on stmt: $50load_method.8 = getattr(value=arr, attr=_zero_fill)
2023-11-07 09:01:26,632 [DEBUG] on stmt: $76call.9 = call $50load_method.8(func=$50load_method.8, args=[], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,632 [DEBUG] on stmt: $90return_value.11 = cast(value=arr)
2023-11-07 09:01:26,632 [DEBUG] on stmt: return $90return_value.11
2023-11-07 09:01:26,632 [DEBUG] defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [<numba.core.ir.Assign object at 0x293548f50>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x293548550>],
             '$50load_method.8': [<numba.core.ir.Assign object at 0x29354bdd0>],
             '$76call.9': [<numba.core.ir.Assign object at 0x29354ac10>],
             '$90return_value.11': [<numba.core.ir.Assign object at 0x29354a650>],
             'arr': [<numba.core.ir.Assign object at 0x293548950>],
             'dtype': [<numba.core.ir.Assign object at 0x293548d10>],
             'shape': [<numba.core.ir.Assign object at 0x293548e50>]})
2023-11-07 09:01:26,632 [DEBUG] SSA violators set()
2023-11-07 09:01:26,667 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4251)
           2	COPY_FREE_VARS(arg=1, lineno=4251)
           4	RESUME(arg=0, lineno=4251)
           6	LOAD_GLOBAL(arg=1, lineno=4252)
          18	LOAD_FAST(arg=0, lineno=4252)
          20	LOAD_FAST(arg=1, lineno=4252)
          22	LOAD_DEREF(arg=2, lineno=4252)
          24	PRECALL(arg=3, lineno=4252)
          28	CALL(arg=3, lineno=4252)
          38	RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:26,667 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,667 [DEBUG] stack: []
2023-11-07 09:01:26,667 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,667 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4251)
2023-11-07 09:01:26,668 [DEBUG] stack []
2023-11-07 09:01:26,668 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4251)
2023-11-07 09:01:26,668 [DEBUG] stack []
2023-11-07 09:01:26,668 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=4251)
2023-11-07 09:01:26,668 [DEBUG] stack []
2023-11-07 09:01:26,668 [DEBUG] dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4252)
2023-11-07 09:01:26,668 [DEBUG] stack []
2023-11-07 09:01:26,668 [DEBUG] dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4252)
2023-11-07 09:01:26,668 [DEBUG] stack ['$null$6.1', '$6load_global.0']
2023-11-07 09:01:26,668 [DEBUG] dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4252)
2023-11-07 09:01:26,668 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2023-11-07 09:01:26,668 [DEBUG] dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4252)
2023-11-07 09:01:26,668 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2023-11-07 09:01:26,668 [DEBUG] dispatch pc=24, inst=PRECALL(arg=3, lineno=4252)
2023-11-07 09:01:26,668 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:26,668 [DEBUG] dispatch pc=28, inst=CALL(arg=3, lineno=4252)
2023-11-07 09:01:26,668 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:26,668 [DEBUG] dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:26,668 [DEBUG] stack ['$28call.5']
2023-11-07 09:01:26,668 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,668 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,668 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,668 [DEBUG] defmap: {}
2023-11-07 09:01:26,668 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,668 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,668 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,668 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,668 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,668 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,668 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(int32, 1d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2023-11-07 09:01:26,670 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,670 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2935978d0>
2023-11-07 09:01:26,670 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-11-07 09:01:26,670 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-11-07 09:01:26,670 [DEBUG] on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-11-07 09:01:26,670 [DEBUG] on stmt: $22load_deref.4 = freevar(retty: array(int32, 1d, C))
2023-11-07 09:01:26,670 [DEBUG] on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,670 [DEBUG] on stmt: $38return_value.6 = cast(value=$28call.5)
2023-11-07 09:01:26,670 [DEBUG] on stmt: return $38return_value.6
2023-11-07 09:01:26,670 [DEBUG] defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x2935963d0>],
             '$28call.5': [<numba.core.ir.Assign object at 0x293596610>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x2935968d0>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x293595dd0>],
             'dtype': [<numba.core.ir.Assign object at 0x293595c10>],
             'shape': [<numba.core.ir.Assign object at 0x293595b10>]})
2023-11-07 09:01:26,670 [DEBUG] SSA violators set()
2023-11-07 09:01:26,685 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4251)
           2	COPY_FREE_VARS(arg=1, lineno=4251)
           4	RESUME(arg=0, lineno=4251)
           6	LOAD_GLOBAL(arg=1, lineno=4252)
          18	LOAD_FAST(arg=0, lineno=4252)
          20	LOAD_FAST(arg=1, lineno=4252)
          22	LOAD_DEREF(arg=2, lineno=4252)
          24	PRECALL(arg=3, lineno=4252)
          28	CALL(arg=3, lineno=4252)
          38	RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:26,685 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,685 [DEBUG] stack: []
2023-11-07 09:01:26,685 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,685 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4251)
2023-11-07 09:01:26,685 [DEBUG] stack []
2023-11-07 09:01:26,685 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4251)
2023-11-07 09:01:26,685 [DEBUG] stack []
2023-11-07 09:01:26,685 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=4251)
2023-11-07 09:01:26,685 [DEBUG] stack []
2023-11-07 09:01:26,685 [DEBUG] dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4252)
2023-11-07 09:01:26,685 [DEBUG] stack []
2023-11-07 09:01:26,685 [DEBUG] dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4252)
2023-11-07 09:01:26,685 [DEBUG] stack ['$null$6.1', '$6load_global.0']
2023-11-07 09:01:26,685 [DEBUG] dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4252)
2023-11-07 09:01:26,685 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2023-11-07 09:01:26,685 [DEBUG] dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4252)
2023-11-07 09:01:26,685 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2023-11-07 09:01:26,685 [DEBUG] dispatch pc=24, inst=PRECALL(arg=3, lineno=4252)
2023-11-07 09:01:26,685 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:26,685 [DEBUG] dispatch pc=28, inst=CALL(arg=3, lineno=4252)
2023-11-07 09:01:26,685 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-11-07 09:01:26,685 [DEBUG] dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4252)
2023-11-07 09:01:26,685 [DEBUG] stack ['$28call.5']
2023-11-07 09:01:26,685 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,685 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,685 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-11-07 09:01:26,685 [DEBUG] defmap: {}
2023-11-07 09:01:26,685 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,685 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-11-07 09:01:26,685 [DEBUG] keep phismap: {}
2023-11-07 09:01:26,685 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-11-07 09:01:26,685 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,685 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,686 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(float32, 1d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2023-11-07 09:01:26,687 [DEBUG] ==== SSA block analysis pass on 0
2023-11-07 09:01:26,687 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x293503510>
2023-11-07 09:01:26,687 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-11-07 09:01:26,687 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-11-07 09:01:26,687 [DEBUG] on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-11-07 09:01:26,687 [DEBUG] on stmt: $22load_deref.4 = freevar(retty: array(float32, 1d, C))
2023-11-07 09:01:26,687 [DEBUG] on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None)
2023-11-07 09:01:26,687 [DEBUG] on stmt: $38return_value.6 = cast(value=$28call.5)
2023-11-07 09:01:26,687 [DEBUG] on stmt: return $38return_value.6
2023-11-07 09:01:26,687 [DEBUG] defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x293572950>],
             '$28call.5': [<numba.core.ir.Assign object at 0x2935731d0>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x293571bd0>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x293572e10>],
             'dtype': [<numba.core.ir.Assign object at 0x293573850>],
             'shape': [<numba.core.ir.Assign object at 0x293573e50>]})
2023-11-07 09:01:26,687 [DEBUG] SSA violators set()
2023-11-07 09:01:26,737 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_GLOBAL(arg=1, lineno=2)
          16	LOAD_FAST(arg=0, lineno=2)
          18	LOAD_CONST(arg=1, lineno=2)
          20	BINARY_SUBSCR(arg=None, lineno=2)
          30	LOAD_FAST(arg=0, lineno=2)
          32	LOAD_CONST(arg=2, lineno=2)
          34	BINARY_SUBSCR(arg=None, lineno=2)
          44	LOAD_GLOBAL(arg=2, lineno=2)
          56	LOAD_METHOD(arg=2, lineno=2)
          78	LOAD_CONST(arg=2, lineno=2)
          80	PRECALL(arg=1, lineno=2)
          84	CALL(arg=1, lineno=2)
          94	BINARY_OP(arg=0, lineno=2)
          98	PRECALL(arg=2, lineno=2)
         102	CALL(arg=2, lineno=2)
         112	GET_ITER(arg=None, lineno=2)
>        114	FOR_ITER(arg=4, lineno=2)
         116	STORE_FAST(arg=2, lineno=2)
         118	LOAD_CONST(arg=1, lineno=3)
         120	STORE_FAST(arg=3, lineno=3)
         122	JUMP_BACKWARD(arg=5, lineno=3)
>        124	LOAD_CONST(arg=0, lineno=4)
         126	RETURN_VALUE(arg=None, lineno=4)
2023-11-07 09:01:26,737 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,737 [DEBUG] stack: []
2023-11-07 09:01:26,737 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,737 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-11-07 09:01:26,737 [DEBUG] stack []
2023-11-07 09:01:26,737 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-11-07 09:01:26,737 [DEBUG] stack []
2023-11-07 09:01:26,737 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=2)
2023-11-07 09:01:26,737 [DEBUG] stack []
2023-11-07 09:01:26,737 [DEBUG] dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2)
2023-11-07 09:01:26,737 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,737 [DEBUG] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=2)
2023-11-07 09:01:26,737 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2']
2023-11-07 09:01:26,737 [DEBUG] dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-11-07 09:01:26,737 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2', '$const18.3']
2023-11-07 09:01:26,737 [DEBUG] dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=2)
2023-11-07 09:01:26,737 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4']
2023-11-07 09:01:26,737 [DEBUG] dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=2)
2023-11-07 09:01:26,737 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5', '$const32.6']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=44, inst=LOAD_GLOBAL(arg=2, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=56, inst=LOAD_METHOD(arg=2, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$44load_global.8']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=80, inst=PRECALL(arg=1, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=84, inst=CALL(arg=1, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=94, inst=BINARY_OP(arg=0, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$84call.12']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=98, inst=PRECALL(arg=2, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=102, inst=CALL(arg=2, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=112, inst=GET_ITER(arg=None, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$102call.14']
2023-11-07 09:01:26,738 [DEBUG] end state. edges=[Edge(pc=114, stack=('$112get_iter.15',), blockstack=(), npush=0)]
2023-11-07 09:01:26,738 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-11-07 09:01:26,738 [DEBUG] stack: ['$phi114.0']
2023-11-07 09:01:26,738 [DEBUG] state.pc_initial: State(pc_initial=114 nstack_initial=1)
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=114, inst=FOR_ITER(arg=4, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$phi114.0']
2023-11-07 09:01:26,738 [DEBUG] end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=('$phi114.0', '$114for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,738 [DEBUG] pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=116 nstack_initial=2)])
2023-11-07 09:01:26,738 [DEBUG] stack: []
2023-11-07 09:01:26,738 [DEBUG] state.pc_initial: State(pc_initial=124 nstack_initial=0)
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=124, inst=LOAD_CONST(arg=0, lineno=4)
2023-11-07 09:01:26,738 [DEBUG] stack []
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=4)
2023-11-07 09:01:26,738 [DEBUG] stack ['$const124.0']
2023-11-07 09:01:26,738 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,738 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=2)])
2023-11-07 09:01:26,738 [DEBUG] stack: ['$phi116.0', '$phi116.1']
2023-11-07 09:01:26,738 [DEBUG] state.pc_initial: State(pc_initial=116 nstack_initial=2)
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=116, inst=STORE_FAST(arg=2, lineno=2)
2023-11-07 09:01:26,738 [DEBUG] stack ['$phi116.0', '$phi116.1']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=118, inst=LOAD_CONST(arg=1, lineno=3)
2023-11-07 09:01:26,738 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=120, inst=STORE_FAST(arg=3, lineno=3)
2023-11-07 09:01:26,738 [DEBUG] stack ['$phi116.0', '$const118.2']
2023-11-07 09:01:26,738 [DEBUG] dispatch pc=122, inst=JUMP_BACKWARD(arg=5, lineno=3)
2023-11-07 09:01:26,738 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:26,738 [DEBUG] end state. edges=[Edge(pc=114, stack=('$phi116.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,738 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-11-07 09:01:26,738 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,738 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=1): {'$phi114.0'},
             State(pc_initial=116 nstack_initial=2): {'$phi116.1'},
             State(pc_initial=124 nstack_initial=0): set()})
2023-11-07 09:01:26,738 [DEBUG] defmap: {'$phi114.0': State(pc_initial=0 nstack_initial=0),
 '$phi116.1': State(pc_initial=114 nstack_initial=1)}
2023-11-07 09:01:26,738 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi116.0',
                            State(pc_initial=116 nstack_initial=2))},
             '$phi116.0': {('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,738 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,738 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,738 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,738 [DEBUG] keep phismap: {'$phi114.0': {('$112get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi116.1': {('$114for_iter.2', State(pc_initial=114 nstack_initial=1))}}
2023-11-07 09:01:26,738 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi114.0': '$112get_iter.15'},
             State(pc_initial=114 nstack_initial=1): {'$phi116.1': '$114for_iter.2'}})
2023-11-07 09:01:26,738 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,738 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$sched16.2'}), (18, {'res': '$const18.3'}), (20, {'index': '$const18.3', 'target': '$sched16.2', 'res': '$20binary_subscr.4'}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'res': '$sched30.5'}), (32, {'res': '$const32.6'}), (34, {'index': '$const32.6', 'target': '$sched30.5', 'res': '$34binary_subscr.7'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {'idx': 1, 'res': '$44load_global.8'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'item': '$44load_global.8', 'res': '$56load_method.10'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'res': '$const78.11'}), (80, {}), (82, {}), (84, {'func': '$56load_method.10', 'args': ['$const78.11'], 'kw_names': None, 'res': '$84call.12'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'op': '+', 'lhs': '$34binary_subscr.7', 'rhs': '$84call.12', 'res': '$binop_add94.13'}), (96, {}), (98, {}), (100, {}), (102, {'func': '$4load_global.0', 'args': ['$20binary_subscr.4', '$binop_add94.13'], 'kw_names': None, 'res': '$102call.14'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {'value': '$102call.14', 'res': '$112get_iter.15'})), outgoing_phis={'$phi114.0': '$112get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$112get_iter.15',)})
2023-11-07 09:01:26,739 [DEBUG] block_infos State(pc_initial=114 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'iterator': '$phi114.0', 'pair': '$114for_iter.1', 'indval': '$114for_iter.2', 'pred': '$114for_iter.3'}),), outgoing_phis={'$phi116.1': '$114for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 116: ('$phi114.0', '$114for_iter.2')})
2023-11-07 09:01:26,739 [DEBUG] block_infos State(pc_initial=116 nstack_initial=2):
AdaptBlockInfo(insts=((116, {'value': '$phi116.1'}), (118, {'res': '$const118.2'}), (120, {'value': '$const118.2'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$phi116.0',)})
2023-11-07 09:01:26,739 [DEBUG] block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$const124.0'}), (126, {'retval': '$const124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,739 [DEBUG] label 0:
    sched = arg(0, name=sched)               ['sched']
    rows = arg(1, name=rows)                 ['rows']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const18.3 = const(int, 0)               ['$const18.3']
    $20binary_subscr.4 = getitem(value=sched, index=$const18.3, fn=<built-in function getitem>) ['$20binary_subscr.4', '$const18.3', 'sched']
    $const32.6 = const(int, 1)               ['$const32.6']
    $34binary_subscr.7 = getitem(value=sched, index=$const32.6, fn=<built-in function getitem>) ['$34binary_subscr.7', '$const32.6', 'sched']
    $44load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$44load_global.8']
    $56load_method.10 = getattr(value=$44load_global.8, attr=uint8) ['$44load_global.8', '$56load_method.10']
    $const78.11 = const(int, 1)              ['$const78.11']
    $84call.12 = call $56load_method.10($const78.11, func=$56load_method.10, args=[Var($const78.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_method.10', '$84call.12', '$const78.11']
    $binop_add94.13 = $34binary_subscr.7 + $84call.12 ['$34binary_subscr.7', '$84call.12', '$binop_add94.13']
    $102call.14 = call $4load_global.0($20binary_subscr.4, $binop_add94.13, func=$4load_global.0, args=[Var($20binary_subscr.4, <string>:2), Var($binop_add94.13, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call.14', '$20binary_subscr.4', '$4load_global.0', '$binop_add94.13']
    $112get_iter.15 = getiter(value=$102call.14) ['$102call.14', '$112get_iter.15']
    $phi114.0 = $112get_iter.15              ['$112get_iter.15', '$phi114.0']
    jump 114                                 []
label 114:
    $114for_iter.1 = iternext(value=$phi114.0) ['$114for_iter.1', '$phi114.0']
    $114for_iter.2 = pair_first(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.2']
    $114for_iter.3 = pair_second(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.3']
    $phi116.1 = $114for_iter.2               ['$114for_iter.2', '$phi116.1']
    branch $114for_iter.3, 116, 124          ['$114for_iter.3']
label 116:
    parfor__index_60 = $phi116.1             ['$phi116.1', 'parfor__index_60']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 114                                 []
label 124:
    $const124.0 = const(NoneType, None)      ['$const124.0']
    $126return_value.1 = cast(value=$const124.0) ['$126return_value.1', '$const124.0']
    return $126return_value.1                ['$126return_value.1']

2023-11-07 09:01:26,777 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_GLOBAL(arg=1, lineno=2)
          16	LOAD_FAST(arg=0, lineno=2)
          18	LOAD_CONST(arg=1, lineno=2)
          20	BINARY_SUBSCR(arg=None, lineno=2)
          30	LOAD_FAST(arg=0, lineno=2)
          32	LOAD_CONST(arg=2, lineno=2)
          34	BINARY_SUBSCR(arg=None, lineno=2)
          44	LOAD_GLOBAL(arg=2, lineno=2)
          56	LOAD_METHOD(arg=2, lineno=2)
          78	LOAD_CONST(arg=2, lineno=2)
          80	PRECALL(arg=1, lineno=2)
          84	CALL(arg=1, lineno=2)
          94	BINARY_OP(arg=0, lineno=2)
          98	PRECALL(arg=2, lineno=2)
         102	CALL(arg=2, lineno=2)
         112	GET_ITER(arg=None, lineno=2)
>        114	FOR_ITER(arg=4, lineno=2)
         116	STORE_FAST(arg=2, lineno=2)
         118	LOAD_CONST(arg=1, lineno=3)
         120	STORE_FAST(arg=3, lineno=3)
         122	JUMP_BACKWARD(arg=5, lineno=3)
>        124	LOAD_CONST(arg=0, lineno=4)
         126	RETURN_VALUE(arg=None, lineno=4)
2023-11-07 09:01:26,777 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,777 [DEBUG] stack: []
2023-11-07 09:01:26,777 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,777 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-11-07 09:01:26,777 [DEBUG] stack []
2023-11-07 09:01:26,777 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-11-07 09:01:26,777 [DEBUG] stack []
2023-11-07 09:01:26,777 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=2)
2023-11-07 09:01:26,777 [DEBUG] stack []
2023-11-07 09:01:26,777 [DEBUG] dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2)
2023-11-07 09:01:26,777 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,777 [DEBUG] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=2)
2023-11-07 09:01:26,777 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2']
2023-11-07 09:01:26,777 [DEBUG] dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-11-07 09:01:26,777 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2', '$const18.3']
2023-11-07 09:01:26,777 [DEBUG] dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=2)
2023-11-07 09:01:26,777 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4']
2023-11-07 09:01:26,777 [DEBUG] dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=2)
2023-11-07 09:01:26,777 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5']
2023-11-07 09:01:26,777 [DEBUG] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-11-07 09:01:26,777 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5', '$const32.6']
2023-11-07 09:01:26,777 [DEBUG] dispatch pc=44, inst=LOAD_GLOBAL(arg=2, lineno=2)
2023-11-07 09:01:26,777 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=56, inst=LOAD_METHOD(arg=2, lineno=2)
2023-11-07 09:01:26,778 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$44load_global.8']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=2)
2023-11-07 09:01:26,778 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=80, inst=PRECALL(arg=1, lineno=2)
2023-11-07 09:01:26,778 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=84, inst=CALL(arg=1, lineno=2)
2023-11-07 09:01:26,778 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=94, inst=BINARY_OP(arg=0, lineno=2)
2023-11-07 09:01:26,778 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$84call.12']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=98, inst=PRECALL(arg=2, lineno=2)
2023-11-07 09:01:26,778 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=102, inst=CALL(arg=2, lineno=2)
2023-11-07 09:01:26,778 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=112, inst=GET_ITER(arg=None, lineno=2)
2023-11-07 09:01:26,778 [DEBUG] stack ['$102call.14']
2023-11-07 09:01:26,778 [DEBUG] end state. edges=[Edge(pc=114, stack=('$112get_iter.15',), blockstack=(), npush=0)]
2023-11-07 09:01:26,778 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-11-07 09:01:26,778 [DEBUG] stack: ['$phi114.0']
2023-11-07 09:01:26,778 [DEBUG] state.pc_initial: State(pc_initial=114 nstack_initial=1)
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=114, inst=FOR_ITER(arg=4, lineno=2)
2023-11-07 09:01:26,778 [DEBUG] stack ['$phi114.0']
2023-11-07 09:01:26,778 [DEBUG] end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=('$phi114.0', '$114for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,778 [DEBUG] pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=116 nstack_initial=2)])
2023-11-07 09:01:26,778 [DEBUG] stack: []
2023-11-07 09:01:26,778 [DEBUG] state.pc_initial: State(pc_initial=124 nstack_initial=0)
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=124, inst=LOAD_CONST(arg=0, lineno=4)
2023-11-07 09:01:26,778 [DEBUG] stack []
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=4)
2023-11-07 09:01:26,778 [DEBUG] stack ['$const124.0']
2023-11-07 09:01:26,778 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,778 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=2)])
2023-11-07 09:01:26,778 [DEBUG] stack: ['$phi116.0', '$phi116.1']
2023-11-07 09:01:26,778 [DEBUG] state.pc_initial: State(pc_initial=116 nstack_initial=2)
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=116, inst=STORE_FAST(arg=2, lineno=2)
2023-11-07 09:01:26,778 [DEBUG] stack ['$phi116.0', '$phi116.1']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=118, inst=LOAD_CONST(arg=1, lineno=3)
2023-11-07 09:01:26,778 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=120, inst=STORE_FAST(arg=3, lineno=3)
2023-11-07 09:01:26,778 [DEBUG] stack ['$phi116.0', '$const118.2']
2023-11-07 09:01:26,778 [DEBUG] dispatch pc=122, inst=JUMP_BACKWARD(arg=5, lineno=3)
2023-11-07 09:01:26,778 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:26,778 [DEBUG] end state. edges=[Edge(pc=114, stack=('$phi116.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,778 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-11-07 09:01:26,778 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,778 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=1): {'$phi114.0'},
             State(pc_initial=116 nstack_initial=2): {'$phi116.1'},
             State(pc_initial=124 nstack_initial=0): set()})
2023-11-07 09:01:26,778 [DEBUG] defmap: {'$phi114.0': State(pc_initial=0 nstack_initial=0),
 '$phi116.1': State(pc_initial=114 nstack_initial=1)}
2023-11-07 09:01:26,778 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi116.0',
                            State(pc_initial=116 nstack_initial=2))},
             '$phi116.0': {('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,778 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,778 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,778 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,778 [DEBUG] keep phismap: {'$phi114.0': {('$112get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi116.1': {('$114for_iter.2', State(pc_initial=114 nstack_initial=1))}}
2023-11-07 09:01:26,778 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi114.0': '$112get_iter.15'},
             State(pc_initial=114 nstack_initial=1): {'$phi116.1': '$114for_iter.2'}})
2023-11-07 09:01:26,778 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,778 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$sched16.2'}), (18, {'res': '$const18.3'}), (20, {'index': '$const18.3', 'target': '$sched16.2', 'res': '$20binary_subscr.4'}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'res': '$sched30.5'}), (32, {'res': '$const32.6'}), (34, {'index': '$const32.6', 'target': '$sched30.5', 'res': '$34binary_subscr.7'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {'idx': 1, 'res': '$44load_global.8'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'item': '$44load_global.8', 'res': '$56load_method.10'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'res': '$const78.11'}), (80, {}), (82, {}), (84, {'func': '$56load_method.10', 'args': ['$const78.11'], 'kw_names': None, 'res': '$84call.12'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'op': '+', 'lhs': '$34binary_subscr.7', 'rhs': '$84call.12', 'res': '$binop_add94.13'}), (96, {}), (98, {}), (100, {}), (102, {'func': '$4load_global.0', 'args': ['$20binary_subscr.4', '$binop_add94.13'], 'kw_names': None, 'res': '$102call.14'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {'value': '$102call.14', 'res': '$112get_iter.15'})), outgoing_phis={'$phi114.0': '$112get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$112get_iter.15',)})
2023-11-07 09:01:26,778 [DEBUG] block_infos State(pc_initial=114 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'iterator': '$phi114.0', 'pair': '$114for_iter.1', 'indval': '$114for_iter.2', 'pred': '$114for_iter.3'}),), outgoing_phis={'$phi116.1': '$114for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 116: ('$phi114.0', '$114for_iter.2')})
2023-11-07 09:01:26,778 [DEBUG] block_infos State(pc_initial=116 nstack_initial=2):
AdaptBlockInfo(insts=((116, {'value': '$phi116.1'}), (118, {'res': '$const118.2'}), (120, {'value': '$const118.2'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$phi116.0',)})
2023-11-07 09:01:26,778 [DEBUG] block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$const124.0'}), (126, {'retval': '$const124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,779 [DEBUG] label 0:
    sched = arg(0, name=sched)               ['sched']
    cols = arg(1, name=cols)                 ['cols']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const18.3 = const(int, 0)               ['$const18.3']
    $20binary_subscr.4 = getitem(value=sched, index=$const18.3, fn=<built-in function getitem>) ['$20binary_subscr.4', '$const18.3', 'sched']
    $const32.6 = const(int, 1)               ['$const32.6']
    $34binary_subscr.7 = getitem(value=sched, index=$const32.6, fn=<built-in function getitem>) ['$34binary_subscr.7', '$const32.6', 'sched']
    $44load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$44load_global.8']
    $56load_method.10 = getattr(value=$44load_global.8, attr=uint8) ['$44load_global.8', '$56load_method.10']
    $const78.11 = const(int, 1)              ['$const78.11']
    $84call.12 = call $56load_method.10($const78.11, func=$56load_method.10, args=[Var($const78.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_method.10', '$84call.12', '$const78.11']
    $binop_add94.13 = $34binary_subscr.7 + $84call.12 ['$34binary_subscr.7', '$84call.12', '$binop_add94.13']
    $102call.14 = call $4load_global.0($20binary_subscr.4, $binop_add94.13, func=$4load_global.0, args=[Var($20binary_subscr.4, <string>:2), Var($binop_add94.13, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call.14', '$20binary_subscr.4', '$4load_global.0', '$binop_add94.13']
    $112get_iter.15 = getiter(value=$102call.14) ['$102call.14', '$112get_iter.15']
    $phi114.0 = $112get_iter.15              ['$112get_iter.15', '$phi114.0']
    jump 114                                 []
label 114:
    $114for_iter.1 = iternext(value=$phi114.0) ['$114for_iter.1', '$phi114.0']
    $114for_iter.2 = pair_first(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.2']
    $114for_iter.3 = pair_second(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.3']
    $phi116.1 = $114for_iter.2               ['$114for_iter.2', '$phi116.1']
    branch $114for_iter.3, 116, 124          ['$114for_iter.3']
label 116:
    parfor__index_65 = $phi116.1             ['$phi116.1', 'parfor__index_65']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 114                                 []
label 124:
    $const124.0 = const(NoneType, None)      ['$const124.0']
    $126return_value.1 = cast(value=$const124.0) ['$126return_value.1', '$const124.0']
    return $126return_value.1                ['$126return_value.1']

2023-11-07 09:01:26,814 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_GLOBAL(arg=1, lineno=2)
          16	LOAD_FAST(arg=0, lineno=2)
          18	LOAD_CONST(arg=1, lineno=2)
          20	BINARY_SUBSCR(arg=None, lineno=2)
          30	LOAD_FAST(arg=0, lineno=2)
          32	LOAD_CONST(arg=2, lineno=2)
          34	BINARY_SUBSCR(arg=None, lineno=2)
          44	LOAD_GLOBAL(arg=2, lineno=2)
          56	LOAD_METHOD(arg=2, lineno=2)
          78	LOAD_CONST(arg=2, lineno=2)
          80	PRECALL(arg=1, lineno=2)
          84	CALL(arg=1, lineno=2)
          94	BINARY_OP(arg=0, lineno=2)
          98	PRECALL(arg=2, lineno=2)
         102	CALL(arg=2, lineno=2)
         112	GET_ITER(arg=None, lineno=2)
>        114	FOR_ITER(arg=4, lineno=2)
         116	STORE_FAST(arg=2, lineno=2)
         118	LOAD_CONST(arg=1, lineno=3)
         120	STORE_FAST(arg=3, lineno=3)
         122	JUMP_BACKWARD(arg=5, lineno=3)
>        124	LOAD_CONST(arg=0, lineno=4)
         126	RETURN_VALUE(arg=None, lineno=4)
2023-11-07 09:01:26,814 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,814 [DEBUG] stack: []
2023-11-07 09:01:26,814 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,814 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-11-07 09:01:26,814 [DEBUG] stack []
2023-11-07 09:01:26,814 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-11-07 09:01:26,814 [DEBUG] stack []
2023-11-07 09:01:26,814 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=2)
2023-11-07 09:01:26,814 [DEBUG] stack []
2023-11-07 09:01:26,814 [DEBUG] dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2)
2023-11-07 09:01:26,814 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,814 [DEBUG] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=2)
2023-11-07 09:01:26,814 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2']
2023-11-07 09:01:26,814 [DEBUG] dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-11-07 09:01:26,814 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2', '$const18.3']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5', '$const32.6']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=44, inst=LOAD_GLOBAL(arg=2, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=56, inst=LOAD_METHOD(arg=2, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$44load_global.8']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=80, inst=PRECALL(arg=1, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=84, inst=CALL(arg=1, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=94, inst=BINARY_OP(arg=0, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$84call.12']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=98, inst=PRECALL(arg=2, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=102, inst=CALL(arg=2, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=112, inst=GET_ITER(arg=None, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$102call.14']
2023-11-07 09:01:26,815 [DEBUG] end state. edges=[Edge(pc=114, stack=('$112get_iter.15',), blockstack=(), npush=0)]
2023-11-07 09:01:26,815 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-11-07 09:01:26,815 [DEBUG] stack: ['$phi114.0']
2023-11-07 09:01:26,815 [DEBUG] state.pc_initial: State(pc_initial=114 nstack_initial=1)
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=114, inst=FOR_ITER(arg=4, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$phi114.0']
2023-11-07 09:01:26,815 [DEBUG] end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=('$phi114.0', '$114for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,815 [DEBUG] pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=116 nstack_initial=2)])
2023-11-07 09:01:26,815 [DEBUG] stack: []
2023-11-07 09:01:26,815 [DEBUG] state.pc_initial: State(pc_initial=124 nstack_initial=0)
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=124, inst=LOAD_CONST(arg=0, lineno=4)
2023-11-07 09:01:26,815 [DEBUG] stack []
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=4)
2023-11-07 09:01:26,815 [DEBUG] stack ['$const124.0']
2023-11-07 09:01:26,815 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,815 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=2)])
2023-11-07 09:01:26,815 [DEBUG] stack: ['$phi116.0', '$phi116.1']
2023-11-07 09:01:26,815 [DEBUG] state.pc_initial: State(pc_initial=116 nstack_initial=2)
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=116, inst=STORE_FAST(arg=2, lineno=2)
2023-11-07 09:01:26,815 [DEBUG] stack ['$phi116.0', '$phi116.1']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=118, inst=LOAD_CONST(arg=1, lineno=3)
2023-11-07 09:01:26,815 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=120, inst=STORE_FAST(arg=3, lineno=3)
2023-11-07 09:01:26,815 [DEBUG] stack ['$phi116.0', '$const118.2']
2023-11-07 09:01:26,815 [DEBUG] dispatch pc=122, inst=JUMP_BACKWARD(arg=5, lineno=3)
2023-11-07 09:01:26,815 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:26,815 [DEBUG] end state. edges=[Edge(pc=114, stack=('$phi116.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,815 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-11-07 09:01:26,815 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,815 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=1): {'$phi114.0'},
             State(pc_initial=116 nstack_initial=2): {'$phi116.1'},
             State(pc_initial=124 nstack_initial=0): set()})
2023-11-07 09:01:26,815 [DEBUG] defmap: {'$phi114.0': State(pc_initial=0 nstack_initial=0),
 '$phi116.1': State(pc_initial=114 nstack_initial=1)}
2023-11-07 09:01:26,815 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi116.0',
                            State(pc_initial=116 nstack_initial=2))},
             '$phi116.0': {('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,815 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,815 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,815 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,815 [DEBUG] keep phismap: {'$phi114.0': {('$112get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi116.1': {('$114for_iter.2', State(pc_initial=114 nstack_initial=1))}}
2023-11-07 09:01:26,815 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi114.0': '$112get_iter.15'},
             State(pc_initial=114 nstack_initial=1): {'$phi116.1': '$114for_iter.2'}})
2023-11-07 09:01:26,816 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,816 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$sched16.2'}), (18, {'res': '$const18.3'}), (20, {'index': '$const18.3', 'target': '$sched16.2', 'res': '$20binary_subscr.4'}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'res': '$sched30.5'}), (32, {'res': '$const32.6'}), (34, {'index': '$const32.6', 'target': '$sched30.5', 'res': '$34binary_subscr.7'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {'idx': 1, 'res': '$44load_global.8'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'item': '$44load_global.8', 'res': '$56load_method.10'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'res': '$const78.11'}), (80, {}), (82, {}), (84, {'func': '$56load_method.10', 'args': ['$const78.11'], 'kw_names': None, 'res': '$84call.12'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'op': '+', 'lhs': '$34binary_subscr.7', 'rhs': '$84call.12', 'res': '$binop_add94.13'}), (96, {}), (98, {}), (100, {}), (102, {'func': '$4load_global.0', 'args': ['$20binary_subscr.4', '$binop_add94.13'], 'kw_names': None, 'res': '$102call.14'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {'value': '$102call.14', 'res': '$112get_iter.15'})), outgoing_phis={'$phi114.0': '$112get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$112get_iter.15',)})
2023-11-07 09:01:26,816 [DEBUG] block_infos State(pc_initial=114 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'iterator': '$phi114.0', 'pair': '$114for_iter.1', 'indval': '$114for_iter.2', 'pred': '$114for_iter.3'}),), outgoing_phis={'$phi116.1': '$114for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 116: ('$phi114.0', '$114for_iter.2')})
2023-11-07 09:01:26,816 [DEBUG] block_infos State(pc_initial=116 nstack_initial=2):
AdaptBlockInfo(insts=((116, {'value': '$phi116.1'}), (118, {'res': '$const118.2'}), (120, {'value': '$const118.2'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$phi116.0',)})
2023-11-07 09:01:26,816 [DEBUG] block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$const124.0'}), (126, {'retval': '$const124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,816 [DEBUG] label 0:
    sched = arg(0, name=sched)               ['sched']
    vals = arg(1, name=vals)                 ['vals']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const18.3 = const(int, 0)               ['$const18.3']
    $20binary_subscr.4 = getitem(value=sched, index=$const18.3, fn=<built-in function getitem>) ['$20binary_subscr.4', '$const18.3', 'sched']
    $const32.6 = const(int, 1)               ['$const32.6']
    $34binary_subscr.7 = getitem(value=sched, index=$const32.6, fn=<built-in function getitem>) ['$34binary_subscr.7', '$const32.6', 'sched']
    $44load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$44load_global.8']
    $56load_method.10 = getattr(value=$44load_global.8, attr=uint8) ['$44load_global.8', '$56load_method.10']
    $const78.11 = const(int, 1)              ['$const78.11']
    $84call.12 = call $56load_method.10($const78.11, func=$56load_method.10, args=[Var($const78.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_method.10', '$84call.12', '$const78.11']
    $binop_add94.13 = $34binary_subscr.7 + $84call.12 ['$34binary_subscr.7', '$84call.12', '$binop_add94.13']
    $102call.14 = call $4load_global.0($20binary_subscr.4, $binop_add94.13, func=$4load_global.0, args=[Var($20binary_subscr.4, <string>:2), Var($binop_add94.13, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call.14', '$20binary_subscr.4', '$4load_global.0', '$binop_add94.13']
    $112get_iter.15 = getiter(value=$102call.14) ['$102call.14', '$112get_iter.15']
    $phi114.0 = $112get_iter.15              ['$112get_iter.15', '$phi114.0']
    jump 114                                 []
label 114:
    $114for_iter.1 = iternext(value=$phi114.0) ['$114for_iter.1', '$phi114.0']
    $114for_iter.2 = pair_first(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.2']
    $114for_iter.3 = pair_second(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.3']
    $phi116.1 = $114for_iter.2               ['$114for_iter.2', '$phi116.1']
    branch $114for_iter.3, 116, 124          ['$114for_iter.3']
label 116:
    parfor__index_70 = $phi116.1             ['$phi116.1', 'parfor__index_70']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 114                                 []
label 124:
    $const124.0 = const(NoneType, None)      ['$const124.0']
    $126return_value.1 = cast(value=$const124.0) ['$126return_value.1', '$const124.0']
    return $126return_value.1                ['$126return_value.1']

2023-11-07 09:01:26,853 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_GLOBAL(arg=1, lineno=2)
          16	LOAD_FAST(arg=0, lineno=2)
          18	LOAD_CONST(arg=1, lineno=2)
          20	BINARY_SUBSCR(arg=None, lineno=2)
          30	LOAD_FAST(arg=0, lineno=2)
          32	LOAD_CONST(arg=2, lineno=2)
          34	BINARY_SUBSCR(arg=None, lineno=2)
          44	LOAD_GLOBAL(arg=2, lineno=2)
          56	LOAD_METHOD(arg=2, lineno=2)
          78	LOAD_CONST(arg=2, lineno=2)
          80	PRECALL(arg=1, lineno=2)
          84	CALL(arg=1, lineno=2)
          94	BINARY_OP(arg=0, lineno=2)
          98	PRECALL(arg=2, lineno=2)
         102	CALL(arg=2, lineno=2)
         112	GET_ITER(arg=None, lineno=2)
>        114	FOR_ITER(arg=4, lineno=2)
         116	STORE_FAST(arg=2, lineno=2)
         118	LOAD_CONST(arg=1, lineno=3)
         120	STORE_FAST(arg=3, lineno=3)
         122	JUMP_BACKWARD(arg=5, lineno=3)
>        124	LOAD_CONST(arg=0, lineno=4)
         126	RETURN_VALUE(arg=None, lineno=4)
2023-11-07 09:01:26,853 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-11-07 09:01:26,853 [DEBUG] stack: []
2023-11-07 09:01:26,853 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-11-07 09:01:26,853 [DEBUG] stack []
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-11-07 09:01:26,853 [DEBUG] stack []
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack []
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2', '$const18.3']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5', '$const32.6']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=44, inst=LOAD_GLOBAL(arg=2, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=56, inst=LOAD_METHOD(arg=2, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$44load_global.8']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=80, inst=PRECALL(arg=1, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=84, inst=CALL(arg=1, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=94, inst=BINARY_OP(arg=0, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$84call.12']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=98, inst=PRECALL(arg=2, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=102, inst=CALL(arg=2, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-11-07 09:01:26,853 [DEBUG] dispatch pc=112, inst=GET_ITER(arg=None, lineno=2)
2023-11-07 09:01:26,853 [DEBUG] stack ['$102call.14']
2023-11-07 09:01:26,853 [DEBUG] end state. edges=[Edge(pc=114, stack=('$112get_iter.15',), blockstack=(), npush=0)]
2023-11-07 09:01:26,853 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-11-07 09:01:26,853 [DEBUG] stack: ['$phi114.0']
2023-11-07 09:01:26,854 [DEBUG] state.pc_initial: State(pc_initial=114 nstack_initial=1)
2023-11-07 09:01:26,854 [DEBUG] dispatch pc=114, inst=FOR_ITER(arg=4, lineno=2)
2023-11-07 09:01:26,854 [DEBUG] stack ['$phi114.0']
2023-11-07 09:01:26,854 [DEBUG] end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=('$phi114.0', '$114for_iter.2'), blockstack=(), npush=0)]
2023-11-07 09:01:26,854 [DEBUG] pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=116 nstack_initial=2)])
2023-11-07 09:01:26,854 [DEBUG] stack: []
2023-11-07 09:01:26,854 [DEBUG] state.pc_initial: State(pc_initial=124 nstack_initial=0)
2023-11-07 09:01:26,854 [DEBUG] dispatch pc=124, inst=LOAD_CONST(arg=0, lineno=4)
2023-11-07 09:01:26,854 [DEBUG] stack []
2023-11-07 09:01:26,854 [DEBUG] dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=4)
2023-11-07 09:01:26,854 [DEBUG] stack ['$const124.0']
2023-11-07 09:01:26,854 [DEBUG] end state. edges=[]
2023-11-07 09:01:26,854 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=2)])
2023-11-07 09:01:26,854 [DEBUG] stack: ['$phi116.0', '$phi116.1']
2023-11-07 09:01:26,854 [DEBUG] state.pc_initial: State(pc_initial=116 nstack_initial=2)
2023-11-07 09:01:26,854 [DEBUG] dispatch pc=116, inst=STORE_FAST(arg=2, lineno=2)
2023-11-07 09:01:26,854 [DEBUG] stack ['$phi116.0', '$phi116.1']
2023-11-07 09:01:26,854 [DEBUG] dispatch pc=118, inst=LOAD_CONST(arg=1, lineno=3)
2023-11-07 09:01:26,854 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:26,854 [DEBUG] dispatch pc=120, inst=STORE_FAST(arg=3, lineno=3)
2023-11-07 09:01:26,854 [DEBUG] stack ['$phi116.0', '$const118.2']
2023-11-07 09:01:26,854 [DEBUG] dispatch pc=122, inst=JUMP_BACKWARD(arg=5, lineno=3)
2023-11-07 09:01:26,854 [DEBUG] stack ['$phi116.0']
2023-11-07 09:01:26,854 [DEBUG] end state. edges=[Edge(pc=114, stack=('$phi116.0',), blockstack=(), npush=0)]
2023-11-07 09:01:26,854 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-11-07 09:01:26,854 [DEBUG] -------------------------Prune PHIs-------------------------
2023-11-07 09:01:26,854 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=1): {'$phi114.0'},
             State(pc_initial=116 nstack_initial=2): {'$phi116.1'},
             State(pc_initial=124 nstack_initial=0): set()})
2023-11-07 09:01:26,854 [DEBUG] defmap: {'$phi114.0': State(pc_initial=0 nstack_initial=0),
 '$phi116.1': State(pc_initial=114 nstack_initial=1)}
2023-11-07 09:01:26,854 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi116.0',
                            State(pc_initial=116 nstack_initial=2))},
             '$phi116.0': {('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,854 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,854 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,854 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-11-07 09:01:26,854 [DEBUG] keep phismap: {'$phi114.0': {('$112get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi116.1': {('$114for_iter.2', State(pc_initial=114 nstack_initial=1))}}
2023-11-07 09:01:26,854 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi114.0': '$112get_iter.15'},
             State(pc_initial=114 nstack_initial=1): {'$phi116.1': '$114for_iter.2'}})
2023-11-07 09:01:26,854 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-11-07 09:01:26,854 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$sched16.2'}), (18, {'res': '$const18.3'}), (20, {'index': '$const18.3', 'target': '$sched16.2', 'res': '$20binary_subscr.4'}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'res': '$sched30.5'}), (32, {'res': '$const32.6'}), (34, {'index': '$const32.6', 'target': '$sched30.5', 'res': '$34binary_subscr.7'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {'idx': 1, 'res': '$44load_global.8'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'item': '$44load_global.8', 'res': '$56load_method.10'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'res': '$const78.11'}), (80, {}), (82, {}), (84, {'func': '$56load_method.10', 'args': ['$const78.11'], 'kw_names': None, 'res': '$84call.12'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'op': '+', 'lhs': '$34binary_subscr.7', 'rhs': '$84call.12', 'res': '$binop_add94.13'}), (96, {}), (98, {}), (100, {}), (102, {'func': '$4load_global.0', 'args': ['$20binary_subscr.4', '$binop_add94.13'], 'kw_names': None, 'res': '$102call.14'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {'value': '$102call.14', 'res': '$112get_iter.15'})), outgoing_phis={'$phi114.0': '$112get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$112get_iter.15',)})
2023-11-07 09:01:26,854 [DEBUG] block_infos State(pc_initial=114 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'iterator': '$phi114.0', 'pair': '$114for_iter.1', 'indval': '$114for_iter.2', 'pred': '$114for_iter.3'}),), outgoing_phis={'$phi116.1': '$114for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 116: ('$phi114.0', '$114for_iter.2')})
2023-11-07 09:01:26,854 [DEBUG] block_infos State(pc_initial=116 nstack_initial=2):
AdaptBlockInfo(insts=((116, {'value': '$phi116.1'}), (118, {'res': '$const118.2'}), (120, {'value': '$const118.2'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$phi116.0',)})
2023-11-07 09:01:26,854 [DEBUG] block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$const124.0'}), (126, {'retval': '$const124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-11-07 09:01:26,855 [DEBUG] label 0:
    sched = arg(0, name=sched)               ['sched']
    dists = arg(1, name=dists)               ['dists']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const18.3 = const(int, 0)               ['$const18.3']
    $20binary_subscr.4 = getitem(value=sched, index=$const18.3, fn=<built-in function getitem>) ['$20binary_subscr.4', '$const18.3', 'sched']
    $const32.6 = const(int, 1)               ['$const32.6']
    $34binary_subscr.7 = getitem(value=sched, index=$const32.6, fn=<built-in function getitem>) ['$34binary_subscr.7', '$const32.6', 'sched']
    $44load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$44load_global.8']
    $56load_method.10 = getattr(value=$44load_global.8, attr=uint8) ['$44load_global.8', '$56load_method.10']
    $const78.11 = const(int, 1)              ['$const78.11']
    $84call.12 = call $56load_method.10($const78.11, func=$56load_method.10, args=[Var($const78.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_method.10', '$84call.12', '$const78.11']
    $binop_add94.13 = $34binary_subscr.7 + $84call.12 ['$34binary_subscr.7', '$84call.12', '$binop_add94.13']
    $102call.14 = call $4load_global.0($20binary_subscr.4, $binop_add94.13, func=$4load_global.0, args=[Var($20binary_subscr.4, <string>:2), Var($binop_add94.13, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call.14', '$20binary_subscr.4', '$4load_global.0', '$binop_add94.13']
    $112get_iter.15 = getiter(value=$102call.14) ['$102call.14', '$112get_iter.15']
    $phi114.0 = $112get_iter.15              ['$112get_iter.15', '$phi114.0']
    jump 114                                 []
label 114:
    $114for_iter.1 = iternext(value=$phi114.0) ['$114for_iter.1', '$phi114.0']
    $114for_iter.2 = pair_first(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.2']
    $114for_iter.3 = pair_second(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.3']
    $phi116.1 = $114for_iter.2               ['$114for_iter.2', '$phi116.1']
    branch $114for_iter.3, 116, 124          ['$114for_iter.3']
label 116:
    parfor__index_75 = $phi116.1             ['$phi116.1', 'parfor__index_75']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 114                                 []
label 124:
    $const124.0 = const(NoneType, None)      ['$const124.0']
    $126return_value.1 = cast(value=$const124.0) ['$126return_value.1', '$const124.0']
    return $126return_value.1                ['$126return_value.1']

