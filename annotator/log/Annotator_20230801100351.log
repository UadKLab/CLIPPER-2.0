2023-08-01 10:03:51,985 [INFO] 
2023-08-01 10:03:51,985 [INFO] Annotator started at 2023-08-01 10:03:51.
2023-08-01 10:03:51,985 [DEBUG] Arguments: {'infile': '../tests/Mahima_DIA_TAILS_small.xlsx', 'infile_type': 'infer', 'preannotated': False, 'conditionfile': '../tests/Mahima_DIA_TAILS_cond.txt', 'software': 'infer', 'level': 'all', 'dropna': False, 'fillna': None, 'sleeptime': 0.2, 'noexo': False, 'nomerops': False, 'calcstructure': None, 'threadingcores': 'max', 'stat': True, 'stat_pairwise': True, 'significance': 'all', 'visualize': True, 'logo': 'all', 'logo_fc': [3, 1.3], 'volcanocutoff': [1.0, 0.5], 'pseudocounts': True, 'cleavagevis': None, 'enrichment': True, 'pathway': True, 'proteasefile': None, 'output_name': None, 'output_filetype': 'xlsx', 'separate': False, 'pymol_verbose': False}
2023-08-01 10:03:51,985 [INFO] Startup complete!

2023-08-01 10:03:51,985 [INFO] Reading file...
2023-08-01 10:03:51,985 [INFO] Input is excel
2023-08-01 10:03:52,054 [INFO] Read dataframe.
2023-08-01 10:03:52,054 [INFO] Read input with 62 peptides.
2023-08-01 10:03:52,055 [INFO] Input software is sm
2023-08-01 10:03:52,056 [DEBUG] Converted values in [1] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_WT1_UT_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,056 [DEBUG] Converted values in [2] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_WT1_TNP_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,057 [DEBUG] Converted values in [3] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_WT3_UT_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,057 [DEBUG] Converted values in [4] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_WT3_TNP_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,058 [DEBUG] Converted values in [5] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_KO2_UT_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,058 [DEBUG] Converted values in [6] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_KO2_TNP_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,058 [DEBUG] Converted values in [7] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_KO3_UT_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,059 [DEBUG] Converted values in [8] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_KO3_TNP_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,059 [DEBUG] Converted values in [9] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_WT3_TNP_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,059 [DEBUG] Converted values in [10] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_WT3_UT_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,060 [DEBUG] Converted values in [11] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_WT1_TNP_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,060 [DEBUG] Converted values in [12] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_WT1_UT_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,060 [DEBUG] Converted values in [13] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_KO2_TNP_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,061 [DEBUG] Converted values in [14] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_KO2_UT_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,061 [DEBUG] Converted values in [15] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_KO3_TNP_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,062 [DEBUG] Converted values in [16] 20230525_EV_EVO_KK_FAIMS_1CV_Endurance_15SPD_1655_Mahima_TAILS_KO3_UT_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,062 [DEBUG] Converted values in [17] 20230208_EV_EVO_EM_FAIMS_1CV_standard_15SPD_Mahima__DIA_TAILS_PO_30_WT2_TNP_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,062 [DEBUG] Converted values in [18] 20230208_EV_EVO_EM_FAIMS_1CV_standard_15SPD_Mahima__DIA_TAILS_NPO_30_WT2_TNP_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,063 [DEBUG] Converted values in [19] 20230208_EV_EVO_EM_FAIMS_1CV_standard_15SPD_Mahima__DIA_TAILS_PO_27_WT2_UT_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,063 [DEBUG] Converted values in [20] 20230208_EV_EVO_EM_FAIMS_1CV_standard_15SPD_Mahima__DIA_TAILS_NPO_27_WT2_UT_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,063 [DEBUG] Converted values in [21] 20230208_EV_EVO_EM_FAIMS_1CV_standard_15SPD_Mahima__DIA_TAILS_PO_5_KO1_TNP_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,064 [DEBUG] Converted values in [22] 20230208_EV_EVO_EM_FAIMS_1CV_standard_15SPD_Mahima__DIA_TAILS_NPO_5_KO1_TNP_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,064 [DEBUG] Converted values in [23] 20230208_EV_EVO_EM_FAIMS_1CV_standard_15SPD_Mahima__DIA_TAILS_PO_2_KO1_UT_PO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,064 [DEBUG] Converted values in [24] 20230208_EV_EVO_EM_FAIMS_1CV_standard_15SPD_Mahima__DIA_TAILS_NPO_2_KO1_UT_NPO.raw.EG.TotalQuantity (Settings) to numeric type
2023-08-01 10:03:52,064 [INFO] Finished converting quantification values to floats.
2023-08-01 10:03:52,065 [DEBUG] Patterns are: {'acc': 'PG.ProteinAccessions', 'seq': 'PEP.StrippedSequence', 'amino': 'B|J|O|U|X|Z', 'mod': 'EG.PrecursorId', 'quant': 'EG\\.TotalQuantity', 'label': 'Dimeth', 'nterm': 'DimethNter0', 'nterm_label': '\\[DimethNter0\\]', 'lysine_label': 'K\\[DimethLys0\\]'}
2023-08-01 10:03:52,065 [INFO] Successfully generated indexing patterns for sm input. See logfile for the found patterns.
2023-08-01 10:03:52,065 [INFO] Format check complete.

2023-08-01 10:03:52,066 [INFO] Initialization complete!

2023-08-01 10:03:52,066 [INFO] Filtering and sanitizing input...
2023-08-01 10:03:52,067 [WARNING] There were rows with no accession numbers in the loaded file, please check the log file for further information
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 52
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 53
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 54
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 55
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 56
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 57
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 58
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 59
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 60
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 61
2023-08-01 10:03:52,067 [DEBUG] Empty accession rows: 62
2023-08-01 10:03:52,067 [DEBUG] Starting annotation of peptides...
2023-08-01 10:03:52,067 [INFO] Reading MEROPS data..
2023-08-01 10:03:52,598 [INFO] Read MEROPS data
2023-08-01 10:03:52,599 [INFO] Initialized annotation dataframe.

2023-08-01 10:03:52,599 [INFO] Fetching information from Uniprot...
2023-08-01 10:03:58,561 [INFO] Gathering info from Uniprot took 00:00:05 hh:mm:ss
2023-08-01 10:03:58,562 [INFO] Finished annotation of peptides.

2023-08-01 10:03:58,562 [INFO] Starting annotation of Protein Atlas data...
2023-08-01 10:03:58,563 [INFO] Reading Protein Atlas data..
2023-08-01 10:03:58,839 [INFO] Read Protein Atlas data.
2023-08-01 10:03:58,843 [WARNING] Duplicates found in 'Uniprot' column of 'protein_atlas_sub'. Dropping duplicates.
2023-08-01 10:03:58,849 [INFO] Finished annotation of Protein Atlas data.

2023-08-01 10:03:58,849 [INFO] Starting proteoform check...
2023-08-01 10:03:58,849 [INFO] Finished proteoform check.
2023-08-01 10:03:58,849 [INFO] Starting exopeptidase activity check...
2023-08-01 10:03:58,853 [DEBUG] 1 RFDTAFFLCCLR FDTAFFLCCLR
2023-08-01 10:03:58,855 [INFO] Exopeptidase activity check took 00:00:00 hh:mm:ss
2023-08-01 10:03:58,855 [INFO] Exopeptidase activity was found, check logfile or output for more details on exact peptide sequences
2023-08-01 10:03:58,855 [INFO] Finished exopeptidase activity check.
2023-08-01 10:03:58,856 [INFO] Parsed condition file
2023-08-01 10:03:58,856 [INFO] Performing general condition statistics annotation...
2023-08-01 10:03:58,873 [INFO] Finished general condition statistics annotation.
2023-08-01 10:03:58,873 [INFO] Performing statistical testing...
2023-08-01 10:03:58,884 [INFO] Finished statistical testing.
2023-08-01 10:03:58,884 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: WT_untreated vs. WT_Treated using fdr_bh method
2023-08-01 10:03:58,884 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: WT_untreated vs. KO_untreated using fdr_bh method
2023-08-01 10:03:58,884 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: WT_untreated vs. KO_treated using fdr_bh method
2023-08-01 10:03:58,884 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: WT_Treated vs. WT_untreated using fdr_bh method
2023-08-01 10:03:58,884 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: WT_Treated vs. KO_untreated using fdr_bh method
2023-08-01 10:03:58,885 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: WT_Treated vs. KO_treated using fdr_bh method
2023-08-01 10:03:58,885 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: KO_untreated vs. WT_untreated using fdr_bh method
2023-08-01 10:03:58,885 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: KO_untreated vs. WT_Treated using fdr_bh method
2023-08-01 10:03:58,885 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: KO_untreated vs. KO_treated using fdr_bh method
2023-08-01 10:03:58,885 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: KO_treated vs. WT_untreated using fdr_bh method
2023-08-01 10:03:58,885 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: KO_treated vs. WT_Treated using fdr_bh method
2023-08-01 10:03:58,886 [DEBUG] Corrected p-values for Corrected Independent T-test p-value: KO_treated vs. KO_untreated using fdr_bh method
2023-08-01 10:03:58,886 [INFO] Finished multiple testing correction.

2023-08-01 10:03:58,886 [INFO] Checking fold distribution...
2023-08-01 10:03:58,912 [INFO] Finished fold distribution check.

2023-08-01 10:03:58,912 [INFO] Generating figures...
2023-08-01 10:03:58,918 [DEBUG] Loaded backend macosx version unknown.
2023-08-01 10:03:58,980 [DEBUG] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX1_.TTF', name='ESSTIXOne', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,981 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX13.TTF', name='ESSTIXThirteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 0.25
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX4_.TTF', name='ESSTIXFour', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX3_.TTF', name='ESSTIXThree', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/COBO____.ttf', name='Courant', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,982 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THB_____.ttf', name='Thames', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='condensed', size='scalable')) = 1.25
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/COB_____.ttf', name='Courant', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX8_.TTF', name='ESSTIXEight', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,983 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX7_.TTF', name='ESSTIXSeven', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 0.5349999999999999
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THR_____.ttf', name='Thames', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/CON_____.ttf', name='Courant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX9_.TTF', name='ESSTIXNine', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,984 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/MP______.ttf', name='MaplePi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEBO____.ttf', name='Helonia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX6_.TTF', name='ESSTIXSix', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEO_____.ttf', name='Helonia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='condensed', size='scalable')) = 1.535
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/SYP_____.ttf', name='SymbolPi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX17.TTF', name='ESSTIXSeventeen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX12.TTF', name='ESSTIXTwelve', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX10.TTF', name='ESSTIXTen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,985 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX11.TTF', name='ESSTIXEleven', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX2_.TTF', name='ESSTIXTwo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEN_____.ttf', name='Helonia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-ExtraLight.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 0.24
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/MaplePi.ttf', name='MaplePi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEB_____.ttf', name='Helonia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THBI____.ttf', name='Thames', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,986 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX16.TTF', name='ESSTIXSixteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX15.TTF', name='ESSTIXFifteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX14.TTF', name='ESSTIXFourteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/COO_____.ttf', name='Courant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX5_.TTF', name='ESSTIXFive', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:58,987 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THI_____.ttf', name='Thames', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,988 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,988 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,988 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,988 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,988 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,988 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:58,988 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-08-01 10:03:58,988 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,988 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:58,988 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:58,988 [DEBUG] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-08-01 10:03:59,188 [DEBUG] locator: <matplotlib.ticker.AutoLocator object at 0x28ec4ab90>
2023-08-01 10:03:59,271 [DEBUG] locator: <matplotlib.ticker.AutoLocator object at 0x17151d650>
2023-08-01 10:03:59,325 [DEBUG] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=8.0.
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,325 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX1_.TTF', name='ESSTIXOne', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX13.TTF', name='ESSTIXThirteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ThonburiUI.ttc', name='.ThonburiUI', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 0.25
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX4_.TTF', name='ESSTIXFour', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,326 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX3_.TTF', name='ESSTIXThree', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/COBO____.ttf', name='Courant', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THB_____.ttf', name='Thames', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='condensed', size='scalable')) = 1.25
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/COB_____.ttf', name='Courant', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX8_.TTF', name='ESSTIXEight', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,327 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX7_.TTF', name='ESSTIXSeven', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 0.5349999999999999
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THR_____.ttf', name='Thames', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/CON_____.ttf', name='Courant', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,328 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX9_.TTF', name='ESSTIXNine', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/MP______.ttf', name='MaplePi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEBO____.ttf', name='Helonia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX6_.TTF', name='ESSTIXSix', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEO_____.ttf', name='Helonia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifNyiakengPuachueHmong-Regular.ttf', name='Noto Serif Hmong Nyiakeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansCondensed-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='condensed', size='scalable')) = 1.535
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/SYP_____.ttf', name='SymbolPi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCanadianAboriginal-Regular.otf', name='Noto Sans Canadian Aboriginal', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX17.TTF', name='ESSTIXSeventeen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,329 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX12.TTF', name='ESSTIXTwelve', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX10.TTF', name='ESSTIXTen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoMath.otf', name='STIX Two Math', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX11.TTF', name='ESSTIXEleven', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText.ttf', name='STIX Two Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX2_.TTF', name='ESSTIXTwo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEN_____.ttf', name='Helonia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-ExtraLight.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 0.24
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,330 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/MaplePi.ttf', name='MaplePi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/HEB_____.ttf', name='Helonia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THBI____.ttf', name='Thames', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX16.TTF', name='ESSTIXSixteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXTwoText-Italic.ttf', name='STIX Two Text', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX15.TTF', name='ESSTIXFifteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX14.TTF', name='ESSTIXFourteen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,331 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabicRounded.ttf', name='.SF Arabic Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/COO_____.ttf', name='Courant', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/ESSTIX5_.TTF', name='ESSTIXFive', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/THI_____.ttf', name='Thames', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/Library/Fonts/DejaVuSerifCondensed-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
2023-08-01 10:03:59,332 [DEBUG] findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
2023-08-01 10:03:59,332 [DEBUG] findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=8.0 to DejaVu Sans ('/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
2023-08-01 10:03:59,343 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=22)
           2	RESUME(arg=0, lineno=22)
           4	LOAD_CONST(arg=1, lineno=29)
           6	STORE_FAST(arg=2, lineno=29)
           8	LOAD_GLOBAL(arg=1, lineno=30)
          20	LOAD_FAST(arg=0, lineno=30)
          22	LOAD_ATTR(arg=1, lineno=30)
          32	LOAD_CONST(arg=2, lineno=30)
          34	BINARY_SUBSCR(arg=None, lineno=30)
          44	PRECALL(arg=1, lineno=30)
          48	CALL(arg=1, lineno=30)
          58	GET_ITER(arg=None, lineno=30)
>         60	FOR_ITER(arg=25, lineno=30)
          62	STORE_FAST(arg=3, lineno=30)
          64	LOAD_FAST(arg=2, lineno=31)
          66	LOAD_FAST(arg=0, lineno=31)
          68	LOAD_FAST(arg=3, lineno=31)
          70	BINARY_SUBSCR(arg=None, lineno=31)
          80	LOAD_FAST(arg=1, lineno=31)
          82	LOAD_FAST(arg=3, lineno=31)
          84	BINARY_SUBSCR(arg=None, lineno=31)
          94	BINARY_OP(arg=10, lineno=31)
          98	LOAD_CONST(arg=3, lineno=31)
         100	BINARY_OP(arg=8, lineno=31)
         104	BINARY_OP(arg=13, lineno=31)
         108	STORE_FAST(arg=2, lineno=31)
         110	JUMP_BACKWARD(arg=26, lineno=31)
>        112	LOAD_GLOBAL(arg=5, lineno=32)
         124	LOAD_ATTR(arg=3, lineno=32)
         134	LOAD_FAST(arg=2, lineno=32)
         136	PRECALL(arg=1, lineno=32)
         140	CALL(arg=1, lineno=32)
         150	RETURN_VALUE(arg=None, lineno=32)
2023-08-01 10:03:59,343 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,343 [DEBUG] stack: []
2023-08-01 10:03:59,343 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=22)
2023-08-01 10:03:59,343 [DEBUG] stack []
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=22)
2023-08-01 10:03:59,343 [DEBUG] stack []
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=29)
2023-08-01 10:03:59,343 [DEBUG] stack []
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=6, inst=STORE_FAST(arg=2, lineno=29)
2023-08-01 10:03:59,343 [DEBUG] stack ['$const4.0']
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=8, inst=LOAD_GLOBAL(arg=1, lineno=30)
2023-08-01 10:03:59,343 [DEBUG] stack []
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=20, inst=LOAD_FAST(arg=0, lineno=30)
2023-08-01 10:03:59,343 [DEBUG] stack ['$null$8.2', '$8load_global.1']
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=22, inst=LOAD_ATTR(arg=1, lineno=30)
2023-08-01 10:03:59,343 [DEBUG] stack ['$null$8.2', '$8load_global.1', '$x20.3']
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=30)
2023-08-01 10:03:59,343 [DEBUG] stack ['$null$8.2', '$8load_global.1', '$22load_attr.4']
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=30)
2023-08-01 10:03:59,343 [DEBUG] stack ['$null$8.2', '$8load_global.1', '$22load_attr.4', '$const32.5']
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=44, inst=PRECALL(arg=1, lineno=30)
2023-08-01 10:03:59,343 [DEBUG] stack ['$null$8.2', '$8load_global.1', '$34binary_subscr.6']
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=48, inst=CALL(arg=1, lineno=30)
2023-08-01 10:03:59,343 [DEBUG] stack ['$null$8.2', '$8load_global.1', '$34binary_subscr.6']
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=58, inst=GET_ITER(arg=None, lineno=30)
2023-08-01 10:03:59,343 [DEBUG] stack ['$48call.7']
2023-08-01 10:03:59,343 [DEBUG] end state. edges=[Edge(pc=60, stack=('$58get_iter.8',), blockstack=(), npush=0)]
2023-08-01 10:03:59,343 [DEBUG] pending: deque([State(pc_initial=60 nstack_initial=1)])
2023-08-01 10:03:59,343 [DEBUG] stack: ['$phi60.0']
2023-08-01 10:03:59,343 [DEBUG] state.pc_initial: State(pc_initial=60 nstack_initial=1)
2023-08-01 10:03:59,343 [DEBUG] dispatch pc=60, inst=FOR_ITER(arg=25, lineno=30)
2023-08-01 10:03:59,343 [DEBUG] stack ['$phi60.0']
2023-08-01 10:03:59,344 [DEBUG] end state. edges=[Edge(pc=112, stack=(), blockstack=(), npush=0), Edge(pc=62, stack=('$phi60.0', '$60for_iter.2'), blockstack=(), npush=0)]
2023-08-01 10:03:59,344 [DEBUG] pending: deque([State(pc_initial=112 nstack_initial=0), State(pc_initial=62 nstack_initial=2)])
2023-08-01 10:03:59,344 [DEBUG] stack: []
2023-08-01 10:03:59,344 [DEBUG] state.pc_initial: State(pc_initial=112 nstack_initial=0)
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=112, inst=LOAD_GLOBAL(arg=5, lineno=32)
2023-08-01 10:03:59,344 [DEBUG] stack []
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=124, inst=LOAD_ATTR(arg=3, lineno=32)
2023-08-01 10:03:59,344 [DEBUG] stack ['$null$112.1', '$112load_global.0']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=134, inst=LOAD_FAST(arg=2, lineno=32)
2023-08-01 10:03:59,344 [DEBUG] stack ['$null$112.1', '$124load_attr.2']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=136, inst=PRECALL(arg=1, lineno=32)
2023-08-01 10:03:59,344 [DEBUG] stack ['$null$112.1', '$124load_attr.2', '$result134.3']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=140, inst=CALL(arg=1, lineno=32)
2023-08-01 10:03:59,344 [DEBUG] stack ['$null$112.1', '$124load_attr.2', '$result134.3']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=150, inst=RETURN_VALUE(arg=None, lineno=32)
2023-08-01 10:03:59,344 [DEBUG] stack ['$140call.4']
2023-08-01 10:03:59,344 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,344 [DEBUG] pending: deque([State(pc_initial=62 nstack_initial=2)])
2023-08-01 10:03:59,344 [DEBUG] stack: ['$phi62.0', '$phi62.1']
2023-08-01 10:03:59,344 [DEBUG] state.pc_initial: State(pc_initial=62 nstack_initial=2)
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=62, inst=STORE_FAST(arg=3, lineno=30)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$phi62.1']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=64, inst=LOAD_FAST(arg=2, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=66, inst=LOAD_FAST(arg=0, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$result64.2']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=68, inst=LOAD_FAST(arg=3, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$result64.2', '$x66.3']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=70, inst=BINARY_SUBSCR(arg=None, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$result64.2', '$x66.3', '$i68.4']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=80, inst=LOAD_FAST(arg=1, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$result64.2', '$70binary_subscr.5']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=82, inst=LOAD_FAST(arg=3, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$result64.2', '$70binary_subscr.5', '$y80.6']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=84, inst=BINARY_SUBSCR(arg=None, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$result64.2', '$70binary_subscr.5', '$y80.6', '$i82.7']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=94, inst=BINARY_OP(arg=10, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$result64.2', '$70binary_subscr.5', '$84binary_subscr.8']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=98, inst=LOAD_CONST(arg=3, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$result64.2', '$binop_sub94.9']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=100, inst=BINARY_OP(arg=8, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$result64.2', '$binop_sub94.9', '$const98.10']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=104, inst=BINARY_OP(arg=13, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$result64.2', '$binop_pow100.11']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=108, inst=STORE_FAST(arg=2, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0', '$binop_iadd104.12']
2023-08-01 10:03:59,344 [DEBUG] dispatch pc=110, inst=JUMP_BACKWARD(arg=26, lineno=31)
2023-08-01 10:03:59,344 [DEBUG] stack ['$phi62.0']
2023-08-01 10:03:59,344 [DEBUG] end state. edges=[Edge(pc=60, stack=('$phi62.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,344 [DEBUG] pending: deque([State(pc_initial=60 nstack_initial=1)])
2023-08-01 10:03:59,344 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,344 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=60 nstack_initial=1): {'$phi60.0'},
             State(pc_initial=62 nstack_initial=2): {'$phi62.1'},
             State(pc_initial=112 nstack_initial=0): set()})
2023-08-01 10:03:59,344 [DEBUG] defmap: {'$phi60.0': State(pc_initial=0 nstack_initial=0),
 '$phi62.1': State(pc_initial=60 nstack_initial=1)}
2023-08-01 10:03:59,344 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi62.0', State(pc_initial=62 nstack_initial=2))},
             '$phi62.0': {('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
2023-08-01 10:03:59,344 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$phi60.0', State(pc_initial=60 nstack_initial=1))},
             '$phi62.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
2023-08-01 10:03:59,345 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
2023-08-01 10:03:59,345 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi60.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.0': {('$58get_iter.8',
                           State(pc_initial=0 nstack_initial=0))},
             '$phi62.1': {('$60for_iter.2',
                           State(pc_initial=60 nstack_initial=1))}})
2023-08-01 10:03:59,345 [DEBUG] keep phismap: {'$phi60.0': {('$58get_iter.8', State(pc_initial=0 nstack_initial=0))},
 '$phi62.1': {('$60for_iter.2', State(pc_initial=60 nstack_initial=1))}}
2023-08-01 10:03:59,345 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi60.0': '$58get_iter.8'},
             State(pc_initial=60 nstack_initial=1): {'$phi62.1': '$60for_iter.2'}})
2023-08-01 10:03:59,345 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,345 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$const4.0'}), (6, {'value': '$const4.0'}), (8, {'idx': 0, 'res': '$8load_global.1'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {}), (20, {'res': '$x20.3'}), (22, {'item': '$x20.3', 'res': '$22load_attr.4'}), (24, {}), (26, {}), (28, {}), (30, {}), (32, {'res': '$const32.5'}), (34, {'index': '$const32.5', 'target': '$22load_attr.4', 'res': '$34binary_subscr.6'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'func': '$8load_global.1', 'args': ['$34binary_subscr.6'], 'kw_names': None, 'res': '$48call.7'}), (50, {}), (52, {}), (54, {}), (56, {}), (58, {'value': '$48call.7', 'res': '$58get_iter.8'})), outgoing_phis={'$phi60.0': '$58get_iter.8'}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$58get_iter.8',)})
2023-08-01 10:03:59,345 [DEBUG] block_infos State(pc_initial=60 nstack_initial=1):
AdaptBlockInfo(insts=((60, {'iterator': '$phi60.0', 'pair': '$60for_iter.1', 'indval': '$60for_iter.2', 'pred': '$60for_iter.3'}),), outgoing_phis={'$phi62.1': '$60for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={112: (), 62: ('$phi60.0', '$60for_iter.2')})
2023-08-01 10:03:59,345 [DEBUG] block_infos State(pc_initial=62 nstack_initial=2):
AdaptBlockInfo(insts=((62, {'value': '$phi62.1'}), (64, {'res': '$result64.2'}), (66, {'res': '$x66.3'}), (68, {'res': '$i68.4'}), (70, {'index': '$i68.4', 'target': '$x66.3', 'res': '$70binary_subscr.5'}), (72, {}), (74, {}), (76, {}), (78, {}), (80, {'res': '$y80.6'}), (82, {'res': '$i82.7'}), (84, {'index': '$i82.7', 'target': '$y80.6', 'res': '$84binary_subscr.8'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'op': '-', 'lhs': '$70binary_subscr.5', 'rhs': '$84binary_subscr.8', 'res': '$binop_sub94.9'}), (96, {}), (98, {'res': '$const98.10'}), (100, {'op': '**', 'lhs': '$binop_sub94.9', 'rhs': '$const98.10', 'res': '$binop_pow100.11'}), (102, {}), (104, {'op': '+=', 'lhs': '$result64.2', 'rhs': '$binop_pow100.11', 'res': '$binop_iadd104.12'}), (106, {}), (108, {'value': '$binop_iadd104.12'}), (110, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: ('$phi62.0',)})
2023-08-01 10:03:59,345 [DEBUG] block_infos State(pc_initial=112 nstack_initial=0):
AdaptBlockInfo(insts=((112, {'idx': 2, 'res': '$112load_global.0'}), (114, {}), (116, {}), (118, {}), (120, {}), (122, {}), (124, {'item': '$112load_global.0', 'res': '$124load_attr.2'}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'res': '$result134.3'}), (136, {}), (138, {}), (140, {'func': '$124load_attr.2', 'args': ['$result134.3'], 'kw_names': None, 'res': '$140call.4'}), (142, {}), (144, {}), (146, {}), (148, {}), (150, {'retval': '$140call.4', 'castval': '$150return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,345 [DEBUG] label 0:
    x = arg(0, name=x)                       ['x']
    y = arg(1, name=y)                       ['y']
    result = const(float, 0.0)               ['result']
    $8load_global.1 = global(range: <class 'range'>) ['$8load_global.1']
    $22load_attr.4 = getattr(value=x, attr=shape) ['$22load_attr.4', 'x']
    $const32.5 = const(int, 0)               ['$const32.5']
    $34binary_subscr.6 = getitem(value=$22load_attr.4, index=$const32.5, fn=<built-in function getitem>) ['$22load_attr.4', '$34binary_subscr.6', '$const32.5']
    $48call.7 = call $8load_global.1($34binary_subscr.6, func=$8load_global.1, args=[Var($34binary_subscr.6, distances.py:30)], kws=(), vararg=None, varkwarg=None, target=None) ['$34binary_subscr.6', '$48call.7', '$8load_global.1']
    $58get_iter.8 = getiter(value=$48call.7) ['$48call.7', '$58get_iter.8']
    $phi60.0 = $58get_iter.8                 ['$58get_iter.8', '$phi60.0']
    jump 60                                  []
label 60:
    $60for_iter.1 = iternext(value=$phi60.0) ['$60for_iter.1', '$phi60.0']
    $60for_iter.2 = pair_first(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.2']
    $60for_iter.3 = pair_second(value=$60for_iter.1) ['$60for_iter.1', '$60for_iter.3']
    $phi62.1 = $60for_iter.2                 ['$60for_iter.2', '$phi62.1']
    branch $60for_iter.3, 62, 112            ['$60for_iter.3']
label 62:
    i = $phi62.1                             ['$phi62.1', 'i']
    $70binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>) ['$70binary_subscr.5', 'i', 'x']
    $84binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>) ['$84binary_subscr.8', 'i', 'y']
    $binop_sub94.9 = $70binary_subscr.5 - $84binary_subscr.8 ['$70binary_subscr.5', '$84binary_subscr.8', '$binop_sub94.9']
    $const98.10 = const(int, 2)              ['$const98.10']
    $binop_pow100.11 = $binop_sub94.9 ** $const98.10 ['$binop_pow100.11', '$binop_sub94.9', '$const98.10']
    $binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd104.12', '$binop_pow100.11', 'result']
    result = $binop_iadd104.12               ['$binop_iadd104.12', 'result']
    jump 60                                  []
label 112:
    $112load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$112load_global.0']
    $124load_attr.2 = getattr(value=$112load_global.0, attr=sqrt) ['$112load_global.0', '$124load_attr.2']
    $140call.4 = call $124load_attr.2(result, func=$124load_attr.2, args=[Var(result, distances.py:29)], kws=(), vararg=None, varkwarg=None, target=None) ['$124load_attr.2', '$140call.4', 'result']
    $150return_value.5 = cast(value=$140call.4) ['$140call.4', '$150return_value.5']
    return $150return_value.5                ['$150return_value.5']

2023-08-01 10:03:59,349 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,349 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x288011890>
2023-08-01 10:03:59,349 [DEBUG] on stmt: x = arg(0, name=x)
2023-08-01 10:03:59,349 [DEBUG] on stmt: y = arg(1, name=y)
2023-08-01 10:03:59,349 [DEBUG] on stmt: result = const(float, 0.0)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $8load_global.1 = global(range: <class 'range'>)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $22load_attr.4 = getattr(value=x, attr=shape)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $const32.5 = const(int, 0)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $34binary_subscr.6 = static_getitem(value=$22load_attr.4, index=0, index_var=$const32.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $48call.7 = call $8load_global.1($34binary_subscr.6, func=$8load_global.1, args=[Var($34binary_subscr.6, distances.py:30)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $58get_iter.8 = getiter(value=$48call.7)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $phi60.0 = $58get_iter.8
2023-08-01 10:03:59,349 [DEBUG] on stmt: jump 60
2023-08-01 10:03:59,349 [DEBUG] ==== SSA block analysis pass on 60
2023-08-01 10:03:59,349 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x288011890>
2023-08-01 10:03:59,349 [DEBUG] on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $phi62.1 = $60for_iter.2
2023-08-01 10:03:59,349 [DEBUG] on stmt: branch $60for_iter.3, 62, 112
2023-08-01 10:03:59,349 [DEBUG] ==== SSA block analysis pass on 62
2023-08-01 10:03:59,349 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x288011890>
2023-08-01 10:03:59,349 [DEBUG] on stmt: i = $phi62.1
2023-08-01 10:03:59,349 [DEBUG] on stmt: $70binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $84binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $binop_sub94.9 = $70binary_subscr.5 - $84binary_subscr.8
2023-08-01 10:03:59,349 [DEBUG] on stmt: $const98.10 = const(int, 2)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $binop_pow100.11 = $binop_sub94.9 ** $const98.10
2023-08-01 10:03:59,349 [DEBUG] on stmt: $binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,349 [DEBUG] on stmt: result = $binop_iadd104.12
2023-08-01 10:03:59,349 [DEBUG] on stmt: jump 60
2023-08-01 10:03:59,349 [DEBUG] ==== SSA block analysis pass on 112
2023-08-01 10:03:59,349 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x288011890>
2023-08-01 10:03:59,349 [DEBUG] on stmt: $112load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $124load_attr.2 = getattr(value=$112load_global.0, attr=sqrt)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $140call.4 = call $124load_attr.2(result, func=$124load_attr.2, args=[Var(result, distances.py:29)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,349 [DEBUG] on stmt: $150return_value.5 = cast(value=$140call.4)
2023-08-01 10:03:59,349 [DEBUG] on stmt: return $150return_value.5
2023-08-01 10:03:59,350 [DEBUG] defs defaultdict(<class 'list'>,
            {'$112load_global.0': [<numba.core.ir.Assign object at 0x17198c190>],
             '$124load_attr.2': [<numba.core.ir.Assign object at 0x17198e090>],
             '$140call.4': [<numba.core.ir.Assign object at 0x171995310>],
             '$150return_value.5': [<numba.core.ir.Assign object at 0x171994150>],
             '$22load_attr.4': [<numba.core.ir.Assign object at 0x1717ffb50>],
             '$34binary_subscr.6': [<numba.core.ir.Assign object at 0x171644810>],
             '$48call.7': [<numba.core.ir.Assign object at 0x1717ff910>],
             '$58get_iter.8': [<numba.core.ir.Assign object at 0x17198f810>],
             '$60for_iter.1': [<numba.core.ir.Assign object at 0x17198c690>],
             '$60for_iter.2': [<numba.core.ir.Assign object at 0x17198d410>],
             '$60for_iter.3': [<numba.core.ir.Assign object at 0x17198c650>],
             '$70binary_subscr.5': [<numba.core.ir.Assign object at 0x17198fbd0>],
             '$84binary_subscr.8': [<numba.core.ir.Assign object at 0x17198f790>],
             '$8load_global.1': [<numba.core.ir.Assign object at 0x17183cd50>],
             '$binop_iadd104.12': [<numba.core.ir.Assign object at 0x17198f750>],
             '$binop_pow100.11': [<numba.core.ir.Assign object at 0x17198c410>],
             '$binop_sub94.9': [<numba.core.ir.Assign object at 0x17198ff10>],
             '$const32.5': [<numba.core.ir.Assign object at 0x1717fcd90>],
             '$const98.10': [<numba.core.ir.Assign object at 0x17198fb10>],
             '$phi60.0': [<numba.core.ir.Assign object at 0x1715036d0>],
             '$phi62.1': [<numba.core.ir.Assign object at 0x17198dbd0>],
             'i': [<numba.core.ir.Assign object at 0x17198e910>],
             'result': [<numba.core.ir.Assign object at 0x170fcd890>,
                        <numba.core.ir.Assign object at 0x17198d290>],
             'x': [<numba.core.ir.Assign object at 0x1711c46d0>],
             'y': [<numba.core.ir.Assign object at 0x171192690>]})
2023-08-01 10:03:59,350 [DEBUG] SSA violators {'result'}
2023-08-01 10:03:59,350 [DEBUG] Fix SSA violator on var result
2023-08-01 10:03:59,350 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,350 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171503bd0>
2023-08-01 10:03:59,350 [DEBUG] on stmt: x = arg(0, name=x)
2023-08-01 10:03:59,350 [DEBUG] on stmt: y = arg(1, name=y)
2023-08-01 10:03:59,350 [DEBUG] on stmt: result = const(float, 0.0)
2023-08-01 10:03:59,350 [DEBUG] first assign: result
2023-08-01 10:03:59,350 [DEBUG] replaced with: result = const(float, 0.0)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $8load_global.1 = global(range: <class 'range'>)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $22load_attr.4 = getattr(value=x, attr=shape)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $const32.5 = const(int, 0)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $34binary_subscr.6 = static_getitem(value=$22load_attr.4, index=0, index_var=$const32.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $48call.7 = call $8load_global.1($34binary_subscr.6, func=$8load_global.1, args=[Var($34binary_subscr.6, distances.py:30)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $58get_iter.8 = getiter(value=$48call.7)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $phi60.0 = $58get_iter.8
2023-08-01 10:03:59,350 [DEBUG] on stmt: jump 60
2023-08-01 10:03:59,350 [DEBUG] ==== SSA block rewrite pass on 60
2023-08-01 10:03:59,350 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171503bd0>
2023-08-01 10:03:59,350 [DEBUG] on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $phi62.1 = $60for_iter.2
2023-08-01 10:03:59,350 [DEBUG] on stmt: branch $60for_iter.3, 62, 112
2023-08-01 10:03:59,350 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,350 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171503bd0>
2023-08-01 10:03:59,350 [DEBUG] on stmt: i = $phi62.1
2023-08-01 10:03:59,350 [DEBUG] on stmt: $70binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $84binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $binop_sub94.9 = $70binary_subscr.5 - $84binary_subscr.8
2023-08-01 10:03:59,350 [DEBUG] on stmt: $const98.10 = const(int, 2)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $binop_pow100.11 = $binop_sub94.9 ** $const98.10
2023-08-01 10:03:59,350 [DEBUG] on stmt: $binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,350 [DEBUG] on stmt: result = $binop_iadd104.12
2023-08-01 10:03:59,350 [DEBUG] replaced with: result.1 = $binop_iadd104.12
2023-08-01 10:03:59,350 [DEBUG] on stmt: jump 60
2023-08-01 10:03:59,350 [DEBUG] ==== SSA block rewrite pass on 112
2023-08-01 10:03:59,350 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171503bd0>
2023-08-01 10:03:59,350 [DEBUG] on stmt: $112load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $124load_attr.2 = getattr(value=$112load_global.0, attr=sqrt)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $140call.4 = call $124load_attr.2(result, func=$124load_attr.2, args=[Var(result, distances.py:29)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $150return_value.5 = cast(value=$140call.4)
2023-08-01 10:03:59,350 [DEBUG] on stmt: return $150return_value.5
2023-08-01 10:03:59,350 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x170bc3790>],
             62: [<numba.core.ir.Assign object at 0x171706750>]})
2023-08-01 10:03:59,350 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,350 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171704a90>
2023-08-01 10:03:59,350 [DEBUG] on stmt: x = arg(0, name=x)
2023-08-01 10:03:59,350 [DEBUG] on stmt: y = arg(1, name=y)
2023-08-01 10:03:59,350 [DEBUG] on stmt: result = const(float, 0.0)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $8load_global.1 = global(range: <class 'range'>)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $22load_attr.4 = getattr(value=x, attr=shape)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $const32.5 = const(int, 0)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $34binary_subscr.6 = static_getitem(value=$22load_attr.4, index=0, index_var=$const32.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $48call.7 = call $8load_global.1($34binary_subscr.6, func=$8load_global.1, args=[Var($34binary_subscr.6, distances.py:30)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $58get_iter.8 = getiter(value=$48call.7)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $phi60.0 = $58get_iter.8
2023-08-01 10:03:59,350 [DEBUG] on stmt: jump 60
2023-08-01 10:03:59,350 [DEBUG] ==== SSA block rewrite pass on 60
2023-08-01 10:03:59,350 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171704a90>
2023-08-01 10:03:59,350 [DEBUG] on stmt: $60for_iter.1 = iternext(value=$phi60.0)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $60for_iter.2 = pair_first(value=$60for_iter.1)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $60for_iter.3 = pair_second(value=$60for_iter.1)
2023-08-01 10:03:59,350 [DEBUG] on stmt: $phi62.1 = $60for_iter.2
2023-08-01 10:03:59,350 [DEBUG] on stmt: branch $60for_iter.3, 62, 112
2023-08-01 10:03:59,350 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,350 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171704a90>
2023-08-01 10:03:59,350 [DEBUG] on stmt: i = $phi62.1
2023-08-01 10:03:59,351 [DEBUG] on stmt: $70binary_subscr.5 = getitem(value=x, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,351 [DEBUG] on stmt: $84binary_subscr.8 = getitem(value=y, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,351 [DEBUG] on stmt: $binop_sub94.9 = $70binary_subscr.5 - $84binary_subscr.8
2023-08-01 10:03:59,351 [DEBUG] on stmt: $const98.10 = const(int, 2)
2023-08-01 10:03:59,351 [DEBUG] on stmt: $binop_pow100.11 = $binop_sub94.9 ** $const98.10
2023-08-01 10:03:59,351 [DEBUG] on stmt: $binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,351 [DEBUG] find_def var='result' stmt=$binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,351 [DEBUG] find_def_from_top label 62
2023-08-01 10:03:59,351 [DEBUG] idom 60 from label 62
2023-08-01 10:03:59,351 [DEBUG] find_def_from_bottom label 60
2023-08-01 10:03:59,351 [DEBUG] find_def_from_top label 60
2023-08-01 10:03:59,351 [DEBUG] insert phi node result.2 = phi(incoming_values=[], incoming_blocks=[]) at 60
2023-08-01 10:03:59,351 [DEBUG] find_def_from_bottom label 0
2023-08-01 10:03:59,351 [DEBUG] incoming_def result = const(float, 0.0)
2023-08-01 10:03:59,351 [DEBUG] find_def_from_bottom label 62
2023-08-01 10:03:59,351 [DEBUG] incoming_def result.1 = $binop_iadd104.12
2023-08-01 10:03:59,351 [DEBUG] replaced with: $binop_iadd104.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=result.2, rhs=$binop_pow100.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,351 [DEBUG] on stmt: result.1 = $binop_iadd104.12
2023-08-01 10:03:59,351 [DEBUG] on stmt: jump 60
2023-08-01 10:03:59,351 [DEBUG] ==== SSA block rewrite pass on 112
2023-08-01 10:03:59,351 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171704a90>
2023-08-01 10:03:59,351 [DEBUG] on stmt: $112load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,351 [DEBUG] on stmt: $124load_attr.2 = getattr(value=$112load_global.0, attr=sqrt)
2023-08-01 10:03:59,351 [DEBUG] on stmt: $140call.4 = call $124load_attr.2(result, func=$124load_attr.2, args=[Var(result, distances.py:29)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,351 [DEBUG] find_def var='result' stmt=$140call.4 = call $124load_attr.2(result, func=$124load_attr.2, args=[Var(result, distances.py:29)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,351 [DEBUG] find_def_from_top label 112
2023-08-01 10:03:59,351 [DEBUG] idom 60 from label 112
2023-08-01 10:03:59,351 [DEBUG] find_def_from_bottom label 60
2023-08-01 10:03:59,351 [DEBUG] replaced with: $140call.4 = call $124load_attr.2(result.2, func=$124load_attr.2, args=[Var(result.2, distances.py:30)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,351 [DEBUG] on stmt: $150return_value.5 = cast(value=$140call.4)
2023-08-01 10:03:59,351 [DEBUG] on stmt: return $150return_value.5
2023-08-01 10:03:59,360 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=214)
           2	COPY_FREE_VARS(arg=3, lineno=214)
           4	RESUME(arg=0, lineno=214)
           6	PUSH_NULL(arg=None, lineno=216)
           8	LOAD_DEREF(arg=6, lineno=216)
          10	LOAD_CONST(arg=1, lineno=216)
          12	PRECALL(arg=1, lineno=216)
          16	CALL(arg=1, lineno=216)
          26	STORE_FAST(arg=2, lineno=216)
          28	PUSH_NULL(arg=None, lineno=217)
          30	LOAD_DEREF(arg=6, lineno=217)
          32	LOAD_FAST(arg=0, lineno=217)
          34	PRECALL(arg=1, lineno=217)
          38	CALL(arg=1, lineno=217)
          48	STORE_FAST(arg=0, lineno=217)
          50	LOAD_FAST(arg=1, lineno=218)
          52	LOAD_CONST(arg=2, lineno=218)
          54	COMPARE_OP(arg=0, lineno=218)
          60	POP_JUMP_FORWARD_IF_FALSE(arg=60, lineno=218)
          62	LOAD_CONST(arg=3, lineno=219)
          64	STORE_FAST(arg=3, lineno=219)
          66	LOAD_FAST(arg=1, lineno=220)
          68	UNARY_NEGATIVE(arg=None, lineno=220)
          70	STORE_FAST(arg=4, lineno=220)
          72	LOAD_FAST(arg=4, lineno=221)
          74	LOAD_CONST(arg=2, lineno=221)
          76	COMPARE_OP(arg=0, lineno=221)
          82	POP_JUMP_FORWARD_IF_FALSE(arg=7, lineno=221)
          84	LOAD_GLOBAL(arg=0, lineno=222)
          96	RAISE_VARARGS(arg=1, lineno=222)
>         98	LOAD_DEREF(arg=5, lineno=223)
         100	POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=223)
         102	LOAD_FAST(arg=0, lineno=224)
         104	LOAD_CONST(arg=2, lineno=224)
         106	COMPARE_OP(arg=2, lineno=224)
         112	POP_JUMP_FORWARD_IF_FALSE(arg=19, lineno=224)
         114	LOAD_DEREF(arg=7, lineno=225)
         116	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=225)
         118	LOAD_DEREF(arg=7, lineno=226)
         120	RETURN_VALUE(arg=None, lineno=226)
>        122	LOAD_GLOBAL(arg=3, lineno=228)
         134	LOAD_CONST(arg=4, lineno=228)
         136	PRECALL(arg=1, lineno=228)
         140	CALL(arg=1, lineno=228)
         150	RAISE_VARARGS(arg=1, lineno=228)
>        152	LOAD_FAST(arg=0, lineno=229)
         154	LOAD_CONST(arg=1, lineno=229)
         156	COMPARE_OP(arg=3, lineno=229)
         162	POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=229)
         164	LOAD_FAST(arg=0, lineno=229)
         166	LOAD_CONST(arg=5, lineno=229)
         168	COMPARE_OP(arg=3, lineno=229)
         174	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=229)
         176	LOAD_CONST(arg=2, lineno=230)
         178	RETURN_VALUE(arg=None, lineno=230)
>        180	JUMP_FORWARD(arg=4, lineno=230)
>        182	LOAD_CONST(arg=6, lineno=232)
         184	STORE_FAST(arg=3, lineno=232)
         186	LOAD_FAST(arg=1, lineno=233)
         188	STORE_FAST(arg=4, lineno=233)
>        190	LOAD_FAST(arg=4, lineno=234)
         192	LOAD_CONST(arg=7, lineno=234)
         194	COMPARE_OP(arg=4, lineno=234)
         200	POP_JUMP_FORWARD_IF_FALSE(arg=34, lineno=234)
         202	LOAD_GLOBAL(arg=5, lineno=236)
         214	LOAD_ATTR(arg=3, lineno=236)
         224	LOAD_FAST(arg=0, lineno=236)
         226	LOAD_GLOBAL(arg=9, lineno=236)
         238	LOAD_FAST(arg=1, lineno=236)
         240	PRECALL(arg=1, lineno=236)
         244	CALL(arg=1, lineno=236)
         254	PRECALL(arg=2, lineno=236)
         258	CALL(arg=2, lineno=236)
         268	RETURN_VALUE(arg=None, lineno=236)
>        270	LOAD_FAST(arg=4, lineno=237)
         272	LOAD_CONST(arg=2, lineno=237)
         274	COMPARE_OP(arg=3, lineno=237)
         280	POP_JUMP_FORWARD_IF_FALSE(arg=26, lineno=237)
>        282	LOAD_FAST(arg=4, lineno=238)
         284	LOAD_CONST(arg=1, lineno=238)
         286	BINARY_OP(arg=1, lineno=238)
         290	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=238)
         292	LOAD_FAST(arg=2, lineno=239)
         294	LOAD_FAST(arg=0, lineno=239)
         296	BINARY_OP(arg=18, lineno=239)
         300	STORE_FAST(arg=2, lineno=239)
>        302	LOAD_FAST(arg=4, lineno=240)
         304	LOAD_CONST(arg=1, lineno=240)
         306	BINARY_OP(arg=22, lineno=240)
         310	STORE_FAST(arg=4, lineno=240)
         312	LOAD_FAST(arg=0, lineno=241)
         314	LOAD_FAST(arg=0, lineno=241)
         316	BINARY_OP(arg=18, lineno=241)
         320	STORE_FAST(arg=0, lineno=241)
         322	LOAD_FAST(arg=4, lineno=237)
         324	LOAD_CONST(arg=2, lineno=237)
         326	COMPARE_OP(arg=3, lineno=237)
         332	POP_JUMP_BACKWARD_IF_TRUE(arg=26, lineno=237)
>        334	LOAD_FAST(arg=3, lineno=243)
         336	POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=243)
         338	LOAD_CONST(arg=8, lineno=243)
         340	LOAD_FAST(arg=2, lineno=243)
         342	BINARY_OP(arg=11, lineno=243)
         346	JUMP_FORWARD(arg=1, lineno=243)
>        348	LOAD_FAST(arg=2, lineno=243)
>        350	RETURN_VALUE(arg=None, lineno=243)
2023-08-01 10:03:59,360 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,360 [DEBUG] stack: []
2023-08-01 10:03:59,360 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,360 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=214)
2023-08-01 10:03:59,360 [DEBUG] stack []
2023-08-01 10:03:59,360 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=3, lineno=214)
2023-08-01 10:03:59,360 [DEBUG] stack []
2023-08-01 10:03:59,360 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=214)
2023-08-01 10:03:59,360 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=6, inst=PUSH_NULL(arg=None, lineno=216)
2023-08-01 10:03:59,361 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=8, inst=LOAD_DEREF(arg=6, lineno=216)
2023-08-01 10:03:59,361 [DEBUG] stack ['$null$6.0']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=216)
2023-08-01 10:03:59,361 [DEBUG] stack ['$null$6.0', '$8load_deref.1']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=12, inst=PRECALL(arg=1, lineno=216)
2023-08-01 10:03:59,361 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$const10.2']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=16, inst=CALL(arg=1, lineno=216)
2023-08-01 10:03:59,361 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$const10.2']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=26, inst=STORE_FAST(arg=2, lineno=216)
2023-08-01 10:03:59,361 [DEBUG] stack ['$16call.3']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=28, inst=PUSH_NULL(arg=None, lineno=217)
2023-08-01 10:03:59,361 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=30, inst=LOAD_DEREF(arg=6, lineno=217)
2023-08-01 10:03:59,361 [DEBUG] stack ['$null$28.4']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=217)
2023-08-01 10:03:59,361 [DEBUG] stack ['$null$28.4', '$30load_deref.5']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=34, inst=PRECALL(arg=1, lineno=217)
2023-08-01 10:03:59,361 [DEBUG] stack ['$null$28.4', '$30load_deref.5', '$a32.6']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=38, inst=CALL(arg=1, lineno=217)
2023-08-01 10:03:59,361 [DEBUG] stack ['$null$28.4', '$30load_deref.5', '$a32.6']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=48, inst=STORE_FAST(arg=0, lineno=217)
2023-08-01 10:03:59,361 [DEBUG] stack ['$38call.7']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=218)
2023-08-01 10:03:59,361 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=52, inst=LOAD_CONST(arg=2, lineno=218)
2023-08-01 10:03:59,361 [DEBUG] stack ['$b50.8']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=54, inst=COMPARE_OP(arg=0, lineno=218)
2023-08-01 10:03:59,361 [DEBUG] stack ['$b50.8', '$const52.9']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=60, inst=POP_JUMP_FORWARD_IF_FALSE(arg=60, lineno=218)
2023-08-01 10:03:59,361 [DEBUG] stack ['$54compare_op.10']
2023-08-01 10:03:59,361 [DEBUG] end state. edges=[Edge(pc=62, stack=(), blockstack=(), npush=0), Edge(pc=182, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,361 [DEBUG] pending: deque([State(pc_initial=62 nstack_initial=0), State(pc_initial=182 nstack_initial=0)])
2023-08-01 10:03:59,361 [DEBUG] stack: []
2023-08-01 10:03:59,361 [DEBUG] state.pc_initial: State(pc_initial=62 nstack_initial=0)
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=62, inst=LOAD_CONST(arg=3, lineno=219)
2023-08-01 10:03:59,361 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=64, inst=STORE_FAST(arg=3, lineno=219)
2023-08-01 10:03:59,361 [DEBUG] stack ['$const62.0']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=220)
2023-08-01 10:03:59,361 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=68, inst=UNARY_NEGATIVE(arg=None, lineno=220)
2023-08-01 10:03:59,361 [DEBUG] stack ['$b66.1']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=70, inst=STORE_FAST(arg=4, lineno=220)
2023-08-01 10:03:59,361 [DEBUG] stack ['$68unary_negative.2']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=72, inst=LOAD_FAST(arg=4, lineno=221)
2023-08-01 10:03:59,361 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=74, inst=LOAD_CONST(arg=2, lineno=221)
2023-08-01 10:03:59,361 [DEBUG] stack ['$exp72.3']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=76, inst=COMPARE_OP(arg=0, lineno=221)
2023-08-01 10:03:59,361 [DEBUG] stack ['$exp72.3', '$const74.4']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=82, inst=POP_JUMP_FORWARD_IF_FALSE(arg=7, lineno=221)
2023-08-01 10:03:59,361 [DEBUG] stack ['$76compare_op.5']
2023-08-01 10:03:59,361 [DEBUG] end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,361 [DEBUG] pending: deque([State(pc_initial=182 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
2023-08-01 10:03:59,361 [DEBUG] stack: []
2023-08-01 10:03:59,361 [DEBUG] state.pc_initial: State(pc_initial=182 nstack_initial=0)
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=182, inst=LOAD_CONST(arg=6, lineno=232)
2023-08-01 10:03:59,361 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=184, inst=STORE_FAST(arg=3, lineno=232)
2023-08-01 10:03:59,361 [DEBUG] stack ['$const182.0']
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=186, inst=LOAD_FAST(arg=1, lineno=233)
2023-08-01 10:03:59,361 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=188, inst=STORE_FAST(arg=4, lineno=233)
2023-08-01 10:03:59,361 [DEBUG] stack ['$b186.1']
2023-08-01 10:03:59,361 [DEBUG] end state. edges=[Edge(pc=190, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,361 [DEBUG] pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=98 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-01 10:03:59,361 [DEBUG] stack: []
2023-08-01 10:03:59,361 [DEBUG] state.pc_initial: State(pc_initial=84 nstack_initial=0)
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=84, inst=LOAD_GLOBAL(arg=0, lineno=222)
2023-08-01 10:03:59,361 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=96, inst=RAISE_VARARGS(arg=1, lineno=222)
2023-08-01 10:03:59,361 [DEBUG] stack ['$84load_global.0']
2023-08-01 10:03:59,361 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,361 [DEBUG] pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-01 10:03:59,361 [DEBUG] stack: []
2023-08-01 10:03:59,361 [DEBUG] state.pc_initial: State(pc_initial=98 nstack_initial=0)
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=98, inst=LOAD_DEREF(arg=5, lineno=223)
2023-08-01 10:03:59,361 [DEBUG] stack []
2023-08-01 10:03:59,361 [DEBUG] dispatch pc=100, inst=POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=223)
2023-08-01 10:03:59,361 [DEBUG] stack ['$98load_deref.0']
2023-08-01 10:03:59,361 [DEBUG] end state. edges=[Edge(pc=102, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,362 [DEBUG] pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=102 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-01 10:03:59,362 [DEBUG] stack: []
2023-08-01 10:03:59,362 [DEBUG] state.pc_initial: State(pc_initial=190 nstack_initial=0)
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=190, inst=LOAD_FAST(arg=4, lineno=234)
2023-08-01 10:03:59,362 [DEBUG] stack []
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=192, inst=LOAD_CONST(arg=7, lineno=234)
2023-08-01 10:03:59,362 [DEBUG] stack ['$exp190.0']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=194, inst=COMPARE_OP(arg=4, lineno=234)
2023-08-01 10:03:59,362 [DEBUG] stack ['$exp190.0', '$const192.1']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=200, inst=POP_JUMP_FORWARD_IF_FALSE(arg=34, lineno=234)
2023-08-01 10:03:59,362 [DEBUG] stack ['$194compare_op.2']
2023-08-01 10:03:59,362 [DEBUG] end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=270, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,362 [DEBUG] pending: deque([State(pc_initial=102 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0)])
2023-08-01 10:03:59,362 [DEBUG] stack: []
2023-08-01 10:03:59,362 [DEBUG] state.pc_initial: State(pc_initial=102 nstack_initial=0)
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=102, inst=LOAD_FAST(arg=0, lineno=224)
2023-08-01 10:03:59,362 [DEBUG] stack []
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=104, inst=LOAD_CONST(arg=2, lineno=224)
2023-08-01 10:03:59,362 [DEBUG] stack ['$a102.0']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=106, inst=COMPARE_OP(arg=2, lineno=224)
2023-08-01 10:03:59,362 [DEBUG] stack ['$a102.0', '$const104.1']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=112, inst=POP_JUMP_FORWARD_IF_FALSE(arg=19, lineno=224)
2023-08-01 10:03:59,362 [DEBUG] stack ['$106compare_op.2']
2023-08-01 10:03:59,362 [DEBUG] end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=152, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,362 [DEBUG] pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0)])
2023-08-01 10:03:59,362 [DEBUG] stack: []
2023-08-01 10:03:59,362 [DEBUG] state.pc_initial: State(pc_initial=180 nstack_initial=0)
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=180, inst=JUMP_FORWARD(arg=4, lineno=230)
2023-08-01 10:03:59,362 [DEBUG] stack []
2023-08-01 10:03:59,362 [DEBUG] end state. edges=[Edge(pc=190, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,362 [DEBUG] pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-01 10:03:59,362 [DEBUG] stack: []
2023-08-01 10:03:59,362 [DEBUG] state.pc_initial: State(pc_initial=202 nstack_initial=0)
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=202, inst=LOAD_GLOBAL(arg=5, lineno=236)
2023-08-01 10:03:59,362 [DEBUG] stack []
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=214, inst=LOAD_ATTR(arg=3, lineno=236)
2023-08-01 10:03:59,362 [DEBUG] stack ['$null$202.1', '$202load_global.0']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=224, inst=LOAD_FAST(arg=0, lineno=236)
2023-08-01 10:03:59,362 [DEBUG] stack ['$null$202.1', '$214load_attr.2']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=226, inst=LOAD_GLOBAL(arg=9, lineno=236)
2023-08-01 10:03:59,362 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=238, inst=LOAD_FAST(arg=1, lineno=236)
2023-08-01 10:03:59,362 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=240, inst=PRECALL(arg=1, lineno=236)
2023-08-01 10:03:59,362 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4', '$b238.6']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=244, inst=CALL(arg=1, lineno=236)
2023-08-01 10:03:59,362 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$null$226.5', '$226load_global.4', '$b238.6']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=254, inst=PRECALL(arg=2, lineno=236)
2023-08-01 10:03:59,362 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$244call.7']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=258, inst=CALL(arg=2, lineno=236)
2023-08-01 10:03:59,362 [DEBUG] stack ['$null$202.1', '$214load_attr.2', '$a224.3', '$244call.7']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=268, inst=RETURN_VALUE(arg=None, lineno=236)
2023-08-01 10:03:59,362 [DEBUG] stack ['$258call.8']
2023-08-01 10:03:59,362 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,362 [DEBUG] pending: deque([State(pc_initial=270 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0)])
2023-08-01 10:03:59,362 [DEBUG] stack: []
2023-08-01 10:03:59,362 [DEBUG] state.pc_initial: State(pc_initial=270 nstack_initial=0)
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=270, inst=LOAD_FAST(arg=4, lineno=237)
2023-08-01 10:03:59,362 [DEBUG] stack []
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=272, inst=LOAD_CONST(arg=2, lineno=237)
2023-08-01 10:03:59,362 [DEBUG] stack ['$exp270.0']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=274, inst=COMPARE_OP(arg=3, lineno=237)
2023-08-01 10:03:59,362 [DEBUG] stack ['$exp270.0', '$const272.1']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=280, inst=POP_JUMP_FORWARD_IF_FALSE(arg=26, lineno=237)
2023-08-01 10:03:59,362 [DEBUG] stack ['$274compare_op.2']
2023-08-01 10:03:59,362 [DEBUG] end state. edges=[Edge(pc=282, stack=(), blockstack=(), npush=0), Edge(pc=334, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,362 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0)])
2023-08-01 10:03:59,362 [DEBUG] stack: []
2023-08-01 10:03:59,362 [DEBUG] state.pc_initial: State(pc_initial=114 nstack_initial=0)
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=114, inst=LOAD_DEREF(arg=7, lineno=225)
2023-08-01 10:03:59,362 [DEBUG] stack []
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=116, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=225)
2023-08-01 10:03:59,362 [DEBUG] stack ['$114load_deref.0']
2023-08-01 10:03:59,362 [DEBUG] end state. edges=[Edge(pc=118, stack=(), blockstack=(), npush=0), Edge(pc=122, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,362 [DEBUG] pending: deque([State(pc_initial=152 nstack_initial=0), State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0)])
2023-08-01 10:03:59,362 [DEBUG] stack: []
2023-08-01 10:03:59,362 [DEBUG] state.pc_initial: State(pc_initial=152 nstack_initial=0)
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=152, inst=LOAD_FAST(arg=0, lineno=229)
2023-08-01 10:03:59,362 [DEBUG] stack []
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=154, inst=LOAD_CONST(arg=1, lineno=229)
2023-08-01 10:03:59,362 [DEBUG] stack ['$a152.0']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=156, inst=COMPARE_OP(arg=3, lineno=229)
2023-08-01 10:03:59,362 [DEBUG] stack ['$a152.0', '$const154.1']
2023-08-01 10:03:59,362 [DEBUG] dispatch pc=162, inst=POP_JUMP_FORWARD_IF_FALSE(arg=8, lineno=229)
2023-08-01 10:03:59,362 [DEBUG] stack ['$156compare_op.2']
2023-08-01 10:03:59,363 [DEBUG] end state. edges=[Edge(pc=164, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,363 [DEBUG] pending: deque([State(pc_initial=190 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-01 10:03:59,363 [DEBUG] pending: deque([State(pc_initial=282 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-01 10:03:59,363 [DEBUG] stack: []
2023-08-01 10:03:59,363 [DEBUG] state.pc_initial: State(pc_initial=282 nstack_initial=0)
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=282, inst=LOAD_FAST(arg=4, lineno=238)
2023-08-01 10:03:59,363 [DEBUG] stack []
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=284, inst=LOAD_CONST(arg=1, lineno=238)
2023-08-01 10:03:59,363 [DEBUG] stack ['$exp282.0']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=286, inst=BINARY_OP(arg=1, lineno=238)
2023-08-01 10:03:59,363 [DEBUG] stack ['$exp282.0', '$const284.1']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=290, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=238)
2023-08-01 10:03:59,363 [DEBUG] stack ['$binop_and_286.2']
2023-08-01 10:03:59,363 [DEBUG] end state. edges=[Edge(pc=292, stack=(), blockstack=(), npush=0), Edge(pc=302, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,363 [DEBUG] pending: deque([State(pc_initial=334 nstack_initial=0), State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2023-08-01 10:03:59,363 [DEBUG] stack: []
2023-08-01 10:03:59,363 [DEBUG] state.pc_initial: State(pc_initial=334 nstack_initial=0)
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=334, inst=LOAD_FAST(arg=3, lineno=243)
2023-08-01 10:03:59,363 [DEBUG] stack []
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=336, inst=POP_JUMP_FORWARD_IF_FALSE(arg=5, lineno=243)
2023-08-01 10:03:59,363 [DEBUG] stack ['$invert334.0']
2023-08-01 10:03:59,363 [DEBUG] end state. edges=[Edge(pc=338, stack=(), blockstack=(), npush=0), Edge(pc=348, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,363 [DEBUG] pending: deque([State(pc_initial=118 nstack_initial=0), State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-08-01 10:03:59,363 [DEBUG] stack: []
2023-08-01 10:03:59,363 [DEBUG] state.pc_initial: State(pc_initial=118 nstack_initial=0)
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=118, inst=LOAD_DEREF(arg=7, lineno=226)
2023-08-01 10:03:59,363 [DEBUG] stack []
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=120, inst=RETURN_VALUE(arg=None, lineno=226)
2023-08-01 10:03:59,363 [DEBUG] stack ['$118load_deref.0']
2023-08-01 10:03:59,363 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,363 [DEBUG] pending: deque([State(pc_initial=122 nstack_initial=0), State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-08-01 10:03:59,363 [DEBUG] stack: []
2023-08-01 10:03:59,363 [DEBUG] state.pc_initial: State(pc_initial=122 nstack_initial=0)
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=122, inst=LOAD_GLOBAL(arg=3, lineno=228)
2023-08-01 10:03:59,363 [DEBUG] stack []
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=134, inst=LOAD_CONST(arg=4, lineno=228)
2023-08-01 10:03:59,363 [DEBUG] stack ['$null$122.1', '$122load_global.0']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=136, inst=PRECALL(arg=1, lineno=228)
2023-08-01 10:03:59,363 [DEBUG] stack ['$null$122.1', '$122load_global.0', '$const134.2']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=140, inst=CALL(arg=1, lineno=228)
2023-08-01 10:03:59,363 [DEBUG] stack ['$null$122.1', '$122load_global.0', '$const134.2']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=150, inst=RAISE_VARARGS(arg=1, lineno=228)
2023-08-01 10:03:59,363 [DEBUG] stack ['$140call.3']
2023-08-01 10:03:59,363 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,363 [DEBUG] pending: deque([State(pc_initial=164 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0)])
2023-08-01 10:03:59,363 [DEBUG] stack: []
2023-08-01 10:03:59,363 [DEBUG] state.pc_initial: State(pc_initial=164 nstack_initial=0)
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=229)
2023-08-01 10:03:59,363 [DEBUG] stack []
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=166, inst=LOAD_CONST(arg=5, lineno=229)
2023-08-01 10:03:59,363 [DEBUG] stack ['$a164.0']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=168, inst=COMPARE_OP(arg=3, lineno=229)
2023-08-01 10:03:59,363 [DEBUG] stack ['$a164.0', '$const166.1']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=174, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=229)
2023-08-01 10:03:59,363 [DEBUG] stack ['$168compare_op.2']
2023-08-01 10:03:59,363 [DEBUG] end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=180, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,363 [DEBUG] pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-01 10:03:59,363 [DEBUG] pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0)])
2023-08-01 10:03:59,363 [DEBUG] stack: []
2023-08-01 10:03:59,363 [DEBUG] state.pc_initial: State(pc_initial=292 nstack_initial=0)
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=292, inst=LOAD_FAST(arg=2, lineno=239)
2023-08-01 10:03:59,363 [DEBUG] stack []
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=294, inst=LOAD_FAST(arg=0, lineno=239)
2023-08-01 10:03:59,363 [DEBUG] stack ['$r292.0']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=296, inst=BINARY_OP(arg=18, lineno=239)
2023-08-01 10:03:59,363 [DEBUG] stack ['$r292.0', '$a294.1']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=300, inst=STORE_FAST(arg=2, lineno=239)
2023-08-01 10:03:59,363 [DEBUG] stack ['$binop_imul296.2']
2023-08-01 10:03:59,363 [DEBUG] end state. edges=[Edge(pc=302, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,363 [DEBUG] pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0)])
2023-08-01 10:03:59,363 [DEBUG] stack: []
2023-08-01 10:03:59,363 [DEBUG] state.pc_initial: State(pc_initial=302 nstack_initial=0)
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=302, inst=LOAD_FAST(arg=4, lineno=240)
2023-08-01 10:03:59,363 [DEBUG] stack []
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=304, inst=LOAD_CONST(arg=1, lineno=240)
2023-08-01 10:03:59,363 [DEBUG] stack ['$exp302.0']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=306, inst=BINARY_OP(arg=22, lineno=240)
2023-08-01 10:03:59,363 [DEBUG] stack ['$exp302.0', '$const304.1']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=310, inst=STORE_FAST(arg=4, lineno=240)
2023-08-01 10:03:59,363 [DEBUG] stack ['$binop_irshift306.2']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=312, inst=LOAD_FAST(arg=0, lineno=241)
2023-08-01 10:03:59,363 [DEBUG] stack []
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=314, inst=LOAD_FAST(arg=0, lineno=241)
2023-08-01 10:03:59,363 [DEBUG] stack ['$a312.3']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=316, inst=BINARY_OP(arg=18, lineno=241)
2023-08-01 10:03:59,363 [DEBUG] stack ['$a312.3', '$a314.4']
2023-08-01 10:03:59,363 [DEBUG] dispatch pc=320, inst=STORE_FAST(arg=0, lineno=241)
2023-08-01 10:03:59,364 [DEBUG] stack ['$binop_imul316.5']
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=322, inst=LOAD_FAST(arg=4, lineno=237)
2023-08-01 10:03:59,364 [DEBUG] stack []
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=324, inst=LOAD_CONST(arg=2, lineno=237)
2023-08-01 10:03:59,364 [DEBUG] stack ['$exp322.6']
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=326, inst=COMPARE_OP(arg=3, lineno=237)
2023-08-01 10:03:59,364 [DEBUG] stack ['$exp322.6', '$const324.7']
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=332, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=26, lineno=237)
2023-08-01 10:03:59,364 [DEBUG] stack ['$326compare_op.8']
2023-08-01 10:03:59,364 [DEBUG] end state. edges=[Edge(pc=334, stack=(), blockstack=(), npush=0), Edge(pc=282, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,364 [DEBUG] pending: deque([State(pc_initial=338 nstack_initial=0), State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0)])
2023-08-01 10:03:59,364 [DEBUG] stack: []
2023-08-01 10:03:59,364 [DEBUG] state.pc_initial: State(pc_initial=338 nstack_initial=0)
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=338, inst=LOAD_CONST(arg=8, lineno=243)
2023-08-01 10:03:59,364 [DEBUG] stack []
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=340, inst=LOAD_FAST(arg=2, lineno=243)
2023-08-01 10:03:59,364 [DEBUG] stack ['$const338.0']
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=342, inst=BINARY_OP(arg=11, lineno=243)
2023-08-01 10:03:59,364 [DEBUG] stack ['$const338.0', '$r340.1']
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=346, inst=JUMP_FORWARD(arg=1, lineno=243)
2023-08-01 10:03:59,364 [DEBUG] stack ['$binop_truediv342.2']
2023-08-01 10:03:59,364 [DEBUG] end state. edges=[Edge(pc=350, stack=('$binop_truediv342.2',), blockstack=(), npush=0)]
2023-08-01 10:03:59,364 [DEBUG] pending: deque([State(pc_initial=348 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1)])
2023-08-01 10:03:59,364 [DEBUG] stack: []
2023-08-01 10:03:59,364 [DEBUG] state.pc_initial: State(pc_initial=348 nstack_initial=0)
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=348, inst=LOAD_FAST(arg=2, lineno=243)
2023-08-01 10:03:59,364 [DEBUG] stack []
2023-08-01 10:03:59,364 [DEBUG] end state. edges=[Edge(pc=350, stack=('$r348.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,364 [DEBUG] pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-01 10:03:59,364 [DEBUG] stack: []
2023-08-01 10:03:59,364 [DEBUG] state.pc_initial: State(pc_initial=176 nstack_initial=0)
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=176, inst=LOAD_CONST(arg=2, lineno=230)
2023-08-01 10:03:59,364 [DEBUG] stack []
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=178, inst=RETURN_VALUE(arg=None, lineno=230)
2023-08-01 10:03:59,364 [DEBUG] stack ['$const176.0']
2023-08-01 10:03:59,364 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,364 [DEBUG] pending: deque([State(pc_initial=180 nstack_initial=0), State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-01 10:03:59,364 [DEBUG] pending: deque([State(pc_initial=302 nstack_initial=0), State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-01 10:03:59,364 [DEBUG] pending: deque([State(pc_initial=334 nstack_initial=0), State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-01 10:03:59,364 [DEBUG] pending: deque([State(pc_initial=282 nstack_initial=0), State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-01 10:03:59,364 [DEBUG] pending: deque([State(pc_initial=350 nstack_initial=1), State(pc_initial=350 nstack_initial=1)])
2023-08-01 10:03:59,364 [DEBUG] stack: ['$phi350.0']
2023-08-01 10:03:59,364 [DEBUG] state.pc_initial: State(pc_initial=350 nstack_initial=1)
2023-08-01 10:03:59,364 [DEBUG] dispatch pc=350, inst=RETURN_VALUE(arg=None, lineno=243)
2023-08-01 10:03:59,364 [DEBUG] stack ['$phi350.0']
2023-08-01 10:03:59,364 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,364 [DEBUG] pending: deque([State(pc_initial=350 nstack_initial=1)])
2023-08-01 10:03:59,364 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,364 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=62 nstack_initial=0): set(),
             State(pc_initial=84 nstack_initial=0): set(),
             State(pc_initial=98 nstack_initial=0): set(),
             State(pc_initial=102 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=122 nstack_initial=0): set(),
             State(pc_initial=152 nstack_initial=0): set(),
             State(pc_initial=164 nstack_initial=0): set(),
             State(pc_initial=176 nstack_initial=0): set(),
             State(pc_initial=180 nstack_initial=0): set(),
             State(pc_initial=182 nstack_initial=0): set(),
             State(pc_initial=190 nstack_initial=0): set(),
             State(pc_initial=202 nstack_initial=0): set(),
             State(pc_initial=270 nstack_initial=0): set(),
             State(pc_initial=282 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=302 nstack_initial=0): set(),
             State(pc_initial=334 nstack_initial=0): set(),
             State(pc_initial=338 nstack_initial=0): set(),
             State(pc_initial=348 nstack_initial=0): set(),
             State(pc_initial=350 nstack_initial=1): {'$phi350.0'}})
2023-08-01 10:03:59,364 [DEBUG] defmap: {'$phi350.0': State(pc_initial=348 nstack_initial=0)}
2023-08-01 10:03:59,364 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi350.0': {('$binop_truediv342.2',
                            State(pc_initial=338 nstack_initial=0)),
                           ('$r348.0',
                            State(pc_initial=348 nstack_initial=0))}})
2023-08-01 10:03:59,364 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi350.0': {('$binop_truediv342.2',
                            State(pc_initial=338 nstack_initial=0)),
                           ('$r348.0',
                            State(pc_initial=348 nstack_initial=0))}})
2023-08-01 10:03:59,364 [DEBUG] keep phismap: {'$phi350.0': {('$binop_truediv342.2', State(pc_initial=338 nstack_initial=0)),
               ('$r348.0', State(pc_initial=348 nstack_initial=0))}}
2023-08-01 10:03:59,364 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=338 nstack_initial=0): {'$phi350.0': '$binop_truediv342.2'},
             State(pc_initial=348 nstack_initial=0): {'$phi350.0': '$r348.0'}})
2023-08-01 10:03:59,364 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,364 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {}), (8, {'res': '$8load_deref.1'}), (10, {'res': '$const10.2'}), (12, {}), (14, {}), (16, {'func': '$8load_deref.1', 'args': ['$const10.2'], 'kw_names': None, 'res': '$16call.3'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'value': '$16call.3'}), (28, {}), (30, {'res': '$30load_deref.5'}), (32, {'res': '$a32.6'}), (34, {}), (36, {}), (38, {'func': '$30load_deref.5', 'args': ['$a32.6'], 'kw_names': None, 'res': '$38call.7'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'value': '$38call.7'}), (50, {'res': '$b50.8'}), (52, {'res': '$const52.9'}), (54, {'lhs': '$b50.8', 'rhs': '$const52.9', 'res': '$54compare_op.10'}), (56, {}), (58, {}), (60, {'pred': '$54compare_op.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={62: (), 182: ()})
2023-08-01 10:03:59,364 [DEBUG] block_infos State(pc_initial=62 nstack_initial=0):
AdaptBlockInfo(insts=((62, {'res': '$const62.0'}), (64, {'value': '$const62.0'}), (66, {'res': '$b66.1'}), (68, {'value': '$b66.1', 'res': '$68unary_negative.2'}), (70, {'value': '$68unary_negative.2'}), (72, {'res': '$exp72.3'}), (74, {'res': '$const74.4'}), (76, {'lhs': '$exp72.3', 'rhs': '$const74.4', 'res': '$76compare_op.5'}), (78, {}), (80, {}), (82, {'pred': '$76compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 98: ()})
2023-08-01 10:03:59,364 [DEBUG] block_infos State(pc_initial=84 nstack_initial=0):
AdaptBlockInfo(insts=((84, {'idx': 0, 'res': '$84load_global.0'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {}), (96, {'exc': '$84load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,364 [DEBUG] block_infos State(pc_initial=98 nstack_initial=0):
AdaptBlockInfo(insts=((98, {'res': '$98load_deref.0'}), (100, {'pred': '$98load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={102: (), 180: ()})
2023-08-01 10:03:59,364 [DEBUG] block_infos State(pc_initial=102 nstack_initial=0):
AdaptBlockInfo(insts=((102, {'res': '$a102.0'}), (104, {'res': '$const104.1'}), (106, {'lhs': '$a102.0', 'rhs': '$const104.1', 'res': '$106compare_op.2'}), (108, {}), (110, {}), (112, {'pred': '$106compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 152: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=114 nstack_initial=0):
AdaptBlockInfo(insts=((114, {'res': '$114load_deref.0'}), (116, {'pred': '$114load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={118: (), 122: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$118load_deref.0'}), (120, {'retval': '$118load_deref.0', 'castval': '$120return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=122 nstack_initial=0):
AdaptBlockInfo(insts=((122, {'idx': 1, 'res': '$122load_global.0'}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {}), (134, {'res': '$const134.2'}), (136, {}), (138, {}), (140, {'func': '$122load_global.0', 'args': ['$const134.2'], 'kw_names': None, 'res': '$140call.3'}), (142, {}), (144, {}), (146, {}), (148, {}), (150, {'exc': '$140call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=152 nstack_initial=0):
AdaptBlockInfo(insts=((152, {'res': '$a152.0'}), (154, {'res': '$const154.1'}), (156, {'lhs': '$a152.0', 'rhs': '$const154.1', 'res': '$156compare_op.2'}), (158, {}), (160, {}), (162, {'pred': '$156compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={164: (), 180: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=164 nstack_initial=0):
AdaptBlockInfo(insts=((164, {'res': '$a164.0'}), (166, {'res': '$const166.1'}), (168, {'lhs': '$a164.0', 'rhs': '$const166.1', 'res': '$168compare_op.2'}), (170, {}), (172, {}), (174, {'pred': '$168compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 180: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=176 nstack_initial=0):
AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'retval': '$const176.0', 'castval': '$178return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=180 nstack_initial=0):
AdaptBlockInfo(insts=((180, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={190: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=182 nstack_initial=0):
AdaptBlockInfo(insts=((182, {'res': '$const182.0'}), (184, {'value': '$const182.0'}), (186, {'res': '$b186.1'}), (188, {'value': '$b186.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={190: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=190 nstack_initial=0):
AdaptBlockInfo(insts=((190, {'res': '$exp190.0'}), (192, {'res': '$const192.1'}), (194, {'lhs': '$exp190.0', 'rhs': '$const192.1', 'res': '$194compare_op.2'}), (196, {}), (198, {}), (200, {'pred': '$194compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 270: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=202 nstack_initial=0):
AdaptBlockInfo(insts=((202, {'idx': 2, 'res': '$202load_global.0'}), (204, {}), (206, {}), (208, {}), (210, {}), (212, {}), (214, {'item': '$202load_global.0', 'res': '$214load_attr.2'}), (216, {}), (218, {}), (220, {}), (222, {}), (224, {'res': '$a224.3'}), (226, {'idx': 4, 'res': '$226load_global.4'}), (228, {}), (230, {}), (232, {}), (234, {}), (236, {}), (238, {'res': '$b238.6'}), (240, {}), (242, {}), (244, {'func': '$226load_global.4', 'args': ['$b238.6'], 'kw_names': None, 'res': '$244call.7'}), (246, {}), (248, {}), (250, {}), (252, {}), (254, {}), (256, {}), (258, {'func': '$214load_attr.2', 'args': ['$a224.3', '$244call.7'], 'kw_names': None, 'res': '$258call.8'}), (260, {}), (262, {}), (264, {}), (266, {}), (268, {'retval': '$258call.8', 'castval': '$268return_value.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=270 nstack_initial=0):
AdaptBlockInfo(insts=((270, {'res': '$exp270.0'}), (272, {'res': '$const272.1'}), (274, {'lhs': '$exp270.0', 'rhs': '$const272.1', 'res': '$274compare_op.2'}), (276, {}), (278, {}), (280, {'pred': '$274compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={282: (), 334: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=282 nstack_initial=0):
AdaptBlockInfo(insts=((282, {'res': '$exp282.0'}), (284, {'res': '$const284.1'}), (286, {'op': '&', 'lhs': '$exp282.0', 'rhs': '$const284.1', 'res': '$binop_and_286.2'}), (288, {}), (290, {'pred': '$binop_and_286.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={292: (), 302: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {'res': '$r292.0'}), (294, {'res': '$a294.1'}), (296, {'op': '*=', 'lhs': '$r292.0', 'rhs': '$a294.1', 'res': '$binop_imul296.2'}), (298, {}), (300, {'value': '$binop_imul296.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={302: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=302 nstack_initial=0):
AdaptBlockInfo(insts=((302, {'res': '$exp302.0'}), (304, {'res': '$const304.1'}), (306, {'op': '>>=', 'lhs': '$exp302.0', 'rhs': '$const304.1', 'res': '$binop_irshift306.2'}), (308, {}), (310, {'value': '$binop_irshift306.2'}), (312, {'res': '$a312.3'}), (314, {'res': '$a314.4'}), (316, {'op': '*=', 'lhs': '$a312.3', 'rhs': '$a314.4', 'res': '$binop_imul316.5'}), (318, {}), (320, {'value': '$binop_imul316.5'}), (322, {'res': '$exp322.6'}), (324, {'res': '$const324.7'}), (326, {'lhs': '$exp322.6', 'rhs': '$const324.7', 'res': '$326compare_op.8'}), (328, {}), (330, {}), (332, {'pred': '$326compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={334: (), 282: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=334 nstack_initial=0):
AdaptBlockInfo(insts=((334, {'res': '$invert334.0'}), (336, {'pred': '$invert334.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={338: (), 348: ()})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=338 nstack_initial=0):
AdaptBlockInfo(insts=((338, {'res': '$const338.0'}), (340, {'res': '$r340.1'}), (342, {'op': '/', 'lhs': '$const338.0', 'rhs': '$r340.1', 'res': '$binop_truediv342.2'}), (344, {}), (346, {})), outgoing_phis={'$phi350.0': '$binop_truediv342.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={350: ('$binop_truediv342.2',)})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=348 nstack_initial=0):
AdaptBlockInfo(insts=((348, {'res': '$r348.0'}),), outgoing_phis={'$phi350.0': '$r348.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={350: ('$r348.0',)})
2023-08-01 10:03:59,365 [DEBUG] block_infos State(pc_initial=350 nstack_initial=1):
AdaptBlockInfo(insts=((350, {'retval': '$phi350.0', 'castval': '$350return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,366 [DEBUG] label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $8load_deref.1 = freevar(tp: float32)    ['$8load_deref.1']
    $const10.2 = const(int, 1)               ['$const10.2']
    r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$8load_deref.1', '$const10.2', 'r']
    $30load_deref.5 = freevar(tp: float32)   ['$30load_deref.5']
    a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_deref.5', 'a', 'a.1']
    $const52.9 = const(int, 0)               ['$const52.9']
    $54compare_op.10 = b < $const52.9        ['$54compare_op.10', '$const52.9', 'b']
    bool60 = global(bool: <class 'bool'>)    ['bool60']
    $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$54compare_op.10', '$60pred', 'bool60']
    branch $60pred, 62, 182                  ['$60pred']
label 62:
    invert = const(bool, True)               ['invert']
    exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
    $const74.4 = const(int, 0)               ['$const74.4']
    $76compare_op.5 = exp < $const74.4       ['$76compare_op.5', '$const74.4', 'exp']
    bool82 = global(bool: <class 'bool'>)    ['bool82']
    $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$76compare_op.5', '$82pred', 'bool82']
    branch $82pred, 84, 98                   ['$82pred']
label 84:
    $84load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$84load_global.0']
    raise $84load_global.0                   ['$84load_global.0']
label 98:
    $98load_deref.0 = freevar(is_integer: False) ['$98load_deref.0']
    bool100 = global(bool: <class 'bool'>)   ['bool100']
    $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$100pred', '$98load_deref.0', 'bool100']
    branch $100pred, 102, 180                ['$100pred']
label 102:
    $const104.1 = const(int, 0)              ['$const104.1']
    $106compare_op.2 = a.1 == $const104.1    ['$106compare_op.2', '$const104.1', 'a.1']
    bool112 = global(bool: <class 'bool'>)   ['bool112']
    $112pred = call bool112($106compare_op.2, func=bool112, args=(Var($106compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$106compare_op.2', '$112pred', 'bool112']
    branch $112pred, 114, 152                ['$112pred']
label 114:
    $114load_deref.0 = freevar(zerodiv_return: False) ['$114load_deref.0']
    bool116 = global(bool: <class 'bool'>)   ['bool116']
    $116pred = call bool116($114load_deref.0, func=bool116, args=(Var($114load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$114load_deref.0', '$116pred', 'bool116']
    branch $116pred, 118, 122                ['$116pred']
label 118:
    $118load_deref.0 = freevar(zerodiv_return: False) ['$118load_deref.0']
    $120return_value.1 = cast(value=$118load_deref.0) ['$118load_deref.0', '$120return_value.1']
    return $120return_value.1                ['$120return_value.1']
label 122:
    $122load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$122load_global.0']
    $const134.2 = const(str, 0 cannot be raised to a negative power) ['$const134.2']
    $140call.3 = call $122load_global.0($const134.2, func=$122load_global.0, args=[Var($const134.2, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_global.0', '$140call.3', '$const134.2']
    raise $140call.3                         ['$140call.3']
label 152:
    $const154.1 = const(int, 1)              ['$const154.1']
    $156compare_op.2 = a.1 != $const154.1    ['$156compare_op.2', '$const154.1', 'a.1']
    bool162 = global(bool: <class 'bool'>)   ['bool162']
    $162pred = call bool162($156compare_op.2, func=bool162, args=(Var($156compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$156compare_op.2', '$162pred', 'bool162']
    branch $162pred, 164, 180                ['$162pred']
label 164:
    $const166.1 = const(int, -1)             ['$const166.1']
    $168compare_op.2 = a.1 != $const166.1    ['$168compare_op.2', '$const166.1', 'a.1']
    bool174 = global(bool: <class 'bool'>)   ['bool174']
    $174pred = call bool174($168compare_op.2, func=bool174, args=(Var($168compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$168compare_op.2', '$174pred', 'bool174']
    branch $174pred, 176, 180                ['$174pred']
label 176:
    $const176.0 = const(int, 0)              ['$const176.0']
    $178return_value.1 = cast(value=$const176.0) ['$178return_value.1', '$const176.0']
    return $178return_value.1                ['$178return_value.1']
label 180:
    jump 190                                 []
label 182:
    invert = const(bool, False)              ['invert']
    exp = b                                  ['b', 'exp']
    jump 190                                 []
label 190:
    $const192.1 = const(int, 65536)          ['$const192.1']
    $194compare_op.2 = exp > $const192.1     ['$194compare_op.2', '$const192.1', 'exp']
    bool200 = global(bool: <class 'bool'>)   ['bool200']
    $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$194compare_op.2', '$200pred', 'bool200']
    branch $200pred, 202, 270                ['$200pred']
label 202:
    $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>) ['$202load_global.0']
    $214load_attr.2 = getattr(value=$202load_global.0, attr=pow) ['$202load_global.0', '$214load_attr.2']
    $226load_global.4 = global(float: <class 'float'>) ['$226load_global.4']
    $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None) ['$226load_global.4', '$244call.7', 'b']
    $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$214load_attr.2', '$244call.7', '$258call.8', 'a.1']
    $268return_value.9 = cast(value=$258call.8) ['$258call.8', '$268return_value.9']
    return $268return_value.9                ['$268return_value.9']
label 270:
    $const272.1 = const(int, 0)              ['$const272.1']
    $274compare_op.2 = exp != $const272.1    ['$274compare_op.2', '$const272.1', 'exp']
    bool280 = global(bool: <class 'bool'>)   ['bool280']
    $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$274compare_op.2', '$280pred', 'bool280']
    branch $280pred, 282, 334                ['$280pred']
label 282:
    $const284.1 = const(int, 1)              ['$const284.1']
    $binop_and_286.2 = exp & $const284.1     ['$binop_and_286.2', '$const284.1', 'exp']
    bool290 = global(bool: <class 'bool'>)   ['bool290']
    $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$290pred', '$binop_and_286.2', 'bool290']
    branch $290pred, 292, 302                ['$290pred']
label 292:
    $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul296.2', 'a.1', 'r']
    r = $binop_imul296.2                     ['$binop_imul296.2', 'r']
    jump 302                                 []
label 302:
    $const304.1 = const(int, 1)              ['$const304.1']
    $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_irshift306.2', '$const304.1', 'exp']
    exp = $binop_irshift306.2                ['$binop_irshift306.2', 'exp']
    $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_imul316.5', 'a.1', 'a.1']
    a.1 = $binop_imul316.5                   ['$binop_imul316.5', 'a.1']
    $const324.7 = const(int, 0)              ['$const324.7']
    $326compare_op.8 = exp != $const324.7    ['$326compare_op.8', '$const324.7', 'exp']
    bool332 = global(bool: <class 'bool'>)   ['bool332']
    $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$326compare_op.8', '$332pred', 'bool332']
    branch $332pred, 282, 334                ['$332pred']
label 334:
    bool336 = global(bool: <class 'bool'>)   ['bool336']
    $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$336pred', 'bool336', 'invert']
    branch $336pred, 338, 348                ['$336pred']
label 338:
    $const338.0 = const(float, 1.0)          ['$const338.0']
    $binop_truediv342.2 = $const338.0 / r    ['$binop_truediv342.2', '$const338.0', 'r']
    $phi350.0 = $binop_truediv342.2          ['$binop_truediv342.2', '$phi350.0']
    jump 350                                 []
label 348:
    $phi350.0 = r                            ['$phi350.0', 'r']
    jump 350                                 []
label 350:
    $350return_value.1 = cast(value=$phi350.0) ['$350return_value.1', '$phi350.0']
    return $350return_value.1                ['$350return_value.1']

2023-08-01 10:03:59,372 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,372 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,372 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,372 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,372 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,372 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,372 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,372 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,372 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,372 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,372 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,372 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,372 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,372 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,372 [DEBUG] ==== SSA block analysis pass on 62
2023-08-01 10:03:59,372 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,372 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,372 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,372 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,372 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,372 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,372 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,372 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,372 [DEBUG] ==== SSA block analysis pass on 84
2023-08-01 10:03:59,372 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,372 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,372 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 98
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,373 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,373 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 180
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 182
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: invert = const(bool, False)
2023-08-01 10:03:59,373 [DEBUG] on stmt: exp = b
2023-08-01 10:03:59,373 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 190
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-08-01 10:03:59,373 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,373 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 202
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,373 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 270
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-08-01 10:03:59,373 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,373 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 282
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-01 10:03:59,373 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,373 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 292
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,373 [DEBUG] on stmt: r = $binop_imul296.2
2023-08-01 10:03:59,373 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 302
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,373 [DEBUG] on stmt: exp = $binop_irshift306.2
2023-08-01 10:03:59,373 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,373 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-08-01 10:03:59,373 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-08-01 10:03:59,373 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,373 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 334
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,373 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 338
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,373 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-01 10:03:59,373 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,373 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 348
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: $phi350.0 = r
2023-08-01 10:03:59,373 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,373 [DEBUG] ==== SSA block analysis pass on 350
2023-08-01 10:03:59,373 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17198f4d0>
2023-08-01 10:03:59,373 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-01 10:03:59,373 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,374 [DEBUG] defs defaultdict(<class 'list'>,
            {'$100pred': [<numba.core.ir.Assign object at 0x1717d5650>],
             '$194compare_op.2': [<numba.core.ir.Assign object at 0x171820ad0>],
             '$200pred': [<numba.core.ir.Assign object at 0x171823750>],
             '$202load_global.0': [<numba.core.ir.Assign object at 0x1718210d0>],
             '$214load_attr.2': [<numba.core.ir.Assign object at 0x171820cd0>],
             '$226load_global.4': [<numba.core.ir.Assign object at 0x171832110>],
             '$244call.7': [<numba.core.ir.Assign object at 0x1718333d0>],
             '$258call.8': [<numba.core.ir.Assign object at 0x171830810>],
             '$268return_value.9': [<numba.core.ir.Assign object at 0x171830d50>],
             '$274compare_op.2': [<numba.core.ir.Assign object at 0x171831f50>],
             '$280pred': [<numba.core.ir.Assign object at 0x171833210>],
             '$290pred': [<numba.core.ir.Assign object at 0x1718be890>],
             '$30load_deref.5': [<numba.core.ir.Assign object at 0x1715a4e10>],
             '$326compare_op.8': [<numba.core.ir.Assign object at 0x1718bc750>],
             '$332pred': [<numba.core.ir.Assign object at 0x1718bc390>],
             '$336pred': [<numba.core.ir.Assign object at 0x1718be350>],
             '$350return_value.1': [<numba.core.ir.Assign object at 0x1714e4790>],
             '$54compare_op.10': [<numba.core.ir.Assign object at 0x1717d6910>],
             '$60pred': [<numba.core.ir.Assign object at 0x1717d6bd0>],
             '$76compare_op.5': [<numba.core.ir.Assign object at 0x1717d5b90>],
             '$82pred': [<numba.core.ir.Assign object at 0x1717d7a90>],
             '$84load_global.0': [<numba.core.ir.Assign object at 0x1717d7290>],
             '$8load_deref.1': [<numba.core.ir.Assign object at 0x1719778d0>],
             '$98load_deref.0': [<numba.core.ir.Assign object at 0x1717d5c90>],
             '$binop_and_286.2': [<numba.core.ir.Assign object at 0x1718308d0>],
             '$binop_imul296.2': [<numba.core.ir.Assign object at 0x1718bf110>],
             '$binop_imul316.5': [<numba.core.ir.Assign object at 0x1718be4d0>],
             '$binop_irshift306.2': [<numba.core.ir.Assign object at 0x1718bf0d0>],
             '$binop_truediv342.2': [<numba.core.ir.Assign object at 0x1714e43d0>],
             '$const10.2': [<numba.core.ir.Assign object at 0x171798e50>],
             '$const192.1': [<numba.core.ir.Assign object at 0x1718202d0>],
             '$const272.1': [<numba.core.ir.Assign object at 0x171832610>],
             '$const284.1': [<numba.core.ir.Assign object at 0x171832b90>],
             '$const304.1': [<numba.core.ir.Assign object at 0x1718beed0>],
             '$const324.7': [<numba.core.ir.Assign object at 0x1718bcc50>],
             '$const338.0': [<numba.core.ir.Assign object at 0x1718bda90>],
             '$const52.9': [<numba.core.ir.Assign object at 0x1716bbb90>],
             '$const74.4': [<numba.core.ir.Assign object at 0x1717d7a50>],
             '$phi350.0': [<numba.core.ir.Assign object at 0x1714e4ed0>,
                           <numba.core.ir.Assign object at 0x1714e7390>],
             'a': [<numba.core.ir.Assign object at 0x17179a1d0>],
             'a.1': [<numba.core.ir.Assign object at 0x1715a58d0>,
                     <numba.core.ir.Assign object at 0x171647c90>],
             'b': [<numba.core.ir.Assign object at 0x1717992d0>],
             'bool100': [<numba.core.ir.Assign object at 0x1717d5310>],
             'bool200': [<numba.core.ir.Assign object at 0x1718229d0>],
             'bool280': [<numba.core.ir.Assign object at 0x171832010>],
             'bool290': [<numba.core.ir.Assign object at 0x1718bdad0>],
             'bool332': [<numba.core.ir.Assign object at 0x1718bc650>],
             'bool336': [<numba.core.ir.Assign object at 0x1718bc490>],
             'bool60': [<numba.core.ir.Assign object at 0x1717d6a50>],
             'bool82': [<numba.core.ir.Assign object at 0x1717d6190>],
             'exp': [<numba.core.ir.Assign object at 0x1717d73d0>,
                     <numba.core.ir.Assign object at 0x1713e88d0>,
                     <numba.core.ir.Assign object at 0x1718bdd90>],
             'invert': [<numba.core.ir.Assign object at 0x1717d6e50>,
                        <numba.core.ir.Assign object at 0x1713eab50>],
             'r': [<numba.core.ir.Assign object at 0x1717b9110>,
                   <numba.core.ir.Assign object at 0x1718bcf10>]})
2023-08-01 10:03:59,374 [DEBUG] SSA violators {'a.1', 'r', 'exp', '$phi350.0', 'invert'}
2023-08-01 10:03:59,374 [DEBUG] Fix SSA violator on var a.1
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,374 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,374 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,374 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] first assign: a.1
2023-08-01 10:03:59,374 [DEBUG] replaced with: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,374 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,374 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,374 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 84
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,374 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 98
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,374 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 180
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 182
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: invert = const(bool, False)
2023-08-01 10:03:59,374 [DEBUG] on stmt: exp = b
2023-08-01 10:03:59,374 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 190
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-08-01 10:03:59,374 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 202
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,374 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 270
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-08-01 10:03:59,374 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 282
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-01 10:03:59,374 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,374 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,374 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,374 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,374 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,374 [DEBUG] on stmt: r = $binop_imul296.2
2023-08-01 10:03:59,374 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,374 [DEBUG] ==== SSA block rewrite pass on 302
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,375 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,375 [DEBUG] on stmt: exp = $binop_irshift306.2
2023-08-01 10:03:59,375 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,375 [DEBUG] on stmt: a.1 = $binop_imul316.5
2023-08-01 10:03:59,375 [DEBUG] replaced with: a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,375 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-08-01 10:03:59,375 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,375 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 334
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,375 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,375 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 338
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,375 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-01 10:03:59,375 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,375 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 348
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,375 [DEBUG] on stmt: $phi350.0 = r
2023-08-01 10:03:59,375 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 350
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x28a9b9750>
2023-08-01 10:03:59,375 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-01 10:03:59,375 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,375 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x28a98eb10>],
             302: [<numba.core.ir.Assign object at 0x171811550>]})
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,375 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,375 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,375 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,375 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,375 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,375 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,375 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,375 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,375 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,375 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 84
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,375 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,375 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 98
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,375 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,375 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,375 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 180
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,375 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 182
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,375 [DEBUG] on stmt: invert = const(bool, False)
2023-08-01 10:03:59,375 [DEBUG] on stmt: exp = b
2023-08-01 10:03:59,375 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 190
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,375 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-08-01 10:03:59,375 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,375 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,375 [DEBUG] ==== SSA block rewrite pass on 202
2023-08-01 10:03:59,375 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,375 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,375 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,375 [DEBUG] find_def var='a.1' stmt=$258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,376 [DEBUG] find_def_from_top label 202
2023-08-01 10:03:59,376 [DEBUG] idom 190 from label 202
2023-08-01 10:03:59,376 [DEBUG] find_def_from_bottom label 190
2023-08-01 10:03:59,376 [DEBUG] find_def_from_top label 190
2023-08-01 10:03:59,376 [DEBUG] idom 0 from label 190
2023-08-01 10:03:59,376 [DEBUG] find_def_from_bottom label 0
2023-08-01 10:03:59,376 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,376 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,376 [DEBUG] ==== SSA block rewrite pass on 270
2023-08-01 10:03:59,376 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,376 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,376 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-08-01 10:03:59,376 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,376 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,376 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,376 [DEBUG] ==== SSA block rewrite pass on 282
2023-08-01 10:03:59,376 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,376 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,376 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-01 10:03:59,376 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,376 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,376 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,376 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,376 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,376 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,376 [DEBUG] find_def var='a.1' stmt=$binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,376 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,376 [DEBUG] idom 282 from label 292
2023-08-01 10:03:59,376 [DEBUG] find_def_from_bottom label 282
2023-08-01 10:03:59,376 [DEBUG] find_def_from_top label 282
2023-08-01 10:03:59,376 [DEBUG] insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-08-01 10:03:59,376 [DEBUG] find_def_from_bottom label 302
2023-08-01 10:03:59,376 [DEBUG] incoming_def a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,376 [DEBUG] find_def_from_bottom label 270
2023-08-01 10:03:59,376 [DEBUG] find_def_from_top label 270
2023-08-01 10:03:59,376 [DEBUG] idom 190 from label 270
2023-08-01 10:03:59,376 [DEBUG] find_def_from_bottom label 190
2023-08-01 10:03:59,376 [DEBUG] find_def_from_top label 190
2023-08-01 10:03:59,376 [DEBUG] idom 0 from label 190
2023-08-01 10:03:59,376 [DEBUG] find_def_from_bottom label 0
2023-08-01 10:03:59,376 [DEBUG] incoming_def a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,376 [DEBUG] replaced with: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,376 [DEBUG] on stmt: r = $binop_imul296.2
2023-08-01 10:03:59,376 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,376 [DEBUG] ==== SSA block rewrite pass on 302
2023-08-01 10:03:59,376 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,376 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,376 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,376 [DEBUG] on stmt: exp = $binop_irshift306.2
2023-08-01 10:03:59,376 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,376 [DEBUG] find_def var='a.1' stmt=$binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,376 [DEBUG] find_def_from_top label 302
2023-08-01 10:03:59,376 [DEBUG] idom 282 from label 302
2023-08-01 10:03:59,376 [DEBUG] find_def_from_bottom label 282
2023-08-01 10:03:59,376 [DEBUG] replaced with: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,376 [DEBUG] on stmt: a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,376 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,376 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-08-01 10:03:59,376 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,376 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,376 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,376 [DEBUG] ==== SSA block rewrite pass on 334
2023-08-01 10:03:59,376 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,376 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,376 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,376 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,376 [DEBUG] ==== SSA block rewrite pass on 338
2023-08-01 10:03:59,376 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,376 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,376 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-01 10:03:59,376 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,376 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,376 [DEBUG] ==== SSA block rewrite pass on 348
2023-08-01 10:03:59,376 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,376 [DEBUG] on stmt: $phi350.0 = r
2023-08-01 10:03:59,376 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,376 [DEBUG] ==== SSA block rewrite pass on 350
2023-08-01 10:03:59,376 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171799d50>
2023-08-01 10:03:59,376 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-01 10:03:59,376 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,376 [DEBUG] Fix SSA violator on var r
2023-08-01 10:03:59,376 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,376 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,376 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,377 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,377 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] first assign: r
2023-08-01 10:03:59,377 [DEBUG] replaced with: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,377 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,377 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,377 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,377 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 84
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,377 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 98
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,377 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 180
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 182
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: invert = const(bool, False)
2023-08-01 10:03:59,377 [DEBUG] on stmt: exp = b
2023-08-01 10:03:59,377 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 190
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-08-01 10:03:59,377 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 202
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,377 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 270
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-08-01 10:03:59,377 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 282
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,377 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-01 10:03:59,377 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,377 [DEBUG] on stmt: r = $binop_imul296.2
2023-08-01 10:03:59,377 [DEBUG] replaced with: r.1 = $binop_imul296.2
2023-08-01 10:03:59,377 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,377 [DEBUG] ==== SSA block rewrite pass on 302
2023-08-01 10:03:59,377 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,377 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,377 [DEBUG] on stmt: exp = $binop_irshift306.2
2023-08-01 10:03:59,377 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,377 [DEBUG] on stmt: a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,377 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-08-01 10:03:59,377 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,377 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,377 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 334
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,378 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,378 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 338
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,378 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-01 10:03:59,378 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,378 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 348
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,378 [DEBUG] on stmt: $phi350.0 = r
2023-08-01 10:03:59,378 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 350
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171812110>
2023-08-01 10:03:59,378 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-01 10:03:59,378 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,378 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x17183e210>],
             292: [<numba.core.ir.Assign object at 0x171798610>]})
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,378 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,378 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,378 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,378 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,378 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,378 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,378 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,378 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,378 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,378 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 84
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,378 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,378 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 98
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,378 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,378 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,378 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 180
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,378 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 182
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,378 [DEBUG] on stmt: invert = const(bool, False)
2023-08-01 10:03:59,378 [DEBUG] on stmt: exp = b
2023-08-01 10:03:59,378 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 190
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,378 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-08-01 10:03:59,378 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,378 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 202
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,378 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,378 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,378 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,378 [DEBUG] ==== SSA block rewrite pass on 270
2023-08-01 10:03:59,378 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,378 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,379 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-08-01 10:03:59,379 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,379 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,379 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,379 [DEBUG] ==== SSA block rewrite pass on 282
2023-08-01 10:03:59,379 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,379 [DEBUG] on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,379 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,379 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-01 10:03:59,379 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,379 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,379 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,379 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,379 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,379 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,379 [DEBUG] find_def var='r' stmt=$binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,379 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,379 [DEBUG] idom 282 from label 292
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 282
2023-08-01 10:03:59,379 [DEBUG] find_def_from_top label 282
2023-08-01 10:03:59,379 [DEBUG] insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 302
2023-08-01 10:03:59,379 [DEBUG] find_def_from_top label 302
2023-08-01 10:03:59,379 [DEBUG] insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 302
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 282
2023-08-01 10:03:59,379 [DEBUG] incoming_def r.2 = phi(incoming_values=[], incoming_blocks=[])
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,379 [DEBUG] incoming_def r.1 = $binop_imul296.2
2023-08-01 10:03:59,379 [DEBUG] incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 270
2023-08-01 10:03:59,379 [DEBUG] find_def_from_top label 270
2023-08-01 10:03:59,379 [DEBUG] idom 190 from label 270
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 190
2023-08-01 10:03:59,379 [DEBUG] find_def_from_top label 190
2023-08-01 10:03:59,379 [DEBUG] idom 0 from label 190
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 0
2023-08-01 10:03:59,379 [DEBUG] incoming_def r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,379 [DEBUG] replaced with: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,379 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-08-01 10:03:59,379 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,379 [DEBUG] ==== SSA block rewrite pass on 302
2023-08-01 10:03:59,379 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,379 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,379 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,379 [DEBUG] on stmt: exp = $binop_irshift306.2
2023-08-01 10:03:59,379 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,379 [DEBUG] on stmt: a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,379 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,379 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-08-01 10:03:59,379 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,379 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,379 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,379 [DEBUG] ==== SSA block rewrite pass on 334
2023-08-01 10:03:59,379 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,379 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,379 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,379 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,379 [DEBUG] ==== SSA block rewrite pass on 338
2023-08-01 10:03:59,379 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,379 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,379 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r
2023-08-01 10:03:59,379 [DEBUG] find_def var='r' stmt=$binop_truediv342.2 = $const338.0 / r
2023-08-01 10:03:59,379 [DEBUG] find_def_from_top label 338
2023-08-01 10:03:59,379 [DEBUG] idom 334 from label 338
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 334
2023-08-01 10:03:59,379 [DEBUG] find_def_from_top label 334
2023-08-01 10:03:59,379 [DEBUG] insert phi node r.4 = phi(incoming_values=[], incoming_blocks=[]) at 334
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 302
2023-08-01 10:03:59,379 [DEBUG] incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 270
2023-08-01 10:03:59,379 [DEBUG] find_def_from_top label 270
2023-08-01 10:03:59,379 [DEBUG] idom 190 from label 270
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 190
2023-08-01 10:03:59,379 [DEBUG] find_def_from_top label 190
2023-08-01 10:03:59,379 [DEBUG] idom 0 from label 190
2023-08-01 10:03:59,379 [DEBUG] find_def_from_bottom label 0
2023-08-01 10:03:59,379 [DEBUG] incoming_def r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,379 [DEBUG] replaced with: $binop_truediv342.2 = $const338.0 / r.4
2023-08-01 10:03:59,379 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,379 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,379 [DEBUG] ==== SSA block rewrite pass on 348
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,380 [DEBUG] on stmt: $phi350.0 = r
2023-08-01 10:03:59,380 [DEBUG] find_def var='r' stmt=$phi350.0 = r
2023-08-01 10:03:59,380 [DEBUG] find_def_from_top label 348
2023-08-01 10:03:59,380 [DEBUG] idom 334 from label 348
2023-08-01 10:03:59,380 [DEBUG] find_def_from_bottom label 334
2023-08-01 10:03:59,380 [DEBUG] replaced with: $phi350.0 = r.4
2023-08-01 10:03:59,380 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,380 [DEBUG] ==== SSA block rewrite pass on 350
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171310890>
2023-08-01 10:03:59,380 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-01 10:03:59,380 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,380 [DEBUG] Fix SSA violator on var exp
2023-08-01 10:03:59,380 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,380 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,380 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,380 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,380 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,380 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,380 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,380 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,380 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,380 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,380 [DEBUG] first assign: exp
2023-08-01 10:03:59,380 [DEBUG] replaced with: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,380 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,380 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,380 [DEBUG] ==== SSA block rewrite pass on 84
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,380 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,380 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,380 [DEBUG] ==== SSA block rewrite pass on 98
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,380 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,380 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,380 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,380 [DEBUG] ==== SSA block rewrite pass on 180
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,380 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,380 [DEBUG] ==== SSA block rewrite pass on 182
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,380 [DEBUG] on stmt: invert = const(bool, False)
2023-08-01 10:03:59,380 [DEBUG] on stmt: exp = b
2023-08-01 10:03:59,380 [DEBUG] replaced with: exp.1 = b
2023-08-01 10:03:59,380 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,380 [DEBUG] ==== SSA block rewrite pass on 190
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,380 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-08-01 10:03:59,380 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,380 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,380 [DEBUG] ==== SSA block rewrite pass on 202
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,380 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,380 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,380 [DEBUG] ==== SSA block rewrite pass on 270
2023-08-01 10:03:59,380 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,380 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,380 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-08-01 10:03:59,381 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,381 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 282
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,381 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,381 [DEBUG] on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,381 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-01 10:03:59,381 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,381 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,381 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,381 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-08-01 10:03:59,381 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 302
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,381 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-01 10:03:59,381 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,381 [DEBUG] on stmt: exp = $binop_irshift306.2
2023-08-01 10:03:59,381 [DEBUG] replaced with: exp.2 = $binop_irshift306.2
2023-08-01 10:03:59,381 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,381 [DEBUG] on stmt: a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,381 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-08-01 10:03:59,381 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,381 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 334
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,381 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,381 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,381 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 338
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,381 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-08-01 10:03:59,381 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,381 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 348
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,381 [DEBUG] on stmt: $phi350.0 = r.4
2023-08-01 10:03:59,381 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 350
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x170fda8d0>
2023-08-01 10:03:59,381 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-01 10:03:59,381 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,381 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {62: [<numba.core.ir.Assign object at 0x17153c610>],
             182: [<numba.core.ir.Assign object at 0x171799550>],
             302: [<numba.core.ir.Assign object at 0x1715a4290>]})
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,381 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,381 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,381 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,381 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,381 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,381 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,381 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,381 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,381 [DEBUG] find_def var='exp' stmt=$76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,381 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,381 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 84
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,381 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,381 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,381 [DEBUG] ==== SSA block rewrite pass on 98
2023-08-01 10:03:59,381 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,381 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,381 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,381 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,382 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,382 [DEBUG] ==== SSA block rewrite pass on 180
2023-08-01 10:03:59,382 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,382 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,382 [DEBUG] ==== SSA block rewrite pass on 182
2023-08-01 10:03:59,382 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,382 [DEBUG] on stmt: invert = const(bool, False)
2023-08-01 10:03:59,382 [DEBUG] on stmt: exp.1 = b
2023-08-01 10:03:59,382 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,382 [DEBUG] ==== SSA block rewrite pass on 190
2023-08-01 10:03:59,382 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,382 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $194compare_op.2 = exp > $const192.1
2023-08-01 10:03:59,382 [DEBUG] find_def var='exp' stmt=$194compare_op.2 = exp > $const192.1
2023-08-01 10:03:59,382 [DEBUG] find_def_from_top label 190
2023-08-01 10:03:59,382 [DEBUG] insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 190
2023-08-01 10:03:59,382 [DEBUG] find_def_from_bottom label 180
2023-08-01 10:03:59,382 [DEBUG] find_def_from_top label 180
2023-08-01 10:03:59,382 [DEBUG] idom 98 from label 180
2023-08-01 10:03:59,382 [DEBUG] find_def_from_bottom label 98
2023-08-01 10:03:59,382 [DEBUG] find_def_from_top label 98
2023-08-01 10:03:59,382 [DEBUG] idom 62 from label 98
2023-08-01 10:03:59,382 [DEBUG] find_def_from_bottom label 62
2023-08-01 10:03:59,382 [DEBUG] incoming_def exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,382 [DEBUG] find_def_from_bottom label 182
2023-08-01 10:03:59,382 [DEBUG] incoming_def exp.1 = b
2023-08-01 10:03:59,382 [DEBUG] replaced with: $194compare_op.2 = exp.3 > $const192.1
2023-08-01 10:03:59,382 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,382 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,382 [DEBUG] ==== SSA block rewrite pass on 202
2023-08-01 10:03:59,382 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,382 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,382 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,382 [DEBUG] ==== SSA block rewrite pass on 270
2023-08-01 10:03:59,382 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,382 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $274compare_op.2 = exp != $const272.1
2023-08-01 10:03:59,382 [DEBUG] find_def var='exp' stmt=$274compare_op.2 = exp != $const272.1
2023-08-01 10:03:59,382 [DEBUG] find_def_from_top label 270
2023-08-01 10:03:59,382 [DEBUG] idom 190 from label 270
2023-08-01 10:03:59,382 [DEBUG] find_def_from_bottom label 190
2023-08-01 10:03:59,382 [DEBUG] replaced with: $274compare_op.2 = exp.3 != $const272.1
2023-08-01 10:03:59,382 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,382 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,382 [DEBUG] ==== SSA block rewrite pass on 282
2023-08-01 10:03:59,382 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,382 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,382 [DEBUG] on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,382 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $binop_and_286.2 = exp & $const284.1
2023-08-01 10:03:59,382 [DEBUG] find_def var='exp' stmt=$binop_and_286.2 = exp & $const284.1
2023-08-01 10:03:59,382 [DEBUG] find_def_from_top label 282
2023-08-01 10:03:59,382 [DEBUG] insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 282
2023-08-01 10:03:59,382 [DEBUG] find_def_from_bottom label 302
2023-08-01 10:03:59,382 [DEBUG] incoming_def exp.2 = $binop_irshift306.2
2023-08-01 10:03:59,382 [DEBUG] find_def_from_bottom label 270
2023-08-01 10:03:59,382 [DEBUG] find_def_from_top label 270
2023-08-01 10:03:59,382 [DEBUG] idom 190 from label 270
2023-08-01 10:03:59,382 [DEBUG] find_def_from_bottom label 190
2023-08-01 10:03:59,382 [DEBUG] incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-01 10:03:59,382 [DEBUG] replaced with: $binop_and_286.2 = exp.4 & $const284.1
2023-08-01 10:03:59,382 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,382 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,382 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,382 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,382 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,382 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-08-01 10:03:59,382 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,382 [DEBUG] ==== SSA block rewrite pass on 302
2023-08-01 10:03:59,382 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,382 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-01 10:03:59,382 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,382 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,382 [DEBUG] find_def var='exp' stmt=$binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,382 [DEBUG] find_def_from_top label 302
2023-08-01 10:03:59,382 [DEBUG] idom 282 from label 302
2023-08-01 10:03:59,382 [DEBUG] find_def_from_bottom label 282
2023-08-01 10:03:59,382 [DEBUG] replaced with: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,383 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-08-01 10:03:59,383 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,383 [DEBUG] on stmt: a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,383 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $326compare_op.8 = exp != $const324.7
2023-08-01 10:03:59,383 [DEBUG] find_def var='exp' stmt=$326compare_op.8 = exp != $const324.7
2023-08-01 10:03:59,383 [DEBUG] replaced with: $326compare_op.8 = exp.2 != $const324.7
2023-08-01 10:03:59,383 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,383 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 334
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,383 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,383 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,383 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 338
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,383 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-08-01 10:03:59,383 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,383 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 348
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,383 [DEBUG] on stmt: $phi350.0 = r.4
2023-08-01 10:03:59,383 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 350
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1715a4390>
2023-08-01 10:03:59,383 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-01 10:03:59,383 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,383 [DEBUG] Fix SSA violator on var $phi350.0
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,383 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,383 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,383 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,383 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,383 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,383 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,383 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,383 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,383 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,383 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 84
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,383 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,383 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 98
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,383 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,383 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,383 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 180
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,383 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 182
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,383 [DEBUG] on stmt: invert = const(bool, False)
2023-08-01 10:03:59,383 [DEBUG] on stmt: exp.1 = b
2023-08-01 10:03:59,383 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 190
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,383 [DEBUG] on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-01 10:03:59,383 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-01 10:03:59,383 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,383 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 202
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,383 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,383 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,383 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,383 [DEBUG] ==== SSA block rewrite pass on 270
2023-08-01 10:03:59,383 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,384 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-01 10:03:59,384 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,384 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 282
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,384 [DEBUG] on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,384 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,384 [DEBUG] on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,384 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-01 10:03:59,384 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,384 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,384 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,384 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-08-01 10:03:59,384 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 302
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,384 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-01 10:03:59,384 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,384 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-08-01 10:03:59,384 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,384 [DEBUG] on stmt: a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,384 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-01 10:03:59,384 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,384 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 334
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,384 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,384 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,384 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 338
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,384 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-08-01 10:03:59,384 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,384 [DEBUG] first assign: $phi350.0
2023-08-01 10:03:59,384 [DEBUG] replaced with: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,384 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 348
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,384 [DEBUG] on stmt: $phi350.0 = r.4
2023-08-01 10:03:59,384 [DEBUG] replaced with: $phi350.0.1 = r.4
2023-08-01 10:03:59,384 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 350
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171798110>
2023-08-01 10:03:59,384 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-01 10:03:59,384 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,384 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {338: [<numba.core.ir.Assign object at 0x1715a5790>],
             348: [<numba.core.ir.Assign object at 0x1718e4d10>]})
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,384 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,384 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,384 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,384 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,384 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,384 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,384 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,384 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,384 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,384 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 84
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,384 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,384 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 98
2023-08-01 10:03:59,384 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,384 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,384 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,384 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,384 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,384 [DEBUG] ==== SSA block rewrite pass on 180
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 182
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: invert = const(bool, False)
2023-08-01 10:03:59,385 [DEBUG] on stmt: exp.1 = b
2023-08-01 10:03:59,385 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 190
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-01 10:03:59,385 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-01 10:03:59,385 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,385 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 202
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,385 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 270
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-01 10:03:59,385 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,385 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 282
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,385 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,385 [DEBUG] on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,385 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-01 10:03:59,385 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,385 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,385 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-08-01 10:03:59,385 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 302
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-01 10:03:59,385 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,385 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-08-01 10:03:59,385 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,385 [DEBUG] on stmt: a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,385 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-01 10:03:59,385 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,385 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 334
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,385 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,385 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 338
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,385 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-08-01 10:03:59,385 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,385 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 348
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: $phi350.0.1 = r.4
2023-08-01 10:03:59,385 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,385 [DEBUG] ==== SSA block rewrite pass on 350
2023-08-01 10:03:59,385 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1714e4890>
2023-08-01 10:03:59,385 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0)
2023-08-01 10:03:59,385 [DEBUG] find_def var='$phi350.0' stmt=$350return_value.1 = cast(value=$phi350.0)
2023-08-01 10:03:59,385 [DEBUG] find_def_from_top label 350
2023-08-01 10:03:59,385 [DEBUG] insert phi node $phi350.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 350
2023-08-01 10:03:59,385 [DEBUG] find_def_from_bottom label 338
2023-08-01 10:03:59,385 [DEBUG] incoming_def $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,385 [DEBUG] find_def_from_bottom label 348
2023-08-01 10:03:59,385 [DEBUG] incoming_def $phi350.0.1 = r.4
2023-08-01 10:03:59,385 [DEBUG] replaced with: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-01 10:03:59,386 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,386 [DEBUG] Fix SSA violator on var invert
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,386 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,386 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,386 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,386 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,386 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,386 [DEBUG] first assign: invert
2023-08-01 10:03:59,386 [DEBUG] replaced with: invert = const(bool, True)
2023-08-01 10:03:59,386 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,386 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,386 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 84
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,386 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 98
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,386 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,386 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 180
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 182
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: invert = const(bool, False)
2023-08-01 10:03:59,386 [DEBUG] replaced with: invert.1 = const(bool, False)
2023-08-01 10:03:59,386 [DEBUG] on stmt: exp.1 = b
2023-08-01 10:03:59,386 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 190
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-01 10:03:59,386 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-01 10:03:59,386 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,386 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 202
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,386 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 270
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-01 10:03:59,386 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,386 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 282
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,386 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,386 [DEBUG] on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,386 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-01 10:03:59,386 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,386 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,386 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-08-01 10:03:59,386 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,386 [DEBUG] ==== SSA block rewrite pass on 302
2023-08-01 10:03:59,386 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,386 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-01 10:03:59,386 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,386 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,386 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-08-01 10:03:59,386 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,386 [DEBUG] on stmt: a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,386 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-01 10:03:59,387 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 334
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,387 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,387 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 338
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,387 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-08-01 10:03:59,387 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,387 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 348
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,387 [DEBUG] on stmt: $phi350.0.1 = r.4
2023-08-01 10:03:59,387 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 350
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1715a45d0>
2023-08-01 10:03:59,387 [DEBUG] on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-08-01 10:03:59,387 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-01 10:03:59,387 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,387 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {62: [<numba.core.ir.Assign object at 0x17159dc50>],
             182: [<numba.core.ir.Assign object at 0x1714e5b10>]})
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,387 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,387 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $8load_deref.1 = freevar(tp: float32)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $const10.2 = const(int, 1)
2023-08-01 10:03:59,387 [DEBUG] on stmt: r = call $8load_deref.1($const10.2, func=$8load_deref.1, args=[Var($const10.2, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $30load_deref.5 = freevar(tp: float32)
2023-08-01 10:03:59,387 [DEBUG] on stmt: a.1 = call $30load_deref.5(a, func=$30load_deref.5, args=[Var(a, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $const52.9 = const(int, 0)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $54compare_op.10 = b < $const52.9
2023-08-01 10:03:59,387 [DEBUG] on stmt: bool60 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $60pred = call bool60($54compare_op.10, func=bool60, args=(Var($54compare_op.10, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: branch $60pred, 62, 182
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 62
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,387 [DEBUG] on stmt: invert = const(bool, True)
2023-08-01 10:03:59,387 [DEBUG] on stmt: exp = unary(fn=<built-in function neg>, value=b)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $const74.4 = const(int, 0)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $76compare_op.5 = exp < $const74.4
2023-08-01 10:03:59,387 [DEBUG] on stmt: bool82 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $82pred = call bool82($76compare_op.5, func=bool82, args=(Var($76compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: branch $82pred, 84, 98
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 84
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,387 [DEBUG] on stmt: $84load_global.0 = global(OverflowError: <class 'OverflowError'>)
2023-08-01 10:03:59,387 [DEBUG] on stmt: <static> raise <class 'OverflowError'>
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 98
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,387 [DEBUG] on stmt: $98load_deref.0 = freevar(is_integer: False)
2023-08-01 10:03:59,387 [DEBUG] on stmt: bool100 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $100pred = call bool100($98load_deref.0, func=bool100, args=(Var($98load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: jump 180
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 180
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,387 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 182
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,387 [DEBUG] on stmt: invert.1 = const(bool, False)
2023-08-01 10:03:59,387 [DEBUG] on stmt: exp.1 = b
2023-08-01 10:03:59,387 [DEBUG] on stmt: jump 190
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 190
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,387 [DEBUG] on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[180, 182])
2023-08-01 10:03:59,387 [DEBUG] on stmt: $const192.1 = const(int, 65536)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $194compare_op.2 = exp.3 > $const192.1
2023-08-01 10:03:59,387 [DEBUG] on stmt: bool200 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $200pred = call bool200($194compare_op.2, func=bool200, args=(Var($194compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: branch $200pred, 202, 270
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 202
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,387 [DEBUG] on stmt: $202load_global.0 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $214load_attr.2 = getattr(value=$202load_global.0, attr=pow)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $226load_global.4 = global(float: <class 'float'>)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $244call.7 = call $226load_global.4(b, func=$226load_global.4, args=[Var(b, numbers.py:214)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $258call.8 = call $214load_attr.2(a.1, $244call.7, func=$214load_attr.2, args=[Var(a.1, numbers.py:217), Var($244call.7, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $268return_value.9 = cast(value=$258call.8)
2023-08-01 10:03:59,387 [DEBUG] on stmt: return $268return_value.9
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 270
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,387 [DEBUG] on stmt: $const272.1 = const(int, 0)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $274compare_op.2 = exp.3 != $const272.1
2023-08-01 10:03:59,387 [DEBUG] on stmt: bool280 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,387 [DEBUG] on stmt: $280pred = call bool280($274compare_op.2, func=bool280, args=(Var($274compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,387 [DEBUG] on stmt: branch $280pred, 282, 334
2023-08-01 10:03:59,387 [DEBUG] ==== SSA block rewrite pass on 282
2023-08-01 10:03:59,387 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,387 [DEBUG] on stmt: exp.4 = phi(incoming_values=[Var(exp.2, numbers.py:240), Var(exp.3, numbers.py:234)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,388 [DEBUG] on stmt: r.2 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,388 [DEBUG] on stmt: a.1.2 = phi(incoming_values=[Var(a.1.1, numbers.py:241), Var(a.1, numbers.py:217)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,388 [DEBUG] on stmt: $const284.1 = const(int, 1)
2023-08-01 10:03:59,388 [DEBUG] on stmt: $binop_and_286.2 = exp.4 & $const284.1
2023-08-01 10:03:59,388 [DEBUG] on stmt: bool290 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,388 [DEBUG] on stmt: $290pred = call bool290($binop_and_286.2, func=bool290, args=(Var($binop_and_286.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,388 [DEBUG] on stmt: branch $290pred, 292, 302
2023-08-01 10:03:59,388 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,388 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,388 [DEBUG] on stmt: $binop_imul296.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,388 [DEBUG] on stmt: r.1 = $binop_imul296.2
2023-08-01 10:03:59,388 [DEBUG] on stmt: jump 302
2023-08-01 10:03:59,388 [DEBUG] ==== SSA block rewrite pass on 302
2023-08-01 10:03:59,388 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,388 [DEBUG] on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[282, 292])
2023-08-01 10:03:59,388 [DEBUG] on stmt: $const304.1 = const(int, 1)
2023-08-01 10:03:59,388 [DEBUG] on stmt: $binop_irshift306.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const304.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,388 [DEBUG] on stmt: exp.2 = $binop_irshift306.2
2023-08-01 10:03:59,388 [DEBUG] on stmt: $binop_imul316.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,388 [DEBUG] on stmt: a.1.1 = $binop_imul316.5
2023-08-01 10:03:59,388 [DEBUG] on stmt: $const324.7 = const(int, 0)
2023-08-01 10:03:59,388 [DEBUG] on stmt: $326compare_op.8 = exp.2 != $const324.7
2023-08-01 10:03:59,388 [DEBUG] on stmt: bool332 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,388 [DEBUG] on stmt: $332pred = call bool332($326compare_op.8, func=bool332, args=(Var($326compare_op.8, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,388 [DEBUG] on stmt: branch $332pred, 282, 334
2023-08-01 10:03:59,388 [DEBUG] ==== SSA block rewrite pass on 334
2023-08-01 10:03:59,388 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,388 [DEBUG] on stmt: r.4 = phi(incoming_values=[Var(r.3, numbers.py:239), Var(r, numbers.py:216)], incoming_blocks=[302, 270])
2023-08-01 10:03:59,388 [DEBUG] on stmt: bool336 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,388 [DEBUG] on stmt: $336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,388 [DEBUG] find_def var='invert' stmt=$336pred = call bool336(invert, func=bool336, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,388 [DEBUG] find_def_from_top label 334
2023-08-01 10:03:59,388 [DEBUG] idom 270 from label 334
2023-08-01 10:03:59,388 [DEBUG] find_def_from_bottom label 270
2023-08-01 10:03:59,388 [DEBUG] find_def_from_top label 270
2023-08-01 10:03:59,388 [DEBUG] idom 190 from label 270
2023-08-01 10:03:59,388 [DEBUG] find_def_from_bottom label 190
2023-08-01 10:03:59,388 [DEBUG] find_def_from_top label 190
2023-08-01 10:03:59,388 [DEBUG] insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 190
2023-08-01 10:03:59,388 [DEBUG] find_def_from_bottom label 180
2023-08-01 10:03:59,388 [DEBUG] find_def_from_top label 180
2023-08-01 10:03:59,388 [DEBUG] idom 98 from label 180
2023-08-01 10:03:59,388 [DEBUG] find_def_from_bottom label 98
2023-08-01 10:03:59,388 [DEBUG] find_def_from_top label 98
2023-08-01 10:03:59,388 [DEBUG] idom 62 from label 98
2023-08-01 10:03:59,388 [DEBUG] find_def_from_bottom label 62
2023-08-01 10:03:59,388 [DEBUG] incoming_def invert = const(bool, True)
2023-08-01 10:03:59,388 [DEBUG] find_def_from_bottom label 182
2023-08-01 10:03:59,388 [DEBUG] incoming_def invert.1 = const(bool, False)
2023-08-01 10:03:59,388 [DEBUG] replaced with: $336pred = call bool336(invert.2, func=bool336, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,388 [DEBUG] on stmt: branch $336pred, 338, 348
2023-08-01 10:03:59,388 [DEBUG] ==== SSA block rewrite pass on 338
2023-08-01 10:03:59,388 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,388 [DEBUG] on stmt: $const338.0 = const(float, 1.0)
2023-08-01 10:03:59,388 [DEBUG] on stmt: $binop_truediv342.2 = $const338.0 / r.4
2023-08-01 10:03:59,388 [DEBUG] on stmt: $phi350.0 = $binop_truediv342.2
2023-08-01 10:03:59,388 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,388 [DEBUG] ==== SSA block rewrite pass on 348
2023-08-01 10:03:59,388 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,388 [DEBUG] on stmt: $phi350.0.1 = r.4
2023-08-01 10:03:59,388 [DEBUG] on stmt: jump 350
2023-08-01 10:03:59,388 [DEBUG] ==== SSA block rewrite pass on 350
2023-08-01 10:03:59,388 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x171798110>
2023-08-01 10:03:59,388 [DEBUG] on stmt: $phi350.0.2 = phi(incoming_values=[Var($phi350.0, numbers.py:243), Var($phi350.0.1, numbers.py:243)], incoming_blocks=[338, 348])
2023-08-01 10:03:59,388 [DEBUG] on stmt: $350return_value.1 = cast(value=$phi350.0.2)
2023-08-01 10:03:59,388 [DEBUG] on stmt: return $350return_value.1
2023-08-01 10:03:59,434 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=14)
           2	RESUME(arg=0, lineno=14)
           4	LOAD_GLOBAL(arg=1, lineno=31)
          16	LOAD_ATTR(arg=1, lineno=31)
          26	LOAD_FAST(arg=0, lineno=31)
          28	LOAD_ATTR(arg=2, lineno=31)
          38	LOAD_CONST(arg=1, lineno=31)
          40	BINARY_SUBSCR(arg=None, lineno=31)
          50	LOAD_FAST(arg=1, lineno=31)
          52	BUILD_TUPLE(arg=2, lineno=31)
          54	LOAD_GLOBAL(arg=0, lineno=31)
          66	LOAD_ATTR(arg=3, lineno=31)
          76	KW_NAMES(arg=2, lineno=31)
          78	PRECALL(arg=2, lineno=31)
          82	CALL(arg=2, lineno=31)
          92	STORE_FAST(arg=2, lineno=31)
          94	LOAD_GLOBAL(arg=9, lineno=32)
         106	LOAD_ATTR(arg=5, lineno=32)
         116	LOAD_FAST(arg=0, lineno=32)
         118	LOAD_ATTR(arg=2, lineno=32)
         128	LOAD_CONST(arg=1, lineno=32)
         130	BINARY_SUBSCR(arg=None, lineno=32)
         140	PRECALL(arg=1, lineno=32)
         144	CALL(arg=1, lineno=32)
         154	GET_ITER(arg=None, lineno=32)
>        156	FOR_ITER(arg=45, lineno=32)
         158	STORE_FAST(arg=3, lineno=32)
         160	LOAD_FAST(arg=0, lineno=34)
         162	LOAD_FAST(arg=3, lineno=34)
         164	BINARY_SUBSCR(arg=None, lineno=34)
         174	LOAD_METHOD(arg=6, lineno=34)
         196	LOAD_CONST(arg=3, lineno=34)
         198	KW_NAMES(arg=4, lineno=34)
         200	PRECALL(arg=1, lineno=34)
         204	CALL(arg=1, lineno=34)
         214	STORE_FAST(arg=4, lineno=34)
         216	LOAD_FAST(arg=4, lineno=35)
         218	LOAD_CONST(arg=5, lineno=35)
         220	LOAD_FAST(arg=1, lineno=35)
         222	BUILD_SLICE(arg=2, lineno=35)
         224	BINARY_SUBSCR(arg=None, lineno=35)
         234	STORE_FAST(arg=4, lineno=35)
         236	LOAD_FAST(arg=4, lineno=36)
         238	LOAD_FAST(arg=2, lineno=36)
         240	LOAD_FAST(arg=3, lineno=36)
         242	STORE_SUBSCR(arg=None, lineno=36)
         246	JUMP_BACKWARD(arg=46, lineno=36)
>        248	LOAD_FAST(arg=2, lineno=37)
         250	RETURN_VALUE(arg=None, lineno=37)
2023-08-01 10:03:59,434 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,434 [DEBUG] stack: []
2023-08-01 10:03:59,434 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,434 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=14)
2023-08-01 10:03:59,434 [DEBUG] stack []
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=14)
2023-08-01 10:03:59,435 [DEBUG] stack []
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack []
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=28, inst=LOAD_ATTR(arg=2, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$X26.3']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=38, inst=LOAD_CONST(arg=1, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$28load_attr.4']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=40, inst=BINARY_SUBSCR(arg=None, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$28load_attr.4', '$const38.5']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=50, inst=LOAD_FAST(arg=1, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$40binary_subscr.6']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=52, inst=BUILD_TUPLE(arg=2, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$40binary_subscr.6', '$n_neighbors50.7']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=54, inst=LOAD_GLOBAL(arg=0, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$52build_tuple.8']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=66, inst=LOAD_ATTR(arg=3, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$52build_tuple.8', '$54load_global.9']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=76, inst=KW_NAMES(arg=2, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$52build_tuple.8', '$66load_attr.10']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=78, inst=PRECALL(arg=2, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$52build_tuple.8', '$66load_attr.10']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=82, inst=CALL(arg=2, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$52build_tuple.8', '$66load_attr.10']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=92, inst=STORE_FAST(arg=2, lineno=31)
2023-08-01 10:03:59,435 [DEBUG] stack ['$82call.11']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=94, inst=LOAD_GLOBAL(arg=9, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack []
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=106, inst=LOAD_ATTR(arg=5, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$94.13', '$94load_global.12']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=116, inst=LOAD_FAST(arg=0, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$94.13', '$106load_attr.14']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=118, inst=LOAD_ATTR(arg=2, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$94.13', '$106load_attr.14', '$X116.15']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=128, inst=LOAD_CONST(arg=1, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$94.13', '$106load_attr.14', '$118load_attr.16']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=130, inst=BINARY_SUBSCR(arg=None, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$94.13', '$106load_attr.14', '$118load_attr.16', '$const128.17']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=140, inst=PRECALL(arg=1, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$94.13', '$106load_attr.14', '$130binary_subscr.18']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=144, inst=CALL(arg=1, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack ['$null$94.13', '$106load_attr.14', '$130binary_subscr.18']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=154, inst=GET_ITER(arg=None, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack ['$144call.19']
2023-08-01 10:03:59,435 [DEBUG] end state. edges=[Edge(pc=156, stack=('$154get_iter.20',), blockstack=(), npush=0)]
2023-08-01 10:03:59,435 [DEBUG] pending: deque([State(pc_initial=156 nstack_initial=1)])
2023-08-01 10:03:59,435 [DEBUG] stack: ['$phi156.0']
2023-08-01 10:03:59,435 [DEBUG] state.pc_initial: State(pc_initial=156 nstack_initial=1)
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=156, inst=FOR_ITER(arg=45, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack ['$phi156.0']
2023-08-01 10:03:59,435 [DEBUG] end state. edges=[Edge(pc=248, stack=(), blockstack=(), npush=0), Edge(pc=158, stack=('$phi156.0', '$156for_iter.2'), blockstack=(), npush=0)]
2023-08-01 10:03:59,435 [DEBUG] pending: deque([State(pc_initial=248 nstack_initial=0), State(pc_initial=158 nstack_initial=2)])
2023-08-01 10:03:59,435 [DEBUG] stack: []
2023-08-01 10:03:59,435 [DEBUG] state.pc_initial: State(pc_initial=248 nstack_initial=0)
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=248, inst=LOAD_FAST(arg=2, lineno=37)
2023-08-01 10:03:59,435 [DEBUG] stack []
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=250, inst=RETURN_VALUE(arg=None, lineno=37)
2023-08-01 10:03:59,435 [DEBUG] stack ['$knn_indices248.0']
2023-08-01 10:03:59,435 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,435 [DEBUG] pending: deque([State(pc_initial=158 nstack_initial=2)])
2023-08-01 10:03:59,435 [DEBUG] stack: ['$phi158.0', '$phi158.1']
2023-08-01 10:03:59,435 [DEBUG] state.pc_initial: State(pc_initial=158 nstack_initial=2)
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=158, inst=STORE_FAST(arg=3, lineno=32)
2023-08-01 10:03:59,435 [DEBUG] stack ['$phi158.0', '$phi158.1']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=160, inst=LOAD_FAST(arg=0, lineno=34)
2023-08-01 10:03:59,435 [DEBUG] stack ['$phi158.0']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=162, inst=LOAD_FAST(arg=3, lineno=34)
2023-08-01 10:03:59,435 [DEBUG] stack ['$phi158.0', '$X160.2']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=164, inst=BINARY_SUBSCR(arg=None, lineno=34)
2023-08-01 10:03:59,435 [DEBUG] stack ['$phi158.0', '$X160.2', '$row162.3']
2023-08-01 10:03:59,435 [DEBUG] dispatch pc=174, inst=LOAD_METHOD(arg=6, lineno=34)
2023-08-01 10:03:59,435 [DEBUG] stack ['$phi158.0', '$164binary_subscr.4']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=196, inst=LOAD_CONST(arg=3, lineno=34)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$null$174.5', '$174load_method.6']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=198, inst=KW_NAMES(arg=4, lineno=34)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$null$174.5', '$174load_method.6', '$const196.7']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=200, inst=PRECALL(arg=1, lineno=34)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$null$174.5', '$174load_method.6', '$const196.7']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=204, inst=CALL(arg=1, lineno=34)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$null$174.5', '$174load_method.6', '$const196.7']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=214, inst=STORE_FAST(arg=4, lineno=34)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$204call.8']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=216, inst=LOAD_FAST(arg=4, lineno=35)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=218, inst=LOAD_CONST(arg=5, lineno=35)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$v216.9']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=220, inst=LOAD_FAST(arg=1, lineno=35)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$v216.9', '$const218.10']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=222, inst=BUILD_SLICE(arg=2, lineno=35)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$v216.9', '$const218.10', '$n_neighbors220.11']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=224, inst=BINARY_SUBSCR(arg=None, lineno=35)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$v216.9', '$222build_slice.13']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=234, inst=STORE_FAST(arg=4, lineno=35)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$224binary_subscr.14']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=236, inst=LOAD_FAST(arg=4, lineno=36)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=238, inst=LOAD_FAST(arg=2, lineno=36)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$v236.15']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=240, inst=LOAD_FAST(arg=3, lineno=36)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$v236.15', '$knn_indices238.16']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=242, inst=STORE_SUBSCR(arg=None, lineno=36)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0', '$v236.15', '$knn_indices238.16', '$row240.17']
2023-08-01 10:03:59,436 [DEBUG] dispatch pc=246, inst=JUMP_BACKWARD(arg=46, lineno=36)
2023-08-01 10:03:59,436 [DEBUG] stack ['$phi158.0']
2023-08-01 10:03:59,436 [DEBUG] end state. edges=[Edge(pc=156, stack=('$phi158.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,436 [DEBUG] pending: deque([State(pc_initial=156 nstack_initial=1)])
2023-08-01 10:03:59,436 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,436 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=156 nstack_initial=1): {'$phi156.0'},
             State(pc_initial=158 nstack_initial=2): {'$phi158.1'},
             State(pc_initial=248 nstack_initial=0): set()})
2023-08-01 10:03:59,436 [DEBUG] defmap: {'$phi156.0': State(pc_initial=0 nstack_initial=0),
 '$phi158.1': State(pc_initial=156 nstack_initial=1)}
2023-08-01 10:03:59,436 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi156.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi158.0',
                            State(pc_initial=158 nstack_initial=2))},
             '$phi158.0': {('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi158.1': {('$156for_iter.2',
                            State(pc_initial=156 nstack_initial=1))}})
2023-08-01 10:03:59,436 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi156.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi156.0',
                            State(pc_initial=156 nstack_initial=1))},
             '$phi158.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi158.1': {('$156for_iter.2',
                            State(pc_initial=156 nstack_initial=1))}})
2023-08-01 10:03:59,436 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi156.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi158.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi158.1': {('$156for_iter.2',
                            State(pc_initial=156 nstack_initial=1))}})
2023-08-01 10:03:59,436 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi156.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi158.0': {('$154get_iter.20',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi158.1': {('$156for_iter.2',
                            State(pc_initial=156 nstack_initial=1))}})
2023-08-01 10:03:59,436 [DEBUG] keep phismap: {'$phi156.0': {('$154get_iter.20', State(pc_initial=0 nstack_initial=0))},
 '$phi158.1': {('$156for_iter.2', State(pc_initial=156 nstack_initial=1))}}
2023-08-01 10:03:59,436 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi156.0': '$154get_iter.20'},
             State(pc_initial=156 nstack_initial=1): {'$phi158.1': '$156for_iter.2'}})
2023-08-01 10:03:59,436 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,436 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$X26.3'}), (28, {'item': '$X26.3', 'res': '$28load_attr.4'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'res': '$const38.5'}), (40, {'index': '$const38.5', 'target': '$28load_attr.4', 'res': '$40binary_subscr.6'}), (42, {}), (44, {}), (46, {}), (48, {}), (50, {'res': '$n_neighbors50.7'}), (52, {'items': ['$40binary_subscr.6', '$n_neighbors50.7'], 'res': '$52build_tuple.8'}), (54, {'idx': 0, 'res': '$54load_global.9'}), (56, {}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {'item': '$54load_global.9', 'res': '$66load_attr.10'}), (68, {}), (70, {}), (72, {}), (74, {}), (78, {}), (80, {}), (82, {'func': '$16load_attr.2', 'args': ['$52build_tuple.8', '$66load_attr.10'], 'kw_names': 2, 'res': '$82call.11'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {'value': '$82call.11'}), (94, {'idx': 4, 'res': '$94load_global.12'}), (96, {}), (98, {}), (100, {}), (102, {}), (104, {}), (106, {'item': '$94load_global.12', 'res': '$106load_attr.14'}), (108, {}), (110, {}), (112, {}), (114, {}), (116, {'res': '$X116.15'}), (118, {'item': '$X116.15', 'res': '$118load_attr.16'}), (120, {}), (122, {}), (124, {}), (126, {}), (128, {'res': '$const128.17'}), (130, {'index': '$const128.17', 'target': '$118load_attr.16', 'res': '$130binary_subscr.18'}), (132, {}), (134, {}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {'func': '$106load_attr.14', 'args': ['$130binary_subscr.18'], 'kw_names': None, 'res': '$144call.19'}), (146, {}), (148, {}), (150, {}), (152, {}), (154, {'value': '$144call.19', 'res': '$154get_iter.20'})), outgoing_phis={'$phi156.0': '$154get_iter.20'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$154get_iter.20',)})
2023-08-01 10:03:59,436 [DEBUG] block_infos State(pc_initial=156 nstack_initial=1):
AdaptBlockInfo(insts=((156, {'iterator': '$phi156.0', 'pair': '$156for_iter.1', 'indval': '$156for_iter.2', 'pred': '$156for_iter.3'}),), outgoing_phis={'$phi158.1': '$156for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={248: (), 158: ('$phi156.0', '$156for_iter.2')})
2023-08-01 10:03:59,436 [DEBUG] block_infos State(pc_initial=158 nstack_initial=2):
AdaptBlockInfo(insts=((158, {'value': '$phi158.1'}), (160, {'res': '$X160.2'}), (162, {'res': '$row162.3'}), (164, {'index': '$row162.3', 'target': '$X160.2', 'res': '$164binary_subscr.4'}), (166, {}), (168, {}), (170, {}), (172, {}), (174, {'item': '$164binary_subscr.4', 'res': '$174load_method.6'}), (176, {}), (178, {}), (180, {}), (182, {}), (184, {}), (186, {}), (188, {}), (190, {}), (192, {}), (194, {}), (196, {'res': '$const196.7'}), (200, {}), (202, {}), (204, {'func': '$174load_method.6', 'args': ['$const196.7'], 'kw_names': 4, 'res': '$204call.8'}), (206, {}), (208, {}), (210, {}), (212, {}), (214, {'value': '$204call.8'}), (216, {'res': '$v216.9'}), (218, {'res': '$const218.10'}), (220, {'res': '$n_neighbors220.11'}), (222, {'start': '$const218.10', 'stop': '$n_neighbors220.11', 'step': None, 'res': '$222build_slice.13', 'slicevar': '$222build_slice.12'}), (224, {'index': '$222build_slice.13', 'target': '$v216.9', 'res': '$224binary_subscr.14'}), (226, {}), (228, {}), (230, {}), (232, {}), (234, {'value': '$224binary_subscr.14'}), (236, {'res': '$v236.15'}), (238, {'res': '$knn_indices238.16'}), (240, {'res': '$row240.17'}), (242, {'target': '$knn_indices238.16', 'index': '$row240.17', 'value': '$v236.15'}), (244, {}), (246, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: ('$phi158.0',)})
2023-08-01 10:03:59,436 [DEBUG] block_infos State(pc_initial=248 nstack_initial=0):
AdaptBlockInfo(insts=((248, {'res': '$knn_indices248.0'}), (250, {'retval': '$knn_indices248.0', 'castval': '$250return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,437 [DEBUG] label 0:
    X = arg(0, name=X)                       ['X']
    n_neighbors = arg(1, name=n_neighbors)   ['n_neighbors']
    $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=empty) ['$16load_attr.2', '$4load_global.0']
    $28load_attr.4 = getattr(value=X, attr=shape) ['$28load_attr.4', 'X']
    $const38.5 = const(int, 0)               ['$const38.5']
    $40binary_subscr.6 = getitem(value=$28load_attr.4, index=$const38.5, fn=<built-in function getitem>) ['$28load_attr.4', '$40binary_subscr.6', '$const38.5']
    $52build_tuple.8 = build_tuple(items=[Var($40binary_subscr.6, utils.py:31), Var(n_neighbors, utils.py:14)]) ['$40binary_subscr.6', '$52build_tuple.8', 'n_neighbors']
    $54load_global.9 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$54load_global.9']
    $66load_attr.10 = getattr(value=$54load_global.9, attr=int32) ['$54load_global.9', '$66load_attr.10']
    knn_indices = call $16load_attr.2($52build_tuple.8, func=$16load_attr.2, args=[Var($52build_tuple.8, utils.py:31)], kws=[('dtype', Var($66load_attr.10, utils.py:31))], vararg=None, varkwarg=None, target=None) ['$16load_attr.2', '$52build_tuple.8', '$66load_attr.10', 'knn_indices']
    $94load_global.12 = global(numba: <module 'numba' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numba/__init__.py'>) ['$94load_global.12']
    $106load_attr.14 = getattr(value=$94load_global.12, attr=prange) ['$106load_attr.14', '$94load_global.12']
    $118load_attr.16 = getattr(value=X, attr=shape) ['$118load_attr.16', 'X']
    $const128.17 = const(int, 0)             ['$const128.17']
    $130binary_subscr.18 = getitem(value=$118load_attr.16, index=$const128.17, fn=<built-in function getitem>) ['$118load_attr.16', '$130binary_subscr.18', '$const128.17']
    $144call.19 = call $106load_attr.14($130binary_subscr.18, func=$106load_attr.14, args=[Var($130binary_subscr.18, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None) ['$106load_attr.14', '$130binary_subscr.18', '$144call.19']
    $154get_iter.20 = getiter(value=$144call.19) ['$144call.19', '$154get_iter.20']
    $phi156.0 = $154get_iter.20              ['$154get_iter.20', '$phi156.0']
    jump 156                                 []
label 156:
    $156for_iter.1 = iternext(value=$phi156.0) ['$156for_iter.1', '$phi156.0']
    $156for_iter.2 = pair_first(value=$156for_iter.1) ['$156for_iter.1', '$156for_iter.2']
    $156for_iter.3 = pair_second(value=$156for_iter.1) ['$156for_iter.1', '$156for_iter.3']
    $phi158.1 = $156for_iter.2               ['$156for_iter.2', '$phi158.1']
    branch $156for_iter.3, 158, 248          ['$156for_iter.3']
label 158:
    row = $phi158.1                          ['$phi158.1', 'row']
    $164binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>) ['$164binary_subscr.4', 'X', 'row']
    $174load_method.6 = getattr(value=$164binary_subscr.4, attr=argsort) ['$164binary_subscr.4', '$174load_method.6']
    $const196.7 = const(str, quicksort)      ['$const196.7']
    v = call $174load_method.6(func=$174load_method.6, args=[], kws=[('kind', Var($const196.7, utils.py:34))], vararg=None, varkwarg=None, target=None) ['$174load_method.6', '$const196.7', 'v']
    $const218.10 = const(NoneType, None)     ['$const218.10']
    $222build_slice.12 = global(slice: <class 'slice'>) ['$222build_slice.12']
    $222build_slice.13 = call $222build_slice.12($const218.10, n_neighbors, func=$222build_slice.12, args=(Var($const218.10, utils.py:35), Var(n_neighbors, utils.py:14)), kws=(), vararg=None, varkwarg=None, target=None) ['$222build_slice.12', '$222build_slice.13', '$const218.10', 'n_neighbors']
    v = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>) ['$222build_slice.13', 'v', 'v']
    knn_indices[row] = v                     ['knn_indices', 'row', 'v']
    jump 156                                 []
label 248:
    $250return_value.1 = cast(value=knn_indices) ['$250return_value.1', 'knn_indices']
    return $250return_value.1                ['$250return_value.1']

2023-08-01 10:03:59,440 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,440 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x171526c50>
2023-08-01 10:03:59,440 [DEBUG] on stmt: X = arg(0, name=X)
2023-08-01 10:03:59,440 [DEBUG] on stmt: n_neighbors = arg(1, name=n_neighbors)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $28load_attr.4 = getattr(value=X, attr=shape)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $const38.5 = const(int, 0)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $40binary_subscr.6 = static_getitem(value=$28load_attr.4, index=0, index_var=$const38.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $52build_tuple.8 = build_tuple(items=[Var($40binary_subscr.6, utils.py:31), Var(n_neighbors, utils.py:14)])
2023-08-01 10:03:59,440 [DEBUG] on stmt: $54load_global.9 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $66load_attr.10 = getattr(value=$54load_global.9, attr=int32)
2023-08-01 10:03:59,440 [DEBUG] on stmt: knn_indices = call $16load_attr.2($52build_tuple.8, func=$16load_attr.2, args=[Var($52build_tuple.8, utils.py:31)], kws=[('dtype', Var($66load_attr.10, utils.py:31))], vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $94load_global.12 = global(numba: <module 'numba' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numba/__init__.py'>)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $106load_attr.14 = getattr(value=$94load_global.12, attr=prange)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $118load_attr.16 = getattr(value=X, attr=shape)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $const128.17 = const(int, 0)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $130binary_subscr.18 = static_getitem(value=$118load_attr.16, index=0, index_var=$const128.17, fn=<built-in function getitem>)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $144call.19 = call $106load_attr.14($130binary_subscr.18, func=$106load_attr.14, args=[Var($130binary_subscr.18, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $154get_iter.20 = getiter(value=$144call.19)
2023-08-01 10:03:59,440 [DEBUG] on stmt: $phi156.0 = $154get_iter.20
2023-08-01 10:03:59,441 [DEBUG] on stmt: jump 156
2023-08-01 10:03:59,441 [DEBUG] ==== SSA block analysis pass on 156
2023-08-01 10:03:59,441 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x171526c50>
2023-08-01 10:03:59,441 [DEBUG] on stmt: $156for_iter.1 = iternext(value=$phi156.0)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $156for_iter.2 = pair_first(value=$156for_iter.1)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $156for_iter.3 = pair_second(value=$156for_iter.1)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $phi158.1 = $156for_iter.2
2023-08-01 10:03:59,441 [DEBUG] on stmt: branch $156for_iter.3, 158, 248
2023-08-01 10:03:59,441 [DEBUG] ==== SSA block analysis pass on 158
2023-08-01 10:03:59,441 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x171526c50>
2023-08-01 10:03:59,441 [DEBUG] on stmt: row = $phi158.1
2023-08-01 10:03:59,441 [DEBUG] on stmt: $164binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $174load_method.6 = getattr(value=$164binary_subscr.4, attr=argsort)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $const196.7 = const(str, quicksort)
2023-08-01 10:03:59,441 [DEBUG] on stmt: v = call $174load_method.6(func=$174load_method.6, args=[], kws=[('kind', Var($const196.7, utils.py:34))], vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $const218.10 = const(NoneType, None)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $222build_slice.12 = global(slice: <class 'slice'>)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $222build_slice.13 = call $222build_slice.12($const218.10, n_neighbors, func=$222build_slice.12, args=(Var($const218.10, utils.py:35), Var(n_neighbors, utils.py:14)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,441 [DEBUG] on stmt: v = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>)
2023-08-01 10:03:59,441 [DEBUG] on stmt: knn_indices[row] = v
2023-08-01 10:03:59,441 [DEBUG] on stmt: jump 156
2023-08-01 10:03:59,441 [DEBUG] ==== SSA block analysis pass on 248
2023-08-01 10:03:59,441 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x171526c50>
2023-08-01 10:03:59,441 [DEBUG] on stmt: $250return_value.1 = cast(value=knn_indices)
2023-08-01 10:03:59,441 [DEBUG] on stmt: return $250return_value.1
2023-08-01 10:03:59,441 [DEBUG] defs defaultdict(<class 'list'>,
            {'$106load_attr.14': [<numba.core.ir.Assign object at 0x1718fb450>],
             '$118load_attr.16': [<numba.core.ir.Assign object at 0x1718f8bd0>],
             '$130binary_subscr.18': [<numba.core.ir.Assign object at 0x171627490>],
             '$144call.19': [<numba.core.ir.Assign object at 0x1718fbd90>],
             '$154get_iter.20': [<numba.core.ir.Assign object at 0x1718f9350>],
             '$156for_iter.1': [<numba.core.ir.Assign object at 0x1718fb9d0>],
             '$156for_iter.2': [<numba.core.ir.Assign object at 0x17178d9d0>],
             '$156for_iter.3': [<numba.core.ir.Assign object at 0x17178e1d0>],
             '$164binary_subscr.4': [<numba.core.ir.Assign object at 0x17178e550>],
             '$16load_attr.2': [<numba.core.ir.Assign object at 0x1718f9c90>],
             '$174load_method.6': [<numba.core.ir.Assign object at 0x17178c350>],
             '$222build_slice.12': [<numba.core.ir.Assign object at 0x17178f690>],
             '$222build_slice.13': [<numba.core.ir.Assign object at 0x17178f7d0>],
             '$250return_value.1': [<numba.core.ir.Assign object at 0x17178e310>],
             '$28load_attr.4': [<numba.core.ir.Assign object at 0x1718fa490>],
             '$40binary_subscr.6': [<numba.core.ir.Assign object at 0x1716274d0>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x1718fa5d0>],
             '$52build_tuple.8': [<numba.core.ir.Assign object at 0x1718fb890>],
             '$54load_global.9': [<numba.core.ir.Assign object at 0x1718fbe10>],
             '$66load_attr.10': [<numba.core.ir.Assign object at 0x1718f9090>],
             '$94load_global.12': [<numba.core.ir.Assign object at 0x1718f8f50>],
             '$const128.17': [<numba.core.ir.Assign object at 0x1718fb5d0>],
             '$const196.7': [<numba.core.ir.Assign object at 0x17178cf10>],
             '$const218.10': [<numba.core.ir.Assign object at 0x17178e7d0>],
             '$const38.5': [<numba.core.ir.Assign object at 0x1718faa90>],
             '$phi156.0': [<numba.core.ir.Assign object at 0x1718fb2d0>],
             '$phi158.1': [<numba.core.ir.Assign object at 0x17178cfd0>],
             'X': [<numba.core.ir.Assign object at 0x1718fa510>],
             'knn_indices': [<numba.core.ir.Assign object at 0x1718f8c90>],
             'n_neighbors': [<numba.core.ir.Assign object at 0x1718fbf10>],
             'row': [<numba.core.ir.Assign object at 0x17178cc50>],
             'v': [<numba.core.ir.Assign object at 0x17178d990>,
                   <numba.core.ir.Assign object at 0x17178fc10>]})
2023-08-01 10:03:59,441 [DEBUG] SSA violators {'v'}
2023-08-01 10:03:59,441 [DEBUG] Fix SSA violator on var v
2023-08-01 10:03:59,441 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,441 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9f10>
2023-08-01 10:03:59,441 [DEBUG] on stmt: X = arg(0, name=X)
2023-08-01 10:03:59,441 [DEBUG] on stmt: n_neighbors = arg(1, name=n_neighbors)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $28load_attr.4 = getattr(value=X, attr=shape)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $const38.5 = const(int, 0)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $40binary_subscr.6 = static_getitem(value=$28load_attr.4, index=0, index_var=$const38.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $52build_tuple.8 = build_tuple(items=[Var($40binary_subscr.6, utils.py:31), Var(n_neighbors, utils.py:14)])
2023-08-01 10:03:59,441 [DEBUG] on stmt: $54load_global.9 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $66load_attr.10 = getattr(value=$54load_global.9, attr=int32)
2023-08-01 10:03:59,441 [DEBUG] on stmt: knn_indices = call $16load_attr.2($52build_tuple.8, func=$16load_attr.2, args=[Var($52build_tuple.8, utils.py:31)], kws=[('dtype', Var($66load_attr.10, utils.py:31))], vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $94load_global.12 = global(numba: <module 'numba' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numba/__init__.py'>)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $106load_attr.14 = getattr(value=$94load_global.12, attr=prange)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $118load_attr.16 = getattr(value=X, attr=shape)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $const128.17 = const(int, 0)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $130binary_subscr.18 = static_getitem(value=$118load_attr.16, index=0, index_var=$const128.17, fn=<built-in function getitem>)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $144call.19 = call $106load_attr.14($130binary_subscr.18, func=$106load_attr.14, args=[Var($130binary_subscr.18, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $154get_iter.20 = getiter(value=$144call.19)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $phi156.0 = $154get_iter.20
2023-08-01 10:03:59,441 [DEBUG] on stmt: jump 156
2023-08-01 10:03:59,441 [DEBUG] ==== SSA block rewrite pass on 156
2023-08-01 10:03:59,441 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9f10>
2023-08-01 10:03:59,441 [DEBUG] on stmt: $156for_iter.1 = iternext(value=$phi156.0)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $156for_iter.2 = pair_first(value=$156for_iter.1)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $156for_iter.3 = pair_second(value=$156for_iter.1)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $phi158.1 = $156for_iter.2
2023-08-01 10:03:59,441 [DEBUG] on stmt: branch $156for_iter.3, 158, 248
2023-08-01 10:03:59,441 [DEBUG] ==== SSA block rewrite pass on 158
2023-08-01 10:03:59,441 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9f10>
2023-08-01 10:03:59,441 [DEBUG] on stmt: row = $phi158.1
2023-08-01 10:03:59,441 [DEBUG] on stmt: $164binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $174load_method.6 = getattr(value=$164binary_subscr.4, attr=argsort)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $const196.7 = const(str, quicksort)
2023-08-01 10:03:59,441 [DEBUG] on stmt: v = call $174load_method.6(func=$174load_method.6, args=[], kws=[('kind', Var($const196.7, utils.py:34))], vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,441 [DEBUG] first assign: v
2023-08-01 10:03:59,441 [DEBUG] replaced with: v = call $174load_method.6(func=$174load_method.6, args=[], kws=[('kind', Var($const196.7, utils.py:34))], vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,441 [DEBUG] on stmt: $const218.10 = const(NoneType, None)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $222build_slice.12 = global(slice: <class 'slice'>)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $222build_slice.13 = call $222build_slice.12($const218.10, n_neighbors, func=$222build_slice.12, args=(Var($const218.10, utils.py:35), Var(n_neighbors, utils.py:14)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,442 [DEBUG] on stmt: v = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>)
2023-08-01 10:03:59,442 [DEBUG] replaced with: v.1 = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>)
2023-08-01 10:03:59,442 [DEBUG] on stmt: knn_indices[row] = v
2023-08-01 10:03:59,442 [DEBUG] on stmt: jump 156
2023-08-01 10:03:59,442 [DEBUG] ==== SSA block rewrite pass on 248
2023-08-01 10:03:59,442 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9f10>
2023-08-01 10:03:59,442 [DEBUG] on stmt: $250return_value.1 = cast(value=knn_indices)
2023-08-01 10:03:59,442 [DEBUG] on stmt: return $250return_value.1
2023-08-01 10:03:59,442 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {158: [<numba.core.ir.Assign object at 0x171526c50>,
                   <numba.core.ir.Assign object at 0x1718fa3d0>]})
2023-08-01 10:03:59,442 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,442 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1716ae090>
2023-08-01 10:03:59,442 [DEBUG] on stmt: X = arg(0, name=X)
2023-08-01 10:03:59,442 [DEBUG] on stmt: n_neighbors = arg(1, name=n_neighbors)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=empty)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $28load_attr.4 = getattr(value=X, attr=shape)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $const38.5 = const(int, 0)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $40binary_subscr.6 = static_getitem(value=$28load_attr.4, index=0, index_var=$const38.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $52build_tuple.8 = build_tuple(items=[Var($40binary_subscr.6, utils.py:31), Var(n_neighbors, utils.py:14)])
2023-08-01 10:03:59,442 [DEBUG] on stmt: $54load_global.9 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $66load_attr.10 = getattr(value=$54load_global.9, attr=int32)
2023-08-01 10:03:59,442 [DEBUG] on stmt: knn_indices = call $16load_attr.2($52build_tuple.8, func=$16load_attr.2, args=[Var($52build_tuple.8, utils.py:31)], kws=[('dtype', Var($66load_attr.10, utils.py:31))], vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $94load_global.12 = global(numba: <module 'numba' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numba/__init__.py'>)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $106load_attr.14 = getattr(value=$94load_global.12, attr=prange)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $118load_attr.16 = getattr(value=X, attr=shape)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $const128.17 = const(int, 0)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $130binary_subscr.18 = static_getitem(value=$118load_attr.16, index=0, index_var=$const128.17, fn=<built-in function getitem>)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $144call.19 = call $106load_attr.14($130binary_subscr.18, func=$106load_attr.14, args=[Var($130binary_subscr.18, utils.py:32)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $154get_iter.20 = getiter(value=$144call.19)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $phi156.0 = $154get_iter.20
2023-08-01 10:03:59,442 [DEBUG] on stmt: jump 156
2023-08-01 10:03:59,442 [DEBUG] ==== SSA block rewrite pass on 156
2023-08-01 10:03:59,442 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1716ae090>
2023-08-01 10:03:59,442 [DEBUG] on stmt: $156for_iter.1 = iternext(value=$phi156.0)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $156for_iter.2 = pair_first(value=$156for_iter.1)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $156for_iter.3 = pair_second(value=$156for_iter.1)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $phi158.1 = $156for_iter.2
2023-08-01 10:03:59,442 [DEBUG] on stmt: branch $156for_iter.3, 158, 248
2023-08-01 10:03:59,442 [DEBUG] ==== SSA block rewrite pass on 158
2023-08-01 10:03:59,442 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1716ae090>
2023-08-01 10:03:59,442 [DEBUG] on stmt: row = $phi158.1
2023-08-01 10:03:59,442 [DEBUG] on stmt: $164binary_subscr.4 = getitem(value=X, index=row, fn=<built-in function getitem>)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $174load_method.6 = getattr(value=$164binary_subscr.4, attr=argsort)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $const196.7 = const(str, quicksort)
2023-08-01 10:03:59,442 [DEBUG] on stmt: v = call $174load_method.6(func=$174load_method.6, args=[], kws=[('kind', Var($const196.7, utils.py:34))], vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $const218.10 = const(NoneType, None)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $222build_slice.12 = global(slice: <class 'slice'>)
2023-08-01 10:03:59,442 [DEBUG] on stmt: $222build_slice.13 = call $222build_slice.12($const218.10, n_neighbors, func=$222build_slice.12, args=(Var($const218.10, utils.py:35), Var(n_neighbors, utils.py:14)), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,442 [DEBUG] on stmt: v.1 = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>)
2023-08-01 10:03:59,442 [DEBUG] find_def var='v' stmt=v.1 = getitem(value=v, index=$222build_slice.13, fn=<built-in function getitem>)
2023-08-01 10:03:59,442 [DEBUG] on stmt: knn_indices[row] = v
2023-08-01 10:03:59,442 [DEBUG] find_def var='v' stmt=knn_indices[row] = v
2023-08-01 10:03:59,442 [DEBUG] replaced with: knn_indices[row] = v.1
2023-08-01 10:03:59,442 [DEBUG] on stmt: jump 156
2023-08-01 10:03:59,442 [DEBUG] ==== SSA block rewrite pass on 248
2023-08-01 10:03:59,442 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x1716ae090>
2023-08-01 10:03:59,442 [DEBUG] on stmt: $250return_value.1 = cast(value=knn_indices)
2023-08-01 10:03:59,442 [DEBUG] on stmt: return $250return_value.1
2023-08-01 10:03:59,444 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4251)
           2	COPY_FREE_VARS(arg=1, lineno=4251)
           4	RESUME(arg=0, lineno=4251)
           6	LOAD_GLOBAL(arg=1, lineno=4252)
          18	LOAD_FAST(arg=0, lineno=4252)
          20	LOAD_FAST(arg=1, lineno=4252)
          22	LOAD_DEREF(arg=2, lineno=4252)
          24	PRECALL(arg=3, lineno=4252)
          28	CALL(arg=3, lineno=4252)
          38	RETURN_VALUE(arg=None, lineno=4252)
2023-08-01 10:03:59,444 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,444 [DEBUG] stack: []
2023-08-01 10:03:59,444 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,444 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4251)
2023-08-01 10:03:59,444 [DEBUG] stack []
2023-08-01 10:03:59,444 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4251)
2023-08-01 10:03:59,444 [DEBUG] stack []
2023-08-01 10:03:59,444 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=4251)
2023-08-01 10:03:59,444 [DEBUG] stack []
2023-08-01 10:03:59,444 [DEBUG] dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4252)
2023-08-01 10:03:59,444 [DEBUG] stack []
2023-08-01 10:03:59,444 [DEBUG] dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4252)
2023-08-01 10:03:59,444 [DEBUG] stack ['$null$6.1', '$6load_global.0']
2023-08-01 10:03:59,444 [DEBUG] dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4252)
2023-08-01 10:03:59,444 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2023-08-01 10:03:59,444 [DEBUG] dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4252)
2023-08-01 10:03:59,444 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2023-08-01 10:03:59,444 [DEBUG] dispatch pc=24, inst=PRECALL(arg=3, lineno=4252)
2023-08-01 10:03:59,444 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-08-01 10:03:59,444 [DEBUG] dispatch pc=28, inst=CALL(arg=3, lineno=4252)
2023-08-01 10:03:59,444 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-08-01 10:03:59,444 [DEBUG] dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4252)
2023-08-01 10:03:59,444 [DEBUG] stack ['$28call.5']
2023-08-01 10:03:59,444 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,444 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,444 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-01 10:03:59,444 [DEBUG] defmap: {}
2023-08-01 10:03:59,444 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,444 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,444 [DEBUG] keep phismap: {}
2023-08-01 10:03:59,444 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-08-01 10:03:59,444 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,444 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,444 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(int32, 2d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2023-08-01 10:03:59,446 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,446 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x17181ea90>
2023-08-01 10:03:59,446 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-08-01 10:03:59,446 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-08-01 10:03:59,446 [DEBUG] on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-08-01 10:03:59,446 [DEBUG] on stmt: $22load_deref.4 = freevar(retty: array(int32, 2d, C))
2023-08-01 10:03:59,446 [DEBUG] on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,446 [DEBUG] on stmt: $38return_value.6 = cast(value=$28call.5)
2023-08-01 10:03:59,446 [DEBUG] on stmt: return $38return_value.6
2023-08-01 10:03:59,446 [DEBUG] defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x17178d250>],
             '$28call.5': [<numba.core.ir.Assign object at 0x17181e110>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x17181fb50>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x17181ded0>],
             'dtype': [<numba.core.ir.Assign object at 0x1716aead0>],
             'shape': [<numba.core.ir.Assign object at 0x1716ac5d0>]})
2023-08-01 10:03:59,446 [DEBUG] SSA violators set()
2023-08-01 10:03:59,475 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=1)
           2	RESUME(arg=0, lineno=1)
           4	LOAD_GLOBAL(arg=1, lineno=2)
          16	LOAD_FAST(arg=0, lineno=2)
          18	LOAD_CONST(arg=1, lineno=2)
          20	BINARY_SUBSCR(arg=None, lineno=2)
          30	LOAD_FAST(arg=0, lineno=2)
          32	LOAD_CONST(arg=2, lineno=2)
          34	BINARY_SUBSCR(arg=None, lineno=2)
          44	LOAD_GLOBAL(arg=2, lineno=2)
          56	LOAD_METHOD(arg=2, lineno=2)
          78	LOAD_CONST(arg=2, lineno=2)
          80	PRECALL(arg=1, lineno=2)
          84	CALL(arg=1, lineno=2)
          94	BINARY_OP(arg=0, lineno=2)
          98	PRECALL(arg=2, lineno=2)
         102	CALL(arg=2, lineno=2)
         112	GET_ITER(arg=None, lineno=2)
>        114	FOR_ITER(arg=4, lineno=2)
         116	STORE_FAST(arg=4, lineno=2)
         118	LOAD_CONST(arg=1, lineno=3)
         120	STORE_FAST(arg=5, lineno=3)
         122	JUMP_BACKWARD(arg=5, lineno=3)
>        124	LOAD_CONST(arg=0, lineno=4)
         126	RETURN_VALUE(arg=None, lineno=4)
2023-08-01 10:03:59,475 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,475 [DEBUG] stack: []
2023-08-01 10:03:59,475 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=1)
2023-08-01 10:03:59,475 [DEBUG] stack []
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=1)
2023-08-01 10:03:59,475 [DEBUG] stack []
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack []
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=16, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=20, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$sched16.2', '$const18.3']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=30, inst=LOAD_FAST(arg=0, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=32, inst=LOAD_CONST(arg=2, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=34, inst=BINARY_SUBSCR(arg=None, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$sched30.5', '$const32.6']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=44, inst=LOAD_GLOBAL(arg=2, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=56, inst=LOAD_METHOD(arg=2, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$44load_global.8']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=80, inst=PRECALL(arg=1, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=84, inst=CALL(arg=1, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$null$56.9', '$56load_method.10', '$const78.11']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=94, inst=BINARY_OP(arg=0, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$34binary_subscr.7', '$84call.12']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=98, inst=PRECALL(arg=2, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=102, inst=CALL(arg=2, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$null$4.1', '$4load_global.0', '$20binary_subscr.4', '$binop_add94.13']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=112, inst=GET_ITER(arg=None, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$102call.14']
2023-08-01 10:03:59,475 [DEBUG] end state. edges=[Edge(pc=114, stack=('$112get_iter.15',), blockstack=(), npush=0)]
2023-08-01 10:03:59,475 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-08-01 10:03:59,475 [DEBUG] stack: ['$phi114.0']
2023-08-01 10:03:59,475 [DEBUG] state.pc_initial: State(pc_initial=114 nstack_initial=1)
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=114, inst=FOR_ITER(arg=4, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$phi114.0']
2023-08-01 10:03:59,475 [DEBUG] end state. edges=[Edge(pc=124, stack=(), blockstack=(), npush=0), Edge(pc=116, stack=('$phi114.0', '$114for_iter.2'), blockstack=(), npush=0)]
2023-08-01 10:03:59,475 [DEBUG] pending: deque([State(pc_initial=124 nstack_initial=0), State(pc_initial=116 nstack_initial=2)])
2023-08-01 10:03:59,475 [DEBUG] stack: []
2023-08-01 10:03:59,475 [DEBUG] state.pc_initial: State(pc_initial=124 nstack_initial=0)
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=124, inst=LOAD_CONST(arg=0, lineno=4)
2023-08-01 10:03:59,475 [DEBUG] stack []
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=126, inst=RETURN_VALUE(arg=None, lineno=4)
2023-08-01 10:03:59,475 [DEBUG] stack ['$const124.0']
2023-08-01 10:03:59,475 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,475 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=2)])
2023-08-01 10:03:59,475 [DEBUG] stack: ['$phi116.0', '$phi116.1']
2023-08-01 10:03:59,475 [DEBUG] state.pc_initial: State(pc_initial=116 nstack_initial=2)
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=116, inst=STORE_FAST(arg=4, lineno=2)
2023-08-01 10:03:59,475 [DEBUG] stack ['$phi116.0', '$phi116.1']
2023-08-01 10:03:59,475 [DEBUG] dispatch pc=118, inst=LOAD_CONST(arg=1, lineno=3)
2023-08-01 10:03:59,475 [DEBUG] stack ['$phi116.0']
2023-08-01 10:03:59,476 [DEBUG] dispatch pc=120, inst=STORE_FAST(arg=5, lineno=3)
2023-08-01 10:03:59,476 [DEBUG] stack ['$phi116.0', '$const118.2']
2023-08-01 10:03:59,476 [DEBUG] dispatch pc=122, inst=JUMP_BACKWARD(arg=5, lineno=3)
2023-08-01 10:03:59,476 [DEBUG] stack ['$phi116.0']
2023-08-01 10:03:59,476 [DEBUG] end state. edges=[Edge(pc=114, stack=('$phi116.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,476 [DEBUG] pending: deque([State(pc_initial=114 nstack_initial=1)])
2023-08-01 10:03:59,476 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,476 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=114 nstack_initial=1): {'$phi114.0'},
             State(pc_initial=116 nstack_initial=2): {'$phi116.1'},
             State(pc_initial=124 nstack_initial=0): set()})
2023-08-01 10:03:59,476 [DEBUG] defmap: {'$phi114.0': State(pc_initial=0 nstack_initial=0),
 '$phi116.1': State(pc_initial=114 nstack_initial=1)}
2023-08-01 10:03:59,476 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi116.0',
                            State(pc_initial=116 nstack_initial=2))},
             '$phi116.0': {('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-08-01 10:03:59,476 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0)),
                           ('$phi114.0',
                            State(pc_initial=114 nstack_initial=1))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-08-01 10:03:59,476 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-08-01 10:03:59,476 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi114.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.0': {('$112get_iter.15',
                            State(pc_initial=0 nstack_initial=0))},
             '$phi116.1': {('$114for_iter.2',
                            State(pc_initial=114 nstack_initial=1))}})
2023-08-01 10:03:59,476 [DEBUG] keep phismap: {'$phi114.0': {('$112get_iter.15', State(pc_initial=0 nstack_initial=0))},
 '$phi116.1': {('$114for_iter.2', State(pc_initial=114 nstack_initial=1))}}
2023-08-01 10:03:59,476 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi114.0': '$112get_iter.15'},
             State(pc_initial=114 nstack_initial=1): {'$phi116.1': '$114for_iter.2'}})
2023-08-01 10:03:59,476 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,476 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'res': '$sched16.2'}), (18, {'res': '$const18.3'}), (20, {'index': '$const18.3', 'target': '$sched16.2', 'res': '$20binary_subscr.4'}), (22, {}), (24, {}), (26, {}), (28, {}), (30, {'res': '$sched30.5'}), (32, {'res': '$const32.6'}), (34, {'index': '$const32.6', 'target': '$sched30.5', 'res': '$34binary_subscr.7'}), (36, {}), (38, {}), (40, {}), (42, {}), (44, {'idx': 1, 'res': '$44load_global.8'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'item': '$44load_global.8', 'res': '$56load_method.10'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'res': '$const78.11'}), (80, {}), (82, {}), (84, {'func': '$56load_method.10', 'args': ['$const78.11'], 'kw_names': None, 'res': '$84call.12'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'op': '+', 'lhs': '$34binary_subscr.7', 'rhs': '$84call.12', 'res': '$binop_add94.13'}), (96, {}), (98, {}), (100, {}), (102, {'func': '$4load_global.0', 'args': ['$20binary_subscr.4', '$binop_add94.13'], 'kw_names': None, 'res': '$102call.14'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {'value': '$102call.14', 'res': '$112get_iter.15'})), outgoing_phis={'$phi114.0': '$112get_iter.15'}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$112get_iter.15',)})
2023-08-01 10:03:59,476 [DEBUG] block_infos State(pc_initial=114 nstack_initial=1):
AdaptBlockInfo(insts=((114, {'iterator': '$phi114.0', 'pair': '$114for_iter.1', 'indval': '$114for_iter.2', 'pred': '$114for_iter.3'}),), outgoing_phis={'$phi116.1': '$114for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={124: (), 116: ('$phi114.0', '$114for_iter.2')})
2023-08-01 10:03:59,476 [DEBUG] block_infos State(pc_initial=116 nstack_initial=2):
AdaptBlockInfo(insts=((116, {'value': '$phi116.1'}), (118, {'res': '$const118.2'}), (120, {'value': '$const118.2'}), (122, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: ('$phi116.0',)})
2023-08-01 10:03:59,476 [DEBUG] block_infos State(pc_initial=124 nstack_initial=0):
AdaptBlockInfo(insts=((124, {'res': '$const124.0'}), (126, {'retval': '$const124.0', 'castval': '$126return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,476 [DEBUG] label 0:
    sched = arg(0, name=sched)               ['sched']
    X = arg(1, name=X)                       ['X']
    n__neighbors = arg(2, name=n__neighbors) ['n__neighbors']
    knn__indices = arg(3, name=knn__indices) ['knn__indices']
    $4load_global.0 = global(range: <class 'range'>) ['$4load_global.0']
    $const18.3 = const(int, 0)               ['$const18.3']
    $20binary_subscr.4 = getitem(value=sched, index=$const18.3, fn=<built-in function getitem>) ['$20binary_subscr.4', '$const18.3', 'sched']
    $const32.6 = const(int, 1)               ['$const32.6']
    $34binary_subscr.7 = getitem(value=sched, index=$const32.6, fn=<built-in function getitem>) ['$34binary_subscr.7', '$const32.6', 'sched']
    $44load_global.8 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$44load_global.8']
    $56load_method.10 = getattr(value=$44load_global.8, attr=uint8) ['$44load_global.8', '$56load_method.10']
    $const78.11 = const(int, 1)              ['$const78.11']
    $84call.12 = call $56load_method.10($const78.11, func=$56load_method.10, args=[Var($const78.11, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_method.10', '$84call.12', '$const78.11']
    $binop_add94.13 = $34binary_subscr.7 + $84call.12 ['$34binary_subscr.7', '$84call.12', '$binop_add94.13']
    $102call.14 = call $4load_global.0($20binary_subscr.4, $binop_add94.13, func=$4load_global.0, args=[Var($20binary_subscr.4, <string>:2), Var($binop_add94.13, <string>:2)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call.14', '$20binary_subscr.4', '$4load_global.0', '$binop_add94.13']
    $112get_iter.15 = getiter(value=$102call.14) ['$102call.14', '$112get_iter.15']
    $phi114.0 = $112get_iter.15              ['$112get_iter.15', '$phi114.0']
    jump 114                                 []
label 114:
    $114for_iter.1 = iternext(value=$phi114.0) ['$114for_iter.1', '$phi114.0']
    $114for_iter.2 = pair_first(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.2']
    $114for_iter.3 = pair_second(value=$114for_iter.1) ['$114for_iter.1', '$114for_iter.3']
    $phi116.1 = $114for_iter.2               ['$114for_iter.2', '$phi116.1']
    branch $114for_iter.3, 116, 124          ['$114for_iter.3']
label 116:
    parfor__index_18 = $phi116.1             ['$phi116.1', 'parfor__index_18']
    __sentinel__0 = const(int, 0)            ['__sentinel__0']
    jump 114                                 []
label 124:
    $const124.0 = const(NoneType, None)      ['$const124.0']
    $126return_value.1 = cast(value=$const124.0) ['$126return_value.1', '$const124.0']
    return $126return_value.1                ['$126return_value.1']

2023-08-01 10:03:59,486 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=6176)
           2	COPY_FREE_VARS(arg=1, lineno=6176)
           4	RESUME(arg=0, lineno=6176)
           6	PUSH_NULL(arg=None, lineno=6177)
           8	LOAD_DEREF(arg=1, lineno=6177)
          10	LOAD_FAST(arg=0, lineno=6177)
          12	PRECALL(arg=1, lineno=6177)
          16	CALL(arg=1, lineno=6177)
          26	RETURN_VALUE(arg=None, lineno=6177)
2023-08-01 10:03:59,486 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,486 [DEBUG] stack: []
2023-08-01 10:03:59,486 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,486 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=6176)
2023-08-01 10:03:59,486 [DEBUG] stack []
2023-08-01 10:03:59,486 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=6176)
2023-08-01 10:03:59,486 [DEBUG] stack []
2023-08-01 10:03:59,486 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=6176)
2023-08-01 10:03:59,486 [DEBUG] stack []
2023-08-01 10:03:59,486 [DEBUG] dispatch pc=6, inst=PUSH_NULL(arg=None, lineno=6177)
2023-08-01 10:03:59,486 [DEBUG] stack []
2023-08-01 10:03:59,486 [DEBUG] dispatch pc=8, inst=LOAD_DEREF(arg=1, lineno=6177)
2023-08-01 10:03:59,486 [DEBUG] stack ['$null$6.0']
2023-08-01 10:03:59,486 [DEBUG] dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=6177)
2023-08-01 10:03:59,486 [DEBUG] stack ['$null$6.0', '$8load_deref.1']
2023-08-01 10:03:59,486 [DEBUG] dispatch pc=12, inst=PRECALL(arg=1, lineno=6177)
2023-08-01 10:03:59,486 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$arr10.2']
2023-08-01 10:03:59,486 [DEBUG] dispatch pc=16, inst=CALL(arg=1, lineno=6177)
2023-08-01 10:03:59,486 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$arr10.2']
2023-08-01 10:03:59,486 [DEBUG] dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=6177)
2023-08-01 10:03:59,486 [DEBUG] stack ['$16call.3']
2023-08-01 10:03:59,486 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,486 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,487 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-01 10:03:59,487 [DEBUG] defmap: {}
2023-08-01 10:03:59,487 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,487 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,487 [DEBUG] keep phismap: {}
2023-08-01 10:03:59,487 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-08-01 10:03:59,487 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,487 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {}), (8, {'res': '$8load_deref.1'}), (10, {'res': '$arr10.2'}), (12, {}), (14, {}), (16, {'func': '$8load_deref.1', 'args': ['$arr10.2'], 'kw_names': None, 'res': '$16call.3'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'retval': '$16call.3', 'castval': '$26return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,487 [DEBUG] label 0:
    arr = arg(0, name=arr)                   ['arr']
    $8load_deref.1 = freevar(sort_func: <function make_quicksort_impl.<locals>.run_quicksort at 0x292492200>) ['$8load_deref.1']
    $16call.3 = call $8load_deref.1(arr, func=$8load_deref.1, args=[Var(arr, arrayobj.py:6176)], kws=(), vararg=None, varkwarg=None, target=None) ['$16call.3', '$8load_deref.1', 'arr']
    $26return_value.4 = cast(value=$16call.3) ['$16call.3', '$26return_value.4']
    return $26return_value.4                 ['$26return_value.4']

2023-08-01 10:03:59,488 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,488 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x171900150>
2023-08-01 10:03:59,488 [DEBUG] on stmt: arr = arg(0, name=arr)
2023-08-01 10:03:59,488 [DEBUG] on stmt: $8load_deref.1 = freevar(sort_func: <function make_quicksort_impl.<locals>.run_quicksort at 0x292492200>)
2023-08-01 10:03:59,488 [DEBUG] on stmt: $16call.3 = call $8load_deref.1(arr, func=$8load_deref.1, args=[Var(arr, arrayobj.py:6176)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,488 [DEBUG] on stmt: $26return_value.4 = cast(value=$16call.3)
2023-08-01 10:03:59,489 [DEBUG] on stmt: return $26return_value.4
2023-08-01 10:03:59,489 [DEBUG] defs defaultdict(<class 'list'>,
            {'$16call.3': [<numba.core.ir.Assign object at 0x171902810>],
             '$26return_value.4': [<numba.core.ir.Assign object at 0x171902410>],
             '$8load_deref.1': [<numba.core.ir.Assign object at 0x171901f90>],
             'arr': [<numba.core.ir.Assign object at 0x171902110>]})
2023-08-01 10:03:59,489 [DEBUG] SSA violators set()
2023-08-01 10:03:59,489 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=200)
           2	COPY_FREE_VARS(arg=1, lineno=200)
           4	RESUME(arg=0, lineno=200)
           6	LOAD_FAST(arg=0, lineno=202)
           8	LOAD_ATTR(arg=0, lineno=202)
          18	LOAD_CONST(arg=1, lineno=202)
          20	COMPARE_OP(arg=2, lineno=202)
          26	POP_JUMP_FORWARD_IF_FALSE(arg=11, lineno=202)
          28	PUSH_NULL(arg=None, lineno=203)
          30	LOAD_DEREF(arg=2, lineno=203)
          32	LOAD_FAST(arg=0, lineno=203)
          34	PRECALL(arg=1, lineno=203)
          38	CALL(arg=1, lineno=203)
          48	RETURN_VALUE(arg=None, lineno=203)
>         50	LOAD_GLOBAL(arg=3, lineno=205)
          62	LOAD_ATTR(arg=2, lineno=205)
          72	LOAD_FAST(arg=0, lineno=205)
          74	LOAD_ATTR(arg=3, lineno=205)
          84	LOAD_CONST(arg=0, lineno=205)
          86	LOAD_CONST(arg=2, lineno=205)
          88	BUILD_SLICE(arg=2, lineno=205)
          90	BINARY_SUBSCR(arg=None, lineno=205)
         100	PRECALL(arg=1, lineno=205)
         104	CALL(arg=1, lineno=205)
         114	GET_ITER(arg=None, lineno=205)
>        116	FOR_ITER(arg=19, lineno=205)
         118	STORE_FAST(arg=1, lineno=205)
         120	PUSH_NULL(arg=None, lineno=206)
         122	LOAD_DEREF(arg=2, lineno=206)
         124	LOAD_FAST(arg=0, lineno=206)
         126	LOAD_FAST(arg=1, lineno=206)
         128	BINARY_SUBSCR(arg=None, lineno=206)
         138	PRECALL(arg=1, lineno=206)
         142	CALL(arg=1, lineno=206)
         152	POP_TOP(arg=None, lineno=206)
         154	JUMP_BACKWARD(arg=20, lineno=206)
>        156	LOAD_FAST(arg=0, lineno=207)
         158	RETURN_VALUE(arg=None, lineno=207)
2023-08-01 10:03:59,490 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,490 [DEBUG] stack: []
2023-08-01 10:03:59,490 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=200)
2023-08-01 10:03:59,490 [DEBUG] stack []
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=200)
2023-08-01 10:03:59,490 [DEBUG] stack []
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=200)
2023-08-01 10:03:59,490 [DEBUG] stack []
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=202)
2023-08-01 10:03:59,490 [DEBUG] stack []
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=8, inst=LOAD_ATTR(arg=0, lineno=202)
2023-08-01 10:03:59,490 [DEBUG] stack ['$A6.0']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=18, inst=LOAD_CONST(arg=1, lineno=202)
2023-08-01 10:03:59,490 [DEBUG] stack ['$8load_attr.1']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=20, inst=COMPARE_OP(arg=2, lineno=202)
2023-08-01 10:03:59,490 [DEBUG] stack ['$8load_attr.1', '$const18.2']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=26, inst=POP_JUMP_FORWARD_IF_FALSE(arg=11, lineno=202)
2023-08-01 10:03:59,490 [DEBUG] stack ['$20compare_op.3']
2023-08-01 10:03:59,490 [DEBUG] end state. edges=[Edge(pc=28, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,490 [DEBUG] pending: deque([State(pc_initial=28 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-08-01 10:03:59,490 [DEBUG] stack: []
2023-08-01 10:03:59,490 [DEBUG] state.pc_initial: State(pc_initial=28 nstack_initial=0)
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=28, inst=PUSH_NULL(arg=None, lineno=203)
2023-08-01 10:03:59,490 [DEBUG] stack []
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=30, inst=LOAD_DEREF(arg=2, lineno=203)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$28.0']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=32, inst=LOAD_FAST(arg=0, lineno=203)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$28.0', '$30load_deref.1']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=34, inst=PRECALL(arg=1, lineno=203)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$28.0', '$30load_deref.1', '$A32.2']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=38, inst=CALL(arg=1, lineno=203)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$28.0', '$30load_deref.1', '$A32.2']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=48, inst=RETURN_VALUE(arg=None, lineno=203)
2023-08-01 10:03:59,490 [DEBUG] stack ['$38call.3']
2023-08-01 10:03:59,490 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,490 [DEBUG] pending: deque([State(pc_initial=50 nstack_initial=0)])
2023-08-01 10:03:59,490 [DEBUG] stack: []
2023-08-01 10:03:59,490 [DEBUG] state.pc_initial: State(pc_initial=50 nstack_initial=0)
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=50, inst=LOAD_GLOBAL(arg=3, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack []
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=62, inst=LOAD_ATTR(arg=2, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$50.1', '$50load_global.0']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=72, inst=LOAD_FAST(arg=0, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$50.1', '$62load_attr.2']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=74, inst=LOAD_ATTR(arg=3, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$A72.3']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=84, inst=LOAD_CONST(arg=0, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$74load_attr.4']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=86, inst=LOAD_CONST(arg=2, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$74load_attr.4', '$const84.5']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=88, inst=BUILD_SLICE(arg=2, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$74load_attr.4', '$const84.5', '$const86.6']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=90, inst=BINARY_SUBSCR(arg=None, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$74load_attr.4', '$88build_slice.8']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=100, inst=PRECALL(arg=1, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$90binary_subscr.9']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=104, inst=CALL(arg=1, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$null$50.1', '$62load_attr.2', '$90binary_subscr.9']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=114, inst=GET_ITER(arg=None, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$104call.10']
2023-08-01 10:03:59,490 [DEBUG] end state. edges=[Edge(pc=116, stack=('$114get_iter.11',), blockstack=(), npush=0)]
2023-08-01 10:03:59,490 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=1)])
2023-08-01 10:03:59,490 [DEBUG] stack: ['$phi116.0']
2023-08-01 10:03:59,490 [DEBUG] state.pc_initial: State(pc_initial=116 nstack_initial=1)
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=116, inst=FOR_ITER(arg=19, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$phi116.0']
2023-08-01 10:03:59,490 [DEBUG] end state. edges=[Edge(pc=156, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=('$phi116.0', '$116for_iter.2'), blockstack=(), npush=0)]
2023-08-01 10:03:59,490 [DEBUG] pending: deque([State(pc_initial=156 nstack_initial=0), State(pc_initial=118 nstack_initial=2)])
2023-08-01 10:03:59,490 [DEBUG] stack: []
2023-08-01 10:03:59,490 [DEBUG] state.pc_initial: State(pc_initial=156 nstack_initial=0)
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=156, inst=LOAD_FAST(arg=0, lineno=207)
2023-08-01 10:03:59,490 [DEBUG] stack []
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=158, inst=RETURN_VALUE(arg=None, lineno=207)
2023-08-01 10:03:59,490 [DEBUG] stack ['$A156.0']
2023-08-01 10:03:59,490 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,490 [DEBUG] pending: deque([State(pc_initial=118 nstack_initial=2)])
2023-08-01 10:03:59,490 [DEBUG] stack: ['$phi118.0', '$phi118.1']
2023-08-01 10:03:59,490 [DEBUG] state.pc_initial: State(pc_initial=118 nstack_initial=2)
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=118, inst=STORE_FAST(arg=1, lineno=205)
2023-08-01 10:03:59,490 [DEBUG] stack ['$phi118.0', '$phi118.1']
2023-08-01 10:03:59,490 [DEBUG] dispatch pc=120, inst=PUSH_NULL(arg=None, lineno=206)
2023-08-01 10:03:59,490 [DEBUG] stack ['$phi118.0']
2023-08-01 10:03:59,491 [DEBUG] dispatch pc=122, inst=LOAD_DEREF(arg=2, lineno=206)
2023-08-01 10:03:59,491 [DEBUG] stack ['$phi118.0', '$null$120.2']
2023-08-01 10:03:59,491 [DEBUG] dispatch pc=124, inst=LOAD_FAST(arg=0, lineno=206)
2023-08-01 10:03:59,491 [DEBUG] stack ['$phi118.0', '$null$120.2', '$122load_deref.3']
2023-08-01 10:03:59,491 [DEBUG] dispatch pc=126, inst=LOAD_FAST(arg=1, lineno=206)
2023-08-01 10:03:59,491 [DEBUG] stack ['$phi118.0', '$null$120.2', '$122load_deref.3', '$A124.4']
2023-08-01 10:03:59,491 [DEBUG] dispatch pc=128, inst=BINARY_SUBSCR(arg=None, lineno=206)
2023-08-01 10:03:59,491 [DEBUG] stack ['$phi118.0', '$null$120.2', '$122load_deref.3', '$A124.4', '$idx126.5']
2023-08-01 10:03:59,491 [DEBUG] dispatch pc=138, inst=PRECALL(arg=1, lineno=206)
2023-08-01 10:03:59,491 [DEBUG] stack ['$phi118.0', '$null$120.2', '$122load_deref.3', '$128binary_subscr.6']
2023-08-01 10:03:59,491 [DEBUG] dispatch pc=142, inst=CALL(arg=1, lineno=206)
2023-08-01 10:03:59,491 [DEBUG] stack ['$phi118.0', '$null$120.2', '$122load_deref.3', '$128binary_subscr.6']
2023-08-01 10:03:59,491 [DEBUG] dispatch pc=152, inst=POP_TOP(arg=None, lineno=206)
2023-08-01 10:03:59,491 [DEBUG] stack ['$phi118.0', '$142call.7']
2023-08-01 10:03:59,491 [DEBUG] dispatch pc=154, inst=JUMP_BACKWARD(arg=20, lineno=206)
2023-08-01 10:03:59,491 [DEBUG] stack ['$phi118.0']
2023-08-01 10:03:59,491 [DEBUG] end state. edges=[Edge(pc=116, stack=('$phi118.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,491 [DEBUG] pending: deque([State(pc_initial=116 nstack_initial=1)])
2023-08-01 10:03:59,491 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,491 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=116 nstack_initial=1): {'$phi116.0'},
             State(pc_initial=118 nstack_initial=2): {'$phi118.1'},
             State(pc_initial=156 nstack_initial=0): set()})
2023-08-01 10:03:59,491 [DEBUG] defmap: {'$phi116.0': State(pc_initial=50 nstack_initial=0),
 '$phi118.1': State(pc_initial=116 nstack_initial=1)}
2023-08-01 10:03:59,491 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi116.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0)),
                           ('$phi118.0',
                            State(pc_initial=118 nstack_initial=2))},
             '$phi118.0': {('$phi116.0',
                            State(pc_initial=116 nstack_initial=1))},
             '$phi118.1': {('$116for_iter.2',
                            State(pc_initial=116 nstack_initial=1))}})
2023-08-01 10:03:59,491 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi116.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0)),
                           ('$phi116.0',
                            State(pc_initial=116 nstack_initial=1))},
             '$phi118.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi118.1': {('$116for_iter.2',
                            State(pc_initial=116 nstack_initial=1))}})
2023-08-01 10:03:59,491 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi116.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi118.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi118.1': {('$116for_iter.2',
                            State(pc_initial=116 nstack_initial=1))}})
2023-08-01 10:03:59,491 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi116.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi118.0': {('$114get_iter.11',
                            State(pc_initial=50 nstack_initial=0))},
             '$phi118.1': {('$116for_iter.2',
                            State(pc_initial=116 nstack_initial=1))}})
2023-08-01 10:03:59,491 [DEBUG] keep phismap: {'$phi116.0': {('$114get_iter.11', State(pc_initial=50 nstack_initial=0))},
 '$phi118.1': {('$116for_iter.2', State(pc_initial=116 nstack_initial=1))}}
2023-08-01 10:03:59,491 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=50 nstack_initial=0): {'$phi116.0': '$114get_iter.11'},
             State(pc_initial=116 nstack_initial=1): {'$phi118.1': '$116for_iter.2'}})
2023-08-01 10:03:59,491 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,491 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$A6.0'}), (8, {'item': '$A6.0', 'res': '$8load_attr.1'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$const18.2'}), (20, {'lhs': '$8load_attr.1', 'rhs': '$const18.2', 'res': '$20compare_op.3'}), (22, {}), (24, {}), (26, {'pred': '$20compare_op.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: (), 50: ()})
2023-08-01 10:03:59,491 [DEBUG] block_infos State(pc_initial=28 nstack_initial=0):
AdaptBlockInfo(insts=((28, {}), (30, {'res': '$30load_deref.1'}), (32, {'res': '$A32.2'}), (34, {}), (36, {}), (38, {'func': '$30load_deref.1', 'args': ['$A32.2'], 'kw_names': None, 'res': '$38call.3'}), (40, {}), (42, {}), (44, {}), (46, {}), (48, {'retval': '$38call.3', 'castval': '$48return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,491 [DEBUG] block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'idx': 1, 'res': '$50load_global.0'}), (52, {}), (54, {}), (56, {}), (58, {}), (60, {}), (62, {'item': '$50load_global.0', 'res': '$62load_attr.2'}), (64, {}), (66, {}), (68, {}), (70, {}), (72, {'res': '$A72.3'}), (74, {'item': '$A72.3', 'res': '$74load_attr.4'}), (76, {}), (78, {}), (80, {}), (82, {}), (84, {'res': '$const84.5'}), (86, {'res': '$const86.6'}), (88, {'start': '$const84.5', 'stop': '$const86.6', 'step': None, 'res': '$88build_slice.8', 'slicevar': '$88build_slice.7'}), (90, {'index': '$88build_slice.8', 'target': '$74load_attr.4', 'res': '$90binary_subscr.9'}), (92, {}), (94, {}), (96, {}), (98, {}), (100, {}), (102, {}), (104, {'func': '$62load_attr.2', 'args': ['$90binary_subscr.9'], 'kw_names': None, 'res': '$104call.10'}), (106, {}), (108, {}), (110, {}), (112, {}), (114, {'value': '$104call.10', 'res': '$114get_iter.11'})), outgoing_phis={'$phi116.0': '$114get_iter.11'}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: ('$114get_iter.11',)})
2023-08-01 10:03:59,491 [DEBUG] block_infos State(pc_initial=116 nstack_initial=1):
AdaptBlockInfo(insts=((116, {'iterator': '$phi116.0', 'pair': '$116for_iter.1', 'indval': '$116for_iter.2', 'pred': '$116for_iter.3'}),), outgoing_phis={'$phi118.1': '$116for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={156: (), 118: ('$phi116.0', '$116for_iter.2')})
2023-08-01 10:03:59,491 [DEBUG] block_infos State(pc_initial=118 nstack_initial=2):
AdaptBlockInfo(insts=((118, {'value': '$phi118.1'}), (120, {}), (122, {'res': '$122load_deref.3'}), (124, {'res': '$A124.4'}), (126, {'res': '$idx126.5'}), (128, {'index': '$idx126.5', 'target': '$A124.4', 'res': '$128binary_subscr.6'}), (130, {}), (132, {}), (134, {}), (136, {}), (138, {}), (140, {}), (142, {'func': '$122load_deref.3', 'args': ['$128binary_subscr.6'], 'kw_names': None, 'res': '$142call.7'}), (144, {}), (146, {}), (148, {}), (150, {}), (154, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={116: ('$phi118.0',)})
2023-08-01 10:03:59,491 [DEBUG] block_infos State(pc_initial=156 nstack_initial=0):
AdaptBlockInfo(insts=((156, {'res': '$A156.0'}), (158, {'retval': '$A156.0', 'castval': '$158return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,492 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    $8load_attr.1 = getattr(value=A, attr=ndim) ['$8load_attr.1', 'A']
    $const18.2 = const(int, 1)               ['$const18.2']
    $20compare_op.3 = $8load_attr.1 == $const18.2 ['$20compare_op.3', '$8load_attr.1', '$const18.2']
    bool26 = global(bool: <class 'bool'>)    ['bool26']
    $26pred = call bool26($20compare_op.3, func=bool26, args=(Var($20compare_op.3, quicksort.py:202),), kws=(), vararg=None, varkwarg=None, target=None) ['$20compare_op.3', '$26pred', 'bool26']
    branch $26pred, 28, 50                   ['$26pred']
label 28:
    $30load_deref.1 = freevar(run_quicksort1: <function make_quicksort_impl.<locals>.run_quicksort1 at 0x292490b80>) ['$30load_deref.1']
    $38call.3 = call $30load_deref.1(A, func=$30load_deref.1, args=[Var(A, quicksort.py:200)], kws=(), vararg=None, varkwarg=None, target=None) ['$30load_deref.1', '$38call.3', 'A']
    $48return_value.4 = cast(value=$38call.3) ['$38call.3', '$48return_value.4']
    return $48return_value.4                 ['$48return_value.4']
label 50:
    $50load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$50load_global.0']
    $62load_attr.2 = getattr(value=$50load_global.0, attr=ndindex) ['$50load_global.0', '$62load_attr.2']
    $74load_attr.4 = getattr(value=A, attr=shape) ['$74load_attr.4', 'A']
    $const84.5 = const(NoneType, None)       ['$const84.5']
    $const86.6 = const(int, -1)              ['$const86.6']
    $88build_slice.7 = global(slice: <class 'slice'>) ['$88build_slice.7']
    $88build_slice.8 = call $88build_slice.7($const84.5, $const86.6, func=$88build_slice.7, args=(Var($const84.5, quicksort.py:205), Var($const86.6, quicksort.py:205)), kws=(), vararg=None, varkwarg=None, target=None) ['$88build_slice.7', '$88build_slice.8', '$const84.5', '$const86.6']
    $90binary_subscr.9 = getitem(value=$74load_attr.4, index=$88build_slice.8, fn=<built-in function getitem>) ['$74load_attr.4', '$88build_slice.8', '$90binary_subscr.9']
    $104call.10 = call $62load_attr.2($90binary_subscr.9, func=$62load_attr.2, args=[Var($90binary_subscr.9, quicksort.py:205)], kws=(), vararg=None, varkwarg=None, target=None) ['$104call.10', '$62load_attr.2', '$90binary_subscr.9']
    $114get_iter.11 = getiter(value=$104call.10) ['$104call.10', '$114get_iter.11']
    $phi116.0 = $114get_iter.11              ['$114get_iter.11', '$phi116.0']
    jump 116                                 []
label 116:
    $116for_iter.1 = iternext(value=$phi116.0) ['$116for_iter.1', '$phi116.0']
    $116for_iter.2 = pair_first(value=$116for_iter.1) ['$116for_iter.1', '$116for_iter.2']
    $116for_iter.3 = pair_second(value=$116for_iter.1) ['$116for_iter.1', '$116for_iter.3']
    $phi118.1 = $116for_iter.2               ['$116for_iter.2', '$phi118.1']
    branch $116for_iter.3, 118, 156          ['$116for_iter.3']
label 118:
    idx = $phi118.1                          ['$phi118.1', 'idx']
    $122load_deref.3 = freevar(run_quicksort1: <function make_quicksort_impl.<locals>.run_quicksort1 at 0x292490b80>) ['$122load_deref.3']
    $128binary_subscr.6 = getitem(value=A, index=idx, fn=<built-in function getitem>) ['$128binary_subscr.6', 'A', 'idx']
    $142call.7 = call $122load_deref.3($128binary_subscr.6, func=$122load_deref.3, args=[Var($128binary_subscr.6, quicksort.py:206)], kws=(), vararg=None, varkwarg=None, target=None) ['$122load_deref.3', '$128binary_subscr.6', '$142call.7']
    jump 116                                 []
label 156:
    $158return_value.1 = cast(value=A)       ['$158return_value.1', 'A']
    return $158return_value.1                ['$158return_value.1']

2023-08-01 10:03:59,494 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,494 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x171825b50>
2023-08-01 10:03:59,494 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,494 [DEBUG] on stmt: $8load_attr.1 = const(int, 1)
2023-08-01 10:03:59,494 [DEBUG] on stmt: $const18.2 = const(int, 1)
2023-08-01 10:03:59,494 [DEBUG] on stmt: $20compare_op.3 = const(int, 1)
2023-08-01 10:03:59,494 [DEBUG] on stmt: bool26 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,494 [DEBUG] on stmt: $26pred = call bool26($20compare_op.3, func=bool26, args=(Var($20compare_op.3, quicksort.py:202),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,494 [DEBUG] on stmt: jump 28
2023-08-01 10:03:59,494 [DEBUG] ==== SSA block analysis pass on 28
2023-08-01 10:03:59,494 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x171825b50>
2023-08-01 10:03:59,494 [DEBUG] on stmt: $30load_deref.1 = freevar(run_quicksort1: <function make_quicksort_impl.<locals>.run_quicksort1 at 0x292490b80>)
2023-08-01 10:03:59,494 [DEBUG] on stmt: $38call.3 = call $30load_deref.1(A, func=$30load_deref.1, args=[Var(A, quicksort.py:200)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,494 [DEBUG] on stmt: $48return_value.4 = cast(value=$38call.3)
2023-08-01 10:03:59,494 [DEBUG] on stmt: return $48return_value.4
2023-08-01 10:03:59,494 [DEBUG] defs defaultdict(<class 'list'>,
            {'$20compare_op.3': [<numba.core.ir.Assign object at 0x1717d31d0>],
             '$26pred': [<numba.core.ir.Assign object at 0x1717d2890>],
             '$30load_deref.1': [<numba.core.ir.Assign object at 0x1717d34d0>],
             '$38call.3': [<numba.core.ir.Assign object at 0x1717d2090>],
             '$48return_value.4': [<numba.core.ir.Assign object at 0x1717d3ad0>],
             '$8load_attr.1': [<numba.core.ir.Assign object at 0x1717d2190>],
             '$const18.2': [<numba.core.ir.Assign object at 0x1717d2650>],
             'A': [<numba.core.ir.Assign object at 0x1717d1a50>],
             'bool26': [<numba.core.ir.Assign object at 0x1717d3750>]})
2023-08-01 10:03:59,494 [DEBUG] SSA violators set()
2023-08-01 10:03:59,496 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=164)
           2	COPY_FREE_VARS(arg=4, lineno=164)
           4	RESUME(arg=0, lineno=164)
           6	PUSH_NULL(arg=None, lineno=166)
           8	LOAD_DEREF(arg=8, lineno=166)
          10	LOAD_FAST(arg=0, lineno=166)
          12	PRECALL(arg=1, lineno=166)
          16	CALL(arg=1, lineno=166)
          26	STORE_FAST(arg=1, lineno=166)
          28	LOAD_GLOBAL(arg=1, lineno=168)
          40	LOAD_FAST(arg=0, lineno=168)
          42	PRECALL(arg=1, lineno=168)
          46	CALL(arg=1, lineno=168)
          56	LOAD_CONST(arg=1, lineno=168)
          58	COMPARE_OP(arg=0, lineno=168)
          64	POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=168)
          66	LOAD_FAST(arg=1, lineno=169)
          68	RETURN_VALUE(arg=None, lineno=169)
>         70	LOAD_GLOBAL(arg=3, lineno=171)
          82	LOAD_DEREF(arg=10, lineno=171)
          84	LOAD_DEREF(arg=10, lineno=171)
          86	PRECALL(arg=2, lineno=171)
          90	CALL(arg=2, lineno=171)
         100	BUILD_LIST(arg=1, lineno=171)
         102	LOAD_GLOBAL(arg=4, lineno=171)
         114	BINARY_OP(arg=5, lineno=171)
         118	STORE_FAST(arg=2, lineno=171)
         120	LOAD_GLOBAL(arg=3, lineno=172)
         132	LOAD_DEREF(arg=10, lineno=172)
         134	LOAD_GLOBAL(arg=1, lineno=172)
         146	LOAD_FAST(arg=0, lineno=172)
         148	PRECALL(arg=1, lineno=172)
         152	CALL(arg=1, lineno=172)
         162	LOAD_CONST(arg=2, lineno=172)
         164	BINARY_OP(arg=10, lineno=172)
         168	PRECALL(arg=2, lineno=172)
         172	CALL(arg=2, lineno=172)
         182	LOAD_FAST(arg=2, lineno=172)
         184	LOAD_CONST(arg=3, lineno=172)
         186	STORE_SUBSCR(arg=None, lineno=172)
         190	LOAD_CONST(arg=2, lineno=173)
         192	STORE_FAST(arg=3, lineno=173)
         194	LOAD_FAST(arg=3, lineno=175)
         196	LOAD_CONST(arg=3, lineno=175)
         198	COMPARE_OP(arg=4, lineno=175)
         204	POP_JUMP_FORWARD_IF_FALSE(arg=180, lineno=175)
>        206	LOAD_FAST(arg=3, lineno=176)
         208	LOAD_CONST(arg=2, lineno=176)
         210	BINARY_OP(arg=23, lineno=176)
         214	STORE_FAST(arg=3, lineno=176)
         216	LOAD_FAST(arg=2, lineno=177)
         218	LOAD_FAST(arg=3, lineno=177)
         220	BINARY_SUBSCR(arg=None, lineno=177)
         230	UNPACK_SEQUENCE(arg=2, lineno=177)
         234	STORE_FAST(arg=4, lineno=177)
         236	STORE_FAST(arg=5, lineno=177)
         238	LOAD_FAST(arg=5, lineno=179)
         240	LOAD_FAST(arg=4, lineno=179)
         242	BINARY_OP(arg=10, lineno=179)
         246	LOAD_GLOBAL(arg=6, lineno=179)
         258	COMPARE_OP(arg=5, lineno=179)
         264	POP_JUMP_FORWARD_IF_FALSE(arg=130, lineno=179)
>        266	LOAD_FAST(arg=3, lineno=180)
         268	LOAD_GLOBAL(arg=4, lineno=180)
         280	COMPARE_OP(arg=0, lineno=180)
         286	POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=180)
         288	LOAD_ASSERTION_ERROR(arg=None, lineno=180)
         290	RAISE_VARARGS(arg=1, lineno=180)
>        292	PUSH_NULL(arg=None, lineno=181)
         294	LOAD_DEREF(arg=9, lineno=181)
         296	LOAD_FAST(arg=0, lineno=181)
         298	LOAD_FAST(arg=1, lineno=181)
         300	LOAD_FAST(arg=4, lineno=181)
         302	LOAD_FAST(arg=5, lineno=181)
         304	PRECALL(arg=4, lineno=181)
         308	CALL(arg=4, lineno=181)
         318	STORE_FAST(arg=6, lineno=181)
         320	LOAD_FAST(arg=5, lineno=183)
         322	LOAD_FAST(arg=6, lineno=183)
         324	BINARY_OP(arg=10, lineno=183)
         328	LOAD_FAST(arg=6, lineno=183)
         330	LOAD_FAST(arg=4, lineno=183)
         332	BINARY_OP(arg=10, lineno=183)
         336	COMPARE_OP(arg=4, lineno=183)
         342	POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=183)
         344	LOAD_FAST(arg=5, lineno=185)
         346	LOAD_FAST(arg=6, lineno=185)
         348	COMPARE_OP(arg=4, lineno=185)
         354	POP_JUMP_FORWARD_IF_FALSE(arg=27, lineno=185)
         356	LOAD_GLOBAL(arg=3, lineno=186)
         368	LOAD_FAST(arg=6, lineno=186)
         370	LOAD_CONST(arg=2, lineno=186)
         372	BINARY_OP(arg=0, lineno=186)
         376	LOAD_FAST(arg=5, lineno=186)
         378	PRECALL(arg=2, lineno=186)
         382	CALL(arg=2, lineno=186)
         392	LOAD_FAST(arg=2, lineno=186)
         394	LOAD_FAST(arg=3, lineno=186)
         396	STORE_SUBSCR(arg=None, lineno=186)
         400	LOAD_FAST(arg=3, lineno=187)
         402	LOAD_CONST(arg=2, lineno=187)
         404	BINARY_OP(arg=13, lineno=187)
         408	STORE_FAST(arg=3, lineno=187)
>        410	LOAD_FAST(arg=6, lineno=188)
         412	LOAD_CONST(arg=2, lineno=188)
         414	BINARY_OP(arg=10, lineno=188)
         418	STORE_FAST(arg=5, lineno=188)
         420	JUMP_FORWARD(arg=38, lineno=188)
>        422	LOAD_FAST(arg=6, lineno=190)
         424	LOAD_FAST(arg=4, lineno=190)
         426	COMPARE_OP(arg=4, lineno=190)
         432	POP_JUMP_FORWARD_IF_FALSE(arg=27, lineno=190)
         434	LOAD_GLOBAL(arg=3, lineno=191)
         446	LOAD_FAST(arg=4, lineno=191)
         448	LOAD_FAST(arg=6, lineno=191)
         450	LOAD_CONST(arg=2, lineno=191)
         452	BINARY_OP(arg=10, lineno=191)
         456	PRECALL(arg=2, lineno=191)
         460	CALL(arg=2, lineno=191)
         470	LOAD_FAST(arg=2, lineno=191)
         472	LOAD_FAST(arg=3, lineno=191)
         474	STORE_SUBSCR(arg=None, lineno=191)
         478	LOAD_FAST(arg=3, lineno=192)
         480	LOAD_CONST(arg=2, lineno=192)
         482	BINARY_OP(arg=13, lineno=192)
         486	STORE_FAST(arg=3, lineno=192)
>        488	LOAD_FAST(arg=6, lineno=193)
         490	LOAD_CONST(arg=2, lineno=193)
         492	BINARY_OP(arg=0, lineno=193)
         496	STORE_FAST(arg=4, lineno=193)
>        498	LOAD_FAST(arg=5, lineno=179)
         500	LOAD_FAST(arg=4, lineno=179)
         502	BINARY_OP(arg=10, lineno=179)
         506	LOAD_GLOBAL(arg=6, lineno=179)
         518	COMPARE_OP(arg=5, lineno=179)
         524	POP_JUMP_BACKWARD_IF_TRUE(arg=130, lineno=179)
>        526	PUSH_NULL(arg=None, lineno=195)
         528	LOAD_DEREF(arg=7, lineno=195)
         530	LOAD_FAST(arg=0, lineno=195)
         532	LOAD_FAST(arg=1, lineno=195)
         534	LOAD_FAST(arg=4, lineno=195)
         536	LOAD_FAST(arg=5, lineno=195)
         538	PRECALL(arg=4, lineno=195)
         542	CALL(arg=4, lineno=195)
         552	POP_TOP(arg=None, lineno=195)
         554	LOAD_FAST(arg=3, lineno=175)
         556	LOAD_CONST(arg=3, lineno=175)
         558	COMPARE_OP(arg=4, lineno=175)
         564	POP_JUMP_BACKWARD_IF_TRUE(arg=180, lineno=175)
>        566	LOAD_FAST(arg=1, lineno=197)
         568	RETURN_VALUE(arg=None, lineno=197)
2023-08-01 10:03:59,496 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,496 [DEBUG] stack: []
2023-08-01 10:03:59,496 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=164)
2023-08-01 10:03:59,496 [DEBUG] stack []
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=4, lineno=164)
2023-08-01 10:03:59,496 [DEBUG] stack []
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=164)
2023-08-01 10:03:59,496 [DEBUG] stack []
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=6, inst=PUSH_NULL(arg=None, lineno=166)
2023-08-01 10:03:59,496 [DEBUG] stack []
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=8, inst=LOAD_DEREF(arg=8, lineno=166)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$6.0']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=10, inst=LOAD_FAST(arg=0, lineno=166)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$6.0', '$8load_deref.1']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=12, inst=PRECALL(arg=1, lineno=166)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$A10.2']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=16, inst=CALL(arg=1, lineno=166)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$6.0', '$8load_deref.1', '$A10.2']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=26, inst=STORE_FAST(arg=1, lineno=166)
2023-08-01 10:03:59,496 [DEBUG] stack ['$16call.3']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=28, inst=LOAD_GLOBAL(arg=1, lineno=168)
2023-08-01 10:03:59,496 [DEBUG] stack []
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=40, inst=LOAD_FAST(arg=0, lineno=168)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$28.5', '$28load_global.4']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=42, inst=PRECALL(arg=1, lineno=168)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$28.5', '$28load_global.4', '$A40.6']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=46, inst=CALL(arg=1, lineno=168)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$28.5', '$28load_global.4', '$A40.6']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=56, inst=LOAD_CONST(arg=1, lineno=168)
2023-08-01 10:03:59,496 [DEBUG] stack ['$46call.7']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=58, inst=COMPARE_OP(arg=0, lineno=168)
2023-08-01 10:03:59,496 [DEBUG] stack ['$46call.7', '$const56.8']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=64, inst=POP_JUMP_FORWARD_IF_FALSE(arg=2, lineno=168)
2023-08-01 10:03:59,496 [DEBUG] stack ['$58compare_op.9']
2023-08-01 10:03:59,496 [DEBUG] end state. edges=[Edge(pc=66, stack=(), blockstack=(), npush=0), Edge(pc=70, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,496 [DEBUG] pending: deque([State(pc_initial=66 nstack_initial=0), State(pc_initial=70 nstack_initial=0)])
2023-08-01 10:03:59,496 [DEBUG] stack: []
2023-08-01 10:03:59,496 [DEBUG] state.pc_initial: State(pc_initial=66 nstack_initial=0)
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=66, inst=LOAD_FAST(arg=1, lineno=169)
2023-08-01 10:03:59,496 [DEBUG] stack []
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=68, inst=RETURN_VALUE(arg=None, lineno=169)
2023-08-01 10:03:59,496 [DEBUG] stack ['$R66.0']
2023-08-01 10:03:59,496 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,496 [DEBUG] pending: deque([State(pc_initial=70 nstack_initial=0)])
2023-08-01 10:03:59,496 [DEBUG] stack: []
2023-08-01 10:03:59,496 [DEBUG] state.pc_initial: State(pc_initial=70 nstack_initial=0)
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=70, inst=LOAD_GLOBAL(arg=3, lineno=171)
2023-08-01 10:03:59,496 [DEBUG] stack []
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=82, inst=LOAD_DEREF(arg=10, lineno=171)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$70.1', '$70load_global.0']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=84, inst=LOAD_DEREF(arg=10, lineno=171)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$70.1', '$70load_global.0', '$82load_deref.2']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=86, inst=PRECALL(arg=2, lineno=171)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$70.1', '$70load_global.0', '$82load_deref.2', '$84load_deref.3']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=90, inst=CALL(arg=2, lineno=171)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$70.1', '$70load_global.0', '$82load_deref.2', '$84load_deref.3']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=100, inst=BUILD_LIST(arg=1, lineno=171)
2023-08-01 10:03:59,496 [DEBUG] stack ['$90call.4']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=102, inst=LOAD_GLOBAL(arg=4, lineno=171)
2023-08-01 10:03:59,496 [DEBUG] stack ['$100build_list.5']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=114, inst=BINARY_OP(arg=5, lineno=171)
2023-08-01 10:03:59,496 [DEBUG] stack ['$100build_list.5', '$102load_global.6']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=118, inst=STORE_FAST(arg=2, lineno=171)
2023-08-01 10:03:59,496 [DEBUG] stack ['$binop_mul114.7']
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=120, inst=LOAD_GLOBAL(arg=3, lineno=172)
2023-08-01 10:03:59,496 [DEBUG] stack []
2023-08-01 10:03:59,496 [DEBUG] dispatch pc=132, inst=LOAD_DEREF(arg=10, lineno=172)
2023-08-01 10:03:59,496 [DEBUG] stack ['$null$120.9', '$120load_global.8']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=134, inst=LOAD_GLOBAL(arg=1, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=146, inst=LOAD_FAST(arg=0, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$null$134.12', '$134load_global.11']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=148, inst=PRECALL(arg=1, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$null$134.12', '$134load_global.11', '$A146.13']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=152, inst=CALL(arg=1, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$null$134.12', '$134load_global.11', '$A146.13']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=162, inst=LOAD_CONST(arg=2, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$152call.14']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=164, inst=BINARY_OP(arg=10, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$152call.14', '$const162.15']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=168, inst=PRECALL(arg=2, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$binop_sub164.16']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=172, inst=CALL(arg=2, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$null$120.9', '$120load_global.8', '$132load_deref.10', '$binop_sub164.16']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=182, inst=LOAD_FAST(arg=2, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$172call.17']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=184, inst=LOAD_CONST(arg=3, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$172call.17', '$stack182.18']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=186, inst=STORE_SUBSCR(arg=None, lineno=172)
2023-08-01 10:03:59,497 [DEBUG] stack ['$172call.17', '$stack182.18', '$const184.19']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=190, inst=LOAD_CONST(arg=2, lineno=173)
2023-08-01 10:03:59,497 [DEBUG] stack []
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=192, inst=STORE_FAST(arg=3, lineno=173)
2023-08-01 10:03:59,497 [DEBUG] stack ['$const190.20']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=194, inst=LOAD_FAST(arg=3, lineno=175)
2023-08-01 10:03:59,497 [DEBUG] stack []
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=196, inst=LOAD_CONST(arg=3, lineno=175)
2023-08-01 10:03:59,497 [DEBUG] stack ['$n194.21']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=198, inst=COMPARE_OP(arg=4, lineno=175)
2023-08-01 10:03:59,497 [DEBUG] stack ['$n194.21', '$const196.22']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=204, inst=POP_JUMP_FORWARD_IF_FALSE(arg=180, lineno=175)
2023-08-01 10:03:59,497 [DEBUG] stack ['$198compare_op.23']
2023-08-01 10:03:59,497 [DEBUG] end state. edges=[Edge(pc=206, stack=(), blockstack=(), npush=0), Edge(pc=566, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,497 [DEBUG] pending: deque([State(pc_initial=206 nstack_initial=0), State(pc_initial=566 nstack_initial=0)])
2023-08-01 10:03:59,497 [DEBUG] stack: []
2023-08-01 10:03:59,497 [DEBUG] state.pc_initial: State(pc_initial=206 nstack_initial=0)
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=206, inst=LOAD_FAST(arg=3, lineno=176)
2023-08-01 10:03:59,497 [DEBUG] stack []
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=208, inst=LOAD_CONST(arg=2, lineno=176)
2023-08-01 10:03:59,497 [DEBUG] stack ['$n206.0']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=210, inst=BINARY_OP(arg=23, lineno=176)
2023-08-01 10:03:59,497 [DEBUG] stack ['$n206.0', '$const208.1']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=214, inst=STORE_FAST(arg=3, lineno=176)
2023-08-01 10:03:59,497 [DEBUG] stack ['$binop_isub210.2']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=216, inst=LOAD_FAST(arg=2, lineno=177)
2023-08-01 10:03:59,497 [DEBUG] stack []
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=218, inst=LOAD_FAST(arg=3, lineno=177)
2023-08-01 10:03:59,497 [DEBUG] stack ['$stack216.3']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=177)
2023-08-01 10:03:59,497 [DEBUG] stack ['$stack216.3', '$n218.4']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=230, inst=UNPACK_SEQUENCE(arg=2, lineno=177)
2023-08-01 10:03:59,497 [DEBUG] stack ['$220binary_subscr.5']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=234, inst=STORE_FAST(arg=4, lineno=177)
2023-08-01 10:03:59,497 [DEBUG] stack ['$230unpack_sequence.7', '$230unpack_sequence.6']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=236, inst=STORE_FAST(arg=5, lineno=177)
2023-08-01 10:03:59,497 [DEBUG] stack ['$230unpack_sequence.7']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=238, inst=LOAD_FAST(arg=5, lineno=179)
2023-08-01 10:03:59,497 [DEBUG] stack []
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=240, inst=LOAD_FAST(arg=4, lineno=179)
2023-08-01 10:03:59,497 [DEBUG] stack ['$high238.9']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=242, inst=BINARY_OP(arg=10, lineno=179)
2023-08-01 10:03:59,497 [DEBUG] stack ['$high238.9', '$low240.10']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=246, inst=LOAD_GLOBAL(arg=6, lineno=179)
2023-08-01 10:03:59,497 [DEBUG] stack ['$binop_sub242.11']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=258, inst=COMPARE_OP(arg=5, lineno=179)
2023-08-01 10:03:59,497 [DEBUG] stack ['$binop_sub242.11', '$246load_global.12']
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=264, inst=POP_JUMP_FORWARD_IF_FALSE(arg=130, lineno=179)
2023-08-01 10:03:59,497 [DEBUG] stack ['$258compare_op.13']
2023-08-01 10:03:59,497 [DEBUG] end state. edges=[Edge(pc=266, stack=(), blockstack=(), npush=0), Edge(pc=526, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,497 [DEBUG] pending: deque([State(pc_initial=566 nstack_initial=0), State(pc_initial=266 nstack_initial=0), State(pc_initial=526 nstack_initial=0)])
2023-08-01 10:03:59,497 [DEBUG] stack: []
2023-08-01 10:03:59,497 [DEBUG] state.pc_initial: State(pc_initial=566 nstack_initial=0)
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=566, inst=LOAD_FAST(arg=1, lineno=197)
2023-08-01 10:03:59,497 [DEBUG] stack []
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=568, inst=RETURN_VALUE(arg=None, lineno=197)
2023-08-01 10:03:59,497 [DEBUG] stack ['$R566.0']
2023-08-01 10:03:59,497 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,497 [DEBUG] pending: deque([State(pc_initial=266 nstack_initial=0), State(pc_initial=526 nstack_initial=0)])
2023-08-01 10:03:59,497 [DEBUG] stack: []
2023-08-01 10:03:59,497 [DEBUG] state.pc_initial: State(pc_initial=266 nstack_initial=0)
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=266, inst=LOAD_FAST(arg=3, lineno=180)
2023-08-01 10:03:59,497 [DEBUG] stack []
2023-08-01 10:03:59,497 [DEBUG] dispatch pc=268, inst=LOAD_GLOBAL(arg=4, lineno=180)
2023-08-01 10:03:59,498 [DEBUG] stack ['$n266.0']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=280, inst=COMPARE_OP(arg=0, lineno=180)
2023-08-01 10:03:59,498 [DEBUG] stack ['$n266.0', '$268load_global.1']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=286, inst=POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=180)
2023-08-01 10:03:59,498 [DEBUG] stack ['$280compare_op.2']
2023-08-01 10:03:59,498 [DEBUG] end state. edges=[Edge(pc=288, stack=(), blockstack=(), npush=0), Edge(pc=292, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,498 [DEBUG] pending: deque([State(pc_initial=526 nstack_initial=0), State(pc_initial=288 nstack_initial=0), State(pc_initial=292 nstack_initial=0)])
2023-08-01 10:03:59,498 [DEBUG] stack: []
2023-08-01 10:03:59,498 [DEBUG] state.pc_initial: State(pc_initial=526 nstack_initial=0)
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=526, inst=PUSH_NULL(arg=None, lineno=195)
2023-08-01 10:03:59,498 [DEBUG] stack []
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=528, inst=LOAD_DEREF(arg=7, lineno=195)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$526.0']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=530, inst=LOAD_FAST(arg=0, lineno=195)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$526.0', '$528load_deref.1']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=532, inst=LOAD_FAST(arg=1, lineno=195)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$526.0', '$528load_deref.1', '$A530.2']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=534, inst=LOAD_FAST(arg=4, lineno=195)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$526.0', '$528load_deref.1', '$A530.2', '$R532.3']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=536, inst=LOAD_FAST(arg=5, lineno=195)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$526.0', '$528load_deref.1', '$A530.2', '$R532.3', '$low534.4']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=538, inst=PRECALL(arg=4, lineno=195)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$526.0', '$528load_deref.1', '$A530.2', '$R532.3', '$low534.4', '$high536.5']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=542, inst=CALL(arg=4, lineno=195)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$526.0', '$528load_deref.1', '$A530.2', '$R532.3', '$low534.4', '$high536.5']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=552, inst=POP_TOP(arg=None, lineno=195)
2023-08-01 10:03:59,498 [DEBUG] stack ['$542call.6']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=554, inst=LOAD_FAST(arg=3, lineno=175)
2023-08-01 10:03:59,498 [DEBUG] stack []
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=556, inst=LOAD_CONST(arg=3, lineno=175)
2023-08-01 10:03:59,498 [DEBUG] stack ['$n554.7']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=558, inst=COMPARE_OP(arg=4, lineno=175)
2023-08-01 10:03:59,498 [DEBUG] stack ['$n554.7', '$const556.8']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=564, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=180, lineno=175)
2023-08-01 10:03:59,498 [DEBUG] stack ['$558compare_op.9']
2023-08-01 10:03:59,498 [DEBUG] end state. edges=[Edge(pc=566, stack=(), blockstack=(), npush=0), Edge(pc=206, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,498 [DEBUG] pending: deque([State(pc_initial=288 nstack_initial=0), State(pc_initial=292 nstack_initial=0), State(pc_initial=566 nstack_initial=0), State(pc_initial=206 nstack_initial=0)])
2023-08-01 10:03:59,498 [DEBUG] stack: []
2023-08-01 10:03:59,498 [DEBUG] state.pc_initial: State(pc_initial=288 nstack_initial=0)
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=288, inst=LOAD_ASSERTION_ERROR(arg=None, lineno=180)
2023-08-01 10:03:59,498 [DEBUG] stack []
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=290, inst=RAISE_VARARGS(arg=1, lineno=180)
2023-08-01 10:03:59,498 [DEBUG] stack ['$assertion_error288.0']
2023-08-01 10:03:59,498 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,498 [DEBUG] pending: deque([State(pc_initial=292 nstack_initial=0), State(pc_initial=566 nstack_initial=0), State(pc_initial=206 nstack_initial=0)])
2023-08-01 10:03:59,498 [DEBUG] stack: []
2023-08-01 10:03:59,498 [DEBUG] state.pc_initial: State(pc_initial=292 nstack_initial=0)
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=292, inst=PUSH_NULL(arg=None, lineno=181)
2023-08-01 10:03:59,498 [DEBUG] stack []
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=294, inst=LOAD_DEREF(arg=9, lineno=181)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$292.0']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=296, inst=LOAD_FAST(arg=0, lineno=181)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$292.0', '$294load_deref.1']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=298, inst=LOAD_FAST(arg=1, lineno=181)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$292.0', '$294load_deref.1', '$A296.2']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=300, inst=LOAD_FAST(arg=4, lineno=181)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$292.0', '$294load_deref.1', '$A296.2', '$R298.3']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=302, inst=LOAD_FAST(arg=5, lineno=181)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$292.0', '$294load_deref.1', '$A296.2', '$R298.3', '$low300.4']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=304, inst=PRECALL(arg=4, lineno=181)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$292.0', '$294load_deref.1', '$A296.2', '$R298.3', '$low300.4', '$high302.5']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=308, inst=CALL(arg=4, lineno=181)
2023-08-01 10:03:59,498 [DEBUG] stack ['$null$292.0', '$294load_deref.1', '$A296.2', '$R298.3', '$low300.4', '$high302.5']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=318, inst=STORE_FAST(arg=6, lineno=181)
2023-08-01 10:03:59,498 [DEBUG] stack ['$308call.6']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=320, inst=LOAD_FAST(arg=5, lineno=183)
2023-08-01 10:03:59,498 [DEBUG] stack []
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=322, inst=LOAD_FAST(arg=6, lineno=183)
2023-08-01 10:03:59,498 [DEBUG] stack ['$high320.7']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=324, inst=BINARY_OP(arg=10, lineno=183)
2023-08-01 10:03:59,498 [DEBUG] stack ['$high320.7', '$i322.8']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=328, inst=LOAD_FAST(arg=6, lineno=183)
2023-08-01 10:03:59,498 [DEBUG] stack ['$binop_sub324.9']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=330, inst=LOAD_FAST(arg=4, lineno=183)
2023-08-01 10:03:59,498 [DEBUG] stack ['$binop_sub324.9', '$i328.10']
2023-08-01 10:03:59,498 [DEBUG] dispatch pc=332, inst=BINARY_OP(arg=10, lineno=183)
2023-08-01 10:03:59,498 [DEBUG] stack ['$binop_sub324.9', '$i328.10', '$low330.11']
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=336, inst=COMPARE_OP(arg=4, lineno=183)
2023-08-01 10:03:59,499 [DEBUG] stack ['$binop_sub324.9', '$binop_sub332.12']
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=342, inst=POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=183)
2023-08-01 10:03:59,499 [DEBUG] stack ['$336compare_op.13']
2023-08-01 10:03:59,499 [DEBUG] end state. edges=[Edge(pc=344, stack=(), blockstack=(), npush=0), Edge(pc=422, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,499 [DEBUG] pending: deque([State(pc_initial=566 nstack_initial=0), State(pc_initial=206 nstack_initial=0), State(pc_initial=344 nstack_initial=0), State(pc_initial=422 nstack_initial=0)])
2023-08-01 10:03:59,499 [DEBUG] pending: deque([State(pc_initial=206 nstack_initial=0), State(pc_initial=344 nstack_initial=0), State(pc_initial=422 nstack_initial=0)])
2023-08-01 10:03:59,499 [DEBUG] pending: deque([State(pc_initial=344 nstack_initial=0), State(pc_initial=422 nstack_initial=0)])
2023-08-01 10:03:59,499 [DEBUG] stack: []
2023-08-01 10:03:59,499 [DEBUG] state.pc_initial: State(pc_initial=344 nstack_initial=0)
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=344, inst=LOAD_FAST(arg=5, lineno=185)
2023-08-01 10:03:59,499 [DEBUG] stack []
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=346, inst=LOAD_FAST(arg=6, lineno=185)
2023-08-01 10:03:59,499 [DEBUG] stack ['$high344.0']
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=348, inst=COMPARE_OP(arg=4, lineno=185)
2023-08-01 10:03:59,499 [DEBUG] stack ['$high344.0', '$i346.1']
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=354, inst=POP_JUMP_FORWARD_IF_FALSE(arg=27, lineno=185)
2023-08-01 10:03:59,499 [DEBUG] stack ['$348compare_op.2']
2023-08-01 10:03:59,499 [DEBUG] end state. edges=[Edge(pc=356, stack=(), blockstack=(), npush=0), Edge(pc=410, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,499 [DEBUG] pending: deque([State(pc_initial=422 nstack_initial=0), State(pc_initial=356 nstack_initial=0), State(pc_initial=410 nstack_initial=0)])
2023-08-01 10:03:59,499 [DEBUG] stack: []
2023-08-01 10:03:59,499 [DEBUG] state.pc_initial: State(pc_initial=422 nstack_initial=0)
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=422, inst=LOAD_FAST(arg=6, lineno=190)
2023-08-01 10:03:59,499 [DEBUG] stack []
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=424, inst=LOAD_FAST(arg=4, lineno=190)
2023-08-01 10:03:59,499 [DEBUG] stack ['$i422.0']
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=426, inst=COMPARE_OP(arg=4, lineno=190)
2023-08-01 10:03:59,499 [DEBUG] stack ['$i422.0', '$low424.1']
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=432, inst=POP_JUMP_FORWARD_IF_FALSE(arg=27, lineno=190)
2023-08-01 10:03:59,499 [DEBUG] stack ['$426compare_op.2']
2023-08-01 10:03:59,499 [DEBUG] end state. edges=[Edge(pc=434, stack=(), blockstack=(), npush=0), Edge(pc=488, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,499 [DEBUG] pending: deque([State(pc_initial=356 nstack_initial=0), State(pc_initial=410 nstack_initial=0), State(pc_initial=434 nstack_initial=0), State(pc_initial=488 nstack_initial=0)])
2023-08-01 10:03:59,499 [DEBUG] stack: []
2023-08-01 10:03:59,499 [DEBUG] state.pc_initial: State(pc_initial=356 nstack_initial=0)
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=356, inst=LOAD_GLOBAL(arg=3, lineno=186)
2023-08-01 10:03:59,499 [DEBUG] stack []
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=368, inst=LOAD_FAST(arg=6, lineno=186)
2023-08-01 10:03:59,499 [DEBUG] stack ['$null$356.1', '$356load_global.0']
2023-08-01 10:03:59,499 [DEBUG] dispatch pc=370, inst=LOAD_CONST(arg=2, lineno=186)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$i368.2']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=372, inst=BINARY_OP(arg=0, lineno=186)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$i368.2', '$const370.3']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=376, inst=LOAD_FAST(arg=5, lineno=186)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$binop_add372.4']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=378, inst=PRECALL(arg=2, lineno=186)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$binop_add372.4', '$high376.5']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=382, inst=CALL(arg=2, lineno=186)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$binop_add372.4', '$high376.5']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=392, inst=LOAD_FAST(arg=2, lineno=186)
2023-08-01 10:03:59,500 [DEBUG] stack ['$382call.6']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=394, inst=LOAD_FAST(arg=3, lineno=186)
2023-08-01 10:03:59,500 [DEBUG] stack ['$382call.6', '$stack392.7']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=396, inst=STORE_SUBSCR(arg=None, lineno=186)
2023-08-01 10:03:59,500 [DEBUG] stack ['$382call.6', '$stack392.7', '$n394.8']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=400, inst=LOAD_FAST(arg=3, lineno=187)
2023-08-01 10:03:59,500 [DEBUG] stack []
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=402, inst=LOAD_CONST(arg=2, lineno=187)
2023-08-01 10:03:59,500 [DEBUG] stack ['$n400.9']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=404, inst=BINARY_OP(arg=13, lineno=187)
2023-08-01 10:03:59,500 [DEBUG] stack ['$n400.9', '$const402.10']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=408, inst=STORE_FAST(arg=3, lineno=187)
2023-08-01 10:03:59,500 [DEBUG] stack ['$binop_iadd404.11']
2023-08-01 10:03:59,500 [DEBUG] end state. edges=[Edge(pc=410, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,500 [DEBUG] pending: deque([State(pc_initial=410 nstack_initial=0), State(pc_initial=434 nstack_initial=0), State(pc_initial=488 nstack_initial=0), State(pc_initial=410 nstack_initial=0)])
2023-08-01 10:03:59,500 [DEBUG] stack: []
2023-08-01 10:03:59,500 [DEBUG] state.pc_initial: State(pc_initial=410 nstack_initial=0)
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=410, inst=LOAD_FAST(arg=6, lineno=188)
2023-08-01 10:03:59,500 [DEBUG] stack []
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=412, inst=LOAD_CONST(arg=2, lineno=188)
2023-08-01 10:03:59,500 [DEBUG] stack ['$i410.0']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=414, inst=BINARY_OP(arg=10, lineno=188)
2023-08-01 10:03:59,500 [DEBUG] stack ['$i410.0', '$const412.1']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=418, inst=STORE_FAST(arg=5, lineno=188)
2023-08-01 10:03:59,500 [DEBUG] stack ['$binop_sub414.2']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=420, inst=JUMP_FORWARD(arg=38, lineno=188)
2023-08-01 10:03:59,500 [DEBUG] stack []
2023-08-01 10:03:59,500 [DEBUG] end state. edges=[Edge(pc=498, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,500 [DEBUG] pending: deque([State(pc_initial=434 nstack_initial=0), State(pc_initial=488 nstack_initial=0), State(pc_initial=410 nstack_initial=0), State(pc_initial=498 nstack_initial=0)])
2023-08-01 10:03:59,500 [DEBUG] stack: []
2023-08-01 10:03:59,500 [DEBUG] state.pc_initial: State(pc_initial=434 nstack_initial=0)
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=434, inst=LOAD_GLOBAL(arg=3, lineno=191)
2023-08-01 10:03:59,500 [DEBUG] stack []
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=446, inst=LOAD_FAST(arg=4, lineno=191)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$434.1', '$434load_global.0']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=448, inst=LOAD_FAST(arg=6, lineno=191)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$434.1', '$434load_global.0', '$low446.2']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=450, inst=LOAD_CONST(arg=2, lineno=191)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$434.1', '$434load_global.0', '$low446.2', '$i448.3']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=452, inst=BINARY_OP(arg=10, lineno=191)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$434.1', '$434load_global.0', '$low446.2', '$i448.3', '$const450.4']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=456, inst=PRECALL(arg=2, lineno=191)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$434.1', '$434load_global.0', '$low446.2', '$binop_sub452.5']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=460, inst=CALL(arg=2, lineno=191)
2023-08-01 10:03:59,500 [DEBUG] stack ['$null$434.1', '$434load_global.0', '$low446.2', '$binop_sub452.5']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=470, inst=LOAD_FAST(arg=2, lineno=191)
2023-08-01 10:03:59,500 [DEBUG] stack ['$460call.6']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=472, inst=LOAD_FAST(arg=3, lineno=191)
2023-08-01 10:03:59,500 [DEBUG] stack ['$460call.6', '$stack470.7']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=474, inst=STORE_SUBSCR(arg=None, lineno=191)
2023-08-01 10:03:59,500 [DEBUG] stack ['$460call.6', '$stack470.7', '$n472.8']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=478, inst=LOAD_FAST(arg=3, lineno=192)
2023-08-01 10:03:59,500 [DEBUG] stack []
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=480, inst=LOAD_CONST(arg=2, lineno=192)
2023-08-01 10:03:59,500 [DEBUG] stack ['$n478.9']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=482, inst=BINARY_OP(arg=13, lineno=192)
2023-08-01 10:03:59,500 [DEBUG] stack ['$n478.9', '$const480.10']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=486, inst=STORE_FAST(arg=3, lineno=192)
2023-08-01 10:03:59,500 [DEBUG] stack ['$binop_iadd482.11']
2023-08-01 10:03:59,500 [DEBUG] end state. edges=[Edge(pc=488, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,500 [DEBUG] pending: deque([State(pc_initial=488 nstack_initial=0), State(pc_initial=410 nstack_initial=0), State(pc_initial=498 nstack_initial=0), State(pc_initial=488 nstack_initial=0)])
2023-08-01 10:03:59,500 [DEBUG] stack: []
2023-08-01 10:03:59,500 [DEBUG] state.pc_initial: State(pc_initial=488 nstack_initial=0)
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=488, inst=LOAD_FAST(arg=6, lineno=193)
2023-08-01 10:03:59,500 [DEBUG] stack []
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=490, inst=LOAD_CONST(arg=2, lineno=193)
2023-08-01 10:03:59,500 [DEBUG] stack ['$i488.0']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=492, inst=BINARY_OP(arg=0, lineno=193)
2023-08-01 10:03:59,500 [DEBUG] stack ['$i488.0', '$const490.1']
2023-08-01 10:03:59,500 [DEBUG] dispatch pc=496, inst=STORE_FAST(arg=4, lineno=193)
2023-08-01 10:03:59,500 [DEBUG] stack ['$binop_add492.2']
2023-08-01 10:03:59,500 [DEBUG] end state. edges=[Edge(pc=498, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,500 [DEBUG] pending: deque([State(pc_initial=410 nstack_initial=0), State(pc_initial=498 nstack_initial=0), State(pc_initial=488 nstack_initial=0), State(pc_initial=498 nstack_initial=0)])
2023-08-01 10:03:59,500 [DEBUG] pending: deque([State(pc_initial=498 nstack_initial=0), State(pc_initial=488 nstack_initial=0), State(pc_initial=498 nstack_initial=0)])
2023-08-01 10:03:59,500 [DEBUG] stack: []
2023-08-01 10:03:59,501 [DEBUG] state.pc_initial: State(pc_initial=498 nstack_initial=0)
2023-08-01 10:03:59,501 [DEBUG] dispatch pc=498, inst=LOAD_FAST(arg=5, lineno=179)
2023-08-01 10:03:59,501 [DEBUG] stack []
2023-08-01 10:03:59,501 [DEBUG] dispatch pc=500, inst=LOAD_FAST(arg=4, lineno=179)
2023-08-01 10:03:59,501 [DEBUG] stack ['$high498.0']
2023-08-01 10:03:59,501 [DEBUG] dispatch pc=502, inst=BINARY_OP(arg=10, lineno=179)
2023-08-01 10:03:59,501 [DEBUG] stack ['$high498.0', '$low500.1']
2023-08-01 10:03:59,501 [DEBUG] dispatch pc=506, inst=LOAD_GLOBAL(arg=6, lineno=179)
2023-08-01 10:03:59,501 [DEBUG] stack ['$binop_sub502.2']
2023-08-01 10:03:59,501 [DEBUG] dispatch pc=518, inst=COMPARE_OP(arg=5, lineno=179)
2023-08-01 10:03:59,501 [DEBUG] stack ['$binop_sub502.2', '$506load_global.3']
2023-08-01 10:03:59,501 [DEBUG] dispatch pc=524, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=130, lineno=179)
2023-08-01 10:03:59,501 [DEBUG] stack ['$518compare_op.4']
2023-08-01 10:03:59,501 [DEBUG] end state. edges=[Edge(pc=526, stack=(), blockstack=(), npush=0), Edge(pc=266, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,501 [DEBUG] pending: deque([State(pc_initial=488 nstack_initial=0), State(pc_initial=498 nstack_initial=0), State(pc_initial=526 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
2023-08-01 10:03:59,501 [DEBUG] pending: deque([State(pc_initial=498 nstack_initial=0), State(pc_initial=526 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
2023-08-01 10:03:59,501 [DEBUG] pending: deque([State(pc_initial=526 nstack_initial=0), State(pc_initial=266 nstack_initial=0)])
2023-08-01 10:03:59,501 [DEBUG] pending: deque([State(pc_initial=266 nstack_initial=0)])
2023-08-01 10:03:59,501 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,501 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=66 nstack_initial=0): set(),
             State(pc_initial=70 nstack_initial=0): set(),
             State(pc_initial=206 nstack_initial=0): set(),
             State(pc_initial=266 nstack_initial=0): set(),
             State(pc_initial=288 nstack_initial=0): set(),
             State(pc_initial=292 nstack_initial=0): set(),
             State(pc_initial=344 nstack_initial=0): set(),
             State(pc_initial=356 nstack_initial=0): set(),
             State(pc_initial=410 nstack_initial=0): set(),
             State(pc_initial=422 nstack_initial=0): set(),
             State(pc_initial=434 nstack_initial=0): set(),
             State(pc_initial=488 nstack_initial=0): set(),
             State(pc_initial=498 nstack_initial=0): set(),
             State(pc_initial=526 nstack_initial=0): set(),
             State(pc_initial=566 nstack_initial=0): set()})
2023-08-01 10:03:59,501 [DEBUG] defmap: {}
2023-08-01 10:03:59,501 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,501 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,501 [DEBUG] keep phismap: {}
2023-08-01 10:03:59,501 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-08-01 10:03:59,501 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {}), (8, {'res': '$8load_deref.1'}), (10, {'res': '$A10.2'}), (12, {}), (14, {}), (16, {'func': '$8load_deref.1', 'args': ['$A10.2'], 'kw_names': None, 'res': '$16call.3'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'value': '$16call.3'}), (28, {'idx': 0, 'res': '$28load_global.4'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {'res': '$A40.6'}), (42, {}), (44, {}), (46, {'func': '$28load_global.4', 'args': ['$A40.6'], 'kw_names': None, 'res': '$46call.7'}), (48, {}), (50, {}), (52, {}), (54, {}), (56, {'res': '$const56.8'}), (58, {'lhs': '$46call.7', 'rhs': '$const56.8', 'res': '$58compare_op.9'}), (60, {}), (62, {}), (64, {'pred': '$58compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={66: (), 70: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=66 nstack_initial=0):
AdaptBlockInfo(insts=((66, {'res': '$R66.0'}), (68, {'retval': '$R66.0', 'castval': '$68return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=70 nstack_initial=0):
AdaptBlockInfo(insts=((70, {'idx': 1, 'res': '$70load_global.0'}), (72, {}), (74, {}), (76, {}), (78, {}), (80, {}), (82, {'res': '$82load_deref.2'}), (84, {'res': '$84load_deref.3'}), (86, {}), (88, {}), (90, {'func': '$70load_global.0', 'args': ['$82load_deref.2', '$84load_deref.3'], 'kw_names': None, 'res': '$90call.4'}), (92, {}), (94, {}), (96, {}), (98, {}), (100, {'items': ['$90call.4'], 'res': '$100build_list.5'}), (102, {'idx': 2, 'res': '$102load_global.6'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {}), (114, {'op': '*', 'lhs': '$100build_list.5', 'rhs': '$102load_global.6', 'res': '$binop_mul114.7'}), (116, {}), (118, {'value': '$binop_mul114.7'}), (120, {'idx': 1, 'res': '$120load_global.8'}), (122, {}), (124, {}), (126, {}), (128, {}), (130, {}), (132, {'res': '$132load_deref.10'}), (134, {'idx': 0, 'res': '$134load_global.11'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'res': '$A146.13'}), (148, {}), (150, {}), (152, {'func': '$134load_global.11', 'args': ['$A146.13'], 'kw_names': None, 'res': '$152call.14'}), (154, {}), (156, {}), (158, {}), (160, {}), (162, {'res': '$const162.15'}), (164, {'op': '-', 'lhs': '$152call.14', 'rhs': '$const162.15', 'res': '$binop_sub164.16'}), (166, {}), (168, {}), (170, {}), (172, {'func': '$120load_global.8', 'args': ['$132load_deref.10', '$binop_sub164.16'], 'kw_names': None, 'res': '$172call.17'}), (174, {}), (176, {}), (178, {}), (180, {}), (182, {'res': '$stack182.18'}), (184, {'res': '$const184.19'}), (186, {'target': '$stack182.18', 'index': '$const184.19', 'value': '$172call.17'}), (188, {}), (190, {'res': '$const190.20'}), (192, {'value': '$const190.20'}), (194, {'res': '$n194.21'}), (196, {'res': '$const196.22'}), (198, {'lhs': '$n194.21', 'rhs': '$const196.22', 'res': '$198compare_op.23'}), (200, {}), (202, {}), (204, {'pred': '$198compare_op.23'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={206: (), 566: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=206 nstack_initial=0):
AdaptBlockInfo(insts=((206, {'res': '$n206.0'}), (208, {'res': '$const208.1'}), (210, {'op': '-=', 'lhs': '$n206.0', 'rhs': '$const208.1', 'res': '$binop_isub210.2'}), (212, {}), (214, {'value': '$binop_isub210.2'}), (216, {'res': '$stack216.3'}), (218, {'res': '$n218.4'}), (220, {'index': '$n218.4', 'target': '$stack216.3', 'res': '$220binary_subscr.5'}), (222, {}), (224, {}), (226, {}), (228, {}), (230, {'iterable': '$220binary_subscr.5', 'stores': ['$230unpack_sequence.6', '$230unpack_sequence.7'], 'tupleobj': '$230unpack_sequence.8'}), (232, {}), (234, {'value': '$230unpack_sequence.6'}), (236, {'value': '$230unpack_sequence.7'}), (238, {'res': '$high238.9'}), (240, {'res': '$low240.10'}), (242, {'op': '-', 'lhs': '$high238.9', 'rhs': '$low240.10', 'res': '$binop_sub242.11'}), (244, {}), (246, {'idx': 3, 'res': '$246load_global.12'}), (248, {}), (250, {}), (252, {}), (254, {}), (256, {}), (258, {'lhs': '$binop_sub242.11', 'rhs': '$246load_global.12', 'res': '$258compare_op.13'}), (260, {}), (262, {}), (264, {'pred': '$258compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={266: (), 526: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=266 nstack_initial=0):
AdaptBlockInfo(insts=((266, {'res': '$n266.0'}), (268, {'idx': 2, 'res': '$268load_global.1'}), (270, {}), (272, {}), (274, {}), (276, {}), (278, {}), (280, {'lhs': '$n266.0', 'rhs': '$268load_global.1', 'res': '$280compare_op.2'}), (282, {}), (284, {}), (286, {'pred': '$280compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={288: (), 292: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=288 nstack_initial=0):
AdaptBlockInfo(insts=((288, {'res': '$assertion_error288.0'}), (290, {'exc': '$assertion_error288.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=292 nstack_initial=0):
AdaptBlockInfo(insts=((292, {}), (294, {'res': '$294load_deref.1'}), (296, {'res': '$A296.2'}), (298, {'res': '$R298.3'}), (300, {'res': '$low300.4'}), (302, {'res': '$high302.5'}), (304, {}), (306, {}), (308, {'func': '$294load_deref.1', 'args': ['$A296.2', '$R298.3', '$low300.4', '$high302.5'], 'kw_names': None, 'res': '$308call.6'}), (310, {}), (312, {}), (314, {}), (316, {}), (318, {'value': '$308call.6'}), (320, {'res': '$high320.7'}), (322, {'res': '$i322.8'}), (324, {'op': '-', 'lhs': '$high320.7', 'rhs': '$i322.8', 'res': '$binop_sub324.9'}), (326, {}), (328, {'res': '$i328.10'}), (330, {'res': '$low330.11'}), (332, {'op': '-', 'lhs': '$i328.10', 'rhs': '$low330.11', 'res': '$binop_sub332.12'}), (334, {}), (336, {'lhs': '$binop_sub324.9', 'rhs': '$binop_sub332.12', 'res': '$336compare_op.13'}), (338, {}), (340, {}), (342, {'pred': '$336compare_op.13'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={344: (), 422: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=344 nstack_initial=0):
AdaptBlockInfo(insts=((344, {'res': '$high344.0'}), (346, {'res': '$i346.1'}), (348, {'lhs': '$high344.0', 'rhs': '$i346.1', 'res': '$348compare_op.2'}), (350, {}), (352, {}), (354, {'pred': '$348compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={356: (), 410: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=356 nstack_initial=0):
AdaptBlockInfo(insts=((356, {'idx': 1, 'res': '$356load_global.0'}), (358, {}), (360, {}), (362, {}), (364, {}), (366, {}), (368, {'res': '$i368.2'}), (370, {'res': '$const370.3'}), (372, {'op': '+', 'lhs': '$i368.2', 'rhs': '$const370.3', 'res': '$binop_add372.4'}), (374, {}), (376, {'res': '$high376.5'}), (378, {}), (380, {}), (382, {'func': '$356load_global.0', 'args': ['$binop_add372.4', '$high376.5'], 'kw_names': None, 'res': '$382call.6'}), (384, {}), (386, {}), (388, {}), (390, {}), (392, {'res': '$stack392.7'}), (394, {'res': '$n394.8'}), (396, {'target': '$stack392.7', 'index': '$n394.8', 'value': '$382call.6'}), (398, {}), (400, {'res': '$n400.9'}), (402, {'res': '$const402.10'}), (404, {'op': '+=', 'lhs': '$n400.9', 'rhs': '$const402.10', 'res': '$binop_iadd404.11'}), (406, {}), (408, {'value': '$binop_iadd404.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={410: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=410 nstack_initial=0):
AdaptBlockInfo(insts=((410, {'res': '$i410.0'}), (412, {'res': '$const412.1'}), (414, {'op': '-', 'lhs': '$i410.0', 'rhs': '$const412.1', 'res': '$binop_sub414.2'}), (416, {}), (418, {'value': '$binop_sub414.2'}), (420, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={498: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=422 nstack_initial=0):
AdaptBlockInfo(insts=((422, {'res': '$i422.0'}), (424, {'res': '$low424.1'}), (426, {'lhs': '$i422.0', 'rhs': '$low424.1', 'res': '$426compare_op.2'}), (428, {}), (430, {}), (432, {'pred': '$426compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={434: (), 488: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=434 nstack_initial=0):
AdaptBlockInfo(insts=((434, {'idx': 1, 'res': '$434load_global.0'}), (436, {}), (438, {}), (440, {}), (442, {}), (444, {}), (446, {'res': '$low446.2'}), (448, {'res': '$i448.3'}), (450, {'res': '$const450.4'}), (452, {'op': '-', 'lhs': '$i448.3', 'rhs': '$const450.4', 'res': '$binop_sub452.5'}), (454, {}), (456, {}), (458, {}), (460, {'func': '$434load_global.0', 'args': ['$low446.2', '$binop_sub452.5'], 'kw_names': None, 'res': '$460call.6'}), (462, {}), (464, {}), (466, {}), (468, {}), (470, {'res': '$stack470.7'}), (472, {'res': '$n472.8'}), (474, {'target': '$stack470.7', 'index': '$n472.8', 'value': '$460call.6'}), (476, {}), (478, {'res': '$n478.9'}), (480, {'res': '$const480.10'}), (482, {'op': '+=', 'lhs': '$n478.9', 'rhs': '$const480.10', 'res': '$binop_iadd482.11'}), (484, {}), (486, {'value': '$binop_iadd482.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={488: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=488 nstack_initial=0):
AdaptBlockInfo(insts=((488, {'res': '$i488.0'}), (490, {'res': '$const490.1'}), (492, {'op': '+', 'lhs': '$i488.0', 'rhs': '$const490.1', 'res': '$binop_add492.2'}), (494, {}), (496, {'value': '$binop_add492.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={498: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=498 nstack_initial=0):
AdaptBlockInfo(insts=((498, {'res': '$high498.0'}), (500, {'res': '$low500.1'}), (502, {'op': '-', 'lhs': '$high498.0', 'rhs': '$low500.1', 'res': '$binop_sub502.2'}), (504, {}), (506, {'idx': 3, 'res': '$506load_global.3'}), (508, {}), (510, {}), (512, {}), (514, {}), (516, {}), (518, {'lhs': '$binop_sub502.2', 'rhs': '$506load_global.3', 'res': '$518compare_op.4'}), (520, {}), (522, {}), (524, {'pred': '$518compare_op.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={526: (), 266: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=526 nstack_initial=0):
AdaptBlockInfo(insts=((526, {}), (528, {'res': '$528load_deref.1'}), (530, {'res': '$A530.2'}), (532, {'res': '$R532.3'}), (534, {'res': '$low534.4'}), (536, {'res': '$high536.5'}), (538, {}), (540, {}), (542, {'func': '$528load_deref.1', 'args': ['$A530.2', '$R532.3', '$low534.4', '$high536.5'], 'kw_names': None, 'res': '$542call.6'}), (544, {}), (546, {}), (548, {}), (550, {}), (554, {'res': '$n554.7'}), (556, {'res': '$const556.8'}), (558, {'lhs': '$n554.7', 'rhs': '$const556.8', 'res': '$558compare_op.9'}), (560, {}), (562, {}), (564, {'pred': '$558compare_op.9'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={566: (), 206: ()})
2023-08-01 10:03:59,501 [DEBUG] block_infos State(pc_initial=566 nstack_initial=0):
AdaptBlockInfo(insts=((566, {'res': '$R566.0'}), (568, {'retval': '$R566.0', 'castval': '$568return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,503 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x2924902c0>) ['$8load_deref.1']
    R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None) ['$8load_deref.1', 'A', 'R']
    $28load_global.4 = global(len: <built-in function len>) ['$28load_global.4']
    $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_global.4', '$46call.7', 'A']
    $const56.8 = const(int, 2)               ['$const56.8']
    $58compare_op.9 = $46call.7 < $const56.8 ['$46call.7', '$58compare_op.9', '$const56.8']
    bool64 = global(bool: <class 'bool'>)    ['bool64']
    $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None) ['$58compare_op.9', '$64pred', 'bool64']
    branch $64pred, 66, 70                   ['$64pred']
label 66:
    $68return_value.1 = cast(value=R)        ['$68return_value.1', 'R']
    return $68return_value.1                 ['$68return_value.1']
label 70:
    $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$70load_global.0']
    $82load_deref.2 = freevar(zero: 0)       ['$82load_deref.2']
    $84load_deref.3 = freevar(zero: 0)       ['$84load_deref.3']
    $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None) ['$70load_global.0', '$82load_deref.2', '$84load_deref.3', '$90call.4']
    $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)]) ['$100build_list.5', '$90call.4']
    $102load_global.6 = global(MAX_STACK: 100) ['$102load_global.6']
    stack = $100build_list.5 * $102load_global.6 ['$100build_list.5', '$102load_global.6', 'stack']
    $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$120load_global.8']
    $132load_deref.10 = freevar(zero: 0)     ['$132load_deref.10']
    $134load_global.11 = global(len: <built-in function len>) ['$134load_global.11']
    $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.11', '$152call.14', 'A']
    $const162.15 = const(int, 1)             ['$const162.15']
    $binop_sub164.16 = $152call.14 - $const162.15 ['$152call.14', '$binop_sub164.16', '$const162.15']
    $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.8', '$132load_deref.10', '$172call.17', '$binop_sub164.16']
    $const184.19 = const(int, 0)             ['$const184.19']
    stack[$const184.19] = $172call.17        ['$172call.17', '$const184.19', 'stack']
    n = const(int, 1)                        ['n']
    $const196.22 = const(int, 0)             ['$const196.22']
    $198compare_op.23 = n > $const196.22     ['$198compare_op.23', '$const196.22', 'n']
    bool204 = global(bool: <class 'bool'>)   ['bool204']
    $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None) ['$198compare_op.23', '$204pred', 'bool204']
    branch $204pred, 206, 566                ['$204pred']
label 206:
    $const208.1 = const(int, 1)              ['$const208.1']
    $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_isub210.2', '$const208.1', 'n']
    n = $binop_isub210.2                     ['$binop_isub210.2', 'n']
    $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>) ['$220binary_subscr.5', 'n', 'stack']
    $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2) ['$220binary_subscr.5', '$230unpack_sequence.8']
    $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>) ['$230unpack_sequence.6', '$230unpack_sequence.8']
    $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>) ['$230unpack_sequence.7', '$230unpack_sequence.8']
    low = $230unpack_sequence.6              ['$230unpack_sequence.6', 'low']
    high = $230unpack_sequence.7             ['$230unpack_sequence.7', 'high']
    $binop_sub242.11 = high - low            ['$binop_sub242.11', 'high', 'low']
    $246load_global.12 = global(SMALL_QUICKSORT: 15) ['$246load_global.12']
    $258compare_op.13 = $binop_sub242.11 >= $246load_global.12 ['$246load_global.12', '$258compare_op.13', '$binop_sub242.11']
    bool264 = global(bool: <class 'bool'>)   ['bool264']
    $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None) ['$258compare_op.13', '$264pred', 'bool264']
    branch $264pred, 266, 526                ['$264pred']
label 266:
    $268load_global.1 = global(MAX_STACK: 100) ['$268load_global.1']
    $280compare_op.2 = n < $268load_global.1 ['$268load_global.1', '$280compare_op.2', 'n']
    bool286 = global(bool: <class 'bool'>)   ['bool286']
    $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None) ['$280compare_op.2', '$286pred', 'bool286']
    branch $286pred, 292, 288                ['$286pred']
label 288:
    $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>) ['$assertion_error288.0']
    raise $assertion_error288.0              ['$assertion_error288.0']
label 292:
    $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x292490c20>) ['$294load_deref.1']
    i = call $294load_deref.1(A, R, low, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$294load_deref.1', 'A', 'R', 'high', 'i', 'low']
    $binop_sub324.9 = high - i               ['$binop_sub324.9', 'high', 'i']
    $binop_sub332.12 = i - low               ['$binop_sub332.12', 'i', 'low']
    $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12 ['$336compare_op.13', '$binop_sub324.9', '$binop_sub332.12']
    bool342 = global(bool: <class 'bool'>)   ['bool342']
    $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None) ['$336compare_op.13', '$342pred', 'bool342']
    branch $342pred, 344, 422                ['$342pred']
label 344:
    $348compare_op.2 = high > i              ['$348compare_op.2', 'high', 'i']
    bool354 = global(bool: <class 'bool'>)   ['bool354']
    $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None) ['$348compare_op.2', '$354pred', 'bool354']
    branch $354pred, 356, 410                ['$354pred']
label 356:
    $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$356load_global.0']
    $const370.3 = const(int, 1)              ['$const370.3']
    $binop_add372.4 = i + $const370.3        ['$binop_add372.4', '$const370.3', 'i']
    $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$356load_global.0', '$382call.6', '$binop_add372.4', 'high']
    stack[n] = $382call.6                    ['$382call.6', 'n', 'stack']
    $const402.10 = const(int, 1)             ['$const402.10']
    $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd404.11', '$const402.10', 'n']
    n = $binop_iadd404.11                    ['$binop_iadd404.11', 'n']
    jump 410                                 []
label 410:
    $const412.1 = const(int, 1)              ['$const412.1']
    high = i - $const412.1                   ['$const412.1', 'high', 'i']
    jump 498                                 []
label 422:
    $426compare_op.2 = i > low               ['$426compare_op.2', 'i', 'low']
    bool432 = global(bool: <class 'bool'>)   ['bool432']
    $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None) ['$426compare_op.2', '$432pred', 'bool432']
    branch $432pred, 434, 488                ['$432pred']
label 434:
    $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>) ['$434load_global.0']
    $const450.4 = const(int, 1)              ['$const450.4']
    $binop_sub452.5 = i - $const450.4        ['$binop_sub452.5', '$const450.4', 'i']
    $460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None) ['$434load_global.0', '$460call.6', '$binop_sub452.5', 'low']
    stack[n] = $460call.6                    ['$460call.6', 'n', 'stack']
    $const480.10 = const(int, 1)             ['$const480.10']
    $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd482.11', '$const480.10', 'n']
    n = $binop_iadd482.11                    ['$binop_iadd482.11', 'n']
    jump 488                                 []
label 488:
    $const490.1 = const(int, 1)              ['$const490.1']
    low = i + $const490.1                    ['$const490.1', 'i', 'low']
    jump 498                                 []
label 498:
    $binop_sub502.2 = high - low             ['$binop_sub502.2', 'high', 'low']
    $506load_global.3 = global(SMALL_QUICKSORT: 15) ['$506load_global.3']
    $518compare_op.4 = $binop_sub502.2 >= $506load_global.3 ['$506load_global.3', '$518compare_op.4', '$binop_sub502.2']
    bool524 = global(bool: <class 'bool'>)   ['bool524']
    $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None) ['$518compare_op.4', '$524pred', 'bool524']
    branch $524pred, 266, 526                ['$524pred']
label 526:
    $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x292491e40>) ['$528load_deref.1']
    $542call.6 = call $528load_deref.1(A, R, low, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None) ['$528load_deref.1', '$542call.6', 'A', 'R', 'high', 'low']
    $const556.8 = const(int, 0)              ['$const556.8']
    $558compare_op.9 = n > $const556.8       ['$558compare_op.9', '$const556.8', 'n']
    bool564 = global(bool: <class 'bool'>)   ['bool564']
    $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None) ['$558compare_op.9', '$564pred', 'bool564']
    branch $564pred, 206, 566                ['$564pred']
label 566:
    $568return_value.1 = cast(value=R)       ['$568return_value.1', 'R']
    return $568return_value.1                ['$568return_value.1']

2023-08-01 10:03:59,509 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,509 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,509 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x2924902c0>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-08-01 10:03:59,509 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,509 [DEBUG] on stmt: branch $64pred, 66, 70
2023-08-01 10:03:59,509 [DEBUG] ==== SSA block analysis pass on 66
2023-08-01 10:03:59,509 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,509 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-08-01 10:03:59,509 [DEBUG] on stmt: return $68return_value.1
2023-08-01 10:03:59,509 [DEBUG] ==== SSA block analysis pass on 70
2023-08-01 10:03:59,509 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,509 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-08-01 10:03:59,509 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-08-01 10:03:59,509 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-08-01 10:03:59,509 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-08-01 10:03:59,509 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-08-01 10:03:59,509 [DEBUG] on stmt: stack[0] = $172call.17
2023-08-01 10:03:59,509 [DEBUG] on stmt: n = const(int, 1)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-08-01 10:03:59,509 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,509 [DEBUG] on stmt: branch $204pred, 206, 566
2023-08-01 10:03:59,509 [DEBUG] ==== SSA block analysis pass on 206
2023-08-01 10:03:59,509 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,509 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,509 [DEBUG] on stmt: n = $binop_isub210.2
2023-08-01 10:03:59,509 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-08-01 10:03:59,509 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-08-01 10:03:59,509 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-08-01 10:03:59,509 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-08-01 10:03:59,509 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,509 [DEBUG] on stmt: branch $264pred, 266, 526
2023-08-01 10:03:59,509 [DEBUG] ==== SSA block analysis pass on 266
2023-08-01 10:03:59,509 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,509 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-08-01 10:03:59,509 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,509 [DEBUG] on stmt: branch $286pred, 292, 288
2023-08-01 10:03:59,509 [DEBUG] ==== SSA block analysis pass on 288
2023-08-01 10:03:59,509 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,509 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,509 [DEBUG] ==== SSA block analysis pass on 292
2023-08-01 10:03:59,509 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,509 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x292490c20>)
2023-08-01 10:03:59,509 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,509 [DEBUG] on stmt: $binop_sub324.9 = high - i
2023-08-01 10:03:59,509 [DEBUG] on stmt: $binop_sub332.12 = i - low
2023-08-01 10:03:59,509 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-08-01 10:03:59,510 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,510 [DEBUG] on stmt: branch $342pred, 344, 422
2023-08-01 10:03:59,510 [DEBUG] ==== SSA block analysis pass on 344
2023-08-01 10:03:59,510 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,510 [DEBUG] on stmt: $348compare_op.2 = high > i
2023-08-01 10:03:59,510 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,510 [DEBUG] on stmt: branch $354pred, 356, 410
2023-08-01 10:03:59,510 [DEBUG] ==== SSA block analysis pass on 356
2023-08-01 10:03:59,510 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,510 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-08-01 10:03:59,510 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,510 [DEBUG] on stmt: stack[n] = $382call.6
2023-08-01 10:03:59,510 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,510 [DEBUG] on stmt: n = $binop_iadd404.11
2023-08-01 10:03:59,510 [DEBUG] on stmt: jump 410
2023-08-01 10:03:59,510 [DEBUG] ==== SSA block analysis pass on 410
2023-08-01 10:03:59,510 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,510 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-08-01 10:03:59,510 [DEBUG] on stmt: high = i - $const412.1
2023-08-01 10:03:59,510 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,510 [DEBUG] ==== SSA block analysis pass on 422
2023-08-01 10:03:59,510 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,510 [DEBUG] on stmt: $426compare_op.2 = i > low
2023-08-01 10:03:59,510 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,510 [DEBUG] on stmt: branch $432pred, 434, 488
2023-08-01 10:03:59,510 [DEBUG] ==== SSA block analysis pass on 434
2023-08-01 10:03:59,510 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,510 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-08-01 10:03:59,510 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,510 [DEBUG] on stmt: stack[n] = $460call.6
2023-08-01 10:03:59,510 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,510 [DEBUG] on stmt: n = $binop_iadd482.11
2023-08-01 10:03:59,510 [DEBUG] on stmt: jump 488
2023-08-01 10:03:59,510 [DEBUG] ==== SSA block analysis pass on 488
2023-08-01 10:03:59,510 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,510 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-08-01 10:03:59,510 [DEBUG] on stmt: low = i + $const490.1
2023-08-01 10:03:59,510 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,510 [DEBUG] ==== SSA block analysis pass on 498
2023-08-01 10:03:59,510 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,510 [DEBUG] on stmt: $binop_sub502.2 = high - low
2023-08-01 10:03:59,510 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-08-01 10:03:59,510 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,510 [DEBUG] on stmt: branch $524pred, 266, 526
2023-08-01 10:03:59,510 [DEBUG] ==== SSA block analysis pass on 526
2023-08-01 10:03:59,510 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,510 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x292491e40>)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-08-01 10:03:59,510 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,510 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,510 [DEBUG] on stmt: branch $564pred, 206, 566
2023-08-01 10:03:59,510 [DEBUG] ==== SSA block analysis pass on 566
2023-08-01 10:03:59,510 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29251a910>
2023-08-01 10:03:59,510 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-08-01 10:03:59,510 [DEBUG] on stmt: return $568return_value.1
2023-08-01 10:03:59,511 [DEBUG] defs defaultdict(<class 'list'>,
            {'$100build_list.5': [<numba.core.ir.Assign object at 0x292529090>],
             '$102load_global.6': [<numba.core.ir.Assign object at 0x292529290>],
             '$120load_global.8': [<numba.core.ir.Assign object at 0x292529810>],
             '$132load_deref.10': [<numba.core.ir.Assign object at 0x292529a50>],
             '$134load_global.11': [<numba.core.ir.Assign object at 0x292529c10>],
             '$152call.14': [<numba.core.ir.Assign object at 0x29252a150>],
             '$172call.17': [<numba.core.ir.Assign object at 0x29252a850>],
             '$198compare_op.23': [<numba.core.ir.Assign object at 0x29252b590>],
             '$204pred': [<numba.core.ir.Assign object at 0x29252b990>],
             '$220binary_subscr.5': [<numba.core.ir.Assign object at 0x29252c510>],
             '$230unpack_sequence.6': [<numba.core.ir.Assign object at 0x29252c910>],
             '$230unpack_sequence.7': [<numba.core.ir.Assign object at 0x29252ca50>],
             '$230unpack_sequence.8': [<numba.core.ir.Assign object at 0x29252c790>],
             '$246load_global.12': [<numba.core.ir.Assign object at 0x29252d510>],
             '$258compare_op.13': [<numba.core.ir.Assign object at 0x29252d850>],
             '$264pred': [<numba.core.ir.Assign object at 0x29252dc50>],
             '$268load_global.1': [<numba.core.ir.Assign object at 0x29252df10>],
             '$280compare_op.2': [<numba.core.ir.Assign object at 0x29252e110>],
             '$286pred': [<numba.core.ir.Assign object at 0x29252e510>],
             '$28load_global.4': [<numba.core.ir.Assign object at 0x292507f10>],
             '$294load_deref.1': [<numba.core.ir.Assign object at 0x29252e9d0>],
             '$336compare_op.13': [<numba.core.ir.Assign object at 0x2925300d0>],
             '$342pred': [<numba.core.ir.Assign object at 0x292530490>],
             '$348compare_op.2': [<numba.core.ir.Assign object at 0x2925308d0>],
             '$354pred': [<numba.core.ir.Assign object at 0x292530c90>],
             '$356load_global.0': [<numba.core.ir.Assign object at 0x292530e90>],
             '$382call.6': [<numba.core.ir.Assign object at 0x292531850>],
             '$426compare_op.2': [<numba.core.ir.Assign object at 0x292532ed0>],
             '$432pred': [<numba.core.ir.Assign object at 0x292533290>],
             '$434load_global.0': [<numba.core.ir.Assign object at 0x292533490>],
             '$460call.6': [<numba.core.ir.Assign object at 0x292533e10>],
             '$46call.7': [<numba.core.ir.Assign object at 0x29251c190>],
             '$506load_global.3': [<numba.core.ir.Assign object at 0x29253d3d0>],
             '$518compare_op.4': [<numba.core.ir.Assign object at 0x29253d5d0>],
             '$524pred': [<numba.core.ir.Assign object at 0x29253d990>],
             '$528load_deref.1': [<numba.core.ir.Assign object at 0x29253dbd0>],
             '$542call.6': [<numba.core.ir.Assign object at 0x29253e4d0>],
             '$558compare_op.9': [<numba.core.ir.Assign object at 0x29253ead0>],
             '$564pred': [<numba.core.ir.Assign object at 0x29253ee50>],
             '$568return_value.1': [<numba.core.ir.Assign object at 0x29253f1d0>],
             '$58compare_op.9': [<numba.core.ir.Assign object at 0x29251ff10>],
             '$64pred': [<numba.core.ir.Assign object at 0x292528250>],
             '$68return_value.1': [<numba.core.ir.Assign object at 0x292528610>],
             '$70load_global.0': [<numba.core.ir.Assign object at 0x292528850>],
             '$82load_deref.2': [<numba.core.ir.Assign object at 0x292528b10>],
             '$84load_deref.3': [<numba.core.ir.Assign object at 0x292528cd0>],
             '$8load_deref.1': [<numba.core.ir.Assign object at 0x29251a450>],
             '$90call.4': [<numba.core.ir.Assign object at 0x292528e50>],
             '$assertion_error288.0': [<numba.core.ir.Assign object at 0x29252e750>],
             '$binop_add372.4': [<numba.core.ir.Assign object at 0x2925313d0>],
             '$binop_iadd404.11': [<numba.core.ir.Assign object at 0x292532150>],
             '$binop_iadd482.11': [<numba.core.ir.Assign object at 0x29253c690>],
             '$binop_isub210.2': [<numba.core.ir.Assign object at 0x29252be10>],
             '$binop_sub164.16': [<numba.core.ir.Assign object at 0x29252a5d0>],
             '$binop_sub242.11': [<numba.core.ir.Assign object at 0x29252d310>],
             '$binop_sub324.9': [<numba.core.ir.Assign object at 0x29252f9d0>],
             '$binop_sub332.12': [<numba.core.ir.Assign object at 0x29252fe90>],
             '$binop_sub452.5': [<numba.core.ir.Assign object at 0x292533b90>],
             '$binop_sub502.2': [<numba.core.ir.Assign object at 0x29253d250>],
             '$const162.15': [<numba.core.ir.Assign object at 0x29252a3d0>],
             '$const184.19': [<numba.core.ir.Assign object at 0x29252ac50>],
             '$const196.22': [<numba.core.ir.Assign object at 0x29252b350>],
             '$const208.1': [<numba.core.ir.Assign object at 0x29252bc90>],
             '$const370.3': [<numba.core.ir.Assign object at 0x2925311d0>],
             '$const402.10': [<numba.core.ir.Assign object at 0x292531f50>],
             '$const412.1': [<numba.core.ir.Assign object at 0x292532550>],
             '$const450.4': [<numba.core.ir.Assign object at 0x292533990>],
             '$const480.10': [<numba.core.ir.Assign object at 0x29253c490>],
             '$const490.1': [<numba.core.ir.Assign object at 0x29253ca10>],
             '$const556.8': [<numba.core.ir.Assign object at 0x29253e890>],
             '$const56.8': [<numba.core.ir.Assign object at 0x29251fdd0>],
             'A': [<numba.core.ir.Assign object at 0x29251a950>],
             'R': [<numba.core.ir.Assign object at 0x292518d90>],
             'bool204': [<numba.core.ir.Assign object at 0x29252b7d0>],
             'bool264': [<numba.core.ir.Assign object at 0x29252da90>],
             'bool286': [<numba.core.ir.Assign object at 0x29252e350>],
             'bool342': [<numba.core.ir.Assign object at 0x2925302d0>],
             'bool354': [<numba.core.ir.Assign object at 0x292530ad0>],
             'bool432': [<numba.core.ir.Assign object at 0x2925330d0>],
             'bool524': [<numba.core.ir.Assign object at 0x29253d7d0>],
             'bool564': [<numba.core.ir.Assign object at 0x29253ec90>],
             'bool64': [<numba.core.ir.Assign object at 0x292528110>],
             'high': [<numba.core.ir.Assign object at 0x29252cd90>,
                      <numba.core.ir.Assign object at 0x292532790>],
             'i': [<numba.core.ir.Assign object at 0x29252f290>],
             'low': [<numba.core.ir.Assign object at 0x29252cc10>,
                     <numba.core.ir.Assign object at 0x29253cc10>],
             'n': [<numba.core.ir.Assign object at 0x29252aed0>,
                   <numba.core.ir.Assign object at 0x29252be90>,
                   <numba.core.ir.Assign object at 0x2925321d0>,
                   <numba.core.ir.Assign object at 0x29253c710>],
             'stack': [<numba.core.ir.Assign object at 0x292529490>]})
2023-08-01 10:03:59,511 [DEBUG] SSA violators {'high', 'low', 'n'}
2023-08-01 10:03:59,511 [DEBUG] Fix SSA violator on var high
2023-08-01 10:03:59,511 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,511 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,511 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x2924902c0>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-08-01 10:03:59,511 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,511 [DEBUG] on stmt: branch $64pred, 66, 70
2023-08-01 10:03:59,511 [DEBUG] ==== SSA block rewrite pass on 66
2023-08-01 10:03:59,511 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,511 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-08-01 10:03:59,511 [DEBUG] on stmt: return $68return_value.1
2023-08-01 10:03:59,511 [DEBUG] ==== SSA block rewrite pass on 70
2023-08-01 10:03:59,511 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,511 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-08-01 10:03:59,511 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-08-01 10:03:59,511 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-08-01 10:03:59,511 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-08-01 10:03:59,511 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-08-01 10:03:59,511 [DEBUG] on stmt: stack[0] = $172call.17
2023-08-01 10:03:59,511 [DEBUG] on stmt: n = const(int, 1)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-08-01 10:03:59,511 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,511 [DEBUG] on stmt: branch $204pred, 206, 566
2023-08-01 10:03:59,511 [DEBUG] ==== SSA block rewrite pass on 206
2023-08-01 10:03:59,511 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,511 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,511 [DEBUG] on stmt: n = $binop_isub210.2
2023-08-01 10:03:59,511 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-08-01 10:03:59,511 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-08-01 10:03:59,511 [DEBUG] first assign: high
2023-08-01 10:03:59,511 [DEBUG] replaced with: high = $230unpack_sequence.7
2023-08-01 10:03:59,511 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-08-01 10:03:59,511 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-08-01 10:03:59,511 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,511 [DEBUG] on stmt: branch $264pred, 266, 526
2023-08-01 10:03:59,511 [DEBUG] ==== SSA block rewrite pass on 266
2023-08-01 10:03:59,511 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,511 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-08-01 10:03:59,511 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,511 [DEBUG] on stmt: branch $286pred, 292, 288
2023-08-01 10:03:59,511 [DEBUG] ==== SSA block rewrite pass on 288
2023-08-01 10:03:59,511 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,511 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,511 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,511 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,511 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x292490c20>)
2023-08-01 10:03:59,511 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,511 [DEBUG] on stmt: $binop_sub324.9 = high - i
2023-08-01 10:03:59,511 [DEBUG] on stmt: $binop_sub332.12 = i - low
2023-08-01 10:03:59,512 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-08-01 10:03:59,512 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: branch $342pred, 344, 422
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 344
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $348compare_op.2 = high > i
2023-08-01 10:03:59,512 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: branch $354pred, 356, 410
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-08-01 10:03:59,512 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: stack[n] = $382call.6
2023-08-01 10:03:59,512 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,512 [DEBUG] on stmt: n = $binop_iadd404.11
2023-08-01 10:03:59,512 [DEBUG] on stmt: jump 410
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 410
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-08-01 10:03:59,512 [DEBUG] on stmt: high = i - $const412.1
2023-08-01 10:03:59,512 [DEBUG] replaced with: high.1 = i - $const412.1
2023-08-01 10:03:59,512 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 422
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $426compare_op.2 = i > low
2023-08-01 10:03:59,512 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: branch $432pred, 434, 488
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 434
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-08-01 10:03:59,512 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: stack[n] = $460call.6
2023-08-01 10:03:59,512 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,512 [DEBUG] on stmt: n = $binop_iadd482.11
2023-08-01 10:03:59,512 [DEBUG] on stmt: jump 488
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 488
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-08-01 10:03:59,512 [DEBUG] on stmt: low = i + $const490.1
2023-08-01 10:03:59,512 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 498
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $binop_sub502.2 = high - low
2023-08-01 10:03:59,512 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-08-01 10:03:59,512 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: branch $524pred, 266, 526
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 526
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x292491e40>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-08-01 10:03:59,512 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: branch $564pred, 206, 566
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 566
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x1718f9610>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-08-01 10:03:59,512 [DEBUG] on stmt: return $568return_value.1
2023-08-01 10:03:59,512 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {206: [<numba.core.ir.Assign object at 0x29251fc10>],
             410: [<numba.core.ir.Assign object at 0x29251e050>]})
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,512 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x2924902c0>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-08-01 10:03:59,512 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,512 [DEBUG] on stmt: branch $64pred, 66, 70
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 66
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-08-01 10:03:59,512 [DEBUG] on stmt: return $68return_value.1
2023-08-01 10:03:59,512 [DEBUG] ==== SSA block rewrite pass on 70
2023-08-01 10:03:59,512 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,512 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,512 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-08-01 10:03:59,513 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-08-01 10:03:59,513 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-08-01 10:03:59,513 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-08-01 10:03:59,513 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-08-01 10:03:59,513 [DEBUG] on stmt: stack[0] = $172call.17
2023-08-01 10:03:59,513 [DEBUG] on stmt: n = const(int, 1)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-08-01 10:03:59,513 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,513 [DEBUG] on stmt: branch $204pred, 206, 566
2023-08-01 10:03:59,513 [DEBUG] ==== SSA block rewrite pass on 206
2023-08-01 10:03:59,513 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,513 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,513 [DEBUG] on stmt: n = $binop_isub210.2
2023-08-01 10:03:59,513 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,513 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-08-01 10:03:59,513 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-08-01 10:03:59,513 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-08-01 10:03:59,513 [DEBUG] find_def var='high' stmt=$binop_sub242.11 = high - low
2023-08-01 10:03:59,513 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-08-01 10:03:59,513 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,513 [DEBUG] on stmt: branch $264pred, 266, 526
2023-08-01 10:03:59,513 [DEBUG] ==== SSA block rewrite pass on 266
2023-08-01 10:03:59,513 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,513 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-08-01 10:03:59,513 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,513 [DEBUG] on stmt: branch $286pred, 292, 288
2023-08-01 10:03:59,513 [DEBUG] ==== SSA block rewrite pass on 288
2023-08-01 10:03:59,513 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,513 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,513 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,513 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,513 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,513 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x292490c20>)
2023-08-01 10:03:59,513 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,513 [DEBUG] find_def var='high' stmt=i = call $294load_deref.1(A, R, low, high, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,513 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,513 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,513 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,513 [DEBUG] find_def_from_top label 266
2023-08-01 10:03:59,513 [DEBUG] insert phi node high.2 = phi(incoming_values=[], incoming_blocks=[]) at 266
2023-08-01 10:03:59,513 [DEBUG] find_def_from_bottom label 498
2023-08-01 10:03:59,513 [DEBUG] find_def_from_top label 498
2023-08-01 10:03:59,513 [DEBUG] insert phi node high.3 = phi(incoming_values=[], incoming_blocks=[]) at 498
2023-08-01 10:03:59,513 [DEBUG] find_def_from_bottom label 488
2023-08-01 10:03:59,513 [DEBUG] find_def_from_top label 488
2023-08-01 10:03:59,513 [DEBUG] idom 422 from label 488
2023-08-01 10:03:59,513 [DEBUG] find_def_from_bottom label 422
2023-08-01 10:03:59,513 [DEBUG] find_def_from_top label 422
2023-08-01 10:03:59,513 [DEBUG] idom 292 from label 422
2023-08-01 10:03:59,513 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,513 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,513 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,513 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,513 [DEBUG] incoming_def high.2 = phi(incoming_values=[], incoming_blocks=[])
2023-08-01 10:03:59,513 [DEBUG] find_def_from_bottom label 410
2023-08-01 10:03:59,513 [DEBUG] incoming_def high.1 = i - $const412.1
2023-08-01 10:03:59,513 [DEBUG] incoming_def high.3 = phi(incoming_values=[Var(high.2, quicksort.py:181), Var(high.1, quicksort.py:188)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,513 [DEBUG] find_def_from_bottom label 206
2023-08-01 10:03:59,513 [DEBUG] incoming_def high = $230unpack_sequence.7
2023-08-01 10:03:59,513 [DEBUG] replaced with: i = call $294load_deref.1(A, R, low, high.2, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,513 [DEBUG] on stmt: $binop_sub324.9 = high - i
2023-08-01 10:03:59,513 [DEBUG] find_def var='high' stmt=$binop_sub324.9 = high - i
2023-08-01 10:03:59,514 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,514 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,514 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,514 [DEBUG] replaced with: $binop_sub324.9 = high.2 - i
2023-08-01 10:03:59,514 [DEBUG] on stmt: $binop_sub332.12 = i - low
2023-08-01 10:03:59,514 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-08-01 10:03:59,514 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,514 [DEBUG] on stmt: branch $342pred, 344, 422
2023-08-01 10:03:59,514 [DEBUG] ==== SSA block rewrite pass on 344
2023-08-01 10:03:59,514 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,514 [DEBUG] on stmt: $348compare_op.2 = high > i
2023-08-01 10:03:59,514 [DEBUG] find_def var='high' stmt=$348compare_op.2 = high > i
2023-08-01 10:03:59,514 [DEBUG] find_def_from_top label 344
2023-08-01 10:03:59,514 [DEBUG] idom 292 from label 344
2023-08-01 10:03:59,514 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,514 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,514 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,514 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,514 [DEBUG] replaced with: $348compare_op.2 = high.2 > i
2023-08-01 10:03:59,514 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,514 [DEBUG] on stmt: branch $354pred, 356, 410
2023-08-01 10:03:59,514 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,514 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,514 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-08-01 10:03:59,514 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,514 [DEBUG] find_def var='high' stmt=$382call.6 = call $356load_global.0($binop_add372.4, high, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,514 [DEBUG] find_def_from_top label 356
2023-08-01 10:03:59,514 [DEBUG] idom 344 from label 356
2023-08-01 10:03:59,514 [DEBUG] find_def_from_bottom label 344
2023-08-01 10:03:59,514 [DEBUG] find_def_from_top label 344
2023-08-01 10:03:59,514 [DEBUG] idom 292 from label 344
2023-08-01 10:03:59,514 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,514 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,514 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,514 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,514 [DEBUG] replaced with: $382call.6 = call $356load_global.0($binop_add372.4, high.2, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,514 [DEBUG] on stmt: stack[n] = $382call.6
2023-08-01 10:03:59,514 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,514 [DEBUG] on stmt: n = $binop_iadd404.11
2023-08-01 10:03:59,514 [DEBUG] on stmt: jump 410
2023-08-01 10:03:59,514 [DEBUG] ==== SSA block rewrite pass on 410
2023-08-01 10:03:59,514 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,514 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-08-01 10:03:59,514 [DEBUG] on stmt: high.1 = i - $const412.1
2023-08-01 10:03:59,514 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,514 [DEBUG] ==== SSA block rewrite pass on 422
2023-08-01 10:03:59,514 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,514 [DEBUG] on stmt: $426compare_op.2 = i > low
2023-08-01 10:03:59,514 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,514 [DEBUG] on stmt: branch $432pred, 434, 488
2023-08-01 10:03:59,514 [DEBUG] ==== SSA block rewrite pass on 434
2023-08-01 10:03:59,514 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,514 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-08-01 10:03:59,514 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,514 [DEBUG] on stmt: stack[n] = $460call.6
2023-08-01 10:03:59,514 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,514 [DEBUG] on stmt: n = $binop_iadd482.11
2023-08-01 10:03:59,514 [DEBUG] on stmt: jump 488
2023-08-01 10:03:59,514 [DEBUG] ==== SSA block rewrite pass on 488
2023-08-01 10:03:59,514 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,514 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-08-01 10:03:59,514 [DEBUG] on stmt: low = i + $const490.1
2023-08-01 10:03:59,514 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,514 [DEBUG] ==== SSA block rewrite pass on 498
2023-08-01 10:03:59,514 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,514 [DEBUG] on stmt: $binop_sub502.2 = high - low
2023-08-01 10:03:59,514 [DEBUG] find_def var='high' stmt=$binop_sub502.2 = high - low
2023-08-01 10:03:59,514 [DEBUG] replaced with: $binop_sub502.2 = high.3 - low
2023-08-01 10:03:59,514 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-08-01 10:03:59,514 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,514 [DEBUG] on stmt: branch $524pred, 266, 526
2023-08-01 10:03:59,514 [DEBUG] ==== SSA block rewrite pass on 526
2023-08-01 10:03:59,514 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,514 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x292491e40>)
2023-08-01 10:03:59,514 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] find_def var='high' stmt=$542call.6 = call $528load_deref.1(A, R, low, high, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high, quicksort.py:177)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] find_def_from_top label 526
2023-08-01 10:03:59,515 [DEBUG] insert phi node high.4 = phi(incoming_values=[], incoming_blocks=[]) at 526
2023-08-01 10:03:59,515 [DEBUG] find_def_from_bottom label 498
2023-08-01 10:03:59,515 [DEBUG] incoming_def high.3 = phi(incoming_values=[Var(high.2, quicksort.py:181), Var(high.1, quicksort.py:188)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,515 [DEBUG] find_def_from_bottom label 206
2023-08-01 10:03:59,515 [DEBUG] incoming_def high = $230unpack_sequence.7
2023-08-01 10:03:59,515 [DEBUG] replaced with: $542call.6 = call $528load_deref.1(A, R, low, high.4, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.4, quicksort.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-08-01 10:03:59,515 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: branch $564pred, 206, 566
2023-08-01 10:03:59,515 [DEBUG] ==== SSA block rewrite pass on 566
2023-08-01 10:03:59,515 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29251dd10>
2023-08-01 10:03:59,515 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-08-01 10:03:59,515 [DEBUG] on stmt: return $568return_value.1
2023-08-01 10:03:59,515 [DEBUG] Fix SSA violator on var low
2023-08-01 10:03:59,515 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,515 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,515 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x2924902c0>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-08-01 10:03:59,515 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: branch $64pred, 66, 70
2023-08-01 10:03:59,515 [DEBUG] ==== SSA block rewrite pass on 66
2023-08-01 10:03:59,515 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,515 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-08-01 10:03:59,515 [DEBUG] on stmt: return $68return_value.1
2023-08-01 10:03:59,515 [DEBUG] ==== SSA block rewrite pass on 70
2023-08-01 10:03:59,515 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,515 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-08-01 10:03:59,515 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-08-01 10:03:59,515 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-08-01 10:03:59,515 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-08-01 10:03:59,515 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-08-01 10:03:59,515 [DEBUG] on stmt: stack[0] = $172call.17
2023-08-01 10:03:59,515 [DEBUG] on stmt: n = const(int, 1)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-08-01 10:03:59,515 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: branch $204pred, 206, 566
2023-08-01 10:03:59,515 [DEBUG] ==== SSA block rewrite pass on 206
2023-08-01 10:03:59,515 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,515 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,515 [DEBUG] on stmt: n = $binop_isub210.2
2023-08-01 10:03:59,515 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-08-01 10:03:59,515 [DEBUG] first assign: low
2023-08-01 10:03:59,515 [DEBUG] replaced with: low = $230unpack_sequence.6
2023-08-01 10:03:59,515 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-08-01 10:03:59,515 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-08-01 10:03:59,515 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-08-01 10:03:59,515 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: branch $264pred, 266, 526
2023-08-01 10:03:59,515 [DEBUG] ==== SSA block rewrite pass on 266
2023-08-01 10:03:59,515 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,515 [DEBUG] on stmt: high.2 = phi(incoming_values=[Var(high.3, quicksort.py:181), Var(high, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,515 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-08-01 10:03:59,515 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,515 [DEBUG] on stmt: branch $286pred, 292, 288
2023-08-01 10:03:59,515 [DEBUG] ==== SSA block rewrite pass on 288
2023-08-01 10:03:59,515 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,515 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,515 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,515 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,516 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x292490c20>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low, high.2, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $binop_sub324.9 = high.2 - i
2023-08-01 10:03:59,516 [DEBUG] on stmt: $binop_sub332.12 = i - low
2023-08-01 10:03:59,516 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-08-01 10:03:59,516 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: branch $342pred, 344, 422
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 344
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,516 [DEBUG] on stmt: $348compare_op.2 = high.2 > i
2023-08-01 10:03:59,516 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: branch $354pred, 356, 410
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,516 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-08-01 10:03:59,516 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high.2, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: stack[n] = $382call.6
2023-08-01 10:03:59,516 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,516 [DEBUG] on stmt: n = $binop_iadd404.11
2023-08-01 10:03:59,516 [DEBUG] on stmt: jump 410
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 410
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,516 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-08-01 10:03:59,516 [DEBUG] on stmt: high.1 = i - $const412.1
2023-08-01 10:03:59,516 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 422
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,516 [DEBUG] on stmt: $426compare_op.2 = i > low
2023-08-01 10:03:59,516 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: branch $432pred, 434, 488
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 434
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,516 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-08-01 10:03:59,516 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: stack[n] = $460call.6
2023-08-01 10:03:59,516 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,516 [DEBUG] on stmt: n = $binop_iadd482.11
2023-08-01 10:03:59,516 [DEBUG] on stmt: jump 488
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 488
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,516 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-08-01 10:03:59,516 [DEBUG] on stmt: low = i + $const490.1
2023-08-01 10:03:59,516 [DEBUG] replaced with: low.1 = i + $const490.1
2023-08-01 10:03:59,516 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 498
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,516 [DEBUG] on stmt: high.3 = phi(incoming_values=[Var(high.2, quicksort.py:181), Var(high.1, quicksort.py:188)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,516 [DEBUG] on stmt: $binop_sub502.2 = high.3 - low
2023-08-01 10:03:59,516 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-08-01 10:03:59,516 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: branch $524pred, 266, 526
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 526
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,516 [DEBUG] on stmt: high.4 = phi(incoming_values=[Var(high.3, quicksort.py:181), Var(high, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,516 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x292491e40>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low, high.4, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.4, quicksort.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-08-01 10:03:59,516 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: branch $564pred, 206, 566
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 566
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x29251ddd0>
2023-08-01 10:03:59,516 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-08-01 10:03:59,516 [DEBUG] on stmt: return $568return_value.1
2023-08-01 10:03:59,516 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {206: [<numba.core.ir.Assign object at 0x29251ca90>],
             488: [<numba.core.ir.Assign object at 0x29251fd10>]})
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,516 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,516 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x2924902c0>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-08-01 10:03:59,516 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,516 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,516 [DEBUG] on stmt: branch $64pred, 66, 70
2023-08-01 10:03:59,516 [DEBUG] ==== SSA block rewrite pass on 66
2023-08-01 10:03:59,517 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,517 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-08-01 10:03:59,517 [DEBUG] on stmt: return $68return_value.1
2023-08-01 10:03:59,517 [DEBUG] ==== SSA block rewrite pass on 70
2023-08-01 10:03:59,517 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,517 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-08-01 10:03:59,517 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-08-01 10:03:59,517 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-08-01 10:03:59,517 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-08-01 10:03:59,517 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-08-01 10:03:59,517 [DEBUG] on stmt: stack[0] = $172call.17
2023-08-01 10:03:59,517 [DEBUG] on stmt: n = const(int, 1)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-08-01 10:03:59,517 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,517 [DEBUG] on stmt: branch $204pred, 206, 566
2023-08-01 10:03:59,517 [DEBUG] ==== SSA block rewrite pass on 206
2023-08-01 10:03:59,517 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,517 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,517 [DEBUG] on stmt: n = $binop_isub210.2
2023-08-01 10:03:59,517 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-08-01 10:03:59,517 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-08-01 10:03:59,517 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-08-01 10:03:59,517 [DEBUG] find_def var='low' stmt=$binop_sub242.11 = high - low
2023-08-01 10:03:59,517 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-08-01 10:03:59,517 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,517 [DEBUG] on stmt: branch $264pred, 266, 526
2023-08-01 10:03:59,517 [DEBUG] ==== SSA block rewrite pass on 266
2023-08-01 10:03:59,517 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,517 [DEBUG] on stmt: high.2 = phi(incoming_values=[Var(high.3, quicksort.py:181), Var(high, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,517 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-08-01 10:03:59,517 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,517 [DEBUG] on stmt: branch $286pred, 292, 288
2023-08-01 10:03:59,517 [DEBUG] ==== SSA block rewrite pass on 288
2023-08-01 10:03:59,517 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,517 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,517 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,517 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,517 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x292490c20>)
2023-08-01 10:03:59,517 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low, high.2, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,517 [DEBUG] find_def var='low' stmt=i = call $294load_deref.1(A, R, low, high.2, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,517 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,517 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,517 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,517 [DEBUG] find_def_from_top label 266
2023-08-01 10:03:59,517 [DEBUG] insert phi node low.2 = phi(incoming_values=[], incoming_blocks=[]) at 266
2023-08-01 10:03:59,517 [DEBUG] find_def_from_bottom label 498
2023-08-01 10:03:59,517 [DEBUG] find_def_from_top label 498
2023-08-01 10:03:59,517 [DEBUG] insert phi node low.3 = phi(incoming_values=[], incoming_blocks=[]) at 498
2023-08-01 10:03:59,517 [DEBUG] find_def_from_bottom label 488
2023-08-01 10:03:59,517 [DEBUG] incoming_def low.1 = i + $const490.1
2023-08-01 10:03:59,517 [DEBUG] find_def_from_bottom label 410
2023-08-01 10:03:59,517 [DEBUG] find_def_from_top label 410
2023-08-01 10:03:59,517 [DEBUG] idom 344 from label 410
2023-08-01 10:03:59,517 [DEBUG] find_def_from_bottom label 344
2023-08-01 10:03:59,517 [DEBUG] find_def_from_top label 344
2023-08-01 10:03:59,517 [DEBUG] idom 292 from label 344
2023-08-01 10:03:59,517 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,517 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,517 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,517 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,517 [DEBUG] incoming_def low.2 = phi(incoming_values=[], incoming_blocks=[])
2023-08-01 10:03:59,517 [DEBUG] incoming_def low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:181)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,517 [DEBUG] find_def_from_bottom label 206
2023-08-01 10:03:59,517 [DEBUG] incoming_def low = $230unpack_sequence.6
2023-08-01 10:03:59,517 [DEBUG] replaced with: i = call $294load_deref.1(A, R, low.2, high.2, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.2, quicksort.py:181), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,517 [DEBUG] on stmt: $binop_sub324.9 = high.2 - i
2023-08-01 10:03:59,517 [DEBUG] on stmt: $binop_sub332.12 = i - low
2023-08-01 10:03:59,517 [DEBUG] find_def var='low' stmt=$binop_sub332.12 = i - low
2023-08-01 10:03:59,518 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,518 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,518 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,518 [DEBUG] replaced with: $binop_sub332.12 = i - low.2
2023-08-01 10:03:59,518 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-08-01 10:03:59,518 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,518 [DEBUG] on stmt: branch $342pred, 344, 422
2023-08-01 10:03:59,518 [DEBUG] ==== SSA block rewrite pass on 344
2023-08-01 10:03:59,518 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,518 [DEBUG] on stmt: $348compare_op.2 = high.2 > i
2023-08-01 10:03:59,518 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,518 [DEBUG] on stmt: branch $354pred, 356, 410
2023-08-01 10:03:59,518 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,518 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,518 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-08-01 10:03:59,518 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high.2, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,518 [DEBUG] on stmt: stack[n] = $382call.6
2023-08-01 10:03:59,518 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,518 [DEBUG] on stmt: n = $binop_iadd404.11
2023-08-01 10:03:59,518 [DEBUG] on stmt: jump 410
2023-08-01 10:03:59,518 [DEBUG] ==== SSA block rewrite pass on 410
2023-08-01 10:03:59,518 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,518 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-08-01 10:03:59,518 [DEBUG] on stmt: high.1 = i - $const412.1
2023-08-01 10:03:59,518 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,518 [DEBUG] ==== SSA block rewrite pass on 422
2023-08-01 10:03:59,518 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,518 [DEBUG] on stmt: $426compare_op.2 = i > low
2023-08-01 10:03:59,518 [DEBUG] find_def var='low' stmt=$426compare_op.2 = i > low
2023-08-01 10:03:59,518 [DEBUG] find_def_from_top label 422
2023-08-01 10:03:59,518 [DEBUG] idom 292 from label 422
2023-08-01 10:03:59,518 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,518 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,518 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,518 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,518 [DEBUG] replaced with: $426compare_op.2 = i > low.2
2023-08-01 10:03:59,518 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,518 [DEBUG] on stmt: branch $432pred, 434, 488
2023-08-01 10:03:59,518 [DEBUG] ==== SSA block rewrite pass on 434
2023-08-01 10:03:59,518 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,518 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-08-01 10:03:59,518 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,518 [DEBUG] find_def var='low' stmt=$460call.6 = call $434load_global.0(low, $binop_sub452.5, func=$434load_global.0, args=[Var(low, quicksort.py:177), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,518 [DEBUG] find_def_from_top label 434
2023-08-01 10:03:59,518 [DEBUG] idom 422 from label 434
2023-08-01 10:03:59,518 [DEBUG] find_def_from_bottom label 422
2023-08-01 10:03:59,518 [DEBUG] find_def_from_top label 422
2023-08-01 10:03:59,518 [DEBUG] idom 292 from label 422
2023-08-01 10:03:59,518 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,518 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,518 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,518 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,518 [DEBUG] replaced with: $460call.6 = call $434load_global.0(low.2, $binop_sub452.5, func=$434load_global.0, args=[Var(low.2, quicksort.py:181), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,518 [DEBUG] on stmt: stack[n] = $460call.6
2023-08-01 10:03:59,518 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,518 [DEBUG] on stmt: n = $binop_iadd482.11
2023-08-01 10:03:59,518 [DEBUG] on stmt: jump 488
2023-08-01 10:03:59,518 [DEBUG] ==== SSA block rewrite pass on 488
2023-08-01 10:03:59,518 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,518 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-08-01 10:03:59,518 [DEBUG] on stmt: low.1 = i + $const490.1
2023-08-01 10:03:59,518 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,518 [DEBUG] ==== SSA block rewrite pass on 498
2023-08-01 10:03:59,518 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,518 [DEBUG] on stmt: high.3 = phi(incoming_values=[Var(high.2, quicksort.py:181), Var(high.1, quicksort.py:188)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,518 [DEBUG] on stmt: $binop_sub502.2 = high.3 - low
2023-08-01 10:03:59,518 [DEBUG] find_def var='low' stmt=$binop_sub502.2 = high.3 - low
2023-08-01 10:03:59,518 [DEBUG] replaced with: $binop_sub502.2 = high.3 - low.3
2023-08-01 10:03:59,518 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-08-01 10:03:59,518 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,518 [DEBUG] on stmt: branch $524pred, 266, 526
2023-08-01 10:03:59,518 [DEBUG] ==== SSA block rewrite pass on 526
2023-08-01 10:03:59,518 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,518 [DEBUG] on stmt: high.4 = phi(incoming_values=[Var(high.3, quicksort.py:181), Var(high, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,518 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x292491e40>)
2023-08-01 10:03:59,518 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low, high.4, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.4, quicksort.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,518 [DEBUG] find_def var='low' stmt=$542call.6 = call $528load_deref.1(A, R, low, high.4, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low, quicksort.py:177), Var(high.4, quicksort.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,518 [DEBUG] find_def_from_top label 526
2023-08-01 10:03:59,519 [DEBUG] insert phi node low.4 = phi(incoming_values=[], incoming_blocks=[]) at 526
2023-08-01 10:03:59,519 [DEBUG] find_def_from_bottom label 498
2023-08-01 10:03:59,519 [DEBUG] incoming_def low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:181)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,519 [DEBUG] find_def_from_bottom label 206
2023-08-01 10:03:59,519 [DEBUG] incoming_def low = $230unpack_sequence.6
2023-08-01 10:03:59,519 [DEBUG] replaced with: $542call.6 = call $528load_deref.1(A, R, low.4, high.4, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.4, quicksort.py:195), Var(high.4, quicksort.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-08-01 10:03:59,519 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: branch $564pred, 206, 566
2023-08-01 10:03:59,519 [DEBUG] ==== SSA block rewrite pass on 566
2023-08-01 10:03:59,519 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924ef490>
2023-08-01 10:03:59,519 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-08-01 10:03:59,519 [DEBUG] on stmt: return $568return_value.1
2023-08-01 10:03:59,519 [DEBUG] Fix SSA violator on var n
2023-08-01 10:03:59,519 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,519 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,519 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x2924902c0>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-08-01 10:03:59,519 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: branch $64pred, 66, 70
2023-08-01 10:03:59,519 [DEBUG] ==== SSA block rewrite pass on 66
2023-08-01 10:03:59,519 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,519 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-08-01 10:03:59,519 [DEBUG] on stmt: return $68return_value.1
2023-08-01 10:03:59,519 [DEBUG] ==== SSA block rewrite pass on 70
2023-08-01 10:03:59,519 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,519 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-08-01 10:03:59,519 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-08-01 10:03:59,519 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-08-01 10:03:59,519 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-08-01 10:03:59,519 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-08-01 10:03:59,519 [DEBUG] on stmt: stack[0] = $172call.17
2023-08-01 10:03:59,519 [DEBUG] on stmt: n = const(int, 1)
2023-08-01 10:03:59,519 [DEBUG] first assign: n
2023-08-01 10:03:59,519 [DEBUG] replaced with: n = const(int, 1)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-08-01 10:03:59,519 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: branch $204pred, 206, 566
2023-08-01 10:03:59,519 [DEBUG] ==== SSA block rewrite pass on 206
2023-08-01 10:03:59,519 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,519 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,519 [DEBUG] on stmt: n = $binop_isub210.2
2023-08-01 10:03:59,519 [DEBUG] replaced with: n.1 = $binop_isub210.2
2023-08-01 10:03:59,519 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-08-01 10:03:59,519 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-08-01 10:03:59,519 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-08-01 10:03:59,519 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-08-01 10:03:59,519 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: branch $264pred, 266, 526
2023-08-01 10:03:59,519 [DEBUG] ==== SSA block rewrite pass on 266
2023-08-01 10:03:59,519 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,519 [DEBUG] on stmt: low.2 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,519 [DEBUG] on stmt: high.2 = phi(incoming_values=[Var(high.3, quicksort.py:181), Var(high, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,519 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-08-01 10:03:59,519 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,519 [DEBUG] on stmt: branch $286pred, 292, 288
2023-08-01 10:03:59,519 [DEBUG] ==== SSA block rewrite pass on 288
2023-08-01 10:03:59,519 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,519 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,519 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,519 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,519 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,520 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x292490c20>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low.2, high.2, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.2, quicksort.py:181), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $binop_sub324.9 = high.2 - i
2023-08-01 10:03:59,520 [DEBUG] on stmt: $binop_sub332.12 = i - low.2
2023-08-01 10:03:59,520 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-08-01 10:03:59,520 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: branch $342pred, 344, 422
2023-08-01 10:03:59,520 [DEBUG] ==== SSA block rewrite pass on 344
2023-08-01 10:03:59,520 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,520 [DEBUG] on stmt: $348compare_op.2 = high.2 > i
2023-08-01 10:03:59,520 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: branch $354pred, 356, 410
2023-08-01 10:03:59,520 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,520 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,520 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-08-01 10:03:59,520 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high.2, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: stack[n] = $382call.6
2023-08-01 10:03:59,520 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,520 [DEBUG] on stmt: n = $binop_iadd404.11
2023-08-01 10:03:59,520 [DEBUG] replaced with: n.2 = $binop_iadd404.11
2023-08-01 10:03:59,520 [DEBUG] on stmt: jump 410
2023-08-01 10:03:59,520 [DEBUG] ==== SSA block rewrite pass on 410
2023-08-01 10:03:59,520 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,520 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-08-01 10:03:59,520 [DEBUG] on stmt: high.1 = i - $const412.1
2023-08-01 10:03:59,520 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,520 [DEBUG] ==== SSA block rewrite pass on 422
2023-08-01 10:03:59,520 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,520 [DEBUG] on stmt: $426compare_op.2 = i > low.2
2023-08-01 10:03:59,520 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: branch $432pred, 434, 488
2023-08-01 10:03:59,520 [DEBUG] ==== SSA block rewrite pass on 434
2023-08-01 10:03:59,520 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,520 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-08-01 10:03:59,520 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low.2, $binop_sub452.5, func=$434load_global.0, args=[Var(low.2, quicksort.py:181), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: stack[n] = $460call.6
2023-08-01 10:03:59,520 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,520 [DEBUG] on stmt: n = $binop_iadd482.11
2023-08-01 10:03:59,520 [DEBUG] replaced with: n.3 = $binop_iadd482.11
2023-08-01 10:03:59,520 [DEBUG] on stmt: jump 488
2023-08-01 10:03:59,520 [DEBUG] ==== SSA block rewrite pass on 488
2023-08-01 10:03:59,520 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,520 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-08-01 10:03:59,520 [DEBUG] on stmt: low.1 = i + $const490.1
2023-08-01 10:03:59,520 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,520 [DEBUG] ==== SSA block rewrite pass on 498
2023-08-01 10:03:59,520 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,520 [DEBUG] on stmt: low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:181)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,520 [DEBUG] on stmt: high.3 = phi(incoming_values=[Var(high.2, quicksort.py:181), Var(high.1, quicksort.py:188)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,520 [DEBUG] on stmt: $binop_sub502.2 = high.3 - low.3
2023-08-01 10:03:59,520 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-08-01 10:03:59,520 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: branch $524pred, 266, 526
2023-08-01 10:03:59,520 [DEBUG] ==== SSA block rewrite pass on 526
2023-08-01 10:03:59,520 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,520 [DEBUG] on stmt: low.4 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,520 [DEBUG] on stmt: high.4 = phi(incoming_values=[Var(high.3, quicksort.py:181), Var(high, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,520 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x292491e40>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low.4, high.4, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.4, quicksort.py:195), Var(high.4, quicksort.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-08-01 10:03:59,520 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: branch $564pred, 206, 566
2023-08-01 10:03:59,520 [DEBUG] ==== SSA block rewrite pass on 566
2023-08-01 10:03:59,520 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x171900350>
2023-08-01 10:03:59,520 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-08-01 10:03:59,520 [DEBUG] on stmt: return $568return_value.1
2023-08-01 10:03:59,520 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {70: [<numba.core.ir.Assign object at 0x171975a50>],
             206: [<numba.core.ir.Assign object at 0x29251d610>],
             356: [<numba.core.ir.Assign object at 0x292507350>],
             434: [<numba.core.ir.Assign object at 0x2925074d0>]})
2023-08-01 10:03:59,520 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,520 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,520 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $8load_deref.1 = freevar(make_res: <function make_quicksort_impl.<locals>.make_res at 0x2924902c0>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: R = call $8load_deref.1(A, func=$8load_deref.1, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $28load_global.4 = global(len: <built-in function len>)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $46call.7 = call $28load_global.4(A, func=$28load_global.4, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $const56.8 = const(int, 2)
2023-08-01 10:03:59,520 [DEBUG] on stmt: $58compare_op.9 = $46call.7 < $const56.8
2023-08-01 10:03:59,520 [DEBUG] on stmt: bool64 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $64pred = call bool64($58compare_op.9, func=bool64, args=(Var($58compare_op.9, quicksort.py:168),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,521 [DEBUG] on stmt: branch $64pred, 66, 70
2023-08-01 10:03:59,521 [DEBUG] ==== SSA block rewrite pass on 66
2023-08-01 10:03:59,521 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,521 [DEBUG] on stmt: $68return_value.1 = cast(value=R)
2023-08-01 10:03:59,521 [DEBUG] on stmt: return $68return_value.1
2023-08-01 10:03:59,521 [DEBUG] ==== SSA block rewrite pass on 70
2023-08-01 10:03:59,521 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,521 [DEBUG] on stmt: $70load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $82load_deref.2 = freevar(zero: 0)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $84load_deref.3 = freevar(zero: 0)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $90call.4 = call $70load_global.0($82load_deref.2, $84load_deref.3, func=$70load_global.0, args=[Var($82load_deref.2, quicksort.py:171), Var($84load_deref.3, quicksort.py:171)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $100build_list.5 = build_list(items=[Var($90call.4, quicksort.py:171)])
2023-08-01 10:03:59,521 [DEBUG] on stmt: $102load_global.6 = global(MAX_STACK: 100)
2023-08-01 10:03:59,521 [DEBUG] on stmt: stack = $100build_list.5 * $102load_global.6
2023-08-01 10:03:59,521 [DEBUG] on stmt: $120load_global.8 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $132load_deref.10 = freevar(zero: 0)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $134load_global.11 = global(len: <built-in function len>)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $152call.14 = call $134load_global.11(A, func=$134load_global.11, args=[Var(A, quicksort.py:164)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $const162.15 = const(int, 1)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $binop_sub164.16 = $152call.14 - $const162.15
2023-08-01 10:03:59,521 [DEBUG] on stmt: $172call.17 = call $120load_global.8($132load_deref.10, $binop_sub164.16, func=$120load_global.8, args=[Var($132load_deref.10, quicksort.py:172), Var($binop_sub164.16, quicksort.py:172)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $const184.19 = const(int, 0)
2023-08-01 10:03:59,521 [DEBUG] on stmt: stack[0] = $172call.17
2023-08-01 10:03:59,521 [DEBUG] on stmt: n = const(int, 1)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $const196.22 = const(int, 0)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $198compare_op.23 = n > $const196.22
2023-08-01 10:03:59,521 [DEBUG] find_def var='n' stmt=$198compare_op.23 = n > $const196.22
2023-08-01 10:03:59,521 [DEBUG] on stmt: bool204 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $204pred = call bool204($198compare_op.23, func=bool204, args=(Var($198compare_op.23, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,521 [DEBUG] on stmt: branch $204pred, 206, 566
2023-08-01 10:03:59,521 [DEBUG] ==== SSA block rewrite pass on 206
2023-08-01 10:03:59,521 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,521 [DEBUG] on stmt: $const208.1 = const(int, 1)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,521 [DEBUG] find_def var='n' stmt=$binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,521 [DEBUG] find_def_from_top label 206
2023-08-01 10:03:59,521 [DEBUG] insert phi node n.4 = phi(incoming_values=[], incoming_blocks=[]) at 206
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 70
2023-08-01 10:03:59,521 [DEBUG] incoming_def n = const(int, 1)
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 526
2023-08-01 10:03:59,521 [DEBUG] find_def_from_top label 526
2023-08-01 10:03:59,521 [DEBUG] insert phi node n.5 = phi(incoming_values=[], incoming_blocks=[]) at 526
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 498
2023-08-01 10:03:59,521 [DEBUG] find_def_from_top label 498
2023-08-01 10:03:59,521 [DEBUG] insert phi node n.6 = phi(incoming_values=[], incoming_blocks=[]) at 498
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 488
2023-08-01 10:03:59,521 [DEBUG] find_def_from_top label 488
2023-08-01 10:03:59,521 [DEBUG] insert phi node n.7 = phi(incoming_values=[], incoming_blocks=[]) at 488
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 434
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.3 = $binop_iadd482.11
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 422
2023-08-01 10:03:59,521 [DEBUG] find_def_from_top label 422
2023-08-01 10:03:59,521 [DEBUG] idom 292 from label 422
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,521 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,521 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,521 [DEBUG] find_def_from_top label 266
2023-08-01 10:03:59,521 [DEBUG] insert phi node n.8 = phi(incoming_values=[], incoming_blocks=[]) at 266
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 498
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.6 = phi(incoming_values=[], incoming_blocks=[])
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 206
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.1 = $binop_isub210.2
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.8 = phi(incoming_values=[Var(n.6, quicksort.py:176), Var(n.1, quicksort.py:176)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.7 = phi(incoming_values=[Var(n.3, quicksort.py:192), Var(n.8, quicksort.py:176)], incoming_blocks=[434, 422])
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 410
2023-08-01 10:03:59,521 [DEBUG] find_def_from_top label 410
2023-08-01 10:03:59,521 [DEBUG] insert phi node n.9 = phi(incoming_values=[], incoming_blocks=[]) at 410
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 344
2023-08-01 10:03:59,521 [DEBUG] find_def_from_top label 344
2023-08-01 10:03:59,521 [DEBUG] idom 292 from label 344
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,521 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,521 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.8 = phi(incoming_values=[Var(n.6, quicksort.py:176), Var(n.1, quicksort.py:176)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 356
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.2 = $binop_iadd404.11
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.9 = phi(incoming_values=[Var(n.8, quicksort.py:176), Var(n.2, quicksort.py:187)], incoming_blocks=[344, 356])
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.6 = phi(incoming_values=[Var(n.7, quicksort.py:176), Var(n.9, quicksort.py:176)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,521 [DEBUG] find_def_from_bottom label 206
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.1 = $binop_isub210.2
2023-08-01 10:03:59,521 [DEBUG] incoming_def n.5 = phi(incoming_values=[Var(n.6, quicksort.py:176), Var(n.1, quicksort.py:176)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,521 [DEBUG] replaced with: $binop_isub210.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=n.4, rhs=$const208.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,521 [DEBUG] on stmt: n.1 = $binop_isub210.2
2023-08-01 10:03:59,521 [DEBUG] on stmt: $220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-08-01 10:03:59,521 [DEBUG] find_def var='n' stmt=$220binary_subscr.5 = getitem(value=stack, index=n, fn=<built-in function getitem>)
2023-08-01 10:03:59,521 [DEBUG] replaced with: $220binary_subscr.5 = getitem(value=stack, index=n.1, fn=<built-in function getitem>)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $230unpack_sequence.8 = exhaust_iter(value=$220binary_subscr.5, count=2)
2023-08-01 10:03:59,521 [DEBUG] on stmt: $230unpack_sequence.6 = static_getitem(value=$230unpack_sequence.8, index=0, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $230unpack_sequence.7 = static_getitem(value=$230unpack_sequence.8, index=1, index_var=None, fn=<built-in function getitem>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: low = $230unpack_sequence.6
2023-08-01 10:03:59,522 [DEBUG] on stmt: high = $230unpack_sequence.7
2023-08-01 10:03:59,522 [DEBUG] on stmt: $binop_sub242.11 = high - low
2023-08-01 10:03:59,522 [DEBUG] on stmt: $246load_global.12 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $258compare_op.13 = $binop_sub242.11 >= $246load_global.12
2023-08-01 10:03:59,522 [DEBUG] on stmt: bool264 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $264pred = call bool264($258compare_op.13, func=bool264, args=(Var($258compare_op.13, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,522 [DEBUG] on stmt: branch $264pred, 266, 526
2023-08-01 10:03:59,522 [DEBUG] ==== SSA block rewrite pass on 266
2023-08-01 10:03:59,522 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,522 [DEBUG] on stmt: low.2 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,522 [DEBUG] on stmt: high.2 = phi(incoming_values=[Var(high.3, quicksort.py:181), Var(high, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,522 [DEBUG] on stmt: $268load_global.1 = global(MAX_STACK: 100)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $280compare_op.2 = n < $268load_global.1
2023-08-01 10:03:59,522 [DEBUG] find_def var='n' stmt=$280compare_op.2 = n < $268load_global.1
2023-08-01 10:03:59,522 [DEBUG] replaced with: $280compare_op.2 = n.8 < $268load_global.1
2023-08-01 10:03:59,522 [DEBUG] on stmt: bool286 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $286pred = call bool286($280compare_op.2, func=bool286, args=(Var($280compare_op.2, quicksort.py:180),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,522 [DEBUG] on stmt: branch $286pred, 292, 288
2023-08-01 10:03:59,522 [DEBUG] ==== SSA block rewrite pass on 288
2023-08-01 10:03:59,522 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,522 [DEBUG] on stmt: $assertion_error288.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,522 [DEBUG] ==== SSA block rewrite pass on 292
2023-08-01 10:03:59,522 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,522 [DEBUG] on stmt: $294load_deref.1 = freevar(partition: <function make_quicksort_impl.<locals>.partition at 0x292490c20>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: i = call $294load_deref.1(A, R, low.2, high.2, func=$294load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.2, quicksort.py:181), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $binop_sub324.9 = high.2 - i
2023-08-01 10:03:59,522 [DEBUG] on stmt: $binop_sub332.12 = i - low.2
2023-08-01 10:03:59,522 [DEBUG] on stmt: $336compare_op.13 = $binop_sub324.9 > $binop_sub332.12
2023-08-01 10:03:59,522 [DEBUG] on stmt: bool342 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $342pred = call bool342($336compare_op.13, func=bool342, args=(Var($336compare_op.13, quicksort.py:183),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,522 [DEBUG] on stmt: branch $342pred, 344, 422
2023-08-01 10:03:59,522 [DEBUG] ==== SSA block rewrite pass on 344
2023-08-01 10:03:59,522 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,522 [DEBUG] on stmt: $348compare_op.2 = high.2 > i
2023-08-01 10:03:59,522 [DEBUG] on stmt: bool354 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $354pred = call bool354($348compare_op.2, func=bool354, args=(Var($348compare_op.2, quicksort.py:185),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,522 [DEBUG] on stmt: branch $354pred, 356, 410
2023-08-01 10:03:59,522 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,522 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,522 [DEBUG] on stmt: $356load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $const370.3 = const(int, 1)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $binop_add372.4 = i + $const370.3
2023-08-01 10:03:59,522 [DEBUG] on stmt: $382call.6 = call $356load_global.0($binop_add372.4, high.2, func=$356load_global.0, args=[Var($binop_add372.4, quicksort.py:186), Var(high.2, quicksort.py:181)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,522 [DEBUG] on stmt: stack[n] = $382call.6
2023-08-01 10:03:59,522 [DEBUG] find_def var='n' stmt=stack[n] = $382call.6
2023-08-01 10:03:59,522 [DEBUG] find_def_from_top label 356
2023-08-01 10:03:59,522 [DEBUG] idom 344 from label 356
2023-08-01 10:03:59,522 [DEBUG] find_def_from_bottom label 344
2023-08-01 10:03:59,522 [DEBUG] find_def_from_top label 344
2023-08-01 10:03:59,522 [DEBUG] idom 292 from label 344
2023-08-01 10:03:59,522 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,522 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,522 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,522 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,522 [DEBUG] replaced with: stack[n.8] = $382call.6
2023-08-01 10:03:59,522 [DEBUG] on stmt: $const402.10 = const(int, 1)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,522 [DEBUG] find_def var='n' stmt=$binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,522 [DEBUG] find_def_from_top label 356
2023-08-01 10:03:59,522 [DEBUG] idom 344 from label 356
2023-08-01 10:03:59,522 [DEBUG] find_def_from_bottom label 344
2023-08-01 10:03:59,522 [DEBUG] find_def_from_top label 344
2023-08-01 10:03:59,522 [DEBUG] idom 292 from label 344
2023-08-01 10:03:59,522 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,522 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,522 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,522 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,522 [DEBUG] replaced with: $binop_iadd404.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.8, rhs=$const402.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,522 [DEBUG] on stmt: n.2 = $binop_iadd404.11
2023-08-01 10:03:59,522 [DEBUG] on stmt: jump 410
2023-08-01 10:03:59,522 [DEBUG] ==== SSA block rewrite pass on 410
2023-08-01 10:03:59,522 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,522 [DEBUG] on stmt: $const412.1 = const(int, 1)
2023-08-01 10:03:59,522 [DEBUG] on stmt: high.1 = i - $const412.1
2023-08-01 10:03:59,522 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,522 [DEBUG] ==== SSA block rewrite pass on 422
2023-08-01 10:03:59,522 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,522 [DEBUG] on stmt: $426compare_op.2 = i > low.2
2023-08-01 10:03:59,522 [DEBUG] on stmt: bool432 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $432pred = call bool432($426compare_op.2, func=bool432, args=(Var($426compare_op.2, quicksort.py:190),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,522 [DEBUG] on stmt: branch $432pred, 434, 488
2023-08-01 10:03:59,522 [DEBUG] ==== SSA block rewrite pass on 434
2023-08-01 10:03:59,522 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,522 [DEBUG] on stmt: $434load_global.0 = global(Partition: <class 'numba.misc.quicksort.Partition'>)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $const450.4 = const(int, 1)
2023-08-01 10:03:59,522 [DEBUG] on stmt: $binop_sub452.5 = i - $const450.4
2023-08-01 10:03:59,522 [DEBUG] on stmt: $460call.6 = call $434load_global.0(low.2, $binop_sub452.5, func=$434load_global.0, args=[Var(low.2, quicksort.py:181), Var($binop_sub452.5, quicksort.py:191)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,522 [DEBUG] on stmt: stack[n] = $460call.6
2023-08-01 10:03:59,523 [DEBUG] find_def var='n' stmt=stack[n] = $460call.6
2023-08-01 10:03:59,523 [DEBUG] find_def_from_top label 434
2023-08-01 10:03:59,523 [DEBUG] idom 422 from label 434
2023-08-01 10:03:59,523 [DEBUG] find_def_from_bottom label 422
2023-08-01 10:03:59,523 [DEBUG] find_def_from_top label 422
2023-08-01 10:03:59,523 [DEBUG] idom 292 from label 422
2023-08-01 10:03:59,523 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,523 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,523 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,523 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,523 [DEBUG] replaced with: stack[n.8] = $460call.6
2023-08-01 10:03:59,523 [DEBUG] on stmt: $const480.10 = const(int, 1)
2023-08-01 10:03:59,523 [DEBUG] on stmt: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,523 [DEBUG] find_def var='n' stmt=$binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,523 [DEBUG] find_def_from_top label 434
2023-08-01 10:03:59,523 [DEBUG] idom 422 from label 434
2023-08-01 10:03:59,523 [DEBUG] find_def_from_bottom label 422
2023-08-01 10:03:59,523 [DEBUG] find_def_from_top label 422
2023-08-01 10:03:59,523 [DEBUG] idom 292 from label 422
2023-08-01 10:03:59,523 [DEBUG] find_def_from_bottom label 292
2023-08-01 10:03:59,523 [DEBUG] find_def_from_top label 292
2023-08-01 10:03:59,523 [DEBUG] idom 266 from label 292
2023-08-01 10:03:59,523 [DEBUG] find_def_from_bottom label 266
2023-08-01 10:03:59,523 [DEBUG] replaced with: $binop_iadd482.11 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=n.8, rhs=$const480.10, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,523 [DEBUG] on stmt: n.3 = $binop_iadd482.11
2023-08-01 10:03:59,523 [DEBUG] on stmt: jump 488
2023-08-01 10:03:59,523 [DEBUG] ==== SSA block rewrite pass on 488
2023-08-01 10:03:59,523 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,523 [DEBUG] on stmt: $const490.1 = const(int, 1)
2023-08-01 10:03:59,523 [DEBUG] on stmt: low.1 = i + $const490.1
2023-08-01 10:03:59,523 [DEBUG] on stmt: jump 498
2023-08-01 10:03:59,523 [DEBUG] ==== SSA block rewrite pass on 498
2023-08-01 10:03:59,523 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,523 [DEBUG] on stmt: low.3 = phi(incoming_values=[Var(low.1, quicksort.py:193), Var(low.2, quicksort.py:181)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,523 [DEBUG] on stmt: high.3 = phi(incoming_values=[Var(high.2, quicksort.py:181), Var(high.1, quicksort.py:188)], incoming_blocks=[488, 410])
2023-08-01 10:03:59,523 [DEBUG] on stmt: $binop_sub502.2 = high.3 - low.3
2023-08-01 10:03:59,523 [DEBUG] on stmt: $506load_global.3 = global(SMALL_QUICKSORT: 15)
2023-08-01 10:03:59,523 [DEBUG] on stmt: $518compare_op.4 = $binop_sub502.2 >= $506load_global.3
2023-08-01 10:03:59,523 [DEBUG] on stmt: bool524 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,523 [DEBUG] on stmt: $524pred = call bool524($518compare_op.4, func=bool524, args=(Var($518compare_op.4, quicksort.py:179),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,523 [DEBUG] on stmt: branch $524pred, 266, 526
2023-08-01 10:03:59,523 [DEBUG] ==== SSA block rewrite pass on 526
2023-08-01 10:03:59,523 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,523 [DEBUG] on stmt: low.4 = phi(incoming_values=[Var(low.3, quicksort.py:181), Var(low, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,523 [DEBUG] on stmt: high.4 = phi(incoming_values=[Var(high.3, quicksort.py:181), Var(high, quicksort.py:177)], incoming_blocks=[498, 206])
2023-08-01 10:03:59,523 [DEBUG] on stmt: $528load_deref.1 = freevar(insertion_sort: <function make_quicksort_impl.<locals>.insertion_sort at 0x292491e40>)
2023-08-01 10:03:59,523 [DEBUG] on stmt: $542call.6 = call $528load_deref.1(A, R, low.4, high.4, func=$528load_deref.1, args=[Var(A, quicksort.py:164), Var(R, quicksort.py:166), Var(low.4, quicksort.py:195), Var(high.4, quicksort.py:195)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,523 [DEBUG] on stmt: $const556.8 = const(int, 0)
2023-08-01 10:03:59,523 [DEBUG] on stmt: $558compare_op.9 = n > $const556.8
2023-08-01 10:03:59,523 [DEBUG] find_def var='n' stmt=$558compare_op.9 = n > $const556.8
2023-08-01 10:03:59,523 [DEBUG] replaced with: $558compare_op.9 = n.5 > $const556.8
2023-08-01 10:03:59,523 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,523 [DEBUG] on stmt: $564pred = call bool564($558compare_op.9, func=bool564, args=(Var($558compare_op.9, quicksort.py:175),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,523 [DEBUG] on stmt: branch $564pred, 206, 566
2023-08-01 10:03:59,523 [DEBUG] ==== SSA block rewrite pass on 566
2023-08-01 10:03:59,523 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2924dc590>
2023-08-01 10:03:59,523 [DEBUG] on stmt: $568return_value.1 = cast(value=R)
2023-08-01 10:03:59,523 [DEBUG] on stmt: return $568return_value.1
2023-08-01 10:03:59,526 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=41)
           2	RESUME(arg=0, lineno=41)
           4	LOAD_GLOBAL(arg=1, lineno=43)
          16	LOAD_ATTR(arg=1, lineno=43)
          26	LOAD_FAST(arg=0, lineno=43)
          28	LOAD_ATTR(arg=2, lineno=43)
          38	PRECALL(arg=1, lineno=43)
          42	CALL(arg=1, lineno=43)
          52	RETURN_VALUE(arg=None, lineno=43)
2023-08-01 10:03:59,526 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,526 [DEBUG] stack: []
2023-08-01 10:03:59,526 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,526 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=41)
2023-08-01 10:03:59,526 [DEBUG] stack []
2023-08-01 10:03:59,526 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=41)
2023-08-01 10:03:59,526 [DEBUG] stack []
2023-08-01 10:03:59,526 [DEBUG] dispatch pc=4, inst=LOAD_GLOBAL(arg=1, lineno=43)
2023-08-01 10:03:59,526 [DEBUG] stack []
2023-08-01 10:03:59,526 [DEBUG] dispatch pc=16, inst=LOAD_ATTR(arg=1, lineno=43)
2023-08-01 10:03:59,526 [DEBUG] stack ['$null$4.1', '$4load_global.0']
2023-08-01 10:03:59,526 [DEBUG] dispatch pc=26, inst=LOAD_FAST(arg=0, lineno=43)
2023-08-01 10:03:59,526 [DEBUG] stack ['$null$4.1', '$16load_attr.2']
2023-08-01 10:03:59,526 [DEBUG] dispatch pc=28, inst=LOAD_ATTR(arg=2, lineno=43)
2023-08-01 10:03:59,526 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$A26.3']
2023-08-01 10:03:59,526 [DEBUG] dispatch pc=38, inst=PRECALL(arg=1, lineno=43)
2023-08-01 10:03:59,526 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$28load_attr.4']
2023-08-01 10:03:59,526 [DEBUG] dispatch pc=42, inst=CALL(arg=1, lineno=43)
2023-08-01 10:03:59,526 [DEBUG] stack ['$null$4.1', '$16load_attr.2', '$28load_attr.4']
2023-08-01 10:03:59,526 [DEBUG] dispatch pc=52, inst=RETURN_VALUE(arg=None, lineno=43)
2023-08-01 10:03:59,526 [DEBUG] stack ['$42call.5']
2023-08-01 10:03:59,526 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,526 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,527 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-01 10:03:59,527 [DEBUG] defmap: {}
2023-08-01 10:03:59,527 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,527 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,527 [DEBUG] keep phismap: {}
2023-08-01 10:03:59,527 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-08-01 10:03:59,527 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,527 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'idx': 0, 'res': '$4load_global.0'}), (6, {}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {'item': '$4load_global.0', 'res': '$16load_attr.2'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {'res': '$A26.3'}), (28, {'item': '$A26.3', 'res': '$28load_attr.4'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {}), (40, {}), (42, {'func': '$16load_attr.2', 'args': ['$28load_attr.4'], 'kw_names': None, 'res': '$42call.5'}), (44, {}), (46, {}), (48, {}), (50, {}), (52, {'retval': '$42call.5', 'castval': '$52return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,527 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$4load_global.0']
    $16load_attr.2 = getattr(value=$4load_global.0, attr=arange) ['$16load_attr.2', '$4load_global.0']
    $28load_attr.4 = getattr(value=A, attr=size) ['$28load_attr.4', 'A']
    $42call.5 = call $16load_attr.2($28load_attr.4, func=$16load_attr.2, args=[Var($28load_attr.4, quicksort.py:43)], kws=(), vararg=None, varkwarg=None, target=None) ['$16load_attr.2', '$28load_attr.4', '$42call.5']
    $52return_value.6 = cast(value=$42call.5) ['$42call.5', '$52return_value.6']
    return $52return_value.6                 ['$52return_value.6']

2023-08-01 10:03:59,531 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,531 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29255c910>
2023-08-01 10:03:59,531 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,531 [DEBUG] on stmt: $4load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,531 [DEBUG] on stmt: $16load_attr.2 = getattr(value=$4load_global.0, attr=arange)
2023-08-01 10:03:59,531 [DEBUG] on stmt: $28load_attr.4 = getattr(value=A, attr=size)
2023-08-01 10:03:59,531 [DEBUG] on stmt: $42call.5 = call $16load_attr.2($28load_attr.4, func=$16load_attr.2, args=[Var($28load_attr.4, quicksort.py:43)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,531 [DEBUG] on stmt: $52return_value.6 = cast(value=$42call.5)
2023-08-01 10:03:59,531 [DEBUG] on stmt: return $52return_value.6
2023-08-01 10:03:59,531 [DEBUG] defs defaultdict(<class 'list'>,
            {'$16load_attr.2': [<numba.core.ir.Assign object at 0x29255d150>],
             '$28load_attr.4': [<numba.core.ir.Assign object at 0x29255d4d0>],
             '$42call.5': [<numba.core.ir.Assign object at 0x29255d790>],
             '$4load_global.0': [<numba.core.ir.Assign object at 0x29255ced0>],
             '$52return_value.6': [<numba.core.ir.Assign object at 0x29255d990>],
             'A': [<numba.core.ir.Assign object at 0x29255cb50>]})
2023-08-01 10:03:59,531 [DEBUG] SSA violators set()
2023-08-01 10:03:59,533 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4603)
           2	COPY_FREE_VARS(arg=5, lineno=4603)
           4	RESUME(arg=0, lineno=4603)
           6	LOAD_DEREF(arg=17, lineno=4605)
           8	POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4605)
          10	LOAD_DEREF(arg=17, lineno=4605)
          12	JUMP_FORWARD(arg=1, lineno=4605)
>         14	LOAD_FAST(arg=0, lineno=4605)
>         16	STORE_FAST(arg=4, lineno=4605)
          18	LOAD_DEREF(arg=19, lineno=4606)
          20	POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4606)
          22	LOAD_DEREF(arg=19, lineno=4606)
          24	JUMP_FORWARD(arg=1, lineno=4606)
>         26	LOAD_FAST(arg=1, lineno=4606)
>         28	STORE_FAST(arg=5, lineno=4606)
          30	LOAD_DEREF(arg=18, lineno=4607)
          32	POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4607)
          34	LOAD_DEREF(arg=18, lineno=4607)
          36	JUMP_FORWARD(arg=1, lineno=4607)
>         38	LOAD_FAST(arg=2, lineno=4607)
>         40	STORE_FAST(arg=6, lineno=4607)
          42	LOAD_FAST(arg=6, lineno=4609)
          44	POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4609)
          46	LOAD_FAST(arg=6, lineno=4609)
          48	JUMP_FORWARD(arg=1, lineno=4609)
>         50	LOAD_CONST(arg=1, lineno=4609)
>         52	STORE_FAST(arg=7, lineno=4609)
          54	LOAD_FAST(arg=5, lineno=4610)
          56	POP_JUMP_FORWARD_IF_NOT_NONE(arg=5, lineno=4610)
          58	LOAD_CONST(arg=2, lineno=4611)
          60	LOAD_FAST(arg=4, lineno=4611)
          62	STORE_FAST(arg=9, lineno=4611)
          64	STORE_FAST(arg=8, lineno=4611)
          66	JUMP_FORWARD(arg=4, lineno=4611)
>         68	LOAD_FAST(arg=4, lineno=4613)
          70	LOAD_FAST(arg=5, lineno=4613)
          72	STORE_FAST(arg=9, lineno=4613)
          74	STORE_FAST(arg=8, lineno=4613)
>         76	LOAD_FAST(arg=7, lineno=4615)
          78	LOAD_CONST(arg=2, lineno=4615)
          80	COMPARE_OP(arg=2, lineno=4615)
          86	POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=4615)
          88	LOAD_GLOBAL(arg=1, lineno=4616)
         100	LOAD_CONST(arg=3, lineno=4616)
         102	PRECALL(arg=1, lineno=4616)
         106	CALL(arg=1, lineno=4616)
         116	RAISE_VARARGS(arg=1, lineno=4616)
>        118	LOAD_FAST(arg=9, lineno=4618)
         120	LOAD_FAST(arg=8, lineno=4618)
         122	BINARY_OP(arg=10, lineno=4618)
         126	LOAD_FAST(arg=7, lineno=4618)
         128	BINARY_OP(arg=11, lineno=4618)
         132	STORE_FAST(arg=10, lineno=4618)
         134	LOAD_GLOBAL(arg=3, lineno=4619)
         146	LOAD_GLOBAL(arg=5, lineno=4619)
         158	LOAD_ATTR(arg=3, lineno=4619)
         168	LOAD_FAST(arg=10, lineno=4619)
         170	LOAD_ATTR(arg=4, lineno=4619)
         180	PRECALL(arg=1, lineno=4619)
         184	CALL(arg=1, lineno=4619)
         194	PRECALL(arg=1, lineno=4619)
         198	CALL(arg=1, lineno=4619)
         208	STORE_FAST(arg=11, lineno=4619)
         210	LOAD_DEREF(arg=21, lineno=4622)
         212	LOAD_CONST(arg=4, lineno=4622)
         214	IS_OP(arg=0, lineno=4622)
         216	POP_JUMP_FORWARD_IF_FALSE(arg=69, lineno=4622)
         218	LOAD_GLOBAL(arg=3, lineno=4623)
         230	LOAD_GLOBAL(arg=5, lineno=4623)
         242	LOAD_ATTR(arg=3, lineno=4623)
         252	LOAD_FAST(arg=10, lineno=4623)
         254	LOAD_ATTR(arg=5, lineno=4623)
         264	PRECALL(arg=1, lineno=4623)
         268	CALL(arg=1, lineno=4623)
         278	PRECALL(arg=1, lineno=4623)
         282	CALL(arg=1, lineno=4623)
         292	STORE_FAST(arg=12, lineno=4623)
         294	LOAD_GLOBAL(arg=13, lineno=4624)
         306	LOAD_GLOBAL(arg=15, lineno=4624)
         318	LOAD_FAST(arg=12, lineno=4624)
         320	LOAD_FAST(arg=11, lineno=4624)
         322	PRECALL(arg=2, lineno=4624)
         326	CALL(arg=2, lineno=4624)
         336	LOAD_CONST(arg=2, lineno=4624)
         338	PRECALL(arg=2, lineno=4624)
         342	CALL(arg=2, lineno=4624)
         352	STORE_FAST(arg=13, lineno=4624)
         354	JUMP_FORWARD(arg=16, lineno=4624)
>        356	LOAD_GLOBAL(arg=13, lineno=4626)
         368	LOAD_FAST(arg=11, lineno=4626)
         370	LOAD_CONST(arg=2, lineno=4626)
         372	PRECALL(arg=2, lineno=4626)
         376	CALL(arg=2, lineno=4626)
         386	STORE_FAST(arg=13, lineno=4626)
>        388	LOAD_GLOBAL(arg=17, lineno=4627)
         400	LOAD_ATTR(arg=9, lineno=4627)
         410	LOAD_FAST(arg=13, lineno=4627)
         412	LOAD_DEREF(arg=20, lineno=4627)
         414	PRECALL(arg=2, lineno=4627)
         418	CALL(arg=2, lineno=4627)
         428	STORE_FAST(arg=14, lineno=4627)
         430	LOAD_FAST(arg=8, lineno=4628)
         432	STORE_FAST(arg=15, lineno=4628)
         434	LOAD_GLOBAL(arg=21, lineno=4629)
         446	LOAD_FAST(arg=13, lineno=4629)
         448	PRECALL(arg=1, lineno=4629)
         452	CALL(arg=1, lineno=4629)
         462	GET_ITER(arg=None, lineno=4629)
>        464	FOR_ITER(arg=13, lineno=4629)
         466	STORE_FAST(arg=16, lineno=4629)
         468	LOAD_FAST(arg=15, lineno=4630)
         470	LOAD_FAST(arg=16, lineno=4630)
         472	LOAD_FAST(arg=7, lineno=4630)
         474	BINARY_OP(arg=5, lineno=4630)
         478	BINARY_OP(arg=0, lineno=4630)
         482	LOAD_FAST(arg=14, lineno=4630)
         484	LOAD_FAST(arg=16, lineno=4630)
         486	STORE_SUBSCR(arg=None, lineno=4630)
         490	JUMP_BACKWARD(arg=14, lineno=4630)
>        492	LOAD_FAST(arg=14, lineno=4631)
         494	RETURN_VALUE(arg=None, lineno=4631)
2023-08-01 10:03:59,533 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,533 [DEBUG] stack: []
2023-08-01 10:03:59,533 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4603)
2023-08-01 10:03:59,533 [DEBUG] stack []
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=5, lineno=4603)
2023-08-01 10:03:59,533 [DEBUG] stack []
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=4603)
2023-08-01 10:03:59,533 [DEBUG] stack []
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=6, inst=LOAD_DEREF(arg=17, lineno=4605)
2023-08-01 10:03:59,533 [DEBUG] stack []
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=8, inst=POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4605)
2023-08-01 10:03:59,533 [DEBUG] stack ['$6load_deref.0']
2023-08-01 10:03:59,533 [DEBUG] end state. edges=[Edge(pc=10, stack=(), blockstack=(), npush=0), Edge(pc=14, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,533 [DEBUG] pending: deque([State(pc_initial=10 nstack_initial=0), State(pc_initial=14 nstack_initial=0)])
2023-08-01 10:03:59,533 [DEBUG] stack: []
2023-08-01 10:03:59,533 [DEBUG] state.pc_initial: State(pc_initial=10 nstack_initial=0)
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=10, inst=LOAD_DEREF(arg=17, lineno=4605)
2023-08-01 10:03:59,533 [DEBUG] stack []
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=12, inst=JUMP_FORWARD(arg=1, lineno=4605)
2023-08-01 10:03:59,533 [DEBUG] stack ['$10load_deref.0']
2023-08-01 10:03:59,533 [DEBUG] end state. edges=[Edge(pc=16, stack=('$10load_deref.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,533 [DEBUG] pending: deque([State(pc_initial=14 nstack_initial=0), State(pc_initial=16 nstack_initial=1)])
2023-08-01 10:03:59,533 [DEBUG] stack: []
2023-08-01 10:03:59,533 [DEBUG] state.pc_initial: State(pc_initial=14 nstack_initial=0)
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=14, inst=LOAD_FAST(arg=0, lineno=4605)
2023-08-01 10:03:59,533 [DEBUG] stack []
2023-08-01 10:03:59,533 [DEBUG] end state. edges=[Edge(pc=16, stack=('$start14.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,533 [DEBUG] pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=16 nstack_initial=1)])
2023-08-01 10:03:59,533 [DEBUG] stack: ['$phi16.0']
2023-08-01 10:03:59,533 [DEBUG] state.pc_initial: State(pc_initial=16 nstack_initial=1)
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=16, inst=STORE_FAST(arg=4, lineno=4605)
2023-08-01 10:03:59,533 [DEBUG] stack ['$phi16.0']
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=18, inst=LOAD_DEREF(arg=19, lineno=4606)
2023-08-01 10:03:59,533 [DEBUG] stack []
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=20, inst=POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4606)
2023-08-01 10:03:59,533 [DEBUG] stack ['$18load_deref.1']
2023-08-01 10:03:59,533 [DEBUG] end state. edges=[Edge(pc=22, stack=(), blockstack=(), npush=0), Edge(pc=26, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,533 [DEBUG] pending: deque([State(pc_initial=16 nstack_initial=1), State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
2023-08-01 10:03:59,533 [DEBUG] pending: deque([State(pc_initial=22 nstack_initial=0), State(pc_initial=26 nstack_initial=0)])
2023-08-01 10:03:59,533 [DEBUG] stack: []
2023-08-01 10:03:59,533 [DEBUG] state.pc_initial: State(pc_initial=22 nstack_initial=0)
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=22, inst=LOAD_DEREF(arg=19, lineno=4606)
2023-08-01 10:03:59,533 [DEBUG] stack []
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=24, inst=JUMP_FORWARD(arg=1, lineno=4606)
2023-08-01 10:03:59,533 [DEBUG] stack ['$22load_deref.0']
2023-08-01 10:03:59,533 [DEBUG] end state. edges=[Edge(pc=28, stack=('$22load_deref.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,533 [DEBUG] pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=28 nstack_initial=1)])
2023-08-01 10:03:59,533 [DEBUG] stack: []
2023-08-01 10:03:59,533 [DEBUG] state.pc_initial: State(pc_initial=26 nstack_initial=0)
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=26, inst=LOAD_FAST(arg=1, lineno=4606)
2023-08-01 10:03:59,533 [DEBUG] stack []
2023-08-01 10:03:59,533 [DEBUG] end state. edges=[Edge(pc=28, stack=('$stop26.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,533 [DEBUG] pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=28 nstack_initial=1)])
2023-08-01 10:03:59,533 [DEBUG] stack: ['$phi28.0']
2023-08-01 10:03:59,533 [DEBUG] state.pc_initial: State(pc_initial=28 nstack_initial=1)
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=28, inst=STORE_FAST(arg=5, lineno=4606)
2023-08-01 10:03:59,533 [DEBUG] stack ['$phi28.0']
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=30, inst=LOAD_DEREF(arg=18, lineno=4607)
2023-08-01 10:03:59,533 [DEBUG] stack []
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=32, inst=POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4607)
2023-08-01 10:03:59,533 [DEBUG] stack ['$30load_deref.1']
2023-08-01 10:03:59,533 [DEBUG] end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,533 [DEBUG] pending: deque([State(pc_initial=28 nstack_initial=1), State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
2023-08-01 10:03:59,533 [DEBUG] pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
2023-08-01 10:03:59,533 [DEBUG] stack: []
2023-08-01 10:03:59,533 [DEBUG] state.pc_initial: State(pc_initial=34 nstack_initial=0)
2023-08-01 10:03:59,533 [DEBUG] dispatch pc=34, inst=LOAD_DEREF(arg=18, lineno=4607)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=36, inst=JUMP_FORWARD(arg=1, lineno=4607)
2023-08-01 10:03:59,534 [DEBUG] stack ['$34load_deref.0']
2023-08-01 10:03:59,534 [DEBUG] end state. edges=[Edge(pc=40, stack=('$34load_deref.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=38 nstack_initial=0), State(pc_initial=40 nstack_initial=1)])
2023-08-01 10:03:59,534 [DEBUG] stack: []
2023-08-01 10:03:59,534 [DEBUG] state.pc_initial: State(pc_initial=38 nstack_initial=0)
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=4607)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] end state. edges=[Edge(pc=40, stack=('$step38.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=40 nstack_initial=1), State(pc_initial=40 nstack_initial=1)])
2023-08-01 10:03:59,534 [DEBUG] stack: ['$phi40.0']
2023-08-01 10:03:59,534 [DEBUG] state.pc_initial: State(pc_initial=40 nstack_initial=1)
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=40, inst=STORE_FAST(arg=6, lineno=4607)
2023-08-01 10:03:59,534 [DEBUG] stack ['$phi40.0']
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=42, inst=LOAD_FAST(arg=6, lineno=4609)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=44, inst=POP_JUMP_FORWARD_IF_NONE(arg=2, lineno=4609)
2023-08-01 10:03:59,534 [DEBUG] stack ['$lit_step42.1']
2023-08-01 10:03:59,534 [DEBUG] end state. edges=[Edge(pc=46, stack=(), blockstack=(), npush=0), Edge(pc=50, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=40 nstack_initial=1), State(pc_initial=46 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=46 nstack_initial=0), State(pc_initial=50 nstack_initial=0)])
2023-08-01 10:03:59,534 [DEBUG] stack: []
2023-08-01 10:03:59,534 [DEBUG] state.pc_initial: State(pc_initial=46 nstack_initial=0)
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=46, inst=LOAD_FAST(arg=6, lineno=4609)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=48, inst=JUMP_FORWARD(arg=1, lineno=4609)
2023-08-01 10:03:59,534 [DEBUG] stack ['$lit_step46.0']
2023-08-01 10:03:59,534 [DEBUG] end state. edges=[Edge(pc=52, stack=('$lit_step46.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=50 nstack_initial=0), State(pc_initial=52 nstack_initial=1)])
2023-08-01 10:03:59,534 [DEBUG] stack: []
2023-08-01 10:03:59,534 [DEBUG] state.pc_initial: State(pc_initial=50 nstack_initial=0)
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=50, inst=LOAD_CONST(arg=1, lineno=4609)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] end state. edges=[Edge(pc=52, stack=('$const50.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=52 nstack_initial=1)])
2023-08-01 10:03:59,534 [DEBUG] stack: ['$phi52.0']
2023-08-01 10:03:59,534 [DEBUG] state.pc_initial: State(pc_initial=52 nstack_initial=1)
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=52, inst=STORE_FAST(arg=7, lineno=4609)
2023-08-01 10:03:59,534 [DEBUG] stack ['$phi52.0']
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=54, inst=LOAD_FAST(arg=5, lineno=4610)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=56, inst=POP_JUMP_FORWARD_IF_NOT_NONE(arg=5, lineno=4610)
2023-08-01 10:03:59,534 [DEBUG] stack ['$lit_stop54.1']
2023-08-01 10:03:59,534 [DEBUG] end state. edges=[Edge(pc=58, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=52 nstack_initial=1), State(pc_initial=58 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=58 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
2023-08-01 10:03:59,534 [DEBUG] stack: []
2023-08-01 10:03:59,534 [DEBUG] state.pc_initial: State(pc_initial=58 nstack_initial=0)
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=58, inst=LOAD_CONST(arg=2, lineno=4611)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=60, inst=LOAD_FAST(arg=4, lineno=4611)
2023-08-01 10:03:59,534 [DEBUG] stack ['$const58.0']
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=62, inst=STORE_FAST(arg=9, lineno=4611)
2023-08-01 10:03:59,534 [DEBUG] stack ['$const58.0', '$lit_start60.1']
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=64, inst=STORE_FAST(arg=8, lineno=4611)
2023-08-01 10:03:59,534 [DEBUG] stack ['$const58.0']
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=66, inst=JUMP_FORWARD(arg=4, lineno=4611)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] end state. edges=[Edge(pc=76, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2023-08-01 10:03:59,534 [DEBUG] stack: []
2023-08-01 10:03:59,534 [DEBUG] state.pc_initial: State(pc_initial=68 nstack_initial=0)
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=68, inst=LOAD_FAST(arg=4, lineno=4613)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=70, inst=LOAD_FAST(arg=5, lineno=4613)
2023-08-01 10:03:59,534 [DEBUG] stack ['$lit_start68.0']
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=72, inst=STORE_FAST(arg=9, lineno=4613)
2023-08-01 10:03:59,534 [DEBUG] stack ['$lit_start68.0', '$lit_stop70.1']
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=74, inst=STORE_FAST(arg=8, lineno=4613)
2023-08-01 10:03:59,534 [DEBUG] stack ['$lit_start68.0']
2023-08-01 10:03:59,534 [DEBUG] end state. edges=[Edge(pc=76, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
2023-08-01 10:03:59,534 [DEBUG] stack: []
2023-08-01 10:03:59,534 [DEBUG] state.pc_initial: State(pc_initial=76 nstack_initial=0)
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=76, inst=LOAD_FAST(arg=7, lineno=4615)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=78, inst=LOAD_CONST(arg=2, lineno=4615)
2023-08-01 10:03:59,534 [DEBUG] stack ['$_step76.0']
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=80, inst=COMPARE_OP(arg=2, lineno=4615)
2023-08-01 10:03:59,534 [DEBUG] stack ['$_step76.0', '$const78.1']
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=86, inst=POP_JUMP_FORWARD_IF_FALSE(arg=15, lineno=4615)
2023-08-01 10:03:59,534 [DEBUG] stack ['$80compare_op.2']
2023-08-01 10:03:59,534 [DEBUG] end state. edges=[Edge(pc=88, stack=(), blockstack=(), npush=0), Edge(pc=118, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=88 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
2023-08-01 10:03:59,534 [DEBUG] pending: deque([State(pc_initial=88 nstack_initial=0), State(pc_initial=118 nstack_initial=0)])
2023-08-01 10:03:59,534 [DEBUG] stack: []
2023-08-01 10:03:59,534 [DEBUG] state.pc_initial: State(pc_initial=88 nstack_initial=0)
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=88, inst=LOAD_GLOBAL(arg=1, lineno=4616)
2023-08-01 10:03:59,534 [DEBUG] stack []
2023-08-01 10:03:59,534 [DEBUG] dispatch pc=100, inst=LOAD_CONST(arg=3, lineno=4616)
2023-08-01 10:03:59,534 [DEBUG] stack ['$null$88.1', '$88load_global.0']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=102, inst=PRECALL(arg=1, lineno=4616)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$88.1', '$88load_global.0', '$const100.2']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=106, inst=CALL(arg=1, lineno=4616)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$88.1', '$88load_global.0', '$const100.2']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=116, inst=RAISE_VARARGS(arg=1, lineno=4616)
2023-08-01 10:03:59,535 [DEBUG] stack ['$106call.3']
2023-08-01 10:03:59,535 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,535 [DEBUG] pending: deque([State(pc_initial=118 nstack_initial=0)])
2023-08-01 10:03:59,535 [DEBUG] stack: []
2023-08-01 10:03:59,535 [DEBUG] state.pc_initial: State(pc_initial=118 nstack_initial=0)
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=118, inst=LOAD_FAST(arg=9, lineno=4618)
2023-08-01 10:03:59,535 [DEBUG] stack []
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=120, inst=LOAD_FAST(arg=8, lineno=4618)
2023-08-01 10:03:59,535 [DEBUG] stack ['$_stop118.0']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=122, inst=BINARY_OP(arg=10, lineno=4618)
2023-08-01 10:03:59,535 [DEBUG] stack ['$_stop118.0', '$_start120.1']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=126, inst=LOAD_FAST(arg=7, lineno=4618)
2023-08-01 10:03:59,535 [DEBUG] stack ['$binop_sub122.2']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=128, inst=BINARY_OP(arg=11, lineno=4618)
2023-08-01 10:03:59,535 [DEBUG] stack ['$binop_sub122.2', '$_step126.3']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=132, inst=STORE_FAST(arg=10, lineno=4618)
2023-08-01 10:03:59,535 [DEBUG] stack ['$binop_truediv128.4']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=134, inst=LOAD_GLOBAL(arg=3, lineno=4619)
2023-08-01 10:03:59,535 [DEBUG] stack []
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=146, inst=LOAD_GLOBAL(arg=5, lineno=4619)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$134.6', '$134load_global.5']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=158, inst=LOAD_ATTR(arg=3, lineno=4619)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$null$146.8', '$146load_global.7']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=168, inst=LOAD_FAST(arg=10, lineno=4619)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$null$146.8', '$158load_attr.9']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=170, inst=LOAD_ATTR(arg=4, lineno=4619)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$null$146.8', '$158load_attr.9', '$nitems_c168.10']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=180, inst=PRECALL(arg=1, lineno=4619)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$null$146.8', '$158load_attr.9', '$170load_attr.11']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=184, inst=CALL(arg=1, lineno=4619)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$null$146.8', '$158load_attr.9', '$170load_attr.11']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=194, inst=PRECALL(arg=1, lineno=4619)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$184call.12']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=198, inst=CALL(arg=1, lineno=4619)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$134.6', '$134load_global.5', '$184call.12']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=208, inst=STORE_FAST(arg=11, lineno=4619)
2023-08-01 10:03:59,535 [DEBUG] stack ['$198call.13']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=210, inst=LOAD_DEREF(arg=21, lineno=4622)
2023-08-01 10:03:59,535 [DEBUG] stack []
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=212, inst=LOAD_CONST(arg=4, lineno=4622)
2023-08-01 10:03:59,535 [DEBUG] stack ['$210load_deref.14']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=214, inst=IS_OP(arg=0, lineno=4622)
2023-08-01 10:03:59,535 [DEBUG] stack ['$210load_deref.14', '$const212.15']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=216, inst=POP_JUMP_FORWARD_IF_FALSE(arg=69, lineno=4622)
2023-08-01 10:03:59,535 [DEBUG] stack ['$214is_op.16']
2023-08-01 10:03:59,535 [DEBUG] end state. edges=[Edge(pc=218, stack=(), blockstack=(), npush=0), Edge(pc=356, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,535 [DEBUG] pending: deque([State(pc_initial=218 nstack_initial=0), State(pc_initial=356 nstack_initial=0)])
2023-08-01 10:03:59,535 [DEBUG] stack: []
2023-08-01 10:03:59,535 [DEBUG] state.pc_initial: State(pc_initial=218 nstack_initial=0)
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=218, inst=LOAD_GLOBAL(arg=3, lineno=4623)
2023-08-01 10:03:59,535 [DEBUG] stack []
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=230, inst=LOAD_GLOBAL(arg=5, lineno=4623)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$218.1', '$218load_global.0']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=242, inst=LOAD_ATTR(arg=3, lineno=4623)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$null$230.3', '$230load_global.2']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=252, inst=LOAD_FAST(arg=10, lineno=4623)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$null$230.3', '$242load_attr.4']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=254, inst=LOAD_ATTR(arg=5, lineno=4623)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$null$230.3', '$242load_attr.4', '$nitems_c252.5']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=264, inst=PRECALL(arg=1, lineno=4623)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$null$230.3', '$242load_attr.4', '$254load_attr.6']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=268, inst=CALL(arg=1, lineno=4623)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$null$230.3', '$242load_attr.4', '$254load_attr.6']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=278, inst=PRECALL(arg=1, lineno=4623)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$268call.7']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=282, inst=CALL(arg=1, lineno=4623)
2023-08-01 10:03:59,535 [DEBUG] stack ['$null$218.1', '$218load_global.0', '$268call.7']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=292, inst=STORE_FAST(arg=12, lineno=4623)
2023-08-01 10:03:59,535 [DEBUG] stack ['$282call.8']
2023-08-01 10:03:59,535 [DEBUG] dispatch pc=294, inst=LOAD_GLOBAL(arg=13, lineno=4624)
2023-08-01 10:03:59,535 [DEBUG] stack []
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=306, inst=LOAD_GLOBAL(arg=15, lineno=4624)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$294.10', '$294load_global.9']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=318, inst=LOAD_FAST(arg=12, lineno=4624)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$null$306.12', '$306load_global.11']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=320, inst=LOAD_FAST(arg=11, lineno=4624)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$null$306.12', '$306load_global.11', '$nitems_i318.13']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=322, inst=PRECALL(arg=2, lineno=4624)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$null$306.12', '$306load_global.11', '$nitems_i318.13', '$nitems_r320.14']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=326, inst=CALL(arg=2, lineno=4624)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$null$306.12', '$306load_global.11', '$nitems_i318.13', '$nitems_r320.14']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=336, inst=LOAD_CONST(arg=2, lineno=4624)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$326call.15']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=338, inst=PRECALL(arg=2, lineno=4624)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$326call.15', '$const336.16']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=342, inst=CALL(arg=2, lineno=4624)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$294.10', '$294load_global.9', '$326call.15', '$const336.16']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=352, inst=STORE_FAST(arg=13, lineno=4624)
2023-08-01 10:03:59,536 [DEBUG] stack ['$342call.17']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=354, inst=JUMP_FORWARD(arg=16, lineno=4624)
2023-08-01 10:03:59,536 [DEBUG] stack []
2023-08-01 10:03:59,536 [DEBUG] end state. edges=[Edge(pc=388, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,536 [DEBUG] pending: deque([State(pc_initial=356 nstack_initial=0), State(pc_initial=388 nstack_initial=0)])
2023-08-01 10:03:59,536 [DEBUG] stack: []
2023-08-01 10:03:59,536 [DEBUG] state.pc_initial: State(pc_initial=356 nstack_initial=0)
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=356, inst=LOAD_GLOBAL(arg=13, lineno=4626)
2023-08-01 10:03:59,536 [DEBUG] stack []
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=368, inst=LOAD_FAST(arg=11, lineno=4626)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$356.1', '$356load_global.0']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=370, inst=LOAD_CONST(arg=2, lineno=4626)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$nitems_r368.2']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=372, inst=PRECALL(arg=2, lineno=4626)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$nitems_r368.2', '$const370.3']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=376, inst=CALL(arg=2, lineno=4626)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$356.1', '$356load_global.0', '$nitems_r368.2', '$const370.3']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=386, inst=STORE_FAST(arg=13, lineno=4626)
2023-08-01 10:03:59,536 [DEBUG] stack ['$376call.4']
2023-08-01 10:03:59,536 [DEBUG] end state. edges=[Edge(pc=388, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,536 [DEBUG] pending: deque([State(pc_initial=388 nstack_initial=0), State(pc_initial=388 nstack_initial=0)])
2023-08-01 10:03:59,536 [DEBUG] stack: []
2023-08-01 10:03:59,536 [DEBUG] state.pc_initial: State(pc_initial=388 nstack_initial=0)
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=388, inst=LOAD_GLOBAL(arg=17, lineno=4627)
2023-08-01 10:03:59,536 [DEBUG] stack []
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=400, inst=LOAD_ATTR(arg=9, lineno=4627)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$388.1', '$388load_global.0']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=410, inst=LOAD_FAST(arg=13, lineno=4627)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$388.1', '$400load_attr.2']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=412, inst=LOAD_DEREF(arg=20, lineno=4627)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$388.1', '$400load_attr.2', '$nitems410.3']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=414, inst=PRECALL(arg=2, lineno=4627)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$388.1', '$400load_attr.2', '$nitems410.3', '$412load_deref.4']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=418, inst=CALL(arg=2, lineno=4627)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$388.1', '$400load_attr.2', '$nitems410.3', '$412load_deref.4']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=428, inst=STORE_FAST(arg=14, lineno=4627)
2023-08-01 10:03:59,536 [DEBUG] stack ['$418call.5']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=430, inst=LOAD_FAST(arg=8, lineno=4628)
2023-08-01 10:03:59,536 [DEBUG] stack []
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=432, inst=STORE_FAST(arg=15, lineno=4628)
2023-08-01 10:03:59,536 [DEBUG] stack ['$_start430.6']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=434, inst=LOAD_GLOBAL(arg=21, lineno=4629)
2023-08-01 10:03:59,536 [DEBUG] stack []
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=446, inst=LOAD_FAST(arg=13, lineno=4629)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$434.8', '$434load_global.7']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=448, inst=PRECALL(arg=1, lineno=4629)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$434.8', '$434load_global.7', '$nitems446.9']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=452, inst=CALL(arg=1, lineno=4629)
2023-08-01 10:03:59,536 [DEBUG] stack ['$null$434.8', '$434load_global.7', '$nitems446.9']
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=462, inst=GET_ITER(arg=None, lineno=4629)
2023-08-01 10:03:59,536 [DEBUG] stack ['$452call.10']
2023-08-01 10:03:59,536 [DEBUG] end state. edges=[Edge(pc=464, stack=('$462get_iter.11',), blockstack=(), npush=0)]
2023-08-01 10:03:59,536 [DEBUG] pending: deque([State(pc_initial=388 nstack_initial=0), State(pc_initial=464 nstack_initial=1)])
2023-08-01 10:03:59,536 [DEBUG] pending: deque([State(pc_initial=464 nstack_initial=1)])
2023-08-01 10:03:59,536 [DEBUG] stack: ['$phi464.0']
2023-08-01 10:03:59,536 [DEBUG] state.pc_initial: State(pc_initial=464 nstack_initial=1)
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=464, inst=FOR_ITER(arg=13, lineno=4629)
2023-08-01 10:03:59,536 [DEBUG] stack ['$phi464.0']
2023-08-01 10:03:59,536 [DEBUG] end state. edges=[Edge(pc=492, stack=(), blockstack=(), npush=0), Edge(pc=466, stack=('$phi464.0', '$464for_iter.2'), blockstack=(), npush=0)]
2023-08-01 10:03:59,536 [DEBUG] pending: deque([State(pc_initial=492 nstack_initial=0), State(pc_initial=466 nstack_initial=2)])
2023-08-01 10:03:59,536 [DEBUG] stack: []
2023-08-01 10:03:59,536 [DEBUG] state.pc_initial: State(pc_initial=492 nstack_initial=0)
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=492, inst=LOAD_FAST(arg=14, lineno=4631)
2023-08-01 10:03:59,536 [DEBUG] stack []
2023-08-01 10:03:59,536 [DEBUG] dispatch pc=494, inst=RETURN_VALUE(arg=None, lineno=4631)
2023-08-01 10:03:59,536 [DEBUG] stack ['$arr492.0']
2023-08-01 10:03:59,537 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,537 [DEBUG] pending: deque([State(pc_initial=466 nstack_initial=2)])
2023-08-01 10:03:59,537 [DEBUG] stack: ['$phi466.0', '$phi466.1']
2023-08-01 10:03:59,537 [DEBUG] state.pc_initial: State(pc_initial=466 nstack_initial=2)
2023-08-01 10:03:59,537 [DEBUG] dispatch pc=466, inst=STORE_FAST(arg=16, lineno=4629)
2023-08-01 10:03:59,537 [DEBUG] stack ['$phi466.0', '$phi466.1']
2023-08-01 10:03:59,537 [DEBUG] dispatch pc=468, inst=LOAD_FAST(arg=15, lineno=4630)
2023-08-01 10:03:59,537 [DEBUG] stack ['$phi466.0']
2023-08-01 10:03:59,537 [DEBUG] dispatch pc=470, inst=LOAD_FAST(arg=16, lineno=4630)
2023-08-01 10:03:59,537 [DEBUG] stack ['$phi466.0', '$val468.2']
2023-08-01 10:03:59,537 [DEBUG] dispatch pc=472, inst=LOAD_FAST(arg=7, lineno=4630)
2023-08-01 10:03:59,537 [DEBUG] stack ['$phi466.0', '$val468.2', '$i470.3']
2023-08-01 10:03:59,537 [DEBUG] dispatch pc=474, inst=BINARY_OP(arg=5, lineno=4630)
2023-08-01 10:03:59,537 [DEBUG] stack ['$phi466.0', '$val468.2', '$i470.3', '$_step472.4']
2023-08-01 10:03:59,537 [DEBUG] dispatch pc=478, inst=BINARY_OP(arg=0, lineno=4630)
2023-08-01 10:03:59,537 [DEBUG] stack ['$phi466.0', '$val468.2', '$binop_mul474.5']
2023-08-01 10:03:59,537 [DEBUG] dispatch pc=482, inst=LOAD_FAST(arg=14, lineno=4630)
2023-08-01 10:03:59,537 [DEBUG] stack ['$phi466.0', '$binop_add478.6']
2023-08-01 10:03:59,537 [DEBUG] dispatch pc=484, inst=LOAD_FAST(arg=16, lineno=4630)
2023-08-01 10:03:59,537 [DEBUG] stack ['$phi466.0', '$binop_add478.6', '$arr482.7']
2023-08-01 10:03:59,537 [DEBUG] dispatch pc=486, inst=STORE_SUBSCR(arg=None, lineno=4630)
2023-08-01 10:03:59,537 [DEBUG] stack ['$phi466.0', '$binop_add478.6', '$arr482.7', '$i484.8']
2023-08-01 10:03:59,537 [DEBUG] dispatch pc=490, inst=JUMP_BACKWARD(arg=14, lineno=4630)
2023-08-01 10:03:59,537 [DEBUG] stack ['$phi466.0']
2023-08-01 10:03:59,537 [DEBUG] end state. edges=[Edge(pc=464, stack=('$phi466.0',), blockstack=(), npush=0)]
2023-08-01 10:03:59,537 [DEBUG] pending: deque([State(pc_initial=464 nstack_initial=1)])
2023-08-01 10:03:59,537 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,537 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=10 nstack_initial=0): set(),
             State(pc_initial=14 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=1): {'$phi16.0'},
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=26 nstack_initial=0): set(),
             State(pc_initial=28 nstack_initial=1): {'$phi28.0'},
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=40 nstack_initial=1): {'$phi40.0'},
             State(pc_initial=46 nstack_initial=0): set(),
             State(pc_initial=50 nstack_initial=0): set(),
             State(pc_initial=52 nstack_initial=1): {'$phi52.0'},
             State(pc_initial=58 nstack_initial=0): set(),
             State(pc_initial=68 nstack_initial=0): set(),
             State(pc_initial=76 nstack_initial=0): set(),
             State(pc_initial=88 nstack_initial=0): set(),
             State(pc_initial=118 nstack_initial=0): set(),
             State(pc_initial=218 nstack_initial=0): set(),
             State(pc_initial=356 nstack_initial=0): set(),
             State(pc_initial=388 nstack_initial=0): set(),
             State(pc_initial=464 nstack_initial=1): {'$phi464.0'},
             State(pc_initial=466 nstack_initial=2): {'$phi466.1'},
             State(pc_initial=492 nstack_initial=0): set()})
2023-08-01 10:03:59,537 [DEBUG] defmap: {'$phi16.0': State(pc_initial=14 nstack_initial=0),
 '$phi28.0': State(pc_initial=26 nstack_initial=0),
 '$phi40.0': State(pc_initial=38 nstack_initial=0),
 '$phi464.0': State(pc_initial=388 nstack_initial=0),
 '$phi466.1': State(pc_initial=464 nstack_initial=1),
 '$phi52.0': State(pc_initial=46 nstack_initial=0)}
2023-08-01 10:03:59,537 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi28.0': {('$22load_deref.0',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$stop26.0', State(pc_initial=26 nstack_initial=0))},
             '$phi40.0': {('$34load_deref.0',
                           State(pc_initial=34 nstack_initial=0)),
                          ('$step38.0', State(pc_initial=38 nstack_initial=0))},
             '$phi464.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0)),
                           ('$phi466.0',
                            State(pc_initial=466 nstack_initial=2))},
             '$phi466.0': {('$phi464.0',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi466.1': {('$464for_iter.2',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi52.0': {('$const50.0', State(pc_initial=50 nstack_initial=0)),
                          ('$lit_step46.0',
                           State(pc_initial=46 nstack_initial=0))}})
2023-08-01 10:03:59,537 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi28.0': {('$22load_deref.0',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$stop26.0', State(pc_initial=26 nstack_initial=0))},
             '$phi40.0': {('$34load_deref.0',
                           State(pc_initial=34 nstack_initial=0)),
                          ('$step38.0', State(pc_initial=38 nstack_initial=0))},
             '$phi464.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0)),
                           ('$phi464.0',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi466.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0))},
             '$phi466.1': {('$464for_iter.2',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi52.0': {('$const50.0', State(pc_initial=50 nstack_initial=0)),
                          ('$lit_step46.0',
                           State(pc_initial=46 nstack_initial=0))}})
2023-08-01 10:03:59,537 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi28.0': {('$22load_deref.0',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$stop26.0', State(pc_initial=26 nstack_initial=0))},
             '$phi40.0': {('$34load_deref.0',
                           State(pc_initial=34 nstack_initial=0)),
                          ('$step38.0', State(pc_initial=38 nstack_initial=0))},
             '$phi464.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0))},
             '$phi466.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0))},
             '$phi466.1': {('$464for_iter.2',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi52.0': {('$const50.0', State(pc_initial=50 nstack_initial=0)),
                          ('$lit_step46.0',
                           State(pc_initial=46 nstack_initial=0))}})
2023-08-01 10:03:59,537 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi16.0': {('$10load_deref.0',
                           State(pc_initial=10 nstack_initial=0)),
                          ('$start14.0',
                           State(pc_initial=14 nstack_initial=0))},
             '$phi28.0': {('$22load_deref.0',
                           State(pc_initial=22 nstack_initial=0)),
                          ('$stop26.0', State(pc_initial=26 nstack_initial=0))},
             '$phi40.0': {('$34load_deref.0',
                           State(pc_initial=34 nstack_initial=0)),
                          ('$step38.0', State(pc_initial=38 nstack_initial=0))},
             '$phi464.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0))},
             '$phi466.0': {('$462get_iter.11',
                            State(pc_initial=388 nstack_initial=0))},
             '$phi466.1': {('$464for_iter.2',
                            State(pc_initial=464 nstack_initial=1))},
             '$phi52.0': {('$const50.0', State(pc_initial=50 nstack_initial=0)),
                          ('$lit_step46.0',
                           State(pc_initial=46 nstack_initial=0))}})
2023-08-01 10:03:59,537 [DEBUG] keep phismap: {'$phi16.0': {('$10load_deref.0', State(pc_initial=10 nstack_initial=0)),
              ('$start14.0', State(pc_initial=14 nstack_initial=0))},
 '$phi28.0': {('$22load_deref.0', State(pc_initial=22 nstack_initial=0)),
              ('$stop26.0', State(pc_initial=26 nstack_initial=0))},
 '$phi40.0': {('$34load_deref.0', State(pc_initial=34 nstack_initial=0)),
              ('$step38.0', State(pc_initial=38 nstack_initial=0))},
 '$phi464.0': {('$462get_iter.11', State(pc_initial=388 nstack_initial=0))},
 '$phi466.1': {('$464for_iter.2', State(pc_initial=464 nstack_initial=1))},
 '$phi52.0': {('$const50.0', State(pc_initial=50 nstack_initial=0)),
              ('$lit_step46.0', State(pc_initial=46 nstack_initial=0))}}
2023-08-01 10:03:59,537 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=10 nstack_initial=0): {'$phi16.0': '$10load_deref.0'},
             State(pc_initial=14 nstack_initial=0): {'$phi16.0': '$start14.0'},
             State(pc_initial=22 nstack_initial=0): {'$phi28.0': '$22load_deref.0'},
             State(pc_initial=26 nstack_initial=0): {'$phi28.0': '$stop26.0'},
             State(pc_initial=34 nstack_initial=0): {'$phi40.0': '$34load_deref.0'},
             State(pc_initial=38 nstack_initial=0): {'$phi40.0': '$step38.0'},
             State(pc_initial=46 nstack_initial=0): {'$phi52.0': '$lit_step46.0'},
             State(pc_initial=50 nstack_initial=0): {'$phi52.0': '$const50.0'},
             State(pc_initial=388 nstack_initial=0): {'$phi464.0': '$462get_iter.11'},
             State(pc_initial=464 nstack_initial=1): {'$phi466.1': '$464for_iter.2'}})
2023-08-01 10:03:59,538 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$6load_deref.0'}), (8, {'pred': '$6load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={10: (), 14: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=10 nstack_initial=0):
AdaptBlockInfo(insts=((10, {'res': '$10load_deref.0'}), (12, {})), outgoing_phis={'$phi16.0': '$10load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$10load_deref.0',)})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=14 nstack_initial=0):
AdaptBlockInfo(insts=((14, {'res': '$start14.0'}),), outgoing_phis={'$phi16.0': '$start14.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: ('$start14.0',)})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=16 nstack_initial=1):
AdaptBlockInfo(insts=((16, {'value': '$phi16.0'}), (18, {'res': '$18load_deref.1'}), (20, {'pred': '$18load_deref.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={22: (), 26: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$22load_deref.0'}), (24, {})), outgoing_phis={'$phi28.0': '$22load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ('$22load_deref.0',)})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=26 nstack_initial=0):
AdaptBlockInfo(insts=((26, {'res': '$stop26.0'}),), outgoing_phis={'$phi28.0': '$stop26.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={28: ('$stop26.0',)})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=28 nstack_initial=1):
AdaptBlockInfo(insts=((28, {'value': '$phi28.0'}), (30, {'res': '$30load_deref.1'}), (32, {'pred': '$30load_deref.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$34load_deref.0'}), (36, {})), outgoing_phis={'$phi40.0': '$34load_deref.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$34load_deref.0',)})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$step38.0'}),), outgoing_phis={'$phi40.0': '$step38.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={40: ('$step38.0',)})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=40 nstack_initial=1):
AdaptBlockInfo(insts=((40, {'value': '$phi40.0'}), (42, {'res': '$lit_step42.1'}), (44, {'pred': '$lit_step42.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={46: (), 50: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=46 nstack_initial=0):
AdaptBlockInfo(insts=((46, {'res': '$lit_step46.0'}), (48, {})), outgoing_phis={'$phi52.0': '$lit_step46.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$lit_step46.0',)})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=50 nstack_initial=0):
AdaptBlockInfo(insts=((50, {'res': '$const50.0'}),), outgoing_phis={'$phi52.0': '$const50.0'}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: ('$const50.0',)})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=52 nstack_initial=1):
AdaptBlockInfo(insts=((52, {'value': '$phi52.0'}), (54, {'res': '$lit_stop54.1'}), (56, {'pred': '$lit_stop54.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={58: (), 68: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=58 nstack_initial=0):
AdaptBlockInfo(insts=((58, {'res': '$const58.0'}), (60, {'res': '$lit_start60.1'}), (62, {'value': '$lit_start60.1'}), (64, {'value': '$const58.0'}), (66, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=68 nstack_initial=0):
AdaptBlockInfo(insts=((68, {'res': '$lit_start68.0'}), (70, {'res': '$lit_stop70.1'}), (72, {'value': '$lit_stop70.1'}), (74, {'value': '$lit_start68.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={76: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=76 nstack_initial=0):
AdaptBlockInfo(insts=((76, {'res': '$_step76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$_step76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {}), (84, {}), (86, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={88: (), 118: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=88 nstack_initial=0):
AdaptBlockInfo(insts=((88, {'idx': 0, 'res': '$88load_global.0'}), (90, {}), (92, {}), (94, {}), (96, {}), (98, {}), (100, {'res': '$const100.2'}), (102, {}), (104, {}), (106, {'func': '$88load_global.0', 'args': ['$const100.2'], 'kw_names': None, 'res': '$106call.3'}), (108, {}), (110, {}), (112, {}), (114, {}), (116, {'exc': '$106call.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=118 nstack_initial=0):
AdaptBlockInfo(insts=((118, {'res': '$_stop118.0'}), (120, {'res': '$_start120.1'}), (122, {'op': '-', 'lhs': '$_stop118.0', 'rhs': '$_start120.1', 'res': '$binop_sub122.2'}), (124, {}), (126, {'res': '$_step126.3'}), (128, {'op': '/', 'lhs': '$binop_sub122.2', 'rhs': '$_step126.3', 'res': '$binop_truediv128.4'}), (130, {}), (132, {'value': '$binop_truediv128.4'}), (134, {'idx': 1, 'res': '$134load_global.5'}), (136, {}), (138, {}), (140, {}), (142, {}), (144, {}), (146, {'idx': 2, 'res': '$146load_global.7'}), (148, {}), (150, {}), (152, {}), (154, {}), (156, {}), (158, {'item': '$146load_global.7', 'res': '$158load_attr.9'}), (160, {}), (162, {}), (164, {}), (166, {}), (168, {'res': '$nitems_c168.10'}), (170, {'item': '$nitems_c168.10', 'res': '$170load_attr.11'}), (172, {}), (174, {}), (176, {}), (178, {}), (180, {}), (182, {}), (184, {'func': '$158load_attr.9', 'args': ['$170load_attr.11'], 'kw_names': None, 'res': '$184call.12'}), (186, {}), (188, {}), (190, {}), (192, {}), (194, {}), (196, {}), (198, {'func': '$134load_global.5', 'args': ['$184call.12'], 'kw_names': None, 'res': '$198call.13'}), (200, {}), (202, {}), (204, {}), (206, {}), (208, {'value': '$198call.13'}), (210, {'res': '$210load_deref.14'}), (212, {'res': '$const212.15'}), (214, {'lhs': '$210load_deref.14', 'rhs': '$const212.15', 'res': '$214is_op.16'}), (216, {'pred': '$214is_op.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={218: (), 356: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=218 nstack_initial=0):
AdaptBlockInfo(insts=((218, {'idx': 1, 'res': '$218load_global.0'}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {}), (230, {'idx': 2, 'res': '$230load_global.2'}), (232, {}), (234, {}), (236, {}), (238, {}), (240, {}), (242, {'item': '$230load_global.2', 'res': '$242load_attr.4'}), (244, {}), (246, {}), (248, {}), (250, {}), (252, {'res': '$nitems_c252.5'}), (254, {'item': '$nitems_c252.5', 'res': '$254load_attr.6'}), (256, {}), (258, {}), (260, {}), (262, {}), (264, {}), (266, {}), (268, {'func': '$242load_attr.4', 'args': ['$254load_attr.6'], 'kw_names': None, 'res': '$268call.7'}), (270, {}), (272, {}), (274, {}), (276, {}), (278, {}), (280, {}), (282, {'func': '$218load_global.0', 'args': ['$268call.7'], 'kw_names': None, 'res': '$282call.8'}), (284, {}), (286, {}), (288, {}), (290, {}), (292, {'value': '$282call.8'}), (294, {'idx': 6, 'res': '$294load_global.9'}), (296, {}), (298, {}), (300, {}), (302, {}), (304, {}), (306, {'idx': 7, 'res': '$306load_global.11'}), (308, {}), (310, {}), (312, {}), (314, {}), (316, {}), (318, {'res': '$nitems_i318.13'}), (320, {'res': '$nitems_r320.14'}), (322, {}), (324, {}), (326, {'func': '$306load_global.11', 'args': ['$nitems_i318.13', '$nitems_r320.14'], 'kw_names': None, 'res': '$326call.15'}), (328, {}), (330, {}), (332, {}), (334, {}), (336, {'res': '$const336.16'}), (338, {}), (340, {}), (342, {'func': '$294load_global.9', 'args': ['$326call.15', '$const336.16'], 'kw_names': None, 'res': '$342call.17'}), (344, {}), (346, {}), (348, {}), (350, {}), (352, {'value': '$342call.17'}), (354, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={388: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=356 nstack_initial=0):
AdaptBlockInfo(insts=((356, {'idx': 6, 'res': '$356load_global.0'}), (358, {}), (360, {}), (362, {}), (364, {}), (366, {}), (368, {'res': '$nitems_r368.2'}), (370, {'res': '$const370.3'}), (372, {}), (374, {}), (376, {'func': '$356load_global.0', 'args': ['$nitems_r368.2', '$const370.3'], 'kw_names': None, 'res': '$376call.4'}), (378, {}), (380, {}), (382, {}), (384, {}), (386, {'value': '$376call.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={388: ()})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=388 nstack_initial=0):
AdaptBlockInfo(insts=((388, {'idx': 8, 'res': '$388load_global.0'}), (390, {}), (392, {}), (394, {}), (396, {}), (398, {}), (400, {'item': '$388load_global.0', 'res': '$400load_attr.2'}), (402, {}), (404, {}), (406, {}), (408, {}), (410, {'res': '$nitems410.3'}), (412, {'res': '$412load_deref.4'}), (414, {}), (416, {}), (418, {'func': '$400load_attr.2', 'args': ['$nitems410.3', '$412load_deref.4'], 'kw_names': None, 'res': '$418call.5'}), (420, {}), (422, {}), (424, {}), (426, {}), (428, {'value': '$418call.5'}), (430, {'res': '$_start430.6'}), (432, {'value': '$_start430.6'}), (434, {'idx': 10, 'res': '$434load_global.7'}), (436, {}), (438, {}), (440, {}), (442, {}), (444, {}), (446, {'res': '$nitems446.9'}), (448, {}), (450, {}), (452, {'func': '$434load_global.7', 'args': ['$nitems446.9'], 'kw_names': None, 'res': '$452call.10'}), (454, {}), (456, {}), (458, {}), (460, {}), (462, {'value': '$452call.10', 'res': '$462get_iter.11'})), outgoing_phis={'$phi464.0': '$462get_iter.11'}, blockstack=(), active_try_block=None, outgoing_edgepushed={464: ('$462get_iter.11',)})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=464 nstack_initial=1):
AdaptBlockInfo(insts=((464, {'iterator': '$phi464.0', 'pair': '$464for_iter.1', 'indval': '$464for_iter.2', 'pred': '$464for_iter.3'}),), outgoing_phis={'$phi466.1': '$464for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={492: (), 466: ('$phi464.0', '$464for_iter.2')})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=466 nstack_initial=2):
AdaptBlockInfo(insts=((466, {'value': '$phi466.1'}), (468, {'res': '$val468.2'}), (470, {'res': '$i470.3'}), (472, {'res': '$_step472.4'}), (474, {'op': '*', 'lhs': '$i470.3', 'rhs': '$_step472.4', 'res': '$binop_mul474.5'}), (476, {}), (478, {'op': '+', 'lhs': '$val468.2', 'rhs': '$binop_mul474.5', 'res': '$binop_add478.6'}), (480, {}), (482, {'res': '$arr482.7'}), (484, {'res': '$i484.8'}), (486, {'target': '$arr482.7', 'index': '$i484.8', 'value': '$binop_add478.6'}), (488, {}), (490, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={464: ('$phi466.0',)})
2023-08-01 10:03:59,538 [DEBUG] block_infos State(pc_initial=492 nstack_initial=0):
AdaptBlockInfo(insts=((492, {'res': '$arr492.0'}), (494, {'retval': '$arr492.0', 'castval': '$494return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,539 [DEBUG] label 0:
    start = arg(0, name=start)               ['start']
    stop = arg(1, name=stop)                 ['stop']
    step = arg(2, name=step)                 ['step']
    dtype = arg(3, name=dtype)               ['dtype']
    $6load_deref.0 = freevar(start_value: None) ['$6load_deref.0']
    $constNone8 = const(NoneType, None)      ['$constNone8']
    $maybeNone8 = $6load_deref.0 is not $constNone8 ['$6load_deref.0', '$constNone8', '$maybeNone8']
    $bool8 = global(bool: <class 'bool'>)    ['$bool8']
    $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None) ['$bool8', '$maybeNone8', '$pred8']
    branch $pred8, 10, 14                    ['$pred8']
label 10:
    $10load_deref.0 = freevar(start_value: None) ['$10load_deref.0']
    $phi16.0 = $10load_deref.0               ['$10load_deref.0', '$phi16.0']
    jump 16                                  []
label 14:
    $phi16.0 = start                         ['$phi16.0', 'start']
    jump 16                                  []
label 16:
    lit_start = $phi16.0                     ['$phi16.0', 'lit_start']
    $18load_deref.1 = freevar(stop_value: None) ['$18load_deref.1']
    $constNone20 = const(NoneType, None)     ['$constNone20']
    $maybeNone20 = $18load_deref.1 is not $constNone20 ['$18load_deref.1', '$constNone20', '$maybeNone20']
    $bool20 = global(bool: <class 'bool'>)   ['$bool20']
    $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None) ['$bool20', '$maybeNone20', '$pred20']
    branch $pred20, 22, 26                   ['$pred20']
label 22:
    $22load_deref.0 = freevar(stop_value: None) ['$22load_deref.0']
    $phi28.0 = $22load_deref.0               ['$22load_deref.0', '$phi28.0']
    jump 28                                  []
label 26:
    $phi28.0 = stop                          ['$phi28.0', 'stop']
    jump 28                                  []
label 28:
    lit_stop = $phi28.0                      ['$phi28.0', 'lit_stop']
    $30load_deref.1 = freevar(step_value: None) ['$30load_deref.1']
    $constNone32 = const(NoneType, None)     ['$constNone32']
    $maybeNone32 = $30load_deref.1 is not $constNone32 ['$30load_deref.1', '$constNone32', '$maybeNone32']
    $bool32 = global(bool: <class 'bool'>)   ['$bool32']
    $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None) ['$bool32', '$maybeNone32', '$pred32']
    branch $pred32, 34, 38                   ['$pred32']
label 34:
    $34load_deref.0 = freevar(step_value: None) ['$34load_deref.0']
    $phi40.0 = $34load_deref.0               ['$34load_deref.0', '$phi40.0']
    jump 40                                  []
label 38:
    $phi40.0 = step                          ['$phi40.0', 'step']
    jump 40                                  []
label 40:
    lit_step = $phi40.0                      ['$phi40.0', 'lit_step']
    $constNone44 = const(NoneType, None)     ['$constNone44']
    $maybeNone44 = lit_step is not $constNone44 ['$constNone44', '$maybeNone44', 'lit_step']
    $bool44 = global(bool: <class 'bool'>)   ['$bool44']
    $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None) ['$bool44', '$maybeNone44', '$pred44']
    branch $pred44, 46, 50                   ['$pred44']
label 46:
    $phi52.0 = lit_step                      ['$phi52.0', 'lit_step']
    jump 52                                  []
label 50:
    $const50.0 = const(int, 1)               ['$const50.0']
    $phi52.0 = $const50.0                    ['$const50.0', '$phi52.0']
    jump 52                                  []
label 52:
    _step = $phi52.0                         ['$phi52.0', '_step']
    $constNone56 = const(NoneType, None)     ['$constNone56']
    $maybeNone56 = lit_stop is $constNone56  ['$constNone56', '$maybeNone56', 'lit_stop']
    $bool56 = global(bool: <class 'bool'>)   ['$bool56']
    $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None) ['$bool56', '$maybeNone56', '$pred56']
    branch $pred56, 58, 68                   ['$pred56']
label 58:
    $const58.0 = const(int, 0)               ['$const58.0']
    _stop = lit_start                        ['_stop', 'lit_start']
    _start = $const58.0                      ['$const58.0', '_start']
    jump 76                                  []
label 68:
    _stop = lit_stop                         ['_stop', 'lit_stop']
    _start = lit_start                       ['_start', 'lit_start']
    jump 76                                  []
label 76:
    $const78.1 = const(int, 0)               ['$const78.1']
    $80compare_op.2 = _step == $const78.1    ['$80compare_op.2', '$const78.1', '_step']
    bool86 = global(bool: <class 'bool'>)    ['bool86']
    $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$86pred', 'bool86']
    branch $86pred, 88, 118                  ['$86pred']
label 88:
    $88load_global.0 = global(ValueError: <class 'ValueError'>) ['$88load_global.0']
    $const100.2 = const(str, Maximum allowed size exceeded) ['$const100.2']
    $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None) ['$106call.3', '$88load_global.0', '$const100.2']
    raise $106call.3                         ['$106call.3']
label 118:
    $binop_sub122.2 = _stop - _start         ['$binop_sub122.2', '_start', '_stop']
    nitems_c = $binop_sub122.2 / _step       ['$binop_sub122.2', '_step', 'nitems_c']
    $134load_global.5 = global(int: <class 'int'>) ['$134load_global.5']
    $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>) ['$146load_global.7']
    $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil) ['$146load_global.7', '$158load_attr.9']
    $170load_attr.11 = getattr(value=nitems_c, attr=real) ['$170load_attr.11', 'nitems_c']
    $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None) ['$158load_attr.9', '$170load_attr.11', '$184call.12']
    nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None) ['$134load_global.5', '$184call.12', 'nitems_r']
    $210load_deref.14 = freevar(use_complex: False) ['$210load_deref.14']
    $const212.15 = const(bool, True)         ['$const212.15']
    $214is_op.16 = $210load_deref.14 is $const212.15 ['$210load_deref.14', '$214is_op.16', '$const212.15']
    bool216 = global(bool: <class 'bool'>)   ['bool216']
    $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None) ['$214is_op.16', '$216pred', 'bool216']
    branch $216pred, 218, 356                ['$216pred']
label 218:
    $218load_global.0 = global(int: <class 'int'>) ['$218load_global.0']
    $230load_global.2 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>) ['$230load_global.2']
    $242load_attr.4 = getattr(value=$230load_global.2, attr=ceil) ['$230load_global.2', '$242load_attr.4']
    $254load_attr.6 = getattr(value=nitems_c, attr=imag) ['$254load_attr.6', 'nitems_c']
    $268call.7 = call $242load_attr.4($254load_attr.6, func=$242load_attr.4, args=[Var($254load_attr.6, arrayobj.py:4623)], kws=(), vararg=None, varkwarg=None, target=None) ['$242load_attr.4', '$254load_attr.6', '$268call.7']
    nitems_i = call $218load_global.0($268call.7, func=$218load_global.0, args=[Var($268call.7, arrayobj.py:4623)], kws=(), vararg=None, varkwarg=None, target=None) ['$218load_global.0', '$268call.7', 'nitems_i']
    $294load_global.9 = global(max: <built-in function max>) ['$294load_global.9']
    $306load_global.11 = global(min: <built-in function min>) ['$306load_global.11']
    $326call.15 = call $306load_global.11(nitems_i, nitems_r, func=$306load_global.11, args=[Var(nitems_i, arrayobj.py:4623), Var(nitems_r, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None) ['$306load_global.11', '$326call.15', 'nitems_i', 'nitems_r']
    $const336.16 = const(int, 0)             ['$const336.16']
    nitems = call $294load_global.9($326call.15, $const336.16, func=$294load_global.9, args=[Var($326call.15, arrayobj.py:4624), Var($const336.16, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None) ['$294load_global.9', '$326call.15', '$const336.16', 'nitems']
    jump 388                                 []
label 356:
    $356load_global.0 = global(max: <built-in function max>) ['$356load_global.0']
    $const370.3 = const(int, 0)              ['$const370.3']
    nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None) ['$356load_global.0', '$const370.3', 'nitems', 'nitems_r']
    jump 388                                 []
label 388:
    $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$388load_global.0']
    $400load_attr.2 = getattr(value=$388load_global.0, attr=empty) ['$388load_global.0', '$400load_attr.2']
    $412load_deref.4 = freevar(true_dtype: int64) ['$412load_deref.4']
    arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None) ['$400load_attr.2', '$412load_deref.4', 'arr', 'nitems']
    val = _start                             ['_start', 'val']
    $434load_global.7 = global(range: <class 'range'>) ['$434load_global.7']
    $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None) ['$434load_global.7', '$452call.10', 'nitems']
    $462get_iter.11 = getiter(value=$452call.10) ['$452call.10', '$462get_iter.11']
    $phi464.0 = $462get_iter.11              ['$462get_iter.11', '$phi464.0']
    jump 464                                 []
label 464:
    $464for_iter.1 = iternext(value=$phi464.0) ['$464for_iter.1', '$phi464.0']
    $464for_iter.2 = pair_first(value=$464for_iter.1) ['$464for_iter.1', '$464for_iter.2']
    $464for_iter.3 = pair_second(value=$464for_iter.1) ['$464for_iter.1', '$464for_iter.3']
    $phi466.1 = $464for_iter.2               ['$464for_iter.2', '$phi466.1']
    branch $464for_iter.3, 466, 492          ['$464for_iter.3']
label 466:
    i = $phi466.1                            ['$phi466.1', 'i']
    $binop_mul474.5 = i * _step              ['$binop_mul474.5', '_step', 'i']
    $binop_add478.6 = val + $binop_mul474.5  ['$binop_add478.6', '$binop_mul474.5', 'val']
    arr[i] = $binop_add478.6                 ['$binop_add478.6', 'arr', 'i']
    jump 464                                 []
label 492:
    $494return_value.1 = cast(value=arr)     ['$494return_value.1', 'arr']
    return $494return_value.1                ['$494return_value.1']

2023-08-01 10:03:59,545 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: start = arg(0, name=start)
2023-08-01 10:03:59,546 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-08-01 10:03:59,546 [DEBUG] on stmt: step = arg(2, name=step)
2023-08-01 10:03:59,546 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: jump 14
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 14
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: $phi16.0 = start
2023-08-01 10:03:59,546 [DEBUG] on stmt: jump 16
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 16
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: lit_start = $phi16.0
2023-08-01 10:03:59,546 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: jump 26
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 26
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: $phi28.0 = stop
2023-08-01 10:03:59,546 [DEBUG] on stmt: jump 28
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 28
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: lit_stop = $phi28.0
2023-08-01 10:03:59,546 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: jump 38
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 38
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: $phi40.0 = step
2023-08-01 10:03:59,546 [DEBUG] on stmt: jump 40
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 40
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: lit_step = $phi40.0
2023-08-01 10:03:59,546 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-08-01 10:03:59,546 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: branch $pred44, 46, 50
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 46
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: $phi52.0 = lit_step
2023-08-01 10:03:59,546 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 50
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $phi52.0 = $const50.0
2023-08-01 10:03:59,546 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 52
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: _step = $phi52.0
2023-08-01 10:03:59,546 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-08-01 10:03:59,546 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: branch $pred56, 58, 68
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 58
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-08-01 10:03:59,546 [DEBUG] on stmt: _stop = lit_start
2023-08-01 10:03:59,546 [DEBUG] on stmt: _start = $const58.0
2023-08-01 10:03:59,546 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 68
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: _stop = lit_stop
2023-08-01 10:03:59,546 [DEBUG] on stmt: _start = lit_start
2023-08-01 10:03:59,546 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 76
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-08-01 10:03:59,546 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: branch $86pred, 88, 118
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 88
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-08-01 10:03:59,546 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,546 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-08-01 10:03:59,546 [DEBUG] ==== SSA block analysis pass on 118
2023-08-01 10:03:59,546 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,546 [DEBUG] on stmt: $binop_sub122.2 = _stop - _start
2023-08-01 10:03:59,547 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-08-01 10:03:59,547 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,547 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-08-01 10:03:59,547 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,547 [DEBUG] on stmt: jump 356
2023-08-01 10:03:59,547 [DEBUG] ==== SSA block analysis pass on 356
2023-08-01 10:03:59,547 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,547 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-08-01 10:03:59,547 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,547 [DEBUG] on stmt: jump 388
2023-08-01 10:03:59,547 [DEBUG] ==== SSA block analysis pass on 388
2023-08-01 10:03:59,547 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,547 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-08-01 10:03:59,547 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,547 [DEBUG] on stmt: val = _start
2023-08-01 10:03:59,547 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-08-01 10:03:59,547 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,547 [DEBUG] ==== SSA block analysis pass on 464
2023-08-01 10:03:59,547 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,547 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-08-01 10:03:59,547 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-08-01 10:03:59,547 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-08-01 10:03:59,547 [DEBUG] ==== SSA block analysis pass on 466
2023-08-01 10:03:59,547 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,547 [DEBUG] on stmt: i = $phi466.1
2023-08-01 10:03:59,547 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-08-01 10:03:59,547 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-08-01 10:03:59,547 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-08-01 10:03:59,547 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,547 [DEBUG] ==== SSA block analysis pass on 492
2023-08-01 10:03:59,547 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292581950>
2023-08-01 10:03:59,547 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-08-01 10:03:59,547 [DEBUG] on stmt: return $494return_value.1
2023-08-01 10:03:59,547 [DEBUG] defs defaultdict(<class 'list'>,
            {'$106call.3': [<numba.core.ir.Assign object at 0x29258d610>],
             '$134load_global.5': [<numba.core.ir.Assign object at 0x29258e410>],
             '$146load_global.7': [<numba.core.ir.Assign object at 0x29258e710>],
             '$158load_attr.9': [<numba.core.ir.Assign object at 0x29258e9d0>],
             '$170load_attr.11': [<numba.core.ir.Assign object at 0x29258edd0>],
             '$184call.12': [<numba.core.ir.Assign object at 0x29258f010>],
             '$18load_deref.1': [<numba.core.ir.Assign object at 0x29256dad0>],
             '$210load_deref.14': [<numba.core.ir.Assign object at 0x29258f550>],
             '$214is_op.16': [<numba.core.ir.Assign object at 0x29258f910>],
             '$216pred': [<numba.core.ir.Assign object at 0x29258fcd0>],
             '$30load_deref.1': [<numba.core.ir.Assign object at 0x2925851d0>],
             '$356load_global.0': [<numba.core.ir.Assign object at 0x292591f90>],
             '$388load_global.0': [<numba.core.ir.Assign object at 0x2925926d0>],
             '$400load_attr.2': [<numba.core.ir.Assign object at 0x292592910>],
             '$412load_deref.4': [<numba.core.ir.Assign object at 0x292592c90>],
             '$434load_global.7': [<numba.core.ir.Assign object at 0x292593590>],
             '$452call.10': [<numba.core.ir.Assign object at 0x2925938d0>],
             '$462get_iter.11': [<numba.core.ir.Assign object at 0x292593b90>],
             '$464for_iter.1': [<numba.core.ir.Assign object at 0x292593e90>],
             '$464for_iter.2': [<numba.core.ir.Assign object at 0x292598050>],
             '$464for_iter.3': [<numba.core.ir.Assign object at 0x2925981d0>],
             '$494return_value.1': [<numba.core.ir.Assign object at 0x292599550>],
             '$6load_deref.0': [<numba.core.ir.Assign object at 0x29251af50>],
             '$80compare_op.2': [<numba.core.ir.Assign object at 0x29258cb50>],
             '$86pred': [<numba.core.ir.Assign object at 0x29258ce50>],
             '$88load_global.0': [<numba.core.ir.Assign object at 0x29258d0d0>],
             '$binop_add478.6': [<numba.core.ir.Assign object at 0x292598e50>],
             '$binop_mul474.5': [<numba.core.ir.Assign object at 0x292598c10>],
             '$binop_sub122.2': [<numba.core.ir.Assign object at 0x29258dd50>],
             '$bool20': [<numba.core.ir.Assign object at 0x29256d510>],
             '$bool32': [<numba.core.ir.Assign object at 0x292585610>],
             '$bool44': [<numba.core.ir.Assign object at 0x292586650>],
             '$bool56': [<numba.core.ir.Assign object at 0x292587650>],
             '$bool8': [<numba.core.ir.Assign object at 0x29256ff50>],
             '$const100.2': [<numba.core.ir.Assign object at 0x29258d390>],
             '$const212.15': [<numba.core.ir.Assign object at 0x29258f710>],
             '$const370.3': [<numba.core.ir.Assign object at 0x292592290>],
             '$const50.0': [<numba.core.ir.Assign object at 0x292586e10>],
             '$const58.0': [<numba.core.ir.Assign object at 0x292587a10>],
             '$const78.1': [<numba.core.ir.Assign object at 0x29258c990>],
             '$constNone20': [<numba.core.ir.Assign object at 0x29256d650>],
             '$constNone32': [<numba.core.ir.Assign object at 0x292585390>],
             '$constNone44': [<numba.core.ir.Assign object at 0x2925863d0>],
             '$constNone56': [<numba.core.ir.Assign object at 0x2925873d0>],
             '$constNone8': [<numba.core.ir.Assign object at 0x29256f150>],
             '$maybeNone20': [<numba.core.ir.Assign object at 0x29256d6d0>],
             '$maybeNone32': [<numba.core.ir.Assign object at 0x2925854d0>],
             '$maybeNone44': [<numba.core.ir.Assign object at 0x292586510>],
             '$maybeNone56': [<numba.core.ir.Assign object at 0x292587510>],
             '$maybeNone8': [<numba.core.ir.Assign object at 0x29256ea50>],
             '$phi16.0': [<numba.core.ir.Assign object at 0x29256e1d0>],
             '$phi28.0': [<numba.core.ir.Assign object at 0x29255cd50>],
             '$phi40.0': [<numba.core.ir.Assign object at 0x29256dd90>],
             '$phi464.0': [<numba.core.ir.Assign object at 0x2925930d0>],
             '$phi466.1': [<numba.core.ir.Assign object at 0x292598290>],
             '$phi52.0': [<numba.core.ir.Assign object at 0x292586b10>,
                          <numba.core.ir.Assign object at 0x292586d50>],
             '$pred20': [<numba.core.ir.Assign object at 0x29256e650>],
             '$pred32': [<numba.core.ir.Assign object at 0x292585790>],
             '$pred44': [<numba.core.ir.Assign object at 0x2925867d0>],
             '$pred56': [<numba.core.ir.Assign object at 0x2925877d0>],
             '$pred8': [<numba.core.ir.Assign object at 0x29256f350>],
             '_start': [<numba.core.ir.Assign object at 0x292587e50>,
                        <numba.core.ir.Assign object at 0x29258c5d0>],
             '_step': [<numba.core.ir.Assign object at 0x2925870d0>],
             '_stop': [<numba.core.ir.Assign object at 0x292587cd0>,
                       <numba.core.ir.Assign object at 0x29258c4d0>],
             'arr': [<numba.core.ir.Assign object at 0x292592f10>],
             'bool216': [<numba.core.ir.Assign object at 0x29258fb10>],
             'bool86': [<numba.core.ir.Assign object at 0x29258cd10>],
             'dtype': [<numba.core.ir.Assign object at 0x29252d150>],
             'i': [<numba.core.ir.Assign object at 0x292598550>],
             'lit_start': [<numba.core.ir.Assign object at 0x29256d750>],
             'lit_step': [<numba.core.ir.Assign object at 0x292586090>],
             'lit_stop': [<numba.core.ir.Assign object at 0x292585050>],
             'nitems': [<numba.core.ir.Assign object at 0x292592490>],
             'nitems_c': [<numba.core.ir.Assign object at 0x29258e0d0>],
             'nitems_r': [<numba.core.ir.Assign object at 0x29258f2d0>],
             'start': [<numba.core.ir.Assign object at 0x2924c4390>],
             'step': [<numba.core.ir.Assign object at 0x29252c7d0>],
             'stop': [<numba.core.ir.Assign object at 0x2924dded0>],
             'val': [<numba.core.ir.Assign object at 0x292593410>]})
2023-08-01 10:03:59,547 [DEBUG] SSA violators {'_start', '_stop', '$phi52.0'}
2023-08-01 10:03:59,547 [DEBUG] Fix SSA violator on var _start
2023-08-01 10:03:59,547 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,547 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,547 [DEBUG] on stmt: start = arg(0, name=start)
2023-08-01 10:03:59,547 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-08-01 10:03:59,547 [DEBUG] on stmt: step = arg(2, name=step)
2023-08-01 10:03:59,548 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: jump 14
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 14
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: $phi16.0 = start
2023-08-01 10:03:59,548 [DEBUG] on stmt: jump 16
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 16
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: lit_start = $phi16.0
2023-08-01 10:03:59,548 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: jump 26
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 26
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: $phi28.0 = stop
2023-08-01 10:03:59,548 [DEBUG] on stmt: jump 28
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 28
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: lit_stop = $phi28.0
2023-08-01 10:03:59,548 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: jump 38
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 38
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: $phi40.0 = step
2023-08-01 10:03:59,548 [DEBUG] on stmt: jump 40
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 40
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: lit_step = $phi40.0
2023-08-01 10:03:59,548 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-08-01 10:03:59,548 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: branch $pred44, 46, 50
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 46
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: $phi52.0 = lit_step
2023-08-01 10:03:59,548 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 50
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $phi52.0 = $const50.0
2023-08-01 10:03:59,548 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 52
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: _step = $phi52.0
2023-08-01 10:03:59,548 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-08-01 10:03:59,548 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: branch $pred56, 58, 68
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 58
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-08-01 10:03:59,548 [DEBUG] on stmt: _stop = lit_start
2023-08-01 10:03:59,548 [DEBUG] on stmt: _start = $const58.0
2023-08-01 10:03:59,548 [DEBUG] first assign: _start
2023-08-01 10:03:59,548 [DEBUG] replaced with: _start = $const58.0
2023-08-01 10:03:59,548 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 68
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: _stop = lit_stop
2023-08-01 10:03:59,548 [DEBUG] on stmt: _start = lit_start
2023-08-01 10:03:59,548 [DEBUG] replaced with: _start.1 = lit_start
2023-08-01 10:03:59,548 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 76
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-08-01 10:03:59,548 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: branch $86pred, 88, 118
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 88
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,548 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-08-01 10:03:59,548 [DEBUG] ==== SSA block rewrite pass on 118
2023-08-01 10:03:59,548 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,548 [DEBUG] on stmt: $binop_sub122.2 = _stop - _start
2023-08-01 10:03:59,548 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-08-01 10:03:59,548 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-08-01 10:03:59,548 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-08-01 10:03:59,549 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: jump 356
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,549 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-08-01 10:03:59,549 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: jump 388
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 388
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,549 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-08-01 10:03:59,549 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: val = _start
2023-08-01 10:03:59,549 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-08-01 10:03:59,549 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 464
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,549 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-08-01 10:03:59,549 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 466
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,549 [DEBUG] on stmt: i = $phi466.1
2023-08-01 10:03:59,549 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-08-01 10:03:59,549 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-08-01 10:03:59,549 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-08-01 10:03:59,549 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 492
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292581950>
2023-08-01 10:03:59,549 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-08-01 10:03:59,549 [DEBUG] on stmt: return $494return_value.1
2023-08-01 10:03:59,549 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x29257de10>],
             68: [<numba.core.ir.Assign object at 0x29257fc10>]})
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,549 [DEBUG] on stmt: start = arg(0, name=start)
2023-08-01 10:03:59,549 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-08-01 10:03:59,549 [DEBUG] on stmt: step = arg(2, name=step)
2023-08-01 10:03:59,549 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: jump 14
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 14
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,549 [DEBUG] on stmt: $phi16.0 = start
2023-08-01 10:03:59,549 [DEBUG] on stmt: jump 16
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 16
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,549 [DEBUG] on stmt: lit_start = $phi16.0
2023-08-01 10:03:59,549 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: jump 26
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 26
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,549 [DEBUG] on stmt: $phi28.0 = stop
2023-08-01 10:03:59,549 [DEBUG] on stmt: jump 28
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 28
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,549 [DEBUG] on stmt: lit_stop = $phi28.0
2023-08-01 10:03:59,549 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: jump 38
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 38
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,549 [DEBUG] on stmt: $phi40.0 = step
2023-08-01 10:03:59,549 [DEBUG] on stmt: jump 40
2023-08-01 10:03:59,549 [DEBUG] ==== SSA block rewrite pass on 40
2023-08-01 10:03:59,549 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,549 [DEBUG] on stmt: lit_step = $phi40.0
2023-08-01 10:03:59,549 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-08-01 10:03:59,549 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,549 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,549 [DEBUG] on stmt: branch $pred44, 46, 50
2023-08-01 10:03:59,550 [DEBUG] ==== SSA block rewrite pass on 46
2023-08-01 10:03:59,550 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,550 [DEBUG] on stmt: $phi52.0 = lit_step
2023-08-01 10:03:59,550 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,550 [DEBUG] ==== SSA block rewrite pass on 50
2023-08-01 10:03:59,550 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,550 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $phi52.0 = $const50.0
2023-08-01 10:03:59,550 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,550 [DEBUG] ==== SSA block rewrite pass on 52
2023-08-01 10:03:59,550 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,550 [DEBUG] on stmt: _step = $phi52.0
2023-08-01 10:03:59,550 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-08-01 10:03:59,550 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,550 [DEBUG] on stmt: branch $pred56, 58, 68
2023-08-01 10:03:59,550 [DEBUG] ==== SSA block rewrite pass on 58
2023-08-01 10:03:59,550 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,550 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-08-01 10:03:59,550 [DEBUG] on stmt: _stop = lit_start
2023-08-01 10:03:59,550 [DEBUG] on stmt: _start = $const58.0
2023-08-01 10:03:59,550 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,550 [DEBUG] ==== SSA block rewrite pass on 68
2023-08-01 10:03:59,550 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,550 [DEBUG] on stmt: _stop = lit_stop
2023-08-01 10:03:59,550 [DEBUG] on stmt: _start.1 = lit_start
2023-08-01 10:03:59,550 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,550 [DEBUG] ==== SSA block rewrite pass on 76
2023-08-01 10:03:59,550 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,550 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-08-01 10:03:59,550 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,550 [DEBUG] on stmt: branch $86pred, 88, 118
2023-08-01 10:03:59,550 [DEBUG] ==== SSA block rewrite pass on 88
2023-08-01 10:03:59,550 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,550 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,550 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-08-01 10:03:59,550 [DEBUG] ==== SSA block rewrite pass on 118
2023-08-01 10:03:59,550 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,550 [DEBUG] on stmt: $binop_sub122.2 = _stop - _start
2023-08-01 10:03:59,550 [DEBUG] find_def var='_start' stmt=$binop_sub122.2 = _stop - _start
2023-08-01 10:03:59,550 [DEBUG] find_def_from_top label 118
2023-08-01 10:03:59,550 [DEBUG] idom 76 from label 118
2023-08-01 10:03:59,550 [DEBUG] find_def_from_bottom label 76
2023-08-01 10:03:59,550 [DEBUG] find_def_from_top label 76
2023-08-01 10:03:59,550 [DEBUG] insert phi node _start.2 = phi(incoming_values=[], incoming_blocks=[]) at 76
2023-08-01 10:03:59,550 [DEBUG] find_def_from_bottom label 58
2023-08-01 10:03:59,550 [DEBUG] incoming_def _start = $const58.0
2023-08-01 10:03:59,550 [DEBUG] find_def_from_bottom label 68
2023-08-01 10:03:59,550 [DEBUG] incoming_def _start.1 = lit_start
2023-08-01 10:03:59,550 [DEBUG] replaced with: $binop_sub122.2 = _stop - _start.2
2023-08-01 10:03:59,550 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-08-01 10:03:59,550 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,550 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-08-01 10:03:59,550 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,550 [DEBUG] on stmt: jump 356
2023-08-01 10:03:59,550 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,550 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,550 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-08-01 10:03:59,550 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,550 [DEBUG] on stmt: jump 388
2023-08-01 10:03:59,550 [DEBUG] ==== SSA block rewrite pass on 388
2023-08-01 10:03:59,550 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,550 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-08-01 10:03:59,550 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-08-01 10:03:59,550 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,550 [DEBUG] on stmt: val = _start
2023-08-01 10:03:59,550 [DEBUG] find_def var='_start' stmt=val = _start
2023-08-01 10:03:59,550 [DEBUG] find_def_from_top label 388
2023-08-01 10:03:59,550 [DEBUG] idom 356 from label 388
2023-08-01 10:03:59,550 [DEBUG] find_def_from_bottom label 356
2023-08-01 10:03:59,550 [DEBUG] find_def_from_top label 356
2023-08-01 10:03:59,550 [DEBUG] idom 118 from label 356
2023-08-01 10:03:59,550 [DEBUG] find_def_from_bottom label 118
2023-08-01 10:03:59,550 [DEBUG] find_def_from_top label 118
2023-08-01 10:03:59,551 [DEBUG] idom 76 from label 118
2023-08-01 10:03:59,551 [DEBUG] find_def_from_bottom label 76
2023-08-01 10:03:59,551 [DEBUG] replaced with: val = _start.2
2023-08-01 10:03:59,551 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-08-01 10:03:59,551 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 464
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,551 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-08-01 10:03:59,551 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 466
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,551 [DEBUG] on stmt: i = $phi466.1
2023-08-01 10:03:59,551 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-08-01 10:03:59,551 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-08-01 10:03:59,551 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-08-01 10:03:59,551 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 492
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257f050>
2023-08-01 10:03:59,551 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-08-01 10:03:59,551 [DEBUG] on stmt: return $494return_value.1
2023-08-01 10:03:59,551 [DEBUG] Fix SSA violator on var _stop
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: start = arg(0, name=start)
2023-08-01 10:03:59,551 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-08-01 10:03:59,551 [DEBUG] on stmt: step = arg(2, name=step)
2023-08-01 10:03:59,551 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: jump 14
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 14
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: $phi16.0 = start
2023-08-01 10:03:59,551 [DEBUG] on stmt: jump 16
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 16
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: lit_start = $phi16.0
2023-08-01 10:03:59,551 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: jump 26
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 26
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: $phi28.0 = stop
2023-08-01 10:03:59,551 [DEBUG] on stmt: jump 28
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 28
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: lit_stop = $phi28.0
2023-08-01 10:03:59,551 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: jump 38
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 38
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: $phi40.0 = step
2023-08-01 10:03:59,551 [DEBUG] on stmt: jump 40
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 40
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: lit_step = $phi40.0
2023-08-01 10:03:59,551 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-08-01 10:03:59,551 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: branch $pred44, 46, 50
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 46
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: $phi52.0 = lit_step
2023-08-01 10:03:59,551 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 50
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $phi52.0 = $const50.0
2023-08-01 10:03:59,551 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 52
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: _step = $phi52.0
2023-08-01 10:03:59,551 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-08-01 10:03:59,551 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,551 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,551 [DEBUG] on stmt: branch $pred56, 58, 68
2023-08-01 10:03:59,551 [DEBUG] ==== SSA block rewrite pass on 58
2023-08-01 10:03:59,551 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,551 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-08-01 10:03:59,552 [DEBUG] on stmt: _stop = lit_start
2023-08-01 10:03:59,552 [DEBUG] first assign: _stop
2023-08-01 10:03:59,552 [DEBUG] replaced with: _stop = lit_start
2023-08-01 10:03:59,552 [DEBUG] on stmt: _start = $const58.0
2023-08-01 10:03:59,552 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 68
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: _stop = lit_stop
2023-08-01 10:03:59,552 [DEBUG] replaced with: _stop.1 = lit_stop
2023-08-01 10:03:59,552 [DEBUG] on stmt: _start.1 = lit_start
2023-08-01 10:03:59,552 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 76
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: _start.2 = phi(incoming_values=[Var(_start, arrayobj.py:4611), Var(_start.1, arrayobj.py:4613)], incoming_blocks=[58, 68])
2023-08-01 10:03:59,552 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-08-01 10:03:59,552 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: branch $86pred, 88, 118
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 88
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 118
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: $binop_sub122.2 = _stop - _start.2
2023-08-01 10:03:59,552 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-08-01 10:03:59,552 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-08-01 10:03:59,552 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: jump 356
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-08-01 10:03:59,552 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: jump 388
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 388
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-08-01 10:03:59,552 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: val = _start.2
2023-08-01 10:03:59,552 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-08-01 10:03:59,552 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 464
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-08-01 10:03:59,552 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 466
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: i = $phi466.1
2023-08-01 10:03:59,552 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-08-01 10:03:59,552 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-08-01 10:03:59,552 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-08-01 10:03:59,552 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 492
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-08-01 10:03:59,552 [DEBUG] on stmt: return $494return_value.1
2023-08-01 10:03:59,552 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {58: [<numba.core.ir.Assign object at 0x29257ce90>],
             68: [<numba.core.ir.Assign object at 0x29257cd10>]})
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: start = arg(0, name=start)
2023-08-01 10:03:59,552 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-08-01 10:03:59,552 [DEBUG] on stmt: step = arg(2, name=step)
2023-08-01 10:03:59,552 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,552 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,552 [DEBUG] on stmt: jump 14
2023-08-01 10:03:59,552 [DEBUG] ==== SSA block rewrite pass on 14
2023-08-01 10:03:59,552 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,552 [DEBUG] on stmt: $phi16.0 = start
2023-08-01 10:03:59,553 [DEBUG] on stmt: jump 16
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 16
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: lit_start = $phi16.0
2023-08-01 10:03:59,553 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: jump 26
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 26
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: $phi28.0 = stop
2023-08-01 10:03:59,553 [DEBUG] on stmt: jump 28
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 28
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: lit_stop = $phi28.0
2023-08-01 10:03:59,553 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: jump 38
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 38
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: $phi40.0 = step
2023-08-01 10:03:59,553 [DEBUG] on stmt: jump 40
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 40
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: lit_step = $phi40.0
2023-08-01 10:03:59,553 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-08-01 10:03:59,553 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: branch $pred44, 46, 50
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 46
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: $phi52.0 = lit_step
2023-08-01 10:03:59,553 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 50
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $phi52.0 = $const50.0
2023-08-01 10:03:59,553 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 52
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: _step = $phi52.0
2023-08-01 10:03:59,553 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-08-01 10:03:59,553 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: branch $pred56, 58, 68
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 58
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-08-01 10:03:59,553 [DEBUG] on stmt: _stop = lit_start
2023-08-01 10:03:59,553 [DEBUG] on stmt: _start = $const58.0
2023-08-01 10:03:59,553 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 68
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: _stop.1 = lit_stop
2023-08-01 10:03:59,553 [DEBUG] on stmt: _start.1 = lit_start
2023-08-01 10:03:59,553 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 76
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: _start.2 = phi(incoming_values=[Var(_start, arrayobj.py:4611), Var(_start.1, arrayobj.py:4613)], incoming_blocks=[58, 68])
2023-08-01 10:03:59,553 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-08-01 10:03:59,553 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: branch $86pred, 88, 118
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 88
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,553 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-08-01 10:03:59,553 [DEBUG] ==== SSA block rewrite pass on 118
2023-08-01 10:03:59,553 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,553 [DEBUG] on stmt: $binop_sub122.2 = _stop - _start.2
2023-08-01 10:03:59,553 [DEBUG] find_def var='_stop' stmt=$binop_sub122.2 = _stop - _start.2
2023-08-01 10:03:59,553 [DEBUG] find_def_from_top label 118
2023-08-01 10:03:59,553 [DEBUG] idom 76 from label 118
2023-08-01 10:03:59,553 [DEBUG] find_def_from_bottom label 76
2023-08-01 10:03:59,553 [DEBUG] find_def_from_top label 76
2023-08-01 10:03:59,553 [DEBUG] insert phi node _stop.2 = phi(incoming_values=[], incoming_blocks=[]) at 76
2023-08-01 10:03:59,553 [DEBUG] find_def_from_bottom label 58
2023-08-01 10:03:59,553 [DEBUG] incoming_def _stop = lit_start
2023-08-01 10:03:59,553 [DEBUG] find_def_from_bottom label 68
2023-08-01 10:03:59,553 [DEBUG] incoming_def _stop.1 = lit_stop
2023-08-01 10:03:59,553 [DEBUG] replaced with: $binop_sub122.2 = _stop.2 - _start.2
2023-08-01 10:03:59,553 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-08-01 10:03:59,553 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-08-01 10:03:59,553 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-08-01 10:03:59,554 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: jump 356
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,554 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-08-01 10:03:59,554 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: jump 388
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 388
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,554 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-08-01 10:03:59,554 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: val = _start.2
2023-08-01 10:03:59,554 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-08-01 10:03:59,554 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 464
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,554 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-08-01 10:03:59,554 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 466
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,554 [DEBUG] on stmt: i = $phi466.1
2023-08-01 10:03:59,554 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-08-01 10:03:59,554 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-08-01 10:03:59,554 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-08-01 10:03:59,554 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 492
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2925814d0>
2023-08-01 10:03:59,554 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-08-01 10:03:59,554 [DEBUG] on stmt: return $494return_value.1
2023-08-01 10:03:59,554 [DEBUG] Fix SSA violator on var $phi52.0
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,554 [DEBUG] on stmt: start = arg(0, name=start)
2023-08-01 10:03:59,554 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-08-01 10:03:59,554 [DEBUG] on stmt: step = arg(2, name=step)
2023-08-01 10:03:59,554 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: jump 14
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 14
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,554 [DEBUG] on stmt: $phi16.0 = start
2023-08-01 10:03:59,554 [DEBUG] on stmt: jump 16
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 16
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,554 [DEBUG] on stmt: lit_start = $phi16.0
2023-08-01 10:03:59,554 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: jump 26
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 26
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,554 [DEBUG] on stmt: $phi28.0 = stop
2023-08-01 10:03:59,554 [DEBUG] on stmt: jump 28
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 28
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,554 [DEBUG] on stmt: lit_stop = $phi28.0
2023-08-01 10:03:59,554 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: jump 38
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 38
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,554 [DEBUG] on stmt: $phi40.0 = step
2023-08-01 10:03:59,554 [DEBUG] on stmt: jump 40
2023-08-01 10:03:59,554 [DEBUG] ==== SSA block rewrite pass on 40
2023-08-01 10:03:59,554 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,554 [DEBUG] on stmt: lit_step = $phi40.0
2023-08-01 10:03:59,554 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-08-01 10:03:59,554 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,554 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,554 [DEBUG] on stmt: branch $pred44, 46, 50
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 46
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: $phi52.0 = lit_step
2023-08-01 10:03:59,555 [DEBUG] first assign: $phi52.0
2023-08-01 10:03:59,555 [DEBUG] replaced with: $phi52.0 = lit_step
2023-08-01 10:03:59,555 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 50
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $phi52.0 = $const50.0
2023-08-01 10:03:59,555 [DEBUG] replaced with: $phi52.0.1 = $const50.0
2023-08-01 10:03:59,555 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 52
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: _step = $phi52.0
2023-08-01 10:03:59,555 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-08-01 10:03:59,555 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,555 [DEBUG] on stmt: branch $pred56, 58, 68
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 58
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-08-01 10:03:59,555 [DEBUG] on stmt: _stop = lit_start
2023-08-01 10:03:59,555 [DEBUG] on stmt: _start = $const58.0
2023-08-01 10:03:59,555 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 68
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: _stop.1 = lit_stop
2023-08-01 10:03:59,555 [DEBUG] on stmt: _start.1 = lit_start
2023-08-01 10:03:59,555 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 76
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4611), Var(_stop.1, arrayobj.py:4613)], incoming_blocks=[58, 68])
2023-08-01 10:03:59,555 [DEBUG] on stmt: _start.2 = phi(incoming_values=[Var(_start, arrayobj.py:4611), Var(_start.1, arrayobj.py:4613)], incoming_blocks=[58, 68])
2023-08-01 10:03:59,555 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-08-01 10:03:59,555 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,555 [DEBUG] on stmt: branch $86pred, 88, 118
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 88
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,555 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 118
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: $binop_sub122.2 = _stop.2 - _start.2
2023-08-01 10:03:59,555 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-08-01 10:03:59,555 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,555 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-08-01 10:03:59,555 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,555 [DEBUG] on stmt: jump 356
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-08-01 10:03:59,555 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,555 [DEBUG] on stmt: jump 388
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 388
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-08-01 10:03:59,555 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,555 [DEBUG] on stmt: val = _start.2
2023-08-01 10:03:59,555 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-08-01 10:03:59,555 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 464
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-08-01 10:03:59,555 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-08-01 10:03:59,555 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 466
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: i = $phi466.1
2023-08-01 10:03:59,555 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-08-01 10:03:59,555 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-08-01 10:03:59,555 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-08-01 10:03:59,555 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,555 [DEBUG] ==== SSA block rewrite pass on 492
2023-08-01 10:03:59,555 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292580a50>
2023-08-01 10:03:59,555 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-08-01 10:03:59,555 [DEBUG] on stmt: return $494return_value.1
2023-08-01 10:03:59,556 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {46: [<numba.core.ir.Assign object at 0x29257e490>],
             50: [<numba.core.ir.Assign object at 0x29257df50>]})
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: start = arg(0, name=start)
2023-08-01 10:03:59,556 [DEBUG] on stmt: stop = arg(1, name=stop)
2023-08-01 10:03:59,556 [DEBUG] on stmt: step = arg(2, name=step)
2023-08-01 10:03:59,556 [DEBUG] on stmt: dtype = arg(3, name=dtype)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $6load_deref.0 = freevar(start_value: None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $constNone8 = const(NoneType, None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $maybeNone8 = const(int, 0)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $bool8 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $pred8 = call $bool8($maybeNone8, func=$bool8, args=(Var($maybeNone8, arrayobj.py:4605),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: jump 14
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 14
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: $phi16.0 = start
2023-08-01 10:03:59,556 [DEBUG] on stmt: jump 16
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 16
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: lit_start = $phi16.0
2023-08-01 10:03:59,556 [DEBUG] on stmt: $18load_deref.1 = freevar(stop_value: None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $constNone20 = const(NoneType, None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $maybeNone20 = const(int, 0)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $bool20 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $pred20 = call $bool20($maybeNone20, func=$bool20, args=(Var($maybeNone20, arrayobj.py:4606),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: jump 26
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 26
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: $phi28.0 = stop
2023-08-01 10:03:59,556 [DEBUG] on stmt: jump 28
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 28
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: lit_stop = $phi28.0
2023-08-01 10:03:59,556 [DEBUG] on stmt: $30load_deref.1 = freevar(step_value: None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $constNone32 = const(NoneType, None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $maybeNone32 = const(int, 0)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $pred32 = call $bool32($maybeNone32, func=$bool32, args=(Var($maybeNone32, arrayobj.py:4607),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: jump 38
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 38
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: $phi40.0 = step
2023-08-01 10:03:59,556 [DEBUG] on stmt: jump 40
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 40
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: lit_step = $phi40.0
2023-08-01 10:03:59,556 [DEBUG] on stmt: $constNone44 = const(NoneType, None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $maybeNone44 = lit_step is not $constNone44
2023-08-01 10:03:59,556 [DEBUG] on stmt: $bool44 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $pred44 = call $bool44($maybeNone44, func=$bool44, args=(Var($maybeNone44, arrayobj.py:4609),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: branch $pred44, 46, 50
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 46
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: $phi52.0 = lit_step
2023-08-01 10:03:59,556 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 50
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: $const50.0 = const(int, 1)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $phi52.0.1 = $const50.0
2023-08-01 10:03:59,556 [DEBUG] on stmt: jump 52
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 52
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: _step = $phi52.0
2023-08-01 10:03:59,556 [DEBUG] find_def var='$phi52.0' stmt=_step = $phi52.0
2023-08-01 10:03:59,556 [DEBUG] find_def_from_top label 52
2023-08-01 10:03:59,556 [DEBUG] insert phi node $phi52.0.2 = phi(incoming_values=[], incoming_blocks=[]) at 52
2023-08-01 10:03:59,556 [DEBUG] find_def_from_bottom label 50
2023-08-01 10:03:59,556 [DEBUG] incoming_def $phi52.0.1 = $const50.0
2023-08-01 10:03:59,556 [DEBUG] find_def_from_bottom label 46
2023-08-01 10:03:59,556 [DEBUG] incoming_def $phi52.0 = lit_step
2023-08-01 10:03:59,556 [DEBUG] replaced with: _step = $phi52.0.2
2023-08-01 10:03:59,556 [DEBUG] on stmt: $constNone56 = const(NoneType, None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $maybeNone56 = lit_stop is $constNone56
2023-08-01 10:03:59,556 [DEBUG] on stmt: $bool56 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $pred56 = call $bool56($maybeNone56, func=$bool56, args=(Var($maybeNone56, arrayobj.py:4610),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: branch $pred56, 58, 68
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 58
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: $const58.0 = const(int, 0)
2023-08-01 10:03:59,556 [DEBUG] on stmt: _stop = lit_start
2023-08-01 10:03:59,556 [DEBUG] on stmt: _start = $const58.0
2023-08-01 10:03:59,556 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 68
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: _stop.1 = lit_stop
2023-08-01 10:03:59,556 [DEBUG] on stmt: _start.1 = lit_start
2023-08-01 10:03:59,556 [DEBUG] on stmt: jump 76
2023-08-01 10:03:59,556 [DEBUG] ==== SSA block rewrite pass on 76
2023-08-01 10:03:59,556 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,556 [DEBUG] on stmt: _stop.2 = phi(incoming_values=[Var(_stop, arrayobj.py:4611), Var(_stop.1, arrayobj.py:4613)], incoming_blocks=[58, 68])
2023-08-01 10:03:59,556 [DEBUG] on stmt: _start.2 = phi(incoming_values=[Var(_start, arrayobj.py:4611), Var(_start.1, arrayobj.py:4613)], incoming_blocks=[58, 68])
2023-08-01 10:03:59,556 [DEBUG] on stmt: $const78.1 = const(int, 0)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $80compare_op.2 = _step == $const78.1
2023-08-01 10:03:59,556 [DEBUG] on stmt: bool86 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,556 [DEBUG] on stmt: $86pred = call bool86($80compare_op.2, func=bool86, args=(Var($80compare_op.2, arrayobj.py:4615),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,556 [DEBUG] on stmt: branch $86pred, 88, 118
2023-08-01 10:03:59,557 [DEBUG] ==== SSA block rewrite pass on 88
2023-08-01 10:03:59,557 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,557 [DEBUG] on stmt: $88load_global.0 = global(ValueError: <class 'ValueError'>)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $const100.2 = const(str, Maximum allowed size exceeded)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $106call.3 = call $88load_global.0($const100.2, func=$88load_global.0, args=[Var($const100.2, arrayobj.py:4616)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,557 [DEBUG] on stmt: <static> raise <class 'ValueError'>('Maximum allowed size exceeded')
2023-08-01 10:03:59,557 [DEBUG] ==== SSA block rewrite pass on 118
2023-08-01 10:03:59,557 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,557 [DEBUG] on stmt: $binop_sub122.2 = _stop.2 - _start.2
2023-08-01 10:03:59,557 [DEBUG] on stmt: nitems_c = $binop_sub122.2 / _step
2023-08-01 10:03:59,557 [DEBUG] on stmt: $134load_global.5 = global(int: <class 'int'>)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $146load_global.7 = global(math: <module 'math' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/lib-dynload/math.cpython-311-darwin.so'>)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $158load_attr.9 = getattr(value=$146load_global.7, attr=ceil)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $170load_attr.11 = getattr(value=nitems_c, attr=real)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $184call.12 = call $158load_attr.9($170load_attr.11, func=$158load_attr.9, args=[Var($170load_attr.11, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,557 [DEBUG] on stmt: nitems_r = call $134load_global.5($184call.12, func=$134load_global.5, args=[Var($184call.12, arrayobj.py:4619)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $210load_deref.14 = freevar(use_complex: False)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $const212.15 = const(bool, True)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $214is_op.16 = const(int, 0)
2023-08-01 10:03:59,557 [DEBUG] on stmt: bool216 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $216pred = call bool216($214is_op.16, func=bool216, args=(Var($214is_op.16, arrayobj.py:4622),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,557 [DEBUG] on stmt: jump 356
2023-08-01 10:03:59,557 [DEBUG] ==== SSA block rewrite pass on 356
2023-08-01 10:03:59,557 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,557 [DEBUG] on stmt: $356load_global.0 = global(max: <built-in function max>)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $const370.3 = const(int, 0)
2023-08-01 10:03:59,557 [DEBUG] on stmt: nitems = call $356load_global.0(nitems_r, $const370.3, func=$356load_global.0, args=[Var(nitems_r, arrayobj.py:4619), Var($const370.3, arrayobj.py:4626)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,557 [DEBUG] on stmt: jump 388
2023-08-01 10:03:59,557 [DEBUG] ==== SSA block rewrite pass on 388
2023-08-01 10:03:59,557 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,557 [DEBUG] on stmt: $388load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $400load_attr.2 = getattr(value=$388load_global.0, attr=empty)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $412load_deref.4 = freevar(true_dtype: int64)
2023-08-01 10:03:59,557 [DEBUG] on stmt: arr = call $400load_attr.2(nitems, $412load_deref.4, func=$400load_attr.2, args=[Var(nitems, arrayobj.py:4624), Var($412load_deref.4, arrayobj.py:4627)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,557 [DEBUG] on stmt: val = _start.2
2023-08-01 10:03:59,557 [DEBUG] on stmt: $434load_global.7 = global(range: <class 'range'>)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $452call.10 = call $434load_global.7(nitems, func=$434load_global.7, args=[Var(nitems, arrayobj.py:4624)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $462get_iter.11 = getiter(value=$452call.10)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $phi464.0 = $462get_iter.11
2023-08-01 10:03:59,557 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,557 [DEBUG] ==== SSA block rewrite pass on 464
2023-08-01 10:03:59,557 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,557 [DEBUG] on stmt: $464for_iter.1 = iternext(value=$phi464.0)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $464for_iter.2 = pair_first(value=$464for_iter.1)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $464for_iter.3 = pair_second(value=$464for_iter.1)
2023-08-01 10:03:59,557 [DEBUG] on stmt: $phi466.1 = $464for_iter.2
2023-08-01 10:03:59,557 [DEBUG] on stmt: branch $464for_iter.3, 466, 492
2023-08-01 10:03:59,557 [DEBUG] ==== SSA block rewrite pass on 466
2023-08-01 10:03:59,557 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,557 [DEBUG] on stmt: i = $phi466.1
2023-08-01 10:03:59,557 [DEBUG] on stmt: $binop_mul474.5 = i * _step
2023-08-01 10:03:59,557 [DEBUG] on stmt: $binop_add478.6 = val + $binop_mul474.5
2023-08-01 10:03:59,557 [DEBUG] on stmt: arr[i] = $binop_add478.6
2023-08-01 10:03:59,557 [DEBUG] on stmt: jump 464
2023-08-01 10:03:59,557 [DEBUG] ==== SSA block rewrite pass on 492
2023-08-01 10:03:59,557 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29257ca90>
2023-08-01 10:03:59,557 [DEBUG] on stmt: $494return_value.1 = cast(value=arr)
2023-08-01 10:03:59,557 [DEBUG] on stmt: return $494return_value.1
2023-08-01 10:03:59,561 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=4251)
           2	COPY_FREE_VARS(arg=1, lineno=4251)
           4	RESUME(arg=0, lineno=4251)
           6	LOAD_GLOBAL(arg=1, lineno=4252)
          18	LOAD_FAST(arg=0, lineno=4252)
          20	LOAD_FAST(arg=1, lineno=4252)
          22	LOAD_DEREF(arg=2, lineno=4252)
          24	PRECALL(arg=3, lineno=4252)
          28	CALL(arg=3, lineno=4252)
          38	RETURN_VALUE(arg=None, lineno=4252)
2023-08-01 10:03:59,561 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,561 [DEBUG] stack: []
2023-08-01 10:03:59,561 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,561 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=4251)
2023-08-01 10:03:59,561 [DEBUG] stack []
2023-08-01 10:03:59,561 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=1, lineno=4251)
2023-08-01 10:03:59,561 [DEBUG] stack []
2023-08-01 10:03:59,561 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=4251)
2023-08-01 10:03:59,561 [DEBUG] stack []
2023-08-01 10:03:59,561 [DEBUG] dispatch pc=6, inst=LOAD_GLOBAL(arg=1, lineno=4252)
2023-08-01 10:03:59,561 [DEBUG] stack []
2023-08-01 10:03:59,561 [DEBUG] dispatch pc=18, inst=LOAD_FAST(arg=0, lineno=4252)
2023-08-01 10:03:59,561 [DEBUG] stack ['$null$6.1', '$6load_global.0']
2023-08-01 10:03:59,561 [DEBUG] dispatch pc=20, inst=LOAD_FAST(arg=1, lineno=4252)
2023-08-01 10:03:59,561 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2']
2023-08-01 10:03:59,561 [DEBUG] dispatch pc=22, inst=LOAD_DEREF(arg=2, lineno=4252)
2023-08-01 10:03:59,561 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3']
2023-08-01 10:03:59,561 [DEBUG] dispatch pc=24, inst=PRECALL(arg=3, lineno=4252)
2023-08-01 10:03:59,561 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-08-01 10:03:59,561 [DEBUG] dispatch pc=28, inst=CALL(arg=3, lineno=4252)
2023-08-01 10:03:59,561 [DEBUG] stack ['$null$6.1', '$6load_global.0', '$shape18.2', '$dtype20.3', '$22load_deref.4']
2023-08-01 10:03:59,561 [DEBUG] dispatch pc=38, inst=RETURN_VALUE(arg=None, lineno=4252)
2023-08-01 10:03:59,561 [DEBUG] stack ['$28call.5']
2023-08-01 10:03:59,561 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,561 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,561 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-01 10:03:59,561 [DEBUG] defmap: {}
2023-08-01 10:03:59,561 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,561 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,562 [DEBUG] keep phismap: {}
2023-08-01 10:03:59,562 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-08-01 10:03:59,562 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,562 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'idx': 0, 'res': '$6load_global.0'}), (8, {}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'res': '$shape18.2'}), (20, {'res': '$dtype20.3'}), (22, {'res': '$22load_deref.4'}), (24, {}), (26, {}), (28, {'func': '$6load_global.0', 'args': ['$shape18.2', '$dtype20.3', '$22load_deref.4'], 'kw_names': None, 'res': '$28call.5'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'retval': '$28call.5', 'castval': '$38return_value.6'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,562 [DEBUG] label 0:
    shape = arg(0, name=shape)               ['shape']
    dtype = arg(1, name=dtype)               ['dtype']
    $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$6load_global.0']
    $22load_deref.4 = freevar(retty: array(int64, 1d, C)) ['$22load_deref.4']
    $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None) ['$22load_deref.4', '$28call.5', '$6load_global.0', 'dtype', 'shape']
    $38return_value.6 = cast(value=$28call.5) ['$28call.5', '$38return_value.6']
    return $38return_value.6                 ['$38return_value.6']

2023-08-01 10:03:59,563 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,563 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2925ad710>
2023-08-01 10:03:59,563 [DEBUG] on stmt: shape = arg(0, name=shape)
2023-08-01 10:03:59,563 [DEBUG] on stmt: dtype = arg(1, name=dtype)
2023-08-01 10:03:59,563 [DEBUG] on stmt: $6load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
2023-08-01 10:03:59,563 [DEBUG] on stmt: $22load_deref.4 = freevar(retty: array(int64, 1d, C))
2023-08-01 10:03:59,563 [DEBUG] on stmt: $28call.5 = call $6load_global.0(shape, dtype, $22load_deref.4, func=$6load_global.0, args=[Var(shape, arrayobj.py:4251), Var(dtype, arrayobj.py:4251), Var($22load_deref.4, arrayobj.py:4252)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,563 [DEBUG] on stmt: $38return_value.6 = cast(value=$28call.5)
2023-08-01 10:03:59,563 [DEBUG] on stmt: return $38return_value.6
2023-08-01 10:03:59,563 [DEBUG] defs defaultdict(<class 'list'>,
            {'$22load_deref.4': [<numba.core.ir.Assign object at 0x2925ace10>],
             '$28call.5': [<numba.core.ir.Assign object at 0x2925ad010>],
             '$38return_value.6': [<numba.core.ir.Assign object at 0x2925ad250>],
             '$6load_global.0': [<numba.core.ir.Assign object at 0x2925ac7d0>],
             'dtype': [<numba.core.ir.Assign object at 0x2925ac610>],
             'shape': [<numba.core.ir.Assign object at 0x2925ac510>]})
2023-08-01 10:03:59,563 [DEBUG] SSA violators set()
2023-08-01 10:03:59,632 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=86)
           2	COPY_FREE_VARS(arg=2, lineno=86)
           4	RESUME(arg=0, lineno=86)
           6	LOAD_FAST(arg=2, lineno=92)
           8	LOAD_CONST(arg=1, lineno=92)
          10	COMPARE_OP(arg=5, lineno=92)
          16	POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=92)
          18	LOAD_ASSERTION_ERROR(arg=None, lineno=92)
          20	RAISE_VARARGS(arg=1, lineno=92)
>         22	LOAD_FAST(arg=3, lineno=93)
          24	LOAD_FAST(arg=2, lineno=93)
          26	COMPARE_OP(arg=4, lineno=93)
          32	POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=93)
          34	LOAD_ASSERTION_ERROR(arg=None, lineno=93)
          36	RAISE_VARARGS(arg=1, lineno=93)
>         38	LOAD_FAST(arg=2, lineno=95)
          40	LOAD_FAST(arg=3, lineno=95)
          42	BINARY_OP(arg=0, lineno=95)
          46	LOAD_CONST(arg=2, lineno=95)
          48	BINARY_OP(arg=9, lineno=95)
          52	STORE_FAST(arg=4, lineno=95)
          54	PUSH_NULL(arg=None, lineno=102)
          56	LOAD_DEREF(arg=9, lineno=102)
          58	PUSH_NULL(arg=None, lineno=102)
          60	LOAD_DEREF(arg=8, lineno=102)
          62	LOAD_FAST(arg=0, lineno=102)
          64	LOAD_FAST(arg=1, lineno=102)
          66	LOAD_FAST(arg=4, lineno=102)
          68	BINARY_SUBSCR(arg=None, lineno=102)
          78	PRECALL(arg=2, lineno=102)
          82	CALL(arg=2, lineno=102)
          92	PUSH_NULL(arg=None, lineno=102)
          94	LOAD_DEREF(arg=8, lineno=102)
          96	LOAD_FAST(arg=0, lineno=102)
          98	LOAD_FAST(arg=1, lineno=102)
         100	LOAD_FAST(arg=2, lineno=102)
         102	BINARY_SUBSCR(arg=None, lineno=102)
         112	PRECALL(arg=2, lineno=102)
         116	CALL(arg=2, lineno=102)
         126	PRECALL(arg=2, lineno=102)
         130	CALL(arg=2, lineno=102)
         140	POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=102)
         142	LOAD_FAST(arg=1, lineno=103)
         144	LOAD_FAST(arg=4, lineno=103)
         146	BINARY_SUBSCR(arg=None, lineno=103)
         156	LOAD_FAST(arg=1, lineno=103)
         158	LOAD_FAST(arg=2, lineno=103)
         160	BINARY_SUBSCR(arg=None, lineno=103)
         170	SWAP(arg=2, lineno=103)
         172	LOAD_FAST(arg=1, lineno=103)
         174	LOAD_FAST(arg=2, lineno=103)
         176	STORE_SUBSCR(arg=None, lineno=103)
         180	LOAD_FAST(arg=1, lineno=103)
         182	LOAD_FAST(arg=4, lineno=103)
         184	STORE_SUBSCR(arg=None, lineno=103)
>        188	PUSH_NULL(arg=None, lineno=104)
         190	LOAD_DEREF(arg=9, lineno=104)
         192	PUSH_NULL(arg=None, lineno=104)
         194	LOAD_DEREF(arg=8, lineno=104)
         196	LOAD_FAST(arg=0, lineno=104)
         198	LOAD_FAST(arg=1, lineno=104)
         200	LOAD_FAST(arg=3, lineno=104)
         202	BINARY_SUBSCR(arg=None, lineno=104)
         212	PRECALL(arg=2, lineno=104)
         216	CALL(arg=2, lineno=104)
         226	PUSH_NULL(arg=None, lineno=104)
         228	LOAD_DEREF(arg=8, lineno=104)
         230	LOAD_FAST(arg=0, lineno=104)
         232	LOAD_FAST(arg=1, lineno=104)
         234	LOAD_FAST(arg=4, lineno=104)
         236	BINARY_SUBSCR(arg=None, lineno=104)
         246	PRECALL(arg=2, lineno=104)
         250	CALL(arg=2, lineno=104)
         260	PRECALL(arg=2, lineno=104)
         264	CALL(arg=2, lineno=104)
         274	POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=104)
         276	LOAD_FAST(arg=1, lineno=105)
         278	LOAD_FAST(arg=4, lineno=105)
         280	BINARY_SUBSCR(arg=None, lineno=105)
         290	LOAD_FAST(arg=1, lineno=105)
         292	LOAD_FAST(arg=3, lineno=105)
         294	BINARY_SUBSCR(arg=None, lineno=105)
         304	SWAP(arg=2, lineno=105)
         306	LOAD_FAST(arg=1, lineno=105)
         308	LOAD_FAST(arg=3, lineno=105)
         310	STORE_SUBSCR(arg=None, lineno=105)
         314	LOAD_FAST(arg=1, lineno=105)
         316	LOAD_FAST(arg=4, lineno=105)
         318	STORE_SUBSCR(arg=None, lineno=105)
>        322	PUSH_NULL(arg=None, lineno=106)
         324	LOAD_DEREF(arg=9, lineno=106)
         326	PUSH_NULL(arg=None, lineno=106)
         328	LOAD_DEREF(arg=8, lineno=106)
         330	LOAD_FAST(arg=0, lineno=106)
         332	LOAD_FAST(arg=1, lineno=106)
         334	LOAD_FAST(arg=4, lineno=106)
         336	BINARY_SUBSCR(arg=None, lineno=106)
         346	PRECALL(arg=2, lineno=106)
         350	CALL(arg=2, lineno=106)
         360	PUSH_NULL(arg=None, lineno=106)
         362	LOAD_DEREF(arg=8, lineno=106)
         364	LOAD_FAST(arg=0, lineno=106)
         366	LOAD_FAST(arg=1, lineno=106)
         368	LOAD_FAST(arg=2, lineno=106)
         370	BINARY_SUBSCR(arg=None, lineno=106)
         380	PRECALL(arg=2, lineno=106)
         384	CALL(arg=2, lineno=106)
         394	PRECALL(arg=2, lineno=106)
         398	CALL(arg=2, lineno=106)
         408	POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=106)
         410	LOAD_FAST(arg=1, lineno=107)
         412	LOAD_FAST(arg=4, lineno=107)
         414	BINARY_SUBSCR(arg=None, lineno=107)
         424	LOAD_FAST(arg=1, lineno=107)
         426	LOAD_FAST(arg=2, lineno=107)
         428	BINARY_SUBSCR(arg=None, lineno=107)
         438	SWAP(arg=2, lineno=107)
         440	LOAD_FAST(arg=1, lineno=107)
         442	LOAD_FAST(arg=2, lineno=107)
         444	STORE_SUBSCR(arg=None, lineno=107)
         448	LOAD_FAST(arg=1, lineno=107)
         450	LOAD_FAST(arg=4, lineno=107)
         452	STORE_SUBSCR(arg=None, lineno=107)
>        456	PUSH_NULL(arg=None, lineno=108)
         458	LOAD_DEREF(arg=8, lineno=108)
         460	LOAD_FAST(arg=0, lineno=108)
         462	LOAD_FAST(arg=1, lineno=108)
         464	LOAD_FAST(arg=4, lineno=108)
         466	BINARY_SUBSCR(arg=None, lineno=108)
         476	PRECALL(arg=2, lineno=108)
         480	CALL(arg=2, lineno=108)
         490	STORE_FAST(arg=5, lineno=108)
         492	LOAD_FAST(arg=1, lineno=111)
         494	LOAD_FAST(arg=4, lineno=111)
         496	BINARY_SUBSCR(arg=None, lineno=111)
         506	LOAD_FAST(arg=1, lineno=111)
         508	LOAD_FAST(arg=3, lineno=111)
         510	BINARY_SUBSCR(arg=None, lineno=111)
         520	SWAP(arg=2, lineno=111)
         522	LOAD_FAST(arg=1, lineno=111)
         524	LOAD_FAST(arg=3, lineno=111)
         526	STORE_SUBSCR(arg=None, lineno=111)
         530	LOAD_FAST(arg=1, lineno=111)
         532	LOAD_FAST(arg=4, lineno=111)
         534	STORE_SUBSCR(arg=None, lineno=111)
         538	LOAD_FAST(arg=2, lineno=112)
         540	STORE_FAST(arg=6, lineno=112)
         542	LOAD_FAST(arg=3, lineno=113)
         544	LOAD_CONST(arg=2, lineno=113)
         546	BINARY_OP(arg=10, lineno=113)
         550	STORE_FAST(arg=7, lineno=113)
         552	NOP(arg=None, lineno=114)
>        554	LOAD_FAST(arg=6, lineno=115)
         556	LOAD_FAST(arg=3, lineno=115)
         558	COMPARE_OP(arg=0, lineno=115)
         564	POP_JUMP_FORWARD_IF_FALSE(arg=67, lineno=115)
         566	PUSH_NULL(arg=None, lineno=115)
         568	LOAD_DEREF(arg=9, lineno=115)
         570	PUSH_NULL(arg=None, lineno=115)
         572	LOAD_DEREF(arg=8, lineno=115)
         574	LOAD_FAST(arg=0, lineno=115)
         576	LOAD_FAST(arg=1, lineno=115)
         578	LOAD_FAST(arg=6, lineno=115)
         580	BINARY_SUBSCR(arg=None, lineno=115)
         590	PRECALL(arg=2, lineno=115)
         594	CALL(arg=2, lineno=115)
         604	LOAD_FAST(arg=5, lineno=115)
         606	PRECALL(arg=2, lineno=115)
         610	CALL(arg=2, lineno=115)
         620	POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=115)
>        622	LOAD_FAST(arg=6, lineno=116)
         624	LOAD_CONST(arg=2, lineno=116)
         626	BINARY_OP(arg=13, lineno=116)
         630	STORE_FAST(arg=6, lineno=116)
         632	LOAD_FAST(arg=6, lineno=115)
         634	LOAD_FAST(arg=3, lineno=115)
         636	COMPARE_OP(arg=0, lineno=115)
         642	POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=115)
         644	PUSH_NULL(arg=None, lineno=115)
         646	LOAD_DEREF(arg=9, lineno=115)
         648	PUSH_NULL(arg=None, lineno=115)
         650	LOAD_DEREF(arg=8, lineno=115)
         652	LOAD_FAST(arg=0, lineno=115)
         654	LOAD_FAST(arg=1, lineno=115)
         656	LOAD_FAST(arg=6, lineno=115)
         658	BINARY_SUBSCR(arg=None, lineno=115)
         668	PRECALL(arg=2, lineno=115)
         672	CALL(arg=2, lineno=115)
         682	LOAD_FAST(arg=5, lineno=115)
         684	PRECALL(arg=2, lineno=115)
         688	CALL(arg=2, lineno=115)
         698	POP_JUMP_BACKWARD_IF_TRUE(arg=39, lineno=115)
>        700	LOAD_FAST(arg=7, lineno=117)
         702	LOAD_FAST(arg=2, lineno=117)
         704	COMPARE_OP(arg=5, lineno=117)
         710	POP_JUMP_FORWARD_IF_FALSE(arg=67, lineno=117)
         712	PUSH_NULL(arg=None, lineno=117)
         714	LOAD_DEREF(arg=9, lineno=117)
         716	LOAD_FAST(arg=5, lineno=117)
         718	PUSH_NULL(arg=None, lineno=117)
         720	LOAD_DEREF(arg=8, lineno=117)
         722	LOAD_FAST(arg=0, lineno=117)
         724	LOAD_FAST(arg=1, lineno=117)
         726	LOAD_FAST(arg=7, lineno=117)
         728	BINARY_SUBSCR(arg=None, lineno=117)
         738	PRECALL(arg=2, lineno=117)
         742	CALL(arg=2, lineno=117)
         752	PRECALL(arg=2, lineno=117)
         756	CALL(arg=2, lineno=117)
         766	POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=117)
>        768	LOAD_FAST(arg=7, lineno=118)
         770	LOAD_CONST(arg=2, lineno=118)
         772	BINARY_OP(arg=23, lineno=118)
         776	STORE_FAST(arg=7, lineno=118)
         778	LOAD_FAST(arg=7, lineno=117)
         780	LOAD_FAST(arg=2, lineno=117)
         782	COMPARE_OP(arg=5, lineno=117)
         788	POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=117)
         790	PUSH_NULL(arg=None, lineno=117)
         792	LOAD_DEREF(arg=9, lineno=117)
         794	LOAD_FAST(arg=5, lineno=117)
         796	PUSH_NULL(arg=None, lineno=117)
         798	LOAD_DEREF(arg=8, lineno=117)
         800	LOAD_FAST(arg=0, lineno=117)
         802	LOAD_FAST(arg=1, lineno=117)
         804	LOAD_FAST(arg=7, lineno=117)
         806	BINARY_SUBSCR(arg=None, lineno=117)
         816	PRECALL(arg=2, lineno=117)
         820	CALL(arg=2, lineno=117)
         830	PRECALL(arg=2, lineno=117)
         834	CALL(arg=2, lineno=117)
         844	POP_JUMP_BACKWARD_IF_TRUE(arg=39, lineno=117)
>        846	LOAD_FAST(arg=6, lineno=119)
         848	LOAD_FAST(arg=7, lineno=119)
         850	COMPARE_OP(arg=5, lineno=119)
         856	POP_JUMP_FORWARD_IF_FALSE(arg=1, lineno=119)
         858	JUMP_FORWARD(arg=34, lineno=120)
>        860	LOAD_FAST(arg=1, lineno=121)
         862	LOAD_FAST(arg=7, lineno=121)
         864	BINARY_SUBSCR(arg=None, lineno=121)
         874	LOAD_FAST(arg=1, lineno=121)
         876	LOAD_FAST(arg=6, lineno=121)
         878	BINARY_SUBSCR(arg=None, lineno=121)
         888	SWAP(arg=2, lineno=121)
         890	LOAD_FAST(arg=1, lineno=121)
         892	LOAD_FAST(arg=6, lineno=121)
         894	STORE_SUBSCR(arg=None, lineno=121)
         898	LOAD_FAST(arg=1, lineno=121)
         900	LOAD_FAST(arg=7, lineno=121)
         902	STORE_SUBSCR(arg=None, lineno=121)
         906	LOAD_FAST(arg=6, lineno=122)
         908	LOAD_CONST(arg=2, lineno=122)
         910	BINARY_OP(arg=13, lineno=122)
         914	STORE_FAST(arg=6, lineno=122)
         916	LOAD_FAST(arg=7, lineno=123)
         918	LOAD_CONST(arg=2, lineno=123)
         920	BINARY_OP(arg=23, lineno=123)
         924	STORE_FAST(arg=7, lineno=123)
         926	JUMP_BACKWARD(arg=187, lineno=114)
>        928	LOAD_FAST(arg=1, lineno=126)
         930	LOAD_FAST(arg=3, lineno=126)
         932	BINARY_SUBSCR(arg=None, lineno=126)
         942	LOAD_FAST(arg=1, lineno=126)
         944	LOAD_FAST(arg=6, lineno=126)
         946	BINARY_SUBSCR(arg=None, lineno=126)
         956	SWAP(arg=2, lineno=126)
         958	LOAD_FAST(arg=1, lineno=126)
         960	LOAD_FAST(arg=6, lineno=126)
         962	STORE_SUBSCR(arg=None, lineno=126)
         966	LOAD_FAST(arg=1, lineno=126)
         968	LOAD_FAST(arg=3, lineno=126)
         970	STORE_SUBSCR(arg=None, lineno=126)
         974	LOAD_FAST(arg=6, lineno=127)
         976	RETURN_VALUE(arg=None, lineno=127)
2023-08-01 10:03:59,633 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,633 [DEBUG] stack: []
2023-08-01 10:03:59,633 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,633 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=86)
2023-08-01 10:03:59,633 [DEBUG] stack []
2023-08-01 10:03:59,633 [DEBUG] dispatch pc=2, inst=COPY_FREE_VARS(arg=2, lineno=86)
2023-08-01 10:03:59,633 [DEBUG] stack []
2023-08-01 10:03:59,633 [DEBUG] dispatch pc=4, inst=RESUME(arg=0, lineno=86)
2023-08-01 10:03:59,633 [DEBUG] stack []
2023-08-01 10:03:59,633 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=92)
2023-08-01 10:03:59,633 [DEBUG] stack []
2023-08-01 10:03:59,633 [DEBUG] dispatch pc=8, inst=LOAD_CONST(arg=1, lineno=92)
2023-08-01 10:03:59,633 [DEBUG] stack ['$low6.0']
2023-08-01 10:03:59,633 [DEBUG] dispatch pc=10, inst=COMPARE_OP(arg=5, lineno=92)
2023-08-01 10:03:59,633 [DEBUG] stack ['$low6.0', '$const8.1']
2023-08-01 10:03:59,633 [DEBUG] dispatch pc=16, inst=POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=92)
2023-08-01 10:03:59,633 [DEBUG] stack ['$10compare_op.2']
2023-08-01 10:03:59,633 [DEBUG] end state. edges=[Edge(pc=18, stack=(), blockstack=(), npush=0), Edge(pc=22, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,633 [DEBUG] pending: deque([State(pc_initial=18 nstack_initial=0), State(pc_initial=22 nstack_initial=0)])
2023-08-01 10:03:59,633 [DEBUG] stack: []
2023-08-01 10:03:59,633 [DEBUG] state.pc_initial: State(pc_initial=18 nstack_initial=0)
2023-08-01 10:03:59,633 [DEBUG] dispatch pc=18, inst=LOAD_ASSERTION_ERROR(arg=None, lineno=92)
2023-08-01 10:03:59,633 [DEBUG] stack []
2023-08-01 10:03:59,633 [DEBUG] dispatch pc=20, inst=RAISE_VARARGS(arg=1, lineno=92)
2023-08-01 10:03:59,633 [DEBUG] stack ['$assertion_error18.0']
2023-08-01 10:03:59,633 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,633 [DEBUG] pending: deque([State(pc_initial=22 nstack_initial=0)])
2023-08-01 10:03:59,633 [DEBUG] stack: []
2023-08-01 10:03:59,633 [DEBUG] state.pc_initial: State(pc_initial=22 nstack_initial=0)
2023-08-01 10:03:59,633 [DEBUG] dispatch pc=22, inst=LOAD_FAST(arg=3, lineno=93)
2023-08-01 10:03:59,634 [DEBUG] stack []
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=93)
2023-08-01 10:03:59,634 [DEBUG] stack ['$high22.0']
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=26, inst=COMPARE_OP(arg=4, lineno=93)
2023-08-01 10:03:59,634 [DEBUG] stack ['$high22.0', '$low24.1']
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=32, inst=POP_JUMP_FORWARD_IF_TRUE(arg=2, lineno=93)
2023-08-01 10:03:59,634 [DEBUG] stack ['$26compare_op.2']
2023-08-01 10:03:59,634 [DEBUG] end state. edges=[Edge(pc=34, stack=(), blockstack=(), npush=0), Edge(pc=38, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,634 [DEBUG] pending: deque([State(pc_initial=34 nstack_initial=0), State(pc_initial=38 nstack_initial=0)])
2023-08-01 10:03:59,634 [DEBUG] stack: []
2023-08-01 10:03:59,634 [DEBUG] state.pc_initial: State(pc_initial=34 nstack_initial=0)
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=34, inst=LOAD_ASSERTION_ERROR(arg=None, lineno=93)
2023-08-01 10:03:59,634 [DEBUG] stack []
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=36, inst=RAISE_VARARGS(arg=1, lineno=93)
2023-08-01 10:03:59,634 [DEBUG] stack ['$assertion_error34.0']
2023-08-01 10:03:59,634 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,634 [DEBUG] pending: deque([State(pc_initial=38 nstack_initial=0)])
2023-08-01 10:03:59,634 [DEBUG] stack: []
2023-08-01 10:03:59,634 [DEBUG] state.pc_initial: State(pc_initial=38 nstack_initial=0)
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=38, inst=LOAD_FAST(arg=2, lineno=95)
2023-08-01 10:03:59,634 [DEBUG] stack []
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=40, inst=LOAD_FAST(arg=3, lineno=95)
2023-08-01 10:03:59,634 [DEBUG] stack ['$low38.0']
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=42, inst=BINARY_OP(arg=0, lineno=95)
2023-08-01 10:03:59,634 [DEBUG] stack ['$low38.0', '$high40.1']
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=46, inst=LOAD_CONST(arg=2, lineno=95)
2023-08-01 10:03:59,634 [DEBUG] stack ['$binop_add42.2']
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=48, inst=BINARY_OP(arg=9, lineno=95)
2023-08-01 10:03:59,634 [DEBUG] stack ['$binop_add42.2', '$const46.3']
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=52, inst=STORE_FAST(arg=4, lineno=95)
2023-08-01 10:03:59,634 [DEBUG] stack ['$binop_rshift48.4']
2023-08-01 10:03:59,634 [DEBUG] dispatch pc=54, inst=PUSH_NULL(arg=None, lineno=102)
2023-08-01 10:03:59,634 [DEBUG] stack []
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=56, inst=LOAD_DEREF(arg=9, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=58, inst=PUSH_NULL(arg=None, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=60, inst=LOAD_DEREF(arg=8, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=62, inst=LOAD_FAST(arg=0, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=64, inst=LOAD_FAST(arg=1, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8', '$A62.9']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=66, inst=LOAD_FAST(arg=4, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8', '$A62.9', '$R64.10']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=68, inst=BINARY_SUBSCR(arg=None, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8', '$A62.9', '$R64.10', '$mid66.11']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=78, inst=PRECALL(arg=2, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8', '$A62.9', '$68binary_subscr.12']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=82, inst=CALL(arg=2, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$null$58.7', '$60load_deref.8', '$A62.9', '$68binary_subscr.12']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=92, inst=PUSH_NULL(arg=None, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=94, inst=LOAD_DEREF(arg=8, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=96, inst=LOAD_FAST(arg=0, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=98, inst=LOAD_FAST(arg=1, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15', '$A96.16']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=100, inst=LOAD_FAST(arg=2, lineno=102)
2023-08-01 10:03:59,635 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15', '$A96.16', '$R98.17']
2023-08-01 10:03:59,635 [DEBUG] dispatch pc=102, inst=BINARY_SUBSCR(arg=None, lineno=102)
2023-08-01 10:03:59,636 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15', '$A96.16', '$R98.17', '$low100.18']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=112, inst=PRECALL(arg=2, lineno=102)
2023-08-01 10:03:59,636 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15', '$A96.16', '$102binary_subscr.19']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=116, inst=CALL(arg=2, lineno=102)
2023-08-01 10:03:59,636 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$null$92.14', '$94load_deref.15', '$A96.16', '$102binary_subscr.19']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=126, inst=PRECALL(arg=2, lineno=102)
2023-08-01 10:03:59,636 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$116call.20']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=130, inst=CALL(arg=2, lineno=102)
2023-08-01 10:03:59,636 [DEBUG] stack ['$null$54.5', '$56load_deref.6', '$82call.13', '$116call.20']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=140, inst=POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=102)
2023-08-01 10:03:59,636 [DEBUG] stack ['$130call.21']
2023-08-01 10:03:59,636 [DEBUG] end state. edges=[Edge(pc=142, stack=(), blockstack=(), npush=0), Edge(pc=188, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,636 [DEBUG] pending: deque([State(pc_initial=142 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
2023-08-01 10:03:59,636 [DEBUG] stack: []
2023-08-01 10:03:59,636 [DEBUG] state.pc_initial: State(pc_initial=142 nstack_initial=0)
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=142, inst=LOAD_FAST(arg=1, lineno=103)
2023-08-01 10:03:59,636 [DEBUG] stack []
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=144, inst=LOAD_FAST(arg=4, lineno=103)
2023-08-01 10:03:59,636 [DEBUG] stack ['$R142.0']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=146, inst=BINARY_SUBSCR(arg=None, lineno=103)
2023-08-01 10:03:59,636 [DEBUG] stack ['$R142.0', '$mid144.1']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=156, inst=LOAD_FAST(arg=1, lineno=103)
2023-08-01 10:03:59,636 [DEBUG] stack ['$146binary_subscr.2']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=158, inst=LOAD_FAST(arg=2, lineno=103)
2023-08-01 10:03:59,636 [DEBUG] stack ['$146binary_subscr.2', '$R156.3']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=160, inst=BINARY_SUBSCR(arg=None, lineno=103)
2023-08-01 10:03:59,636 [DEBUG] stack ['$146binary_subscr.2', '$R156.3', '$low158.4']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=170, inst=SWAP(arg=2, lineno=103)
2023-08-01 10:03:59,636 [DEBUG] stack ['$146binary_subscr.2', '$160binary_subscr.5']
2023-08-01 10:03:59,636 [DEBUG] dispatch pc=172, inst=LOAD_FAST(arg=1, lineno=103)
2023-08-01 10:03:59,637 [DEBUG] stack ['$160binary_subscr.5', '$146binary_subscr.2']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=174, inst=LOAD_FAST(arg=2, lineno=103)
2023-08-01 10:03:59,637 [DEBUG] stack ['$160binary_subscr.5', '$146binary_subscr.2', '$R172.6']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=176, inst=STORE_SUBSCR(arg=None, lineno=103)
2023-08-01 10:03:59,637 [DEBUG] stack ['$160binary_subscr.5', '$146binary_subscr.2', '$R172.6', '$low174.7']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=180, inst=LOAD_FAST(arg=1, lineno=103)
2023-08-01 10:03:59,637 [DEBUG] stack ['$160binary_subscr.5']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=182, inst=LOAD_FAST(arg=4, lineno=103)
2023-08-01 10:03:59,637 [DEBUG] stack ['$160binary_subscr.5', '$R180.8']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=184, inst=STORE_SUBSCR(arg=None, lineno=103)
2023-08-01 10:03:59,637 [DEBUG] stack ['$160binary_subscr.5', '$R180.8', '$mid182.9']
2023-08-01 10:03:59,637 [DEBUG] end state. edges=[Edge(pc=188, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,637 [DEBUG] pending: deque([State(pc_initial=188 nstack_initial=0), State(pc_initial=188 nstack_initial=0)])
2023-08-01 10:03:59,637 [DEBUG] stack: []
2023-08-01 10:03:59,637 [DEBUG] state.pc_initial: State(pc_initial=188 nstack_initial=0)
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=188, inst=PUSH_NULL(arg=None, lineno=104)
2023-08-01 10:03:59,637 [DEBUG] stack []
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=190, inst=LOAD_DEREF(arg=9, lineno=104)
2023-08-01 10:03:59,637 [DEBUG] stack ['$null$188.0']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=192, inst=PUSH_NULL(arg=None, lineno=104)
2023-08-01 10:03:59,637 [DEBUG] stack ['$null$188.0', '$190load_deref.1']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=194, inst=LOAD_DEREF(arg=8, lineno=104)
2023-08-01 10:03:59,637 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=196, inst=LOAD_FAST(arg=0, lineno=104)
2023-08-01 10:03:59,637 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=198, inst=LOAD_FAST(arg=1, lineno=104)
2023-08-01 10:03:59,637 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3', '$A196.4']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=200, inst=LOAD_FAST(arg=3, lineno=104)
2023-08-01 10:03:59,637 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3', '$A196.4', '$R198.5']
2023-08-01 10:03:59,637 [DEBUG] dispatch pc=202, inst=BINARY_SUBSCR(arg=None, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3', '$A196.4', '$R198.5', '$high200.6']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=212, inst=PRECALL(arg=2, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3', '$A196.4', '$202binary_subscr.7']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=216, inst=CALL(arg=2, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$null$192.2', '$194load_deref.3', '$A196.4', '$202binary_subscr.7']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=226, inst=PUSH_NULL(arg=None, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=228, inst=LOAD_DEREF(arg=8, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=230, inst=LOAD_FAST(arg=0, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=232, inst=LOAD_FAST(arg=1, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10', '$A230.11']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=234, inst=LOAD_FAST(arg=4, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10', '$A230.11', '$R232.12']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10', '$A230.11', '$R232.12', '$mid234.13']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=246, inst=PRECALL(arg=2, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10', '$A230.11', '$236binary_subscr.14']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=250, inst=CALL(arg=2, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$null$226.9', '$228load_deref.10', '$A230.11', '$236binary_subscr.14']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=260, inst=PRECALL(arg=2, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$250call.15']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=264, inst=CALL(arg=2, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$null$188.0', '$190load_deref.1', '$216call.8', '$250call.15']
2023-08-01 10:03:59,638 [DEBUG] dispatch pc=274, inst=POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=104)
2023-08-01 10:03:59,638 [DEBUG] stack ['$264call.16']
2023-08-01 10:03:59,638 [DEBUG] end state. edges=[Edge(pc=276, stack=(), blockstack=(), npush=0), Edge(pc=322, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,638 [DEBUG] pending: deque([State(pc_initial=188 nstack_initial=0), State(pc_initial=276 nstack_initial=0), State(pc_initial=322 nstack_initial=0)])
2023-08-01 10:03:59,638 [DEBUG] pending: deque([State(pc_initial=276 nstack_initial=0), State(pc_initial=322 nstack_initial=0)])
2023-08-01 10:03:59,639 [DEBUG] stack: []
2023-08-01 10:03:59,639 [DEBUG] state.pc_initial: State(pc_initial=276 nstack_initial=0)
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=276, inst=LOAD_FAST(arg=1, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack []
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=278, inst=LOAD_FAST(arg=4, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$R276.0']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=280, inst=BINARY_SUBSCR(arg=None, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$R276.0', '$mid278.1']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=290, inst=LOAD_FAST(arg=1, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$280binary_subscr.2']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=292, inst=LOAD_FAST(arg=3, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$280binary_subscr.2', '$R290.3']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=294, inst=BINARY_SUBSCR(arg=None, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$280binary_subscr.2', '$R290.3', '$high292.4']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=304, inst=SWAP(arg=2, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$280binary_subscr.2', '$294binary_subscr.5']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=306, inst=LOAD_FAST(arg=1, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$294binary_subscr.5', '$280binary_subscr.2']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=308, inst=LOAD_FAST(arg=3, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$294binary_subscr.5', '$280binary_subscr.2', '$R306.6']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=310, inst=STORE_SUBSCR(arg=None, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$294binary_subscr.5', '$280binary_subscr.2', '$R306.6', '$high308.7']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=314, inst=LOAD_FAST(arg=1, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$294binary_subscr.5']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=316, inst=LOAD_FAST(arg=4, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$294binary_subscr.5', '$R314.8']
2023-08-01 10:03:59,639 [DEBUG] dispatch pc=318, inst=STORE_SUBSCR(arg=None, lineno=105)
2023-08-01 10:03:59,639 [DEBUG] stack ['$294binary_subscr.5', '$R314.8', '$mid316.9']
2023-08-01 10:03:59,639 [DEBUG] end state. edges=[Edge(pc=322, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,639 [DEBUG] pending: deque([State(pc_initial=322 nstack_initial=0), State(pc_initial=322 nstack_initial=0)])
2023-08-01 10:03:59,639 [DEBUG] stack: []
2023-08-01 10:03:59,640 [DEBUG] state.pc_initial: State(pc_initial=322 nstack_initial=0)
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=322, inst=PUSH_NULL(arg=None, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack []
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=324, inst=LOAD_DEREF(arg=9, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=326, inst=PUSH_NULL(arg=None, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=328, inst=LOAD_DEREF(arg=8, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=330, inst=LOAD_FAST(arg=0, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=332, inst=LOAD_FAST(arg=1, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3', '$A330.4']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=334, inst=LOAD_FAST(arg=4, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3', '$A330.4', '$R332.5']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=336, inst=BINARY_SUBSCR(arg=None, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3', '$A330.4', '$R332.5', '$mid334.6']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=346, inst=PRECALL(arg=2, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3', '$A330.4', '$336binary_subscr.7']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=350, inst=CALL(arg=2, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$null$326.2', '$328load_deref.3', '$A330.4', '$336binary_subscr.7']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=360, inst=PUSH_NULL(arg=None, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=362, inst=LOAD_DEREF(arg=8, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=364, inst=LOAD_FAST(arg=0, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=366, inst=LOAD_FAST(arg=1, lineno=106)
2023-08-01 10:03:59,640 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10', '$A364.11']
2023-08-01 10:03:59,640 [DEBUG] dispatch pc=368, inst=LOAD_FAST(arg=2, lineno=106)
2023-08-01 10:03:59,641 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10', '$A364.11', '$R366.12']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=370, inst=BINARY_SUBSCR(arg=None, lineno=106)
2023-08-01 10:03:59,641 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10', '$A364.11', '$R366.12', '$low368.13']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=380, inst=PRECALL(arg=2, lineno=106)
2023-08-01 10:03:59,641 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10', '$A364.11', '$370binary_subscr.14']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=384, inst=CALL(arg=2, lineno=106)
2023-08-01 10:03:59,641 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$null$360.9', '$362load_deref.10', '$A364.11', '$370binary_subscr.14']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=394, inst=PRECALL(arg=2, lineno=106)
2023-08-01 10:03:59,641 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$384call.15']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=398, inst=CALL(arg=2, lineno=106)
2023-08-01 10:03:59,641 [DEBUG] stack ['$null$322.0', '$324load_deref.1', '$350call.8', '$384call.15']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=408, inst=POP_JUMP_FORWARD_IF_FALSE(arg=23, lineno=106)
2023-08-01 10:03:59,641 [DEBUG] stack ['$398call.16']
2023-08-01 10:03:59,641 [DEBUG] end state. edges=[Edge(pc=410, stack=(), blockstack=(), npush=0), Edge(pc=456, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,641 [DEBUG] pending: deque([State(pc_initial=322 nstack_initial=0), State(pc_initial=410 nstack_initial=0), State(pc_initial=456 nstack_initial=0)])
2023-08-01 10:03:59,641 [DEBUG] pending: deque([State(pc_initial=410 nstack_initial=0), State(pc_initial=456 nstack_initial=0)])
2023-08-01 10:03:59,641 [DEBUG] stack: []
2023-08-01 10:03:59,641 [DEBUG] state.pc_initial: State(pc_initial=410 nstack_initial=0)
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=410, inst=LOAD_FAST(arg=1, lineno=107)
2023-08-01 10:03:59,641 [DEBUG] stack []
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=412, inst=LOAD_FAST(arg=4, lineno=107)
2023-08-01 10:03:59,641 [DEBUG] stack ['$R410.0']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=414, inst=BINARY_SUBSCR(arg=None, lineno=107)
2023-08-01 10:03:59,641 [DEBUG] stack ['$R410.0', '$mid412.1']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=424, inst=LOAD_FAST(arg=1, lineno=107)
2023-08-01 10:03:59,641 [DEBUG] stack ['$414binary_subscr.2']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=426, inst=LOAD_FAST(arg=2, lineno=107)
2023-08-01 10:03:59,641 [DEBUG] stack ['$414binary_subscr.2', '$R424.3']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=428, inst=BINARY_SUBSCR(arg=None, lineno=107)
2023-08-01 10:03:59,641 [DEBUG] stack ['$414binary_subscr.2', '$R424.3', '$low426.4']
2023-08-01 10:03:59,641 [DEBUG] dispatch pc=438, inst=SWAP(arg=2, lineno=107)
2023-08-01 10:03:59,642 [DEBUG] stack ['$414binary_subscr.2', '$428binary_subscr.5']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=440, inst=LOAD_FAST(arg=1, lineno=107)
2023-08-01 10:03:59,642 [DEBUG] stack ['$428binary_subscr.5', '$414binary_subscr.2']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=442, inst=LOAD_FAST(arg=2, lineno=107)
2023-08-01 10:03:59,642 [DEBUG] stack ['$428binary_subscr.5', '$414binary_subscr.2', '$R440.6']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=444, inst=STORE_SUBSCR(arg=None, lineno=107)
2023-08-01 10:03:59,642 [DEBUG] stack ['$428binary_subscr.5', '$414binary_subscr.2', '$R440.6', '$low442.7']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=448, inst=LOAD_FAST(arg=1, lineno=107)
2023-08-01 10:03:59,642 [DEBUG] stack ['$428binary_subscr.5']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=450, inst=LOAD_FAST(arg=4, lineno=107)
2023-08-01 10:03:59,642 [DEBUG] stack ['$428binary_subscr.5', '$R448.8']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=452, inst=STORE_SUBSCR(arg=None, lineno=107)
2023-08-01 10:03:59,642 [DEBUG] stack ['$428binary_subscr.5', '$R448.8', '$mid450.9']
2023-08-01 10:03:59,642 [DEBUG] end state. edges=[Edge(pc=456, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,642 [DEBUG] pending: deque([State(pc_initial=456 nstack_initial=0), State(pc_initial=456 nstack_initial=0)])
2023-08-01 10:03:59,642 [DEBUG] stack: []
2023-08-01 10:03:59,642 [DEBUG] state.pc_initial: State(pc_initial=456 nstack_initial=0)
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=456, inst=PUSH_NULL(arg=None, lineno=108)
2023-08-01 10:03:59,642 [DEBUG] stack []
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=458, inst=LOAD_DEREF(arg=8, lineno=108)
2023-08-01 10:03:59,642 [DEBUG] stack ['$null$456.0']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=460, inst=LOAD_FAST(arg=0, lineno=108)
2023-08-01 10:03:59,642 [DEBUG] stack ['$null$456.0', '$458load_deref.1']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=462, inst=LOAD_FAST(arg=1, lineno=108)
2023-08-01 10:03:59,642 [DEBUG] stack ['$null$456.0', '$458load_deref.1', '$A460.2']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=464, inst=LOAD_FAST(arg=4, lineno=108)
2023-08-01 10:03:59,642 [DEBUG] stack ['$null$456.0', '$458load_deref.1', '$A460.2', '$R462.3']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=466, inst=BINARY_SUBSCR(arg=None, lineno=108)
2023-08-01 10:03:59,642 [DEBUG] stack ['$null$456.0', '$458load_deref.1', '$A460.2', '$R462.3', '$mid464.4']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=476, inst=PRECALL(arg=2, lineno=108)
2023-08-01 10:03:59,642 [DEBUG] stack ['$null$456.0', '$458load_deref.1', '$A460.2', '$466binary_subscr.5']
2023-08-01 10:03:59,642 [DEBUG] dispatch pc=480, inst=CALL(arg=2, lineno=108)
2023-08-01 10:03:59,643 [DEBUG] stack ['$null$456.0', '$458load_deref.1', '$A460.2', '$466binary_subscr.5']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=490, inst=STORE_FAST(arg=5, lineno=108)
2023-08-01 10:03:59,643 [DEBUG] stack ['$480call.6']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=492, inst=LOAD_FAST(arg=1, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack []
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=494, inst=LOAD_FAST(arg=4, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$R492.7']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=496, inst=BINARY_SUBSCR(arg=None, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$R492.7', '$mid494.8']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=506, inst=LOAD_FAST(arg=1, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$496binary_subscr.9']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=508, inst=LOAD_FAST(arg=3, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$496binary_subscr.9', '$R506.10']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=510, inst=BINARY_SUBSCR(arg=None, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$496binary_subscr.9', '$R506.10', '$high508.11']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=520, inst=SWAP(arg=2, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$496binary_subscr.9', '$510binary_subscr.12']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=522, inst=LOAD_FAST(arg=1, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$510binary_subscr.12', '$496binary_subscr.9']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=524, inst=LOAD_FAST(arg=3, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$510binary_subscr.12', '$496binary_subscr.9', '$R522.13']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=526, inst=STORE_SUBSCR(arg=None, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$510binary_subscr.12', '$496binary_subscr.9', '$R522.13', '$high524.14']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=530, inst=LOAD_FAST(arg=1, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$510binary_subscr.12']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=532, inst=LOAD_FAST(arg=4, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$510binary_subscr.12', '$R530.15']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=534, inst=STORE_SUBSCR(arg=None, lineno=111)
2023-08-01 10:03:59,643 [DEBUG] stack ['$510binary_subscr.12', '$R530.15', '$mid532.16']
2023-08-01 10:03:59,643 [DEBUG] dispatch pc=538, inst=LOAD_FAST(arg=2, lineno=112)
2023-08-01 10:03:59,644 [DEBUG] stack []
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=540, inst=STORE_FAST(arg=6, lineno=112)
2023-08-01 10:03:59,644 [DEBUG] stack ['$low538.17']
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=542, inst=LOAD_FAST(arg=3, lineno=113)
2023-08-01 10:03:59,644 [DEBUG] stack []
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=544, inst=LOAD_CONST(arg=2, lineno=113)
2023-08-01 10:03:59,644 [DEBUG] stack ['$high542.18']
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=546, inst=BINARY_OP(arg=10, lineno=113)
2023-08-01 10:03:59,644 [DEBUG] stack ['$high542.18', '$const544.19']
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=550, inst=STORE_FAST(arg=7, lineno=113)
2023-08-01 10:03:59,644 [DEBUG] stack ['$binop_sub546.20']
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=552, inst=NOP(arg=None, lineno=114)
2023-08-01 10:03:59,644 [DEBUG] stack []
2023-08-01 10:03:59,644 [DEBUG] end state. edges=[Edge(pc=554, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,644 [DEBUG] pending: deque([State(pc_initial=456 nstack_initial=0), State(pc_initial=554 nstack_initial=0)])
2023-08-01 10:03:59,644 [DEBUG] pending: deque([State(pc_initial=554 nstack_initial=0)])
2023-08-01 10:03:59,644 [DEBUG] stack: []
2023-08-01 10:03:59,644 [DEBUG] state.pc_initial: State(pc_initial=554 nstack_initial=0)
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=554, inst=LOAD_FAST(arg=6, lineno=115)
2023-08-01 10:03:59,644 [DEBUG] stack []
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=556, inst=LOAD_FAST(arg=3, lineno=115)
2023-08-01 10:03:59,644 [DEBUG] stack ['$i554.0']
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=558, inst=COMPARE_OP(arg=0, lineno=115)
2023-08-01 10:03:59,644 [DEBUG] stack ['$i554.0', '$high556.1']
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=564, inst=POP_JUMP_FORWARD_IF_FALSE(arg=67, lineno=115)
2023-08-01 10:03:59,644 [DEBUG] stack ['$558compare_op.2']
2023-08-01 10:03:59,644 [DEBUG] end state. edges=[Edge(pc=566, stack=(), blockstack=(), npush=0), Edge(pc=700, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,644 [DEBUG] pending: deque([State(pc_initial=566 nstack_initial=0), State(pc_initial=700 nstack_initial=0)])
2023-08-01 10:03:59,644 [DEBUG] stack: []
2023-08-01 10:03:59,644 [DEBUG] state.pc_initial: State(pc_initial=566 nstack_initial=0)
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=566, inst=PUSH_NULL(arg=None, lineno=115)
2023-08-01 10:03:59,644 [DEBUG] stack []
2023-08-01 10:03:59,644 [DEBUG] dispatch pc=568, inst=LOAD_DEREF(arg=9, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=570, inst=PUSH_NULL(arg=None, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=572, inst=LOAD_DEREF(arg=8, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=574, inst=LOAD_FAST(arg=0, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=576, inst=LOAD_FAST(arg=1, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3', '$A574.4']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=578, inst=LOAD_FAST(arg=6, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3', '$A574.4', '$R576.5']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=580, inst=BINARY_SUBSCR(arg=None, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3', '$A574.4', '$R576.5', '$i578.6']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=590, inst=PRECALL(arg=2, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3', '$A574.4', '$580binary_subscr.7']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=594, inst=CALL(arg=2, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$null$570.2', '$572load_deref.3', '$A574.4', '$580binary_subscr.7']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=604, inst=LOAD_FAST(arg=5, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$594call.8']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=606, inst=PRECALL(arg=2, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$594call.8', '$pivot604.9']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=610, inst=CALL(arg=2, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$null$566.0', '$568load_deref.1', '$594call.8', '$pivot604.9']
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=620, inst=POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=115)
2023-08-01 10:03:59,645 [DEBUG] stack ['$610call.10']
2023-08-01 10:03:59,645 [DEBUG] end state. edges=[Edge(pc=622, stack=(), blockstack=(), npush=0), Edge(pc=700, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,645 [DEBUG] pending: deque([State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0), State(pc_initial=700 nstack_initial=0)])
2023-08-01 10:03:59,645 [DEBUG] stack: []
2023-08-01 10:03:59,645 [DEBUG] state.pc_initial: State(pc_initial=700 nstack_initial=0)
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=700, inst=LOAD_FAST(arg=7, lineno=117)
2023-08-01 10:03:59,645 [DEBUG] stack []
2023-08-01 10:03:59,645 [DEBUG] dispatch pc=702, inst=LOAD_FAST(arg=2, lineno=117)
2023-08-01 10:03:59,646 [DEBUG] stack ['$j700.0']
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=704, inst=COMPARE_OP(arg=5, lineno=117)
2023-08-01 10:03:59,646 [DEBUG] stack ['$j700.0', '$low702.1']
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=710, inst=POP_JUMP_FORWARD_IF_FALSE(arg=67, lineno=117)
2023-08-01 10:03:59,646 [DEBUG] stack ['$704compare_op.2']
2023-08-01 10:03:59,646 [DEBUG] end state. edges=[Edge(pc=712, stack=(), blockstack=(), npush=0), Edge(pc=846, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,646 [DEBUG] pending: deque([State(pc_initial=622 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=712 nstack_initial=0), State(pc_initial=846 nstack_initial=0)])
2023-08-01 10:03:59,646 [DEBUG] stack: []
2023-08-01 10:03:59,646 [DEBUG] state.pc_initial: State(pc_initial=622 nstack_initial=0)
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=622, inst=LOAD_FAST(arg=6, lineno=116)
2023-08-01 10:03:59,646 [DEBUG] stack []
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=624, inst=LOAD_CONST(arg=2, lineno=116)
2023-08-01 10:03:59,646 [DEBUG] stack ['$i622.0']
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=626, inst=BINARY_OP(arg=13, lineno=116)
2023-08-01 10:03:59,646 [DEBUG] stack ['$i622.0', '$const624.1']
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=630, inst=STORE_FAST(arg=6, lineno=116)
2023-08-01 10:03:59,646 [DEBUG] stack ['$binop_iadd626.2']
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=632, inst=LOAD_FAST(arg=6, lineno=115)
2023-08-01 10:03:59,646 [DEBUG] stack []
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=634, inst=LOAD_FAST(arg=3, lineno=115)
2023-08-01 10:03:59,646 [DEBUG] stack ['$i632.3']
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=636, inst=COMPARE_OP(arg=0, lineno=115)
2023-08-01 10:03:59,646 [DEBUG] stack ['$i632.3', '$high634.4']
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=642, inst=POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=115)
2023-08-01 10:03:59,646 [DEBUG] stack ['$636compare_op.5']
2023-08-01 10:03:59,646 [DEBUG] end state. edges=[Edge(pc=644, stack=(), blockstack=(), npush=0), Edge(pc=700, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,646 [DEBUG] pending: deque([State(pc_initial=700 nstack_initial=0), State(pc_initial=712 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=644 nstack_initial=0), State(pc_initial=700 nstack_initial=0)])
2023-08-01 10:03:59,646 [DEBUG] pending: deque([State(pc_initial=712 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=644 nstack_initial=0), State(pc_initial=700 nstack_initial=0)])
2023-08-01 10:03:59,646 [DEBUG] stack: []
2023-08-01 10:03:59,646 [DEBUG] state.pc_initial: State(pc_initial=712 nstack_initial=0)
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=712, inst=PUSH_NULL(arg=None, lineno=117)
2023-08-01 10:03:59,646 [DEBUG] stack []
2023-08-01 10:03:59,646 [DEBUG] dispatch pc=714, inst=LOAD_DEREF(arg=9, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=716, inst=LOAD_FAST(arg=5, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=718, inst=PUSH_NULL(arg=None, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=720, inst=LOAD_DEREF(arg=8, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=722, inst=LOAD_FAST(arg=0, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=724, inst=LOAD_FAST(arg=1, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4', '$A722.5']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=726, inst=LOAD_FAST(arg=7, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4', '$A722.5', '$R724.6']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=728, inst=BINARY_SUBSCR(arg=None, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4', '$A722.5', '$R724.6', '$j726.7']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=738, inst=PRECALL(arg=2, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4', '$A722.5', '$728binary_subscr.8']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=742, inst=CALL(arg=2, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$null$718.3', '$720load_deref.4', '$A722.5', '$728binary_subscr.8']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=752, inst=PRECALL(arg=2, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$742call.9']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=756, inst=CALL(arg=2, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$null$712.0', '$714load_deref.1', '$pivot716.2', '$742call.9']
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=766, inst=POP_JUMP_FORWARD_IF_FALSE(arg=39, lineno=117)
2023-08-01 10:03:59,647 [DEBUG] stack ['$756call.10']
2023-08-01 10:03:59,647 [DEBUG] end state. edges=[Edge(pc=768, stack=(), blockstack=(), npush=0), Edge(pc=846, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,647 [DEBUG] pending: deque([State(pc_initial=846 nstack_initial=0), State(pc_initial=644 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=768 nstack_initial=0), State(pc_initial=846 nstack_initial=0)])
2023-08-01 10:03:59,647 [DEBUG] stack: []
2023-08-01 10:03:59,647 [DEBUG] state.pc_initial: State(pc_initial=846 nstack_initial=0)
2023-08-01 10:03:59,647 [DEBUG] dispatch pc=846, inst=LOAD_FAST(arg=6, lineno=119)
2023-08-01 10:03:59,647 [DEBUG] stack []
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=848, inst=LOAD_FAST(arg=7, lineno=119)
2023-08-01 10:03:59,648 [DEBUG] stack ['$i846.0']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=850, inst=COMPARE_OP(arg=5, lineno=119)
2023-08-01 10:03:59,648 [DEBUG] stack ['$i846.0', '$j848.1']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=856, inst=POP_JUMP_FORWARD_IF_FALSE(arg=1, lineno=119)
2023-08-01 10:03:59,648 [DEBUG] stack ['$850compare_op.2']
2023-08-01 10:03:59,648 [DEBUG] end state. edges=[Edge(pc=858, stack=(), blockstack=(), npush=0), Edge(pc=860, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,648 [DEBUG] pending: deque([State(pc_initial=644 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=768 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=858 nstack_initial=0), State(pc_initial=860 nstack_initial=0)])
2023-08-01 10:03:59,648 [DEBUG] stack: []
2023-08-01 10:03:59,648 [DEBUG] state.pc_initial: State(pc_initial=644 nstack_initial=0)
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=644, inst=PUSH_NULL(arg=None, lineno=115)
2023-08-01 10:03:59,648 [DEBUG] stack []
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=646, inst=LOAD_DEREF(arg=9, lineno=115)
2023-08-01 10:03:59,648 [DEBUG] stack ['$null$644.0']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=648, inst=PUSH_NULL(arg=None, lineno=115)
2023-08-01 10:03:59,648 [DEBUG] stack ['$null$644.0', '$646load_deref.1']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=650, inst=LOAD_DEREF(arg=8, lineno=115)
2023-08-01 10:03:59,648 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=652, inst=LOAD_FAST(arg=0, lineno=115)
2023-08-01 10:03:59,648 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=654, inst=LOAD_FAST(arg=1, lineno=115)
2023-08-01 10:03:59,648 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3', '$A652.4']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=656, inst=LOAD_FAST(arg=6, lineno=115)
2023-08-01 10:03:59,648 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3', '$A652.4', '$R654.5']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=658, inst=BINARY_SUBSCR(arg=None, lineno=115)
2023-08-01 10:03:59,648 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3', '$A652.4', '$R654.5', '$i656.6']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=668, inst=PRECALL(arg=2, lineno=115)
2023-08-01 10:03:59,648 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3', '$A652.4', '$658binary_subscr.7']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=672, inst=CALL(arg=2, lineno=115)
2023-08-01 10:03:59,648 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$null$648.2', '$650load_deref.3', '$A652.4', '$658binary_subscr.7']
2023-08-01 10:03:59,648 [DEBUG] dispatch pc=682, inst=LOAD_FAST(arg=5, lineno=115)
2023-08-01 10:03:59,649 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$672call.8']
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=684, inst=PRECALL(arg=2, lineno=115)
2023-08-01 10:03:59,649 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$672call.8', '$pivot682.9']
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=688, inst=CALL(arg=2, lineno=115)
2023-08-01 10:03:59,649 [DEBUG] stack ['$null$644.0', '$646load_deref.1', '$672call.8', '$pivot682.9']
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=698, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=39, lineno=115)
2023-08-01 10:03:59,649 [DEBUG] stack ['$688call.10']
2023-08-01 10:03:59,649 [DEBUG] end state. edges=[Edge(pc=700, stack=(), blockstack=(), npush=0), Edge(pc=622, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,649 [DEBUG] pending: deque([State(pc_initial=700 nstack_initial=0), State(pc_initial=768 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=858 nstack_initial=0), State(pc_initial=860 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0)])
2023-08-01 10:03:59,649 [DEBUG] pending: deque([State(pc_initial=768 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=858 nstack_initial=0), State(pc_initial=860 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0)])
2023-08-01 10:03:59,649 [DEBUG] stack: []
2023-08-01 10:03:59,649 [DEBUG] state.pc_initial: State(pc_initial=768 nstack_initial=0)
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=768, inst=LOAD_FAST(arg=7, lineno=118)
2023-08-01 10:03:59,649 [DEBUG] stack []
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=770, inst=LOAD_CONST(arg=2, lineno=118)
2023-08-01 10:03:59,649 [DEBUG] stack ['$j768.0']
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=772, inst=BINARY_OP(arg=23, lineno=118)
2023-08-01 10:03:59,649 [DEBUG] stack ['$j768.0', '$const770.1']
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=776, inst=STORE_FAST(arg=7, lineno=118)
2023-08-01 10:03:59,649 [DEBUG] stack ['$binop_isub772.2']
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=778, inst=LOAD_FAST(arg=7, lineno=117)
2023-08-01 10:03:59,649 [DEBUG] stack []
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=780, inst=LOAD_FAST(arg=2, lineno=117)
2023-08-01 10:03:59,649 [DEBUG] stack ['$j778.3']
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=782, inst=COMPARE_OP(arg=5, lineno=117)
2023-08-01 10:03:59,649 [DEBUG] stack ['$j778.3', '$low780.4']
2023-08-01 10:03:59,649 [DEBUG] dispatch pc=788, inst=POP_JUMP_FORWARD_IF_FALSE(arg=28, lineno=117)
2023-08-01 10:03:59,649 [DEBUG] stack ['$782compare_op.5']
2023-08-01 10:03:59,649 [DEBUG] end state. edges=[Edge(pc=790, stack=(), blockstack=(), npush=0), Edge(pc=846, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,649 [DEBUG] pending: deque([State(pc_initial=846 nstack_initial=0), State(pc_initial=858 nstack_initial=0), State(pc_initial=860 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0), State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0)])
2023-08-01 10:03:59,650 [DEBUG] pending: deque([State(pc_initial=858 nstack_initial=0), State(pc_initial=860 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0), State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0)])
2023-08-01 10:03:59,650 [DEBUG] stack: []
2023-08-01 10:03:59,650 [DEBUG] state.pc_initial: State(pc_initial=858 nstack_initial=0)
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=858, inst=JUMP_FORWARD(arg=34, lineno=120)
2023-08-01 10:03:59,650 [DEBUG] stack []
2023-08-01 10:03:59,650 [DEBUG] end state. edges=[Edge(pc=928, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,650 [DEBUG] pending: deque([State(pc_initial=860 nstack_initial=0), State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0), State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=928 nstack_initial=0)])
2023-08-01 10:03:59,650 [DEBUG] stack: []
2023-08-01 10:03:59,650 [DEBUG] state.pc_initial: State(pc_initial=860 nstack_initial=0)
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=860, inst=LOAD_FAST(arg=1, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack []
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=862, inst=LOAD_FAST(arg=7, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$R860.0']
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=864, inst=BINARY_SUBSCR(arg=None, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$R860.0', '$j862.1']
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=874, inst=LOAD_FAST(arg=1, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$864binary_subscr.2']
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=876, inst=LOAD_FAST(arg=6, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$864binary_subscr.2', '$R874.3']
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=878, inst=BINARY_SUBSCR(arg=None, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$864binary_subscr.2', '$R874.3', '$i876.4']
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=888, inst=SWAP(arg=2, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$864binary_subscr.2', '$878binary_subscr.5']
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=890, inst=LOAD_FAST(arg=1, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$878binary_subscr.5', '$864binary_subscr.2']
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=892, inst=LOAD_FAST(arg=6, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$878binary_subscr.5', '$864binary_subscr.2', '$R890.6']
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=894, inst=STORE_SUBSCR(arg=None, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$878binary_subscr.5', '$864binary_subscr.2', '$R890.6', '$i892.7']
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=898, inst=LOAD_FAST(arg=1, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$878binary_subscr.5']
2023-08-01 10:03:59,650 [DEBUG] dispatch pc=900, inst=LOAD_FAST(arg=7, lineno=121)
2023-08-01 10:03:59,650 [DEBUG] stack ['$878binary_subscr.5', '$R898.8']
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=902, inst=STORE_SUBSCR(arg=None, lineno=121)
2023-08-01 10:03:59,651 [DEBUG] stack ['$878binary_subscr.5', '$R898.8', '$j900.9']
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=906, inst=LOAD_FAST(arg=6, lineno=122)
2023-08-01 10:03:59,651 [DEBUG] stack []
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=908, inst=LOAD_CONST(arg=2, lineno=122)
2023-08-01 10:03:59,651 [DEBUG] stack ['$i906.10']
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=910, inst=BINARY_OP(arg=13, lineno=122)
2023-08-01 10:03:59,651 [DEBUG] stack ['$i906.10', '$const908.11']
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=914, inst=STORE_FAST(arg=6, lineno=122)
2023-08-01 10:03:59,651 [DEBUG] stack ['$binop_iadd910.12']
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=916, inst=LOAD_FAST(arg=7, lineno=123)
2023-08-01 10:03:59,651 [DEBUG] stack []
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=918, inst=LOAD_CONST(arg=2, lineno=123)
2023-08-01 10:03:59,651 [DEBUG] stack ['$j916.13']
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=920, inst=BINARY_OP(arg=23, lineno=123)
2023-08-01 10:03:59,651 [DEBUG] stack ['$j916.13', '$const918.14']
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=924, inst=STORE_FAST(arg=7, lineno=123)
2023-08-01 10:03:59,651 [DEBUG] stack ['$binop_isub920.15']
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=926, inst=JUMP_BACKWARD(arg=187, lineno=114)
2023-08-01 10:03:59,651 [DEBUG] stack []
2023-08-01 10:03:59,651 [DEBUG] end state. edges=[Edge(pc=554, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,651 [DEBUG] pending: deque([State(pc_initial=700 nstack_initial=0), State(pc_initial=622 nstack_initial=0), State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=928 nstack_initial=0), State(pc_initial=554 nstack_initial=0)])
2023-08-01 10:03:59,651 [DEBUG] pending: deque([State(pc_initial=622 nstack_initial=0), State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=928 nstack_initial=0), State(pc_initial=554 nstack_initial=0)])
2023-08-01 10:03:59,651 [DEBUG] pending: deque([State(pc_initial=790 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=928 nstack_initial=0), State(pc_initial=554 nstack_initial=0)])
2023-08-01 10:03:59,651 [DEBUG] stack: []
2023-08-01 10:03:59,651 [DEBUG] state.pc_initial: State(pc_initial=790 nstack_initial=0)
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=790, inst=PUSH_NULL(arg=None, lineno=117)
2023-08-01 10:03:59,651 [DEBUG] stack []
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=792, inst=LOAD_DEREF(arg=9, lineno=117)
2023-08-01 10:03:59,651 [DEBUG] stack ['$null$790.0']
2023-08-01 10:03:59,651 [DEBUG] dispatch pc=794, inst=LOAD_FAST(arg=5, lineno=117)
2023-08-01 10:03:59,651 [DEBUG] stack ['$null$790.0', '$792load_deref.1']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=796, inst=PUSH_NULL(arg=None, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=798, inst=LOAD_DEREF(arg=8, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=800, inst=LOAD_FAST(arg=0, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=802, inst=LOAD_FAST(arg=1, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4', '$A800.5']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=804, inst=LOAD_FAST(arg=7, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4', '$A800.5', '$R802.6']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=806, inst=BINARY_SUBSCR(arg=None, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4', '$A800.5', '$R802.6', '$j804.7']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=816, inst=PRECALL(arg=2, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4', '$A800.5', '$806binary_subscr.8']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=820, inst=CALL(arg=2, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$null$796.3', '$798load_deref.4', '$A800.5', '$806binary_subscr.8']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=830, inst=PRECALL(arg=2, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$820call.9']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=834, inst=CALL(arg=2, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$null$790.0', '$792load_deref.1', '$pivot794.2', '$820call.9']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=844, inst=POP_JUMP_BACKWARD_IF_TRUE(arg=39, lineno=117)
2023-08-01 10:03:59,652 [DEBUG] stack ['$834call.10']
2023-08-01 10:03:59,652 [DEBUG] end state. edges=[Edge(pc=846, stack=(), blockstack=(), npush=0), Edge(pc=768, stack=(), blockstack=(), npush=0)]
2023-08-01 10:03:59,652 [DEBUG] pending: deque([State(pc_initial=846 nstack_initial=0), State(pc_initial=928 nstack_initial=0), State(pc_initial=554 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=768 nstack_initial=0)])
2023-08-01 10:03:59,652 [DEBUG] pending: deque([State(pc_initial=928 nstack_initial=0), State(pc_initial=554 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=768 nstack_initial=0)])
2023-08-01 10:03:59,652 [DEBUG] stack: []
2023-08-01 10:03:59,652 [DEBUG] state.pc_initial: State(pc_initial=928 nstack_initial=0)
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=928, inst=LOAD_FAST(arg=1, lineno=126)
2023-08-01 10:03:59,652 [DEBUG] stack []
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=930, inst=LOAD_FAST(arg=3, lineno=126)
2023-08-01 10:03:59,652 [DEBUG] stack ['$R928.0']
2023-08-01 10:03:59,652 [DEBUG] dispatch pc=932, inst=BINARY_SUBSCR(arg=None, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$R928.0', '$high930.1']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=942, inst=LOAD_FAST(arg=1, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$932binary_subscr.2']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=944, inst=LOAD_FAST(arg=6, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$932binary_subscr.2', '$R942.3']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=946, inst=BINARY_SUBSCR(arg=None, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$932binary_subscr.2', '$R942.3', '$i944.4']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=956, inst=SWAP(arg=2, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$932binary_subscr.2', '$946binary_subscr.5']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=958, inst=LOAD_FAST(arg=1, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$946binary_subscr.5', '$932binary_subscr.2']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=960, inst=LOAD_FAST(arg=6, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$946binary_subscr.5', '$932binary_subscr.2', '$R958.6']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=962, inst=STORE_SUBSCR(arg=None, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$946binary_subscr.5', '$932binary_subscr.2', '$R958.6', '$i960.7']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=966, inst=LOAD_FAST(arg=1, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$946binary_subscr.5']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=968, inst=LOAD_FAST(arg=3, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$946binary_subscr.5', '$R966.8']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=970, inst=STORE_SUBSCR(arg=None, lineno=126)
2023-08-01 10:03:59,653 [DEBUG] stack ['$946binary_subscr.5', '$R966.8', '$high968.9']
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=974, inst=LOAD_FAST(arg=6, lineno=127)
2023-08-01 10:03:59,653 [DEBUG] stack []
2023-08-01 10:03:59,653 [DEBUG] dispatch pc=976, inst=RETURN_VALUE(arg=None, lineno=127)
2023-08-01 10:03:59,653 [DEBUG] stack ['$i974.10']
2023-08-01 10:03:59,653 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,653 [DEBUG] pending: deque([State(pc_initial=554 nstack_initial=0), State(pc_initial=846 nstack_initial=0), State(pc_initial=768 nstack_initial=0)])
2023-08-01 10:03:59,653 [DEBUG] pending: deque([State(pc_initial=846 nstack_initial=0), State(pc_initial=768 nstack_initial=0)])
2023-08-01 10:03:59,653 [DEBUG] pending: deque([State(pc_initial=768 nstack_initial=0)])
2023-08-01 10:03:59,653 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,654 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=18 nstack_initial=0): set(),
             State(pc_initial=22 nstack_initial=0): set(),
             State(pc_initial=34 nstack_initial=0): set(),
             State(pc_initial=38 nstack_initial=0): set(),
             State(pc_initial=142 nstack_initial=0): set(),
             State(pc_initial=188 nstack_initial=0): set(),
             State(pc_initial=276 nstack_initial=0): set(),
             State(pc_initial=322 nstack_initial=0): set(),
             State(pc_initial=410 nstack_initial=0): set(),
             State(pc_initial=456 nstack_initial=0): set(),
             State(pc_initial=554 nstack_initial=0): set(),
             State(pc_initial=566 nstack_initial=0): set(),
             State(pc_initial=622 nstack_initial=0): set(),
             State(pc_initial=644 nstack_initial=0): set(),
             State(pc_initial=700 nstack_initial=0): set(),
             State(pc_initial=712 nstack_initial=0): set(),
             State(pc_initial=768 nstack_initial=0): set(),
             State(pc_initial=790 nstack_initial=0): set(),
             State(pc_initial=846 nstack_initial=0): set(),
             State(pc_initial=858 nstack_initial=0): set(),
             State(pc_initial=860 nstack_initial=0): set(),
             State(pc_initial=928 nstack_initial=0): set()})
2023-08-01 10:03:59,654 [DEBUG] defmap: {}
2023-08-01 10:03:59,654 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,654 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,654 [DEBUG] keep phismap: {}
2023-08-01 10:03:59,654 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-08-01 10:03:59,654 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {}), (6, {'res': '$low6.0'}), (8, {'res': '$const8.1'}), (10, {'lhs': '$low6.0', 'rhs': '$const8.1', 'res': '$10compare_op.2'}), (12, {}), (14, {}), (16, {'pred': '$10compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={18: (), 22: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=18 nstack_initial=0):
AdaptBlockInfo(insts=((18, {'res': '$assertion_error18.0'}), (20, {'exc': '$assertion_error18.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=22 nstack_initial=0):
AdaptBlockInfo(insts=((22, {'res': '$high22.0'}), (24, {'res': '$low24.1'}), (26, {'lhs': '$high22.0', 'rhs': '$low24.1', 'res': '$26compare_op.2'}), (28, {}), (30, {}), (32, {'pred': '$26compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={34: (), 38: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=34 nstack_initial=0):
AdaptBlockInfo(insts=((34, {'res': '$assertion_error34.0'}), (36, {'exc': '$assertion_error34.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=38 nstack_initial=0):
AdaptBlockInfo(insts=((38, {'res': '$low38.0'}), (40, {'res': '$high40.1'}), (42, {'op': '+', 'lhs': '$low38.0', 'rhs': '$high40.1', 'res': '$binop_add42.2'}), (44, {}), (46, {'res': '$const46.3'}), (48, {'op': '>>', 'lhs': '$binop_add42.2', 'rhs': '$const46.3', 'res': '$binop_rshift48.4'}), (50, {}), (52, {'value': '$binop_rshift48.4'}), (54, {}), (56, {'res': '$56load_deref.6'}), (58, {}), (60, {'res': '$60load_deref.8'}), (62, {'res': '$A62.9'}), (64, {'res': '$R64.10'}), (66, {'res': '$mid66.11'}), (68, {'index': '$mid66.11', 'target': '$R64.10', 'res': '$68binary_subscr.12'}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {}), (80, {}), (82, {'func': '$60load_deref.8', 'args': ['$A62.9', '$68binary_subscr.12'], 'kw_names': None, 'res': '$82call.13'}), (84, {}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'res': '$94load_deref.15'}), (96, {'res': '$A96.16'}), (98, {'res': '$R98.17'}), (100, {'res': '$low100.18'}), (102, {'index': '$low100.18', 'target': '$R98.17', 'res': '$102binary_subscr.19'}), (104, {}), (106, {}), (108, {}), (110, {}), (112, {}), (114, {}), (116, {'func': '$94load_deref.15', 'args': ['$A96.16', '$102binary_subscr.19'], 'kw_names': None, 'res': '$116call.20'}), (118, {}), (120, {}), (122, {}), (124, {}), (126, {}), (128, {}), (130, {'func': '$56load_deref.6', 'args': ['$82call.13', '$116call.20'], 'kw_names': None, 'res': '$130call.21'}), (132, {}), (134, {}), (136, {}), (138, {}), (140, {'pred': '$130call.21'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={142: (), 188: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=142 nstack_initial=0):
AdaptBlockInfo(insts=((142, {'res': '$R142.0'}), (144, {'res': '$mid144.1'}), (146, {'index': '$mid144.1', 'target': '$R142.0', 'res': '$146binary_subscr.2'}), (148, {}), (150, {}), (152, {}), (154, {}), (156, {'res': '$R156.3'}), (158, {'res': '$low158.4'}), (160, {'index': '$low158.4', 'target': '$R156.3', 'res': '$160binary_subscr.5'}), (162, {}), (164, {}), (166, {}), (168, {}), (172, {'res': '$R172.6'}), (174, {'res': '$low174.7'}), (176, {'target': '$R172.6', 'index': '$low174.7', 'value': '$146binary_subscr.2'}), (178, {}), (180, {'res': '$R180.8'}), (182, {'res': '$mid182.9'}), (184, {'target': '$R180.8', 'index': '$mid182.9', 'value': '$160binary_subscr.5'}), (186, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={188: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=188 nstack_initial=0):
AdaptBlockInfo(insts=((188, {}), (190, {'res': '$190load_deref.1'}), (192, {}), (194, {'res': '$194load_deref.3'}), (196, {'res': '$A196.4'}), (198, {'res': '$R198.5'}), (200, {'res': '$high200.6'}), (202, {'index': '$high200.6', 'target': '$R198.5', 'res': '$202binary_subscr.7'}), (204, {}), (206, {}), (208, {}), (210, {}), (212, {}), (214, {}), (216, {'func': '$194load_deref.3', 'args': ['$A196.4', '$202binary_subscr.7'], 'kw_names': None, 'res': '$216call.8'}), (218, {}), (220, {}), (222, {}), (224, {}), (226, {}), (228, {'res': '$228load_deref.10'}), (230, {'res': '$A230.11'}), (232, {'res': '$R232.12'}), (234, {'res': '$mid234.13'}), (236, {'index': '$mid234.13', 'target': '$R232.12', 'res': '$236binary_subscr.14'}), (238, {}), (240, {}), (242, {}), (244, {}), (246, {}), (248, {}), (250, {'func': '$228load_deref.10', 'args': ['$A230.11', '$236binary_subscr.14'], 'kw_names': None, 'res': '$250call.15'}), (252, {}), (254, {}), (256, {}), (258, {}), (260, {}), (262, {}), (264, {'func': '$190load_deref.1', 'args': ['$216call.8', '$250call.15'], 'kw_names': None, 'res': '$264call.16'}), (266, {}), (268, {}), (270, {}), (272, {}), (274, {'pred': '$264call.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={276: (), 322: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=276 nstack_initial=0):
AdaptBlockInfo(insts=((276, {'res': '$R276.0'}), (278, {'res': '$mid278.1'}), (280, {'index': '$mid278.1', 'target': '$R276.0', 'res': '$280binary_subscr.2'}), (282, {}), (284, {}), (286, {}), (288, {}), (290, {'res': '$R290.3'}), (292, {'res': '$high292.4'}), (294, {'index': '$high292.4', 'target': '$R290.3', 'res': '$294binary_subscr.5'}), (296, {}), (298, {}), (300, {}), (302, {}), (306, {'res': '$R306.6'}), (308, {'res': '$high308.7'}), (310, {'target': '$R306.6', 'index': '$high308.7', 'value': '$280binary_subscr.2'}), (312, {}), (314, {'res': '$R314.8'}), (316, {'res': '$mid316.9'}), (318, {'target': '$R314.8', 'index': '$mid316.9', 'value': '$294binary_subscr.5'}), (320, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={322: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=322 nstack_initial=0):
AdaptBlockInfo(insts=((322, {}), (324, {'res': '$324load_deref.1'}), (326, {}), (328, {'res': '$328load_deref.3'}), (330, {'res': '$A330.4'}), (332, {'res': '$R332.5'}), (334, {'res': '$mid334.6'}), (336, {'index': '$mid334.6', 'target': '$R332.5', 'res': '$336binary_subscr.7'}), (338, {}), (340, {}), (342, {}), (344, {}), (346, {}), (348, {}), (350, {'func': '$328load_deref.3', 'args': ['$A330.4', '$336binary_subscr.7'], 'kw_names': None, 'res': '$350call.8'}), (352, {}), (354, {}), (356, {}), (358, {}), (360, {}), (362, {'res': '$362load_deref.10'}), (364, {'res': '$A364.11'}), (366, {'res': '$R366.12'}), (368, {'res': '$low368.13'}), (370, {'index': '$low368.13', 'target': '$R366.12', 'res': '$370binary_subscr.14'}), (372, {}), (374, {}), (376, {}), (378, {}), (380, {}), (382, {}), (384, {'func': '$362load_deref.10', 'args': ['$A364.11', '$370binary_subscr.14'], 'kw_names': None, 'res': '$384call.15'}), (386, {}), (388, {}), (390, {}), (392, {}), (394, {}), (396, {}), (398, {'func': '$324load_deref.1', 'args': ['$350call.8', '$384call.15'], 'kw_names': None, 'res': '$398call.16'}), (400, {}), (402, {}), (404, {}), (406, {}), (408, {'pred': '$398call.16'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={410: (), 456: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=410 nstack_initial=0):
AdaptBlockInfo(insts=((410, {'res': '$R410.0'}), (412, {'res': '$mid412.1'}), (414, {'index': '$mid412.1', 'target': '$R410.0', 'res': '$414binary_subscr.2'}), (416, {}), (418, {}), (420, {}), (422, {}), (424, {'res': '$R424.3'}), (426, {'res': '$low426.4'}), (428, {'index': '$low426.4', 'target': '$R424.3', 'res': '$428binary_subscr.5'}), (430, {}), (432, {}), (434, {}), (436, {}), (440, {'res': '$R440.6'}), (442, {'res': '$low442.7'}), (444, {'target': '$R440.6', 'index': '$low442.7', 'value': '$414binary_subscr.2'}), (446, {}), (448, {'res': '$R448.8'}), (450, {'res': '$mid450.9'}), (452, {'target': '$R448.8', 'index': '$mid450.9', 'value': '$428binary_subscr.5'}), (454, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={456: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=456 nstack_initial=0):
AdaptBlockInfo(insts=((456, {}), (458, {'res': '$458load_deref.1'}), (460, {'res': '$A460.2'}), (462, {'res': '$R462.3'}), (464, {'res': '$mid464.4'}), (466, {'index': '$mid464.4', 'target': '$R462.3', 'res': '$466binary_subscr.5'}), (468, {}), (470, {}), (472, {}), (474, {}), (476, {}), (478, {}), (480, {'func': '$458load_deref.1', 'args': ['$A460.2', '$466binary_subscr.5'], 'kw_names': None, 'res': '$480call.6'}), (482, {}), (484, {}), (486, {}), (488, {}), (490, {'value': '$480call.6'}), (492, {'res': '$R492.7'}), (494, {'res': '$mid494.8'}), (496, {'index': '$mid494.8', 'target': '$R492.7', 'res': '$496binary_subscr.9'}), (498, {}), (500, {}), (502, {}), (504, {}), (506, {'res': '$R506.10'}), (508, {'res': '$high508.11'}), (510, {'index': '$high508.11', 'target': '$R506.10', 'res': '$510binary_subscr.12'}), (512, {}), (514, {}), (516, {}), (518, {}), (522, {'res': '$R522.13'}), (524, {'res': '$high524.14'}), (526, {'target': '$R522.13', 'index': '$high524.14', 'value': '$496binary_subscr.9'}), (528, {}), (530, {'res': '$R530.15'}), (532, {'res': '$mid532.16'}), (534, {'target': '$R530.15', 'index': '$mid532.16', 'value': '$510binary_subscr.12'}), (536, {}), (538, {'res': '$low538.17'}), (540, {'value': '$low538.17'}), (542, {'res': '$high542.18'}), (544, {'res': '$const544.19'}), (546, {'op': '-', 'lhs': '$high542.18', 'rhs': '$const544.19', 'res': '$binop_sub546.20'}), (548, {}), (550, {'value': '$binop_sub546.20'}), (552, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={554: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=554 nstack_initial=0):
AdaptBlockInfo(insts=((554, {'res': '$i554.0'}), (556, {'res': '$high556.1'}), (558, {'lhs': '$i554.0', 'rhs': '$high556.1', 'res': '$558compare_op.2'}), (560, {}), (562, {}), (564, {'pred': '$558compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={566: (), 700: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=566 nstack_initial=0):
AdaptBlockInfo(insts=((566, {}), (568, {'res': '$568load_deref.1'}), (570, {}), (572, {'res': '$572load_deref.3'}), (574, {'res': '$A574.4'}), (576, {'res': '$R576.5'}), (578, {'res': '$i578.6'}), (580, {'index': '$i578.6', 'target': '$R576.5', 'res': '$580binary_subscr.7'}), (582, {}), (584, {}), (586, {}), (588, {}), (590, {}), (592, {}), (594, {'func': '$572load_deref.3', 'args': ['$A574.4', '$580binary_subscr.7'], 'kw_names': None, 'res': '$594call.8'}), (596, {}), (598, {}), (600, {}), (602, {}), (604, {'res': '$pivot604.9'}), (606, {}), (608, {}), (610, {'func': '$568load_deref.1', 'args': ['$594call.8', '$pivot604.9'], 'kw_names': None, 'res': '$610call.10'}), (612, {}), (614, {}), (616, {}), (618, {}), (620, {'pred': '$610call.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={622: (), 700: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=622 nstack_initial=0):
AdaptBlockInfo(insts=((622, {'res': '$i622.0'}), (624, {'res': '$const624.1'}), (626, {'op': '+=', 'lhs': '$i622.0', 'rhs': '$const624.1', 'res': '$binop_iadd626.2'}), (628, {}), (630, {'value': '$binop_iadd626.2'}), (632, {'res': '$i632.3'}), (634, {'res': '$high634.4'}), (636, {'lhs': '$i632.3', 'rhs': '$high634.4', 'res': '$636compare_op.5'}), (638, {}), (640, {}), (642, {'pred': '$636compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={644: (), 700: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=644 nstack_initial=0):
AdaptBlockInfo(insts=((644, {}), (646, {'res': '$646load_deref.1'}), (648, {}), (650, {'res': '$650load_deref.3'}), (652, {'res': '$A652.4'}), (654, {'res': '$R654.5'}), (656, {'res': '$i656.6'}), (658, {'index': '$i656.6', 'target': '$R654.5', 'res': '$658binary_subscr.7'}), (660, {}), (662, {}), (664, {}), (666, {}), (668, {}), (670, {}), (672, {'func': '$650load_deref.3', 'args': ['$A652.4', '$658binary_subscr.7'], 'kw_names': None, 'res': '$672call.8'}), (674, {}), (676, {}), (678, {}), (680, {}), (682, {'res': '$pivot682.9'}), (684, {}), (686, {}), (688, {'func': '$646load_deref.1', 'args': ['$672call.8', '$pivot682.9'], 'kw_names': None, 'res': '$688call.10'}), (690, {}), (692, {}), (694, {}), (696, {}), (698, {'pred': '$688call.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={700: (), 622: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=700 nstack_initial=0):
AdaptBlockInfo(insts=((700, {'res': '$j700.0'}), (702, {'res': '$low702.1'}), (704, {'lhs': '$j700.0', 'rhs': '$low702.1', 'res': '$704compare_op.2'}), (706, {}), (708, {}), (710, {'pred': '$704compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={712: (), 846: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=712 nstack_initial=0):
AdaptBlockInfo(insts=((712, {}), (714, {'res': '$714load_deref.1'}), (716, {'res': '$pivot716.2'}), (718, {}), (720, {'res': '$720load_deref.4'}), (722, {'res': '$A722.5'}), (724, {'res': '$R724.6'}), (726, {'res': '$j726.7'}), (728, {'index': '$j726.7', 'target': '$R724.6', 'res': '$728binary_subscr.8'}), (730, {}), (732, {}), (734, {}), (736, {}), (738, {}), (740, {}), (742, {'func': '$720load_deref.4', 'args': ['$A722.5', '$728binary_subscr.8'], 'kw_names': None, 'res': '$742call.9'}), (744, {}), (746, {}), (748, {}), (750, {}), (752, {}), (754, {}), (756, {'func': '$714load_deref.1', 'args': ['$pivot716.2', '$742call.9'], 'kw_names': None, 'res': '$756call.10'}), (758, {}), (760, {}), (762, {}), (764, {}), (766, {'pred': '$756call.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={768: (), 846: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=768 nstack_initial=0):
AdaptBlockInfo(insts=((768, {'res': '$j768.0'}), (770, {'res': '$const770.1'}), (772, {'op': '-=', 'lhs': '$j768.0', 'rhs': '$const770.1', 'res': '$binop_isub772.2'}), (774, {}), (776, {'value': '$binop_isub772.2'}), (778, {'res': '$j778.3'}), (780, {'res': '$low780.4'}), (782, {'lhs': '$j778.3', 'rhs': '$low780.4', 'res': '$782compare_op.5'}), (784, {}), (786, {}), (788, {'pred': '$782compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={790: (), 846: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=790 nstack_initial=0):
AdaptBlockInfo(insts=((790, {}), (792, {'res': '$792load_deref.1'}), (794, {'res': '$pivot794.2'}), (796, {}), (798, {'res': '$798load_deref.4'}), (800, {'res': '$A800.5'}), (802, {'res': '$R802.6'}), (804, {'res': '$j804.7'}), (806, {'index': '$j804.7', 'target': '$R802.6', 'res': '$806binary_subscr.8'}), (808, {}), (810, {}), (812, {}), (814, {}), (816, {}), (818, {}), (820, {'func': '$798load_deref.4', 'args': ['$A800.5', '$806binary_subscr.8'], 'kw_names': None, 'res': '$820call.9'}), (822, {}), (824, {}), (826, {}), (828, {}), (830, {}), (832, {}), (834, {'func': '$792load_deref.1', 'args': ['$pivot794.2', '$820call.9'], 'kw_names': None, 'res': '$834call.10'}), (836, {}), (838, {}), (840, {}), (842, {}), (844, {'pred': '$834call.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={846: (), 768: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=846 nstack_initial=0):
AdaptBlockInfo(insts=((846, {'res': '$i846.0'}), (848, {'res': '$j848.1'}), (850, {'lhs': '$i846.0', 'rhs': '$j848.1', 'res': '$850compare_op.2'}), (852, {}), (854, {}), (856, {'pred': '$850compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={858: (), 860: ()})
2023-08-01 10:03:59,654 [DEBUG] block_infos State(pc_initial=858 nstack_initial=0):
AdaptBlockInfo(insts=((858, {}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={928: ()})
2023-08-01 10:03:59,655 [DEBUG] block_infos State(pc_initial=860 nstack_initial=0):
AdaptBlockInfo(insts=((860, {'res': '$R860.0'}), (862, {'res': '$j862.1'}), (864, {'index': '$j862.1', 'target': '$R860.0', 'res': '$864binary_subscr.2'}), (866, {}), (868, {}), (870, {}), (872, {}), (874, {'res': '$R874.3'}), (876, {'res': '$i876.4'}), (878, {'index': '$i876.4', 'target': '$R874.3', 'res': '$878binary_subscr.5'}), (880, {}), (882, {}), (884, {}), (886, {}), (890, {'res': '$R890.6'}), (892, {'res': '$i892.7'}), (894, {'target': '$R890.6', 'index': '$i892.7', 'value': '$864binary_subscr.2'}), (896, {}), (898, {'res': '$R898.8'}), (900, {'res': '$j900.9'}), (902, {'target': '$R898.8', 'index': '$j900.9', 'value': '$878binary_subscr.5'}), (904, {}), (906, {'res': '$i906.10'}), (908, {'res': '$const908.11'}), (910, {'op': '+=', 'lhs': '$i906.10', 'rhs': '$const908.11', 'res': '$binop_iadd910.12'}), (912, {}), (914, {'value': '$binop_iadd910.12'}), (916, {'res': '$j916.13'}), (918, {'res': '$const918.14'}), (920, {'op': '-=', 'lhs': '$j916.13', 'rhs': '$const918.14', 'res': '$binop_isub920.15'}), (922, {}), (924, {'value': '$binop_isub920.15'}), (926, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={554: ()})
2023-08-01 10:03:59,655 [DEBUG] block_infos State(pc_initial=928 nstack_initial=0):
AdaptBlockInfo(insts=((928, {'res': '$R928.0'}), (930, {'res': '$high930.1'}), (932, {'index': '$high930.1', 'target': '$R928.0', 'res': '$932binary_subscr.2'}), (934, {}), (936, {}), (938, {}), (940, {}), (942, {'res': '$R942.3'}), (944, {'res': '$i944.4'}), (946, {'index': '$i944.4', 'target': '$R942.3', 'res': '$946binary_subscr.5'}), (948, {}), (950, {}), (952, {}), (954, {}), (958, {'res': '$R958.6'}), (960, {'res': '$i960.7'}), (962, {'target': '$R958.6', 'index': '$i960.7', 'value': '$932binary_subscr.2'}), (964, {}), (966, {'res': '$R966.8'}), (968, {'res': '$high968.9'}), (970, {'target': '$R966.8', 'index': '$high968.9', 'value': '$946binary_subscr.5'}), (972, {}), (974, {'res': '$i974.10'}), (976, {'retval': '$i974.10', 'castval': '$976return_value.11'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,658 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    R = arg(1, name=R)                       ['R']
    low = arg(2, name=low)                   ['low']
    high = arg(3, name=high)                 ['high']
    $const8.1 = const(int, 0)                ['$const8.1']
    $10compare_op.2 = low >= $const8.1       ['$10compare_op.2', '$const8.1', 'low']
    bool16 = global(bool: <class 'bool'>)    ['bool16']
    $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None) ['$10compare_op.2', '$16pred', 'bool16']
    branch $16pred, 22, 18                   ['$16pred']
label 18:
    $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>) ['$assertion_error18.0']
    raise $assertion_error18.0               ['$assertion_error18.0']
label 22:
    $26compare_op.2 = high > low             ['$26compare_op.2', 'high', 'low']
    bool32 = global(bool: <class 'bool'>)    ['bool32']
    $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None) ['$26compare_op.2', '$32pred', 'bool32']
    branch $32pred, 38, 34                   ['$32pred']
label 34:
    $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>) ['$assertion_error34.0']
    raise $assertion_error34.0               ['$assertion_error34.0']
label 38:
    $binop_add42.2 = low + high              ['$binop_add42.2', 'high', 'low']
    $const46.3 = const(int, 1)               ['$const46.3']
    mid = $binop_add42.2 >> $const46.3       ['$binop_add42.2', '$const46.3', 'mid']
    $56load_deref.6 = freevar(LT: <function lt_floats at 0x170121080>) ['$56load_deref.6']
    $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$60load_deref.8']
    $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$68binary_subscr.12', 'R', 'mid']
    $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.8', '$68binary_subscr.12', '$82call.13', 'A']
    $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$94load_deref.15']
    $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$102binary_subscr.19', 'R', 'low']
    $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$102binary_subscr.19', '$116call.20', '$94load_deref.15', 'A']
    $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None) ['$116call.20', '$130call.21', '$56load_deref.6', '$82call.13']
    bool140 = global(bool: <class 'bool'>)   ['bool140']
    $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None) ['$130call.21', '$140pred', 'bool140']
    branch $140pred, 142, 188                ['$140pred']
label 142:
    $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$146binary_subscr.2', 'R', 'mid']
    $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$160binary_subscr.5', 'R', 'low']
    R[low] = $146binary_subscr.2             ['$146binary_subscr.2', 'R', 'low']
    R[mid] = $160binary_subscr.5             ['$160binary_subscr.5', 'R', 'mid']
    jump 188                                 []
label 188:
    $190load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>) ['$190load_deref.1']
    $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$194load_deref.3']
    $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$202binary_subscr.7', 'R', 'high']
    $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None) ['$194load_deref.3', '$202binary_subscr.7', '$216call.8', 'A']
    $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$228load_deref.10']
    $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$236binary_subscr.14', 'R', 'mid']
    $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None) ['$228load_deref.10', '$236binary_subscr.14', '$250call.15', 'A']
    $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None) ['$190load_deref.1', '$216call.8', '$250call.15', '$264call.16']
    bool274 = global(bool: <class 'bool'>)   ['bool274']
    $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None) ['$264call.16', '$274pred', 'bool274']
    branch $274pred, 276, 322                ['$274pred']
label 276:
    $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$280binary_subscr.2', 'R', 'mid']
    $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$294binary_subscr.5', 'R', 'high']
    R[high] = $280binary_subscr.2            ['$280binary_subscr.2', 'R', 'high']
    R[mid] = $294binary_subscr.5             ['$294binary_subscr.5', 'R', 'mid']
    jump 322                                 []
label 322:
    $324load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>) ['$324load_deref.1']
    $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$328load_deref.3']
    $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$336binary_subscr.7', 'R', 'mid']
    $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None) ['$328load_deref.3', '$336binary_subscr.7', '$350call.8', 'A']
    $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$362load_deref.10']
    $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$370binary_subscr.14', 'R', 'low']
    $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None) ['$362load_deref.10', '$370binary_subscr.14', '$384call.15', 'A']
    $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None) ['$324load_deref.1', '$350call.8', '$384call.15', '$398call.16']
    bool408 = global(bool: <class 'bool'>)   ['bool408']
    $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None) ['$398call.16', '$408pred', 'bool408']
    branch $408pred, 410, 456                ['$408pred']
label 410:
    $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$414binary_subscr.2', 'R', 'mid']
    $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>) ['$428binary_subscr.5', 'R', 'low']
    R[low] = $414binary_subscr.2             ['$414binary_subscr.2', 'R', 'low']
    R[mid] = $428binary_subscr.5             ['$428binary_subscr.5', 'R', 'mid']
    jump 456                                 []
label 456:
    $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$458load_deref.1']
    $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$466binary_subscr.5', 'R', 'mid']
    pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None) ['$458load_deref.1', '$466binary_subscr.5', 'A', 'pivot']
    $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>) ['$496binary_subscr.9', 'R', 'mid']
    $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$510binary_subscr.12', 'R', 'high']
    R[high] = $496binary_subscr.9            ['$496binary_subscr.9', 'R', 'high']
    R[mid] = $510binary_subscr.12            ['$510binary_subscr.12', 'R', 'mid']
    i = low                                  ['i', 'low']
    $const544.19 = const(int, 1)             ['$const544.19']
    j = high - $const544.19                  ['$const544.19', 'high', 'j']
    jump 554                                 []
label 554:
    $558compare_op.2 = i < high              ['$558compare_op.2', 'high', 'i']
    bool564 = global(bool: <class 'bool'>)   ['bool564']
    $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$558compare_op.2', '$564pred', 'bool564']
    branch $564pred, 566, 700                ['$564pred']
label 566:
    $568load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>) ['$568load_deref.1']
    $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$572load_deref.3']
    $580binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$580binary_subscr.7', 'R', 'i']
    $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None) ['$572load_deref.3', '$580binary_subscr.7', '$594call.8', 'A']
    $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None) ['$568load_deref.1', '$594call.8', '$610call.10', 'pivot']
    bool620 = global(bool: <class 'bool'>)   ['bool620']
    $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$610call.10', '$620pred', 'bool620']
    branch $620pred, 622, 700                ['$620pred']
label 622:
    $const624.1 = const(int, 1)              ['$const624.1']
    $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd626.2', '$const624.1', 'i']
    i = $binop_iadd626.2                     ['$binop_iadd626.2', 'i']
    $636compare_op.5 = i < high              ['$636compare_op.5', 'high', 'i']
    bool642 = global(bool: <class 'bool'>)   ['bool642']
    $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$636compare_op.5', '$642pred', 'bool642']
    branch $642pred, 644, 700                ['$642pred']
label 644:
    $646load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>) ['$646load_deref.1']
    $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$650load_deref.3']
    $658binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$658binary_subscr.7', 'R', 'i']
    $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None) ['$650load_deref.3', '$658binary_subscr.7', '$672call.8', 'A']
    $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None) ['$646load_deref.1', '$672call.8', '$688call.10', 'pivot']
    bool698 = global(bool: <class 'bool'>)   ['bool698']
    $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None) ['$688call.10', '$698pred', 'bool698']
    branch $698pred, 622, 700                ['$698pred']
label 700:
    $704compare_op.2 = j >= low              ['$704compare_op.2', 'j', 'low']
    bool710 = global(bool: <class 'bool'>)   ['bool710']
    $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$704compare_op.2', '$710pred', 'bool710']
    branch $710pred, 712, 846                ['$710pred']
label 712:
    $714load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>) ['$714load_deref.1']
    $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$720load_deref.4']
    $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>) ['$728binary_subscr.8', 'R', 'j']
    $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None) ['$720load_deref.4', '$728binary_subscr.8', '$742call.9', 'A']
    $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None) ['$714load_deref.1', '$742call.9', '$756call.10', 'pivot']
    bool766 = global(bool: <class 'bool'>)   ['bool766']
    $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$756call.10', '$766pred', 'bool766']
    branch $766pred, 768, 846                ['$766pred']
label 768:
    $const770.1 = const(int, 1)              ['$const770.1']
    $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined) ['$binop_isub772.2', '$const770.1', 'j']
    j = $binop_isub772.2                     ['$binop_isub772.2', 'j']
    $782compare_op.5 = j >= low              ['$782compare_op.5', 'j', 'low']
    bool788 = global(bool: <class 'bool'>)   ['bool788']
    $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$782compare_op.5', '$788pred', 'bool788']
    branch $788pred, 790, 846                ['$788pred']
label 790:
    $792load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>) ['$792load_deref.1']
    $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>) ['$798load_deref.4']
    $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>) ['$806binary_subscr.8', 'R', 'j']
    $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None) ['$798load_deref.4', '$806binary_subscr.8', '$820call.9', 'A']
    $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None) ['$792load_deref.1', '$820call.9', '$834call.10', 'pivot']
    bool844 = global(bool: <class 'bool'>)   ['bool844']
    $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None) ['$834call.10', '$844pred', 'bool844']
    branch $844pred, 768, 846                ['$844pred']
label 846:
    $850compare_op.2 = i >= j                ['$850compare_op.2', 'i', 'j']
    bool856 = global(bool: <class 'bool'>)   ['bool856']
    $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None) ['$850compare_op.2', '$856pred', 'bool856']
    branch $856pred, 858, 860                ['$856pred']
label 858:
    jump 928                                 []
label 860:
    $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>) ['$864binary_subscr.2', 'R', 'j']
    $878binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$878binary_subscr.5', 'R', 'i']
    R[i] = $864binary_subscr.2               ['$864binary_subscr.2', 'R', 'i']
    R[j] = $878binary_subscr.5               ['$878binary_subscr.5', 'R', 'j']
    $const908.11 = const(int, 1)             ['$const908.11']
    $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined) ['$binop_iadd910.12', '$const908.11', 'i']
    i = $binop_iadd910.12                    ['$binop_iadd910.12', 'i']
    $const918.14 = const(int, 1)             ['$const918.14']
    $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined) ['$binop_isub920.15', '$const918.14', 'j']
    j = $binop_isub920.15                    ['$binop_isub920.15', 'j']
    jump 554                                 []
label 928:
    $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>) ['$932binary_subscr.2', 'R', 'high']
    $946binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>) ['$946binary_subscr.5', 'R', 'i']
    R[i] = $932binary_subscr.2               ['$932binary_subscr.2', 'R', 'i']
    R[high] = $946binary_subscr.5            ['$946binary_subscr.5', 'R', 'high']
    $976return_value.11 = cast(value=i)      ['$976return_value.11', 'i']
    return $976return_value.11               ['$976return_value.11']

2023-08-01 10:03:59,670 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,670 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,670 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,670 [DEBUG] on stmt: R = arg(1, name=R)
2023-08-01 10:03:59,670 [DEBUG] on stmt: low = arg(2, name=low)
2023-08-01 10:03:59,670 [DEBUG] on stmt: high = arg(3, name=high)
2023-08-01 10:03:59,670 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-08-01 10:03:59,670 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-08-01 10:03:59,670 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,670 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,670 [DEBUG] on stmt: branch $16pred, 22, 18
2023-08-01 10:03:59,670 [DEBUG] ==== SSA block analysis pass on 18
2023-08-01 10:03:59,670 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,670 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,670 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,670 [DEBUG] ==== SSA block analysis pass on 22
2023-08-01 10:03:59,670 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,670 [DEBUG] on stmt: $26compare_op.2 = high > low
2023-08-01 10:03:59,670 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,670 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,670 [DEBUG] on stmt: branch $32pred, 38, 34
2023-08-01 10:03:59,670 [DEBUG] ==== SSA block analysis pass on 34
2023-08-01 10:03:59,670 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,670 [DEBUG] on stmt: $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,670 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,670 [DEBUG] ==== SSA block analysis pass on 38
2023-08-01 10:03:59,670 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,670 [DEBUG] on stmt: $binop_add42.2 = low + high
2023-08-01 10:03:59,670 [DEBUG] on stmt: $const46.3 = const(int, 1)
2023-08-01 10:03:59,670 [DEBUG] on stmt: mid = $binop_add42.2 >> $const46.3
2023-08-01 10:03:59,670 [DEBUG] on stmt: $56load_deref.6 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,670 [DEBUG] on stmt: $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,670 [DEBUG] on stmt: $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,670 [DEBUG] on stmt: $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,671 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,671 [DEBUG] on stmt: branch $140pred, 142, 188
2023-08-01 10:03:59,671 [DEBUG] ==== SSA block analysis pass on 142
2023-08-01 10:03:59,671 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,671 [DEBUG] on stmt: $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: R[low] = $146binary_subscr.2
2023-08-01 10:03:59,671 [DEBUG] on stmt: R[mid] = $160binary_subscr.5
2023-08-01 10:03:59,671 [DEBUG] on stmt: jump 188
2023-08-01 10:03:59,671 [DEBUG] ==== SSA block analysis pass on 188
2023-08-01 10:03:59,671 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,671 [DEBUG] on stmt: $190load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,671 [DEBUG] on stmt: bool274 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,671 [DEBUG] on stmt: branch $274pred, 276, 322
2023-08-01 10:03:59,671 [DEBUG] ==== SSA block analysis pass on 276
2023-08-01 10:03:59,671 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,671 [DEBUG] on stmt: $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: R[high] = $280binary_subscr.2
2023-08-01 10:03:59,671 [DEBUG] on stmt: R[mid] = $294binary_subscr.5
2023-08-01 10:03:59,671 [DEBUG] on stmt: jump 322
2023-08-01 10:03:59,671 [DEBUG] ==== SSA block analysis pass on 322
2023-08-01 10:03:59,671 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,671 [DEBUG] on stmt: $324load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,671 [DEBUG] on stmt: $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,672 [DEBUG] on stmt: bool408 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,672 [DEBUG] on stmt: branch $408pred, 410, 456
2023-08-01 10:03:59,672 [DEBUG] ==== SSA block analysis pass on 410
2023-08-01 10:03:59,672 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,672 [DEBUG] on stmt: $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: R[low] = $414binary_subscr.2
2023-08-01 10:03:59,672 [DEBUG] on stmt: R[mid] = $428binary_subscr.5
2023-08-01 10:03:59,672 [DEBUG] on stmt: jump 456
2023-08-01 10:03:59,672 [DEBUG] ==== SSA block analysis pass on 456
2023-08-01 10:03:59,672 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,672 [DEBUG] on stmt: $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: R[high] = $496binary_subscr.9
2023-08-01 10:03:59,672 [DEBUG] on stmt: R[mid] = $510binary_subscr.12
2023-08-01 10:03:59,672 [DEBUG] on stmt: i = low
2023-08-01 10:03:59,672 [DEBUG] on stmt: $const544.19 = const(int, 1)
2023-08-01 10:03:59,672 [DEBUG] on stmt: j = high - $const544.19
2023-08-01 10:03:59,672 [DEBUG] on stmt: jump 554
2023-08-01 10:03:59,672 [DEBUG] ==== SSA block analysis pass on 554
2023-08-01 10:03:59,672 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,672 [DEBUG] on stmt: $558compare_op.2 = i < high
2023-08-01 10:03:59,672 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,672 [DEBUG] on stmt: branch $564pred, 566, 700
2023-08-01 10:03:59,672 [DEBUG] ==== SSA block analysis pass on 566
2023-08-01 10:03:59,672 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,672 [DEBUG] on stmt: $568load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $580binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,672 [DEBUG] on stmt: bool620 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,672 [DEBUG] on stmt: branch $620pred, 622, 700
2023-08-01 10:03:59,672 [DEBUG] ==== SSA block analysis pass on 622
2023-08-01 10:03:59,672 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,672 [DEBUG] on stmt: $const624.1 = const(int, 1)
2023-08-01 10:03:59,672 [DEBUG] on stmt: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,672 [DEBUG] on stmt: i = $binop_iadd626.2
2023-08-01 10:03:59,673 [DEBUG] on stmt: $636compare_op.5 = i < high
2023-08-01 10:03:59,673 [DEBUG] on stmt: bool642 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,673 [DEBUG] on stmt: branch $642pred, 644, 700
2023-08-01 10:03:59,673 [DEBUG] ==== SSA block analysis pass on 644
2023-08-01 10:03:59,673 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,673 [DEBUG] on stmt: $646load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $658binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,673 [DEBUG] on stmt: bool698 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,673 [DEBUG] on stmt: branch $698pred, 622, 700
2023-08-01 10:03:59,673 [DEBUG] ==== SSA block analysis pass on 700
2023-08-01 10:03:59,673 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,673 [DEBUG] on stmt: $704compare_op.2 = j >= low
2023-08-01 10:03:59,673 [DEBUG] on stmt: bool710 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,673 [DEBUG] on stmt: branch $710pred, 712, 846
2023-08-01 10:03:59,673 [DEBUG] ==== SSA block analysis pass on 712
2023-08-01 10:03:59,673 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,673 [DEBUG] on stmt: $714load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,673 [DEBUG] on stmt: bool766 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,673 [DEBUG] on stmt: branch $766pred, 768, 846
2023-08-01 10:03:59,673 [DEBUG] ==== SSA block analysis pass on 768
2023-08-01 10:03:59,673 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,673 [DEBUG] on stmt: $const770.1 = const(int, 1)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,673 [DEBUG] on stmt: j = $binop_isub772.2
2023-08-01 10:03:59,673 [DEBUG] on stmt: $782compare_op.5 = j >= low
2023-08-01 10:03:59,673 [DEBUG] on stmt: bool788 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,673 [DEBUG] on stmt: branch $788pred, 790, 846
2023-08-01 10:03:59,673 [DEBUG] ==== SSA block analysis pass on 790
2023-08-01 10:03:59,673 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,673 [DEBUG] on stmt: $792load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,673 [DEBUG] on stmt: $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,674 [DEBUG] on stmt: $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,674 [DEBUG] on stmt: $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,674 [DEBUG] on stmt: bool844 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,674 [DEBUG] on stmt: $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,674 [DEBUG] on stmt: branch $844pred, 768, 846
2023-08-01 10:03:59,674 [DEBUG] ==== SSA block analysis pass on 846
2023-08-01 10:03:59,674 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,674 [DEBUG] on stmt: $850compare_op.2 = i >= j
2023-08-01 10:03:59,674 [DEBUG] on stmt: bool856 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,674 [DEBUG] on stmt: $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,674 [DEBUG] on stmt: branch $856pred, 858, 860
2023-08-01 10:03:59,674 [DEBUG] ==== SSA block analysis pass on 858
2023-08-01 10:03:59,674 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,674 [DEBUG] on stmt: jump 928
2023-08-01 10:03:59,674 [DEBUG] ==== SSA block analysis pass on 860
2023-08-01 10:03:59,674 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,674 [DEBUG] on stmt: $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,674 [DEBUG] on stmt: $878binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,674 [DEBUG] on stmt: R[i] = $864binary_subscr.2
2023-08-01 10:03:59,674 [DEBUG] on stmt: R[j] = $878binary_subscr.5
2023-08-01 10:03:59,674 [DEBUG] on stmt: $const908.11 = const(int, 1)
2023-08-01 10:03:59,674 [DEBUG] on stmt: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,674 [DEBUG] on stmt: i = $binop_iadd910.12
2023-08-01 10:03:59,674 [DEBUG] on stmt: $const918.14 = const(int, 1)
2023-08-01 10:03:59,674 [DEBUG] on stmt: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,674 [DEBUG] on stmt: j = $binop_isub920.15
2023-08-01 10:03:59,674 [DEBUG] on stmt: jump 554
2023-08-01 10:03:59,674 [DEBUG] ==== SSA block analysis pass on 928
2023-08-01 10:03:59,674 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x292679890>
2023-08-01 10:03:59,674 [DEBUG] on stmt: $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,674 [DEBUG] on stmt: $946binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,674 [DEBUG] on stmt: R[i] = $932binary_subscr.2
2023-08-01 10:03:59,674 [DEBUG] on stmt: R[high] = $946binary_subscr.5
2023-08-01 10:03:59,674 [DEBUG] on stmt: $976return_value.11 = cast(value=i)
2023-08-01 10:03:59,674 [DEBUG] on stmt: return $976return_value.11
2023-08-01 10:03:59,676 [DEBUG] defs defaultdict(<class 'list'>,
            {'$102binary_subscr.19': [<numba.core.ir.Assign object at 0x29266e890>],
             '$10compare_op.2': [<numba.core.ir.Assign object at 0x29265c190>],
             '$116call.20': [<numba.core.ir.Assign object at 0x29266ea10>],
             '$130call.21': [<numba.core.ir.Assign object at 0x29266ec90>],
             '$140pred': [<numba.core.ir.Assign object at 0x29266f090>],
             '$146binary_subscr.2': [<numba.core.ir.Assign object at 0x29266f490>],
             '$160binary_subscr.5': [<numba.core.ir.Assign object at 0x29266fa10>],
             '$16pred': [<numba.core.ir.Assign object at 0x2925431d0>],
             '$190load_deref.1': [<numba.core.ir.Assign object at 0x292674350>],
             '$194load_deref.3': [<numba.core.ir.Assign object at 0x292674510>],
             '$202binary_subscr.7': [<numba.core.ir.Assign object at 0x292674c50>],
             '$216call.8': [<numba.core.ir.Assign object at 0x292674e50>],
             '$228load_deref.10': [<numba.core.ir.Assign object at 0x292675050>],
             '$236binary_subscr.14': [<numba.core.ir.Assign object at 0x292675650>],
             '$250call.15': [<numba.core.ir.Assign object at 0x2926758d0>],
             '$264call.16': [<numba.core.ir.Assign object at 0x292675b90>],
             '$26compare_op.2': [<numba.core.ir.Assign object at 0x29264bfd0>],
             '$274pred': [<numba.core.ir.Assign object at 0x292675fd0>],
             '$280binary_subscr.2': [<numba.core.ir.Assign object at 0x292676410>],
             '$294binary_subscr.5': [<numba.core.ir.Assign object at 0x292676910>],
             '$324load_deref.1': [<numba.core.ir.Assign object at 0x292677310>],
             '$328load_deref.3': [<numba.core.ir.Assign object at 0x292677450>],
             '$32pred': [<numba.core.ir.Assign object at 0x292649350>],
             '$336binary_subscr.7': [<numba.core.ir.Assign object at 0x292677b90>],
             '$350call.8': [<numba.core.ir.Assign object at 0x292677dd0>],
             '$362load_deref.10': [<numba.core.ir.Assign object at 0x292677f50>],
             '$370binary_subscr.14': [<numba.core.ir.Assign object at 0x2926785d0>],
             '$384call.15': [<numba.core.ir.Assign object at 0x292678990>],
             '$398call.16': [<numba.core.ir.Assign object at 0x292678c90>],
             '$408pred': [<numba.core.ir.Assign object at 0x292679110>],
             '$414binary_subscr.2': [<numba.core.ir.Assign object at 0x2926795d0>],
             '$428binary_subscr.5': [<numba.core.ir.Assign object at 0x292679bd0>],
             '$458load_deref.1': [<numba.core.ir.Assign object at 0x29267a550>],
             '$466binary_subscr.5': [<numba.core.ir.Assign object at 0x29267ac10>],
             '$496binary_subscr.9': [<numba.core.ir.Assign object at 0x29267b4d0>],
             '$510binary_subscr.12': [<numba.core.ir.Assign object at 0x29267bad0>],
             '$558compare_op.2': [<numba.core.ir.Assign object at 0x29267cf90>],
             '$564pred': [<numba.core.ir.Assign object at 0x29267d390>],
             '$568load_deref.1': [<numba.core.ir.Assign object at 0x29267d550>],
             '$56load_deref.6': [<numba.core.ir.Assign object at 0x29266d650>],
             '$572load_deref.3': [<numba.core.ir.Assign object at 0x29267d710>],
             '$580binary_subscr.7': [<numba.core.ir.Assign object at 0x29267ddd0>],
             '$594call.8': [<numba.core.ir.Assign object at 0x29267e010>],
             '$60load_deref.8': [<numba.core.ir.Assign object at 0x29266d810>],
             '$610call.10': [<numba.core.ir.Assign object at 0x29267e410>],
             '$620pred': [<numba.core.ir.Assign object at 0x29267e7d0>],
             '$636compare_op.5': [<numba.core.ir.Assign object at 0x29267f350>],
             '$642pred': [<numba.core.ir.Assign object at 0x29267f750>],
             '$646load_deref.1': [<numba.core.ir.Assign object at 0x29267f910>],
             '$650load_deref.3': [<numba.core.ir.Assign object at 0x29267fad0>],
             '$658binary_subscr.7': [<numba.core.ir.Assign object at 0x292684210>],
             '$672call.8': [<numba.core.ir.Assign object at 0x292684450>],
             '$688call.10': [<numba.core.ir.Assign object at 0x292684850>],
             '$68binary_subscr.12': [<numba.core.ir.Assign object at 0x29266de10>],
             '$698pred': [<numba.core.ir.Assign object at 0x292684c10>],
             '$704compare_op.2': [<numba.core.ir.Assign object at 0x292685150>],
             '$710pred': [<numba.core.ir.Assign object at 0x292685510>],
             '$714load_deref.1': [<numba.core.ir.Assign object at 0x292685750>],
             '$720load_deref.4': [<numba.core.ir.Assign object at 0x292685a50>],
             '$728binary_subscr.8': [<numba.core.ir.Assign object at 0x292686110>],
             '$742call.9': [<numba.core.ir.Assign object at 0x292686310>],
             '$756call.10': [<numba.core.ir.Assign object at 0x292686590>],
             '$766pred': [<numba.core.ir.Assign object at 0x292686910>],
             '$782compare_op.5': [<numba.core.ir.Assign object at 0x292687490>],
             '$788pred': [<numba.core.ir.Assign object at 0x292687850>],
             '$792load_deref.1': [<numba.core.ir.Assign object at 0x292687a10>],
             '$798load_deref.4': [<numba.core.ir.Assign object at 0x292687d10>],
             '$806binary_subscr.8': [<numba.core.ir.Assign object at 0x29268c410>],
             '$820call.9': [<numba.core.ir.Assign object at 0x29268c610>],
             '$82call.13': [<numba.core.ir.Assign object at 0x29266e050>],
             '$834call.10': [<numba.core.ir.Assign object at 0x29268c850>],
             '$844pred': [<numba.core.ir.Assign object at 0x29268cbd0>],
             '$850compare_op.2': [<numba.core.ir.Assign object at 0x29268d110>],
             '$856pred': [<numba.core.ir.Assign object at 0x29268d550>],
             '$864binary_subscr.2': [<numba.core.ir.Assign object at 0x29268db90>],
             '$878binary_subscr.5': [<numba.core.ir.Assign object at 0x29268e110>],
             '$932binary_subscr.2': [<numba.core.ir.Assign object at 0x29268f910>],
             '$946binary_subscr.5': [<numba.core.ir.Assign object at 0x29268fe90>],
             '$94load_deref.15': [<numba.core.ir.Assign object at 0x29266e2d0>],
             '$976return_value.11': [<numba.core.ir.Assign object at 0x292690a10>],
             '$assertion_error18.0': [<numba.core.ir.Assign object at 0x29265b0d0>],
             '$assertion_error34.0': [<numba.core.ir.Assign object at 0x29264b410>],
             '$binop_add42.2': [<numba.core.ir.Assign object at 0x29266cf50>],
             '$binop_iadd626.2': [<numba.core.ir.Assign object at 0x29267ed10>],
             '$binop_iadd910.12': [<numba.core.ir.Assign object at 0x29268ed90>],
             '$binop_isub772.2': [<numba.core.ir.Assign object at 0x292686e10>],
             '$binop_isub920.15': [<numba.core.ir.Assign object at 0x29268f3d0>],
             '$const46.3': [<numba.core.ir.Assign object at 0x29266d150>],
             '$const544.19': [<numba.core.ir.Assign object at 0x29267c950>],
             '$const624.1': [<numba.core.ir.Assign object at 0x29267eb90>],
             '$const770.1': [<numba.core.ir.Assign object at 0x292686c50>],
             '$const8.1': [<numba.core.ir.Assign object at 0x29265e790>],
             '$const908.11': [<numba.core.ir.Assign object at 0x29268eb90>],
             '$const918.14': [<numba.core.ir.Assign object at 0x29268f1d0>],
             'A': [<numba.core.ir.Assign object at 0x29265f710>],
             'R': [<numba.core.ir.Assign object at 0x29265f6d0>],
             'bool140': [<numba.core.ir.Assign object at 0x29266ef10>],
             'bool16': [<numba.core.ir.Assign object at 0x292542b10>],
             'bool274': [<numba.core.ir.Assign object at 0x292675e10>],
             'bool32': [<numba.core.ir.Assign object at 0x29264b490>],
             'bool408': [<numba.core.ir.Assign object at 0x292678f50>],
             'bool564': [<numba.core.ir.Assign object at 0x29267d1d0>],
             'bool620': [<numba.core.ir.Assign object at 0x29267e610>],
             'bool642': [<numba.core.ir.Assign object at 0x29267f590>],
             'bool698': [<numba.core.ir.Assign object at 0x292684a50>],
             'bool710': [<numba.core.ir.Assign object at 0x292685350>],
             'bool766': [<numba.core.ir.Assign object at 0x292686750>],
             'bool788': [<numba.core.ir.Assign object at 0x292687690>],
             'bool844': [<numba.core.ir.Assign object at 0x29268ca10>],
             'bool856': [<numba.core.ir.Assign object at 0x29268d390>],
             'high': [<numba.core.ir.Assign object at 0x29265e510>],
             'i': [<numba.core.ir.Assign object at 0x29267c650>,
                   <numba.core.ir.Assign object at 0x29267ed90>,
                   <numba.core.ir.Assign object at 0x29268ee10>],
             'j': [<numba.core.ir.Assign object at 0x29267cb90>,
                   <numba.core.ir.Assign object at 0x292686e90>,
                   <numba.core.ir.Assign object at 0x29268f450>],
             'low': [<numba.core.ir.Assign object at 0x29265f750>],
             'mid': [<numba.core.ir.Assign object at 0x29266d310>],
             'pivot': [<numba.core.ir.Assign object at 0x29267aed0>]})
2023-08-01 10:03:59,676 [DEBUG] SSA violators {'i', 'j'}
2023-08-01 10:03:59,676 [DEBUG] Fix SSA violator on var i
2023-08-01 10:03:59,676 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,676 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,676 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,676 [DEBUG] on stmt: R = arg(1, name=R)
2023-08-01 10:03:59,676 [DEBUG] on stmt: low = arg(2, name=low)
2023-08-01 10:03:59,677 [DEBUG] on stmt: high = arg(3, name=high)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-08-01 10:03:59,677 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,677 [DEBUG] on stmt: branch $16pred, 22, 18
2023-08-01 10:03:59,677 [DEBUG] ==== SSA block rewrite pass on 18
2023-08-01 10:03:59,677 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,677 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,677 [DEBUG] ==== SSA block rewrite pass on 22
2023-08-01 10:03:59,677 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,677 [DEBUG] on stmt: $26compare_op.2 = high > low
2023-08-01 10:03:59,677 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,677 [DEBUG] on stmt: branch $32pred, 38, 34
2023-08-01 10:03:59,677 [DEBUG] ==== SSA block rewrite pass on 34
2023-08-01 10:03:59,677 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,677 [DEBUG] on stmt: $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,677 [DEBUG] ==== SSA block rewrite pass on 38
2023-08-01 10:03:59,677 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,677 [DEBUG] on stmt: $binop_add42.2 = low + high
2023-08-01 10:03:59,677 [DEBUG] on stmt: $const46.3 = const(int, 1)
2023-08-01 10:03:59,677 [DEBUG] on stmt: mid = $binop_add42.2 >> $const46.3
2023-08-01 10:03:59,677 [DEBUG] on stmt: $56load_deref.6 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,677 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,677 [DEBUG] on stmt: branch $140pred, 142, 188
2023-08-01 10:03:59,677 [DEBUG] ==== SSA block rewrite pass on 142
2023-08-01 10:03:59,677 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,677 [DEBUG] on stmt: $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,677 [DEBUG] on stmt: R[low] = $146binary_subscr.2
2023-08-01 10:03:59,677 [DEBUG] on stmt: R[mid] = $160binary_subscr.5
2023-08-01 10:03:59,677 [DEBUG] on stmt: jump 188
2023-08-01 10:03:59,678 [DEBUG] ==== SSA block rewrite pass on 188
2023-08-01 10:03:59,678 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,678 [DEBUG] on stmt: $190load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,678 [DEBUG] on stmt: bool274 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,678 [DEBUG] on stmt: branch $274pred, 276, 322
2023-08-01 10:03:59,678 [DEBUG] ==== SSA block rewrite pass on 276
2023-08-01 10:03:59,678 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,678 [DEBUG] on stmt: $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: R[high] = $280binary_subscr.2
2023-08-01 10:03:59,678 [DEBUG] on stmt: R[mid] = $294binary_subscr.5
2023-08-01 10:03:59,678 [DEBUG] on stmt: jump 322
2023-08-01 10:03:59,678 [DEBUG] ==== SSA block rewrite pass on 322
2023-08-01 10:03:59,678 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,678 [DEBUG] on stmt: $324load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,678 [DEBUG] on stmt: bool408 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,678 [DEBUG] on stmt: branch $408pred, 410, 456
2023-08-01 10:03:59,678 [DEBUG] ==== SSA block rewrite pass on 410
2023-08-01 10:03:59,678 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,678 [DEBUG] on stmt: $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,678 [DEBUG] on stmt: R[low] = $414binary_subscr.2
2023-08-01 10:03:59,678 [DEBUG] on stmt: R[mid] = $428binary_subscr.5
2023-08-01 10:03:59,678 [DEBUG] on stmt: jump 456
2023-08-01 10:03:59,678 [DEBUG] ==== SSA block rewrite pass on 456
2023-08-01 10:03:59,678 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,679 [DEBUG] on stmt: $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: R[high] = $496binary_subscr.9
2023-08-01 10:03:59,679 [DEBUG] on stmt: R[mid] = $510binary_subscr.12
2023-08-01 10:03:59,679 [DEBUG] on stmt: i = low
2023-08-01 10:03:59,679 [DEBUG] first assign: i
2023-08-01 10:03:59,679 [DEBUG] replaced with: i = low
2023-08-01 10:03:59,679 [DEBUG] on stmt: $const544.19 = const(int, 1)
2023-08-01 10:03:59,679 [DEBUG] on stmt: j = high - $const544.19
2023-08-01 10:03:59,679 [DEBUG] on stmt: jump 554
2023-08-01 10:03:59,679 [DEBUG] ==== SSA block rewrite pass on 554
2023-08-01 10:03:59,679 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,679 [DEBUG] on stmt: $558compare_op.2 = i < high
2023-08-01 10:03:59,679 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,679 [DEBUG] on stmt: branch $564pred, 566, 700
2023-08-01 10:03:59,679 [DEBUG] ==== SSA block rewrite pass on 566
2023-08-01 10:03:59,679 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,679 [DEBUG] on stmt: $568load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $580binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,679 [DEBUG] on stmt: bool620 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,679 [DEBUG] on stmt: branch $620pred, 622, 700
2023-08-01 10:03:59,679 [DEBUG] ==== SSA block rewrite pass on 622
2023-08-01 10:03:59,679 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,679 [DEBUG] on stmt: $const624.1 = const(int, 1)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,679 [DEBUG] on stmt: i = $binop_iadd626.2
2023-08-01 10:03:59,679 [DEBUG] replaced with: i.1 = $binop_iadd626.2
2023-08-01 10:03:59,679 [DEBUG] on stmt: $636compare_op.5 = i < high
2023-08-01 10:03:59,679 [DEBUG] on stmt: bool642 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,679 [DEBUG] on stmt: branch $642pred, 644, 700
2023-08-01 10:03:59,679 [DEBUG] ==== SSA block rewrite pass on 644
2023-08-01 10:03:59,679 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,679 [DEBUG] on stmt: $646load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,679 [DEBUG] on stmt: $658binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: bool698 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: branch $698pred, 622, 700
2023-08-01 10:03:59,680 [DEBUG] ==== SSA block rewrite pass on 700
2023-08-01 10:03:59,680 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,680 [DEBUG] on stmt: $704compare_op.2 = j >= low
2023-08-01 10:03:59,680 [DEBUG] on stmt: bool710 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: branch $710pred, 712, 846
2023-08-01 10:03:59,680 [DEBUG] ==== SSA block rewrite pass on 712
2023-08-01 10:03:59,680 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,680 [DEBUG] on stmt: $714load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: bool766 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: branch $766pred, 768, 846
2023-08-01 10:03:59,680 [DEBUG] ==== SSA block rewrite pass on 768
2023-08-01 10:03:59,680 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,680 [DEBUG] on stmt: $const770.1 = const(int, 1)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,680 [DEBUG] on stmt: j = $binop_isub772.2
2023-08-01 10:03:59,680 [DEBUG] on stmt: $782compare_op.5 = j >= low
2023-08-01 10:03:59,680 [DEBUG] on stmt: bool788 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: branch $788pred, 790, 846
2023-08-01 10:03:59,680 [DEBUG] ==== SSA block rewrite pass on 790
2023-08-01 10:03:59,680 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,680 [DEBUG] on stmt: $792load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: bool844 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,680 [DEBUG] on stmt: $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,680 [DEBUG] on stmt: branch $844pred, 768, 846
2023-08-01 10:03:59,680 [DEBUG] ==== SSA block rewrite pass on 846
2023-08-01 10:03:59,680 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,680 [DEBUG] on stmt: $850compare_op.2 = i >= j
2023-08-01 10:03:59,680 [DEBUG] on stmt: bool856 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,681 [DEBUG] on stmt: $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,681 [DEBUG] on stmt: branch $856pred, 858, 860
2023-08-01 10:03:59,681 [DEBUG] ==== SSA block rewrite pass on 858
2023-08-01 10:03:59,681 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,681 [DEBUG] on stmt: jump 928
2023-08-01 10:03:59,681 [DEBUG] ==== SSA block rewrite pass on 860
2023-08-01 10:03:59,681 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,681 [DEBUG] on stmt: $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,681 [DEBUG] on stmt: $878binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,681 [DEBUG] on stmt: R[i] = $864binary_subscr.2
2023-08-01 10:03:59,681 [DEBUG] on stmt: R[j] = $878binary_subscr.5
2023-08-01 10:03:59,681 [DEBUG] on stmt: $const908.11 = const(int, 1)
2023-08-01 10:03:59,681 [DEBUG] on stmt: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,681 [DEBUG] on stmt: i = $binop_iadd910.12
2023-08-01 10:03:59,681 [DEBUG] replaced with: i.2 = $binop_iadd910.12
2023-08-01 10:03:59,681 [DEBUG] on stmt: $const918.14 = const(int, 1)
2023-08-01 10:03:59,681 [DEBUG] on stmt: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,681 [DEBUG] on stmt: j = $binop_isub920.15
2023-08-01 10:03:59,681 [DEBUG] on stmt: jump 554
2023-08-01 10:03:59,681 [DEBUG] ==== SSA block rewrite pass on 928
2023-08-01 10:03:59,681 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292666bd0>
2023-08-01 10:03:59,681 [DEBUG] on stmt: $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,681 [DEBUG] on stmt: $946binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,681 [DEBUG] on stmt: R[i] = $932binary_subscr.2
2023-08-01 10:03:59,681 [DEBUG] on stmt: R[high] = $946binary_subscr.5
2023-08-01 10:03:59,681 [DEBUG] on stmt: $976return_value.11 = cast(value=i)
2023-08-01 10:03:59,681 [DEBUG] on stmt: return $976return_value.11
2023-08-01 10:03:59,681 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {456: [<numba.core.ir.Assign object at 0x292667dd0>],
             622: [<numba.core.ir.Assign object at 0x2926673d0>],
             860: [<numba.core.ir.Assign object at 0x292666ad0>]})
2023-08-01 10:03:59,681 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,681 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,681 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,681 [DEBUG] on stmt: R = arg(1, name=R)
2023-08-01 10:03:59,681 [DEBUG] on stmt: low = arg(2, name=low)
2023-08-01 10:03:59,681 [DEBUG] on stmt: high = arg(3, name=high)
2023-08-01 10:03:59,681 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-08-01 10:03:59,681 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-08-01 10:03:59,681 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,681 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,681 [DEBUG] on stmt: branch $16pred, 22, 18
2023-08-01 10:03:59,681 [DEBUG] ==== SSA block rewrite pass on 18
2023-08-01 10:03:59,681 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,681 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,682 [DEBUG] ==== SSA block rewrite pass on 22
2023-08-01 10:03:59,682 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,682 [DEBUG] on stmt: $26compare_op.2 = high > low
2023-08-01 10:03:59,682 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,682 [DEBUG] on stmt: branch $32pred, 38, 34
2023-08-01 10:03:59,682 [DEBUG] ==== SSA block rewrite pass on 34
2023-08-01 10:03:59,682 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,682 [DEBUG] on stmt: $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,682 [DEBUG] ==== SSA block rewrite pass on 38
2023-08-01 10:03:59,682 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,682 [DEBUG] on stmt: $binop_add42.2 = low + high
2023-08-01 10:03:59,682 [DEBUG] on stmt: $const46.3 = const(int, 1)
2023-08-01 10:03:59,682 [DEBUG] on stmt: mid = $binop_add42.2 >> $const46.3
2023-08-01 10:03:59,682 [DEBUG] on stmt: $56load_deref.6 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,682 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,682 [DEBUG] on stmt: branch $140pred, 142, 188
2023-08-01 10:03:59,682 [DEBUG] ==== SSA block rewrite pass on 142
2023-08-01 10:03:59,682 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,682 [DEBUG] on stmt: $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: R[low] = $146binary_subscr.2
2023-08-01 10:03:59,682 [DEBUG] on stmt: R[mid] = $160binary_subscr.5
2023-08-01 10:03:59,682 [DEBUG] on stmt: jump 188
2023-08-01 10:03:59,682 [DEBUG] ==== SSA block rewrite pass on 188
2023-08-01 10:03:59,682 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,682 [DEBUG] on stmt: $190load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,682 [DEBUG] on stmt: $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,683 [DEBUG] on stmt: bool274 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,683 [DEBUG] on stmt: branch $274pred, 276, 322
2023-08-01 10:03:59,683 [DEBUG] ==== SSA block rewrite pass on 276
2023-08-01 10:03:59,683 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,683 [DEBUG] on stmt: $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: R[high] = $280binary_subscr.2
2023-08-01 10:03:59,683 [DEBUG] on stmt: R[mid] = $294binary_subscr.5
2023-08-01 10:03:59,683 [DEBUG] on stmt: jump 322
2023-08-01 10:03:59,683 [DEBUG] ==== SSA block rewrite pass on 322
2023-08-01 10:03:59,683 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,683 [DEBUG] on stmt: $324load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,683 [DEBUG] on stmt: bool408 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,683 [DEBUG] on stmt: branch $408pred, 410, 456
2023-08-01 10:03:59,683 [DEBUG] ==== SSA block rewrite pass on 410
2023-08-01 10:03:59,683 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,683 [DEBUG] on stmt: $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: R[low] = $414binary_subscr.2
2023-08-01 10:03:59,683 [DEBUG] on stmt: R[mid] = $428binary_subscr.5
2023-08-01 10:03:59,683 [DEBUG] on stmt: jump 456
2023-08-01 10:03:59,683 [DEBUG] ==== SSA block rewrite pass on 456
2023-08-01 10:03:59,683 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,683 [DEBUG] on stmt: $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,683 [DEBUG] on stmt: $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,684 [DEBUG] on stmt: R[high] = $496binary_subscr.9
2023-08-01 10:03:59,684 [DEBUG] on stmt: R[mid] = $510binary_subscr.12
2023-08-01 10:03:59,684 [DEBUG] on stmt: i = low
2023-08-01 10:03:59,684 [DEBUG] on stmt: $const544.19 = const(int, 1)
2023-08-01 10:03:59,684 [DEBUG] on stmt: j = high - $const544.19
2023-08-01 10:03:59,684 [DEBUG] on stmt: jump 554
2023-08-01 10:03:59,684 [DEBUG] ==== SSA block rewrite pass on 554
2023-08-01 10:03:59,684 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,684 [DEBUG] on stmt: $558compare_op.2 = i < high
2023-08-01 10:03:59,684 [DEBUG] find_def var='i' stmt=$558compare_op.2 = i < high
2023-08-01 10:03:59,684 [DEBUG] find_def_from_top label 554
2023-08-01 10:03:59,684 [DEBUG] insert phi node i.3 = phi(incoming_values=[], incoming_blocks=[]) at 554
2023-08-01 10:03:59,684 [DEBUG] find_def_from_bottom label 456
2023-08-01 10:03:59,684 [DEBUG] incoming_def i = low
2023-08-01 10:03:59,684 [DEBUG] find_def_from_bottom label 860
2023-08-01 10:03:59,684 [DEBUG] incoming_def i.2 = $binop_iadd910.12
2023-08-01 10:03:59,684 [DEBUG] replaced with: $558compare_op.2 = i.3 < high
2023-08-01 10:03:59,684 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,684 [DEBUG] on stmt: $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,684 [DEBUG] on stmt: branch $564pred, 566, 700
2023-08-01 10:03:59,684 [DEBUG] ==== SSA block rewrite pass on 566
2023-08-01 10:03:59,684 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,684 [DEBUG] on stmt: $568load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,684 [DEBUG] on stmt: $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,684 [DEBUG] on stmt: $580binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,684 [DEBUG] find_def var='i' stmt=$580binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,684 [DEBUG] find_def_from_top label 566
2023-08-01 10:03:59,684 [DEBUG] idom 554 from label 566
2023-08-01 10:03:59,684 [DEBUG] find_def_from_bottom label 554
2023-08-01 10:03:59,684 [DEBUG] replaced with: $580binary_subscr.7 = getitem(value=R, index=i.3, fn=<built-in function getitem>)
2023-08-01 10:03:59,684 [DEBUG] on stmt: $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,684 [DEBUG] on stmt: $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,684 [DEBUG] on stmt: bool620 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,684 [DEBUG] on stmt: $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,684 [DEBUG] on stmt: branch $620pred, 622, 700
2023-08-01 10:03:59,684 [DEBUG] ==== SSA block rewrite pass on 622
2023-08-01 10:03:59,684 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,684 [DEBUG] on stmt: $const624.1 = const(int, 1)
2023-08-01 10:03:59,684 [DEBUG] on stmt: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,684 [DEBUG] find_def var='i' stmt=$binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,684 [DEBUG] find_def_from_top label 622
2023-08-01 10:03:59,684 [DEBUG] insert phi node i.4 = phi(incoming_values=[], incoming_blocks=[]) at 622
2023-08-01 10:03:59,684 [DEBUG] find_def_from_bottom label 644
2023-08-01 10:03:59,684 [DEBUG] find_def_from_top label 644
2023-08-01 10:03:59,684 [DEBUG] idom 622 from label 644
2023-08-01 10:03:59,684 [DEBUG] find_def_from_bottom label 622
2023-08-01 10:03:59,684 [DEBUG] incoming_def i.1 = $binop_iadd626.2
2023-08-01 10:03:59,684 [DEBUG] find_def_from_bottom label 566
2023-08-01 10:03:59,684 [DEBUG] find_def_from_top label 566
2023-08-01 10:03:59,684 [DEBUG] idom 554 from label 566
2023-08-01 10:03:59,684 [DEBUG] find_def_from_bottom label 554
2023-08-01 10:03:59,684 [DEBUG] incoming_def i.3 = phi(incoming_values=[Var(i, quicksort.py:112), Var(i.2, quicksort.py:122)], incoming_blocks=[456, 860])
2023-08-01 10:03:59,685 [DEBUG] replaced with: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.4, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,685 [DEBUG] on stmt: i.1 = $binop_iadd626.2
2023-08-01 10:03:59,685 [DEBUG] on stmt: $636compare_op.5 = i < high
2023-08-01 10:03:59,685 [DEBUG] find_def var='i' stmt=$636compare_op.5 = i < high
2023-08-01 10:03:59,685 [DEBUG] replaced with: $636compare_op.5 = i.1 < high
2023-08-01 10:03:59,685 [DEBUG] on stmt: bool642 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,685 [DEBUG] on stmt: branch $642pred, 644, 700
2023-08-01 10:03:59,685 [DEBUG] ==== SSA block rewrite pass on 644
2023-08-01 10:03:59,685 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,685 [DEBUG] on stmt: $646load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $658binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,685 [DEBUG] find_def var='i' stmt=$658binary_subscr.7 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,685 [DEBUG] find_def_from_top label 644
2023-08-01 10:03:59,685 [DEBUG] idom 622 from label 644
2023-08-01 10:03:59,685 [DEBUG] find_def_from_bottom label 622
2023-08-01 10:03:59,685 [DEBUG] replaced with: $658binary_subscr.7 = getitem(value=R, index=i.1, fn=<built-in function getitem>)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,685 [DEBUG] on stmt: bool698 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,685 [DEBUG] on stmt: branch $698pred, 622, 700
2023-08-01 10:03:59,685 [DEBUG] ==== SSA block rewrite pass on 700
2023-08-01 10:03:59,685 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,685 [DEBUG] on stmt: $704compare_op.2 = j >= low
2023-08-01 10:03:59,685 [DEBUG] on stmt: bool710 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,685 [DEBUG] on stmt: branch $710pred, 712, 846
2023-08-01 10:03:59,685 [DEBUG] ==== SSA block rewrite pass on 712
2023-08-01 10:03:59,685 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,685 [DEBUG] on stmt: $714load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,685 [DEBUG] on stmt: bool766 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,685 [DEBUG] on stmt: $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,685 [DEBUG] on stmt: branch $766pred, 768, 846
2023-08-01 10:03:59,685 [DEBUG] ==== SSA block rewrite pass on 768
2023-08-01 10:03:59,685 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,686 [DEBUG] on stmt: $const770.1 = const(int, 1)
2023-08-01 10:03:59,686 [DEBUG] on stmt: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,686 [DEBUG] on stmt: j = $binop_isub772.2
2023-08-01 10:03:59,686 [DEBUG] on stmt: $782compare_op.5 = j >= low
2023-08-01 10:03:59,686 [DEBUG] on stmt: bool788 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,686 [DEBUG] on stmt: $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,686 [DEBUG] on stmt: branch $788pred, 790, 846
2023-08-01 10:03:59,686 [DEBUG] ==== SSA block rewrite pass on 790
2023-08-01 10:03:59,686 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,686 [DEBUG] on stmt: $792load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,686 [DEBUG] on stmt: $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,686 [DEBUG] on stmt: $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,686 [DEBUG] on stmt: $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,686 [DEBUG] on stmt: $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,686 [DEBUG] on stmt: bool844 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,686 [DEBUG] on stmt: $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,686 [DEBUG] on stmt: branch $844pred, 768, 846
2023-08-01 10:03:59,686 [DEBUG] ==== SSA block rewrite pass on 846
2023-08-01 10:03:59,686 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,686 [DEBUG] on stmt: $850compare_op.2 = i >= j
2023-08-01 10:03:59,686 [DEBUG] find_def var='i' stmt=$850compare_op.2 = i >= j
2023-08-01 10:03:59,686 [DEBUG] find_def_from_top label 846
2023-08-01 10:03:59,686 [DEBUG] idom 700 from label 846
2023-08-01 10:03:59,686 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,686 [DEBUG] find_def_from_top label 700
2023-08-01 10:03:59,686 [DEBUG] insert phi node i.5 = phi(incoming_values=[], incoming_blocks=[]) at 700
2023-08-01 10:03:59,686 [DEBUG] find_def_from_bottom label 554
2023-08-01 10:03:59,686 [DEBUG] incoming_def i.3 = phi(incoming_values=[Var(i, quicksort.py:112), Var(i.2, quicksort.py:122)], incoming_blocks=[456, 860])
2023-08-01 10:03:59,686 [DEBUG] find_def_from_bottom label 622
2023-08-01 10:03:59,686 [DEBUG] incoming_def i.1 = $binop_iadd626.2
2023-08-01 10:03:59,686 [DEBUG] find_def_from_bottom label 644
2023-08-01 10:03:59,686 [DEBUG] find_def_from_top label 644
2023-08-01 10:03:59,686 [DEBUG] idom 622 from label 644
2023-08-01 10:03:59,686 [DEBUG] find_def_from_bottom label 622
2023-08-01 10:03:59,686 [DEBUG] incoming_def i.1 = $binop_iadd626.2
2023-08-01 10:03:59,686 [DEBUG] find_def_from_bottom label 566
2023-08-01 10:03:59,686 [DEBUG] find_def_from_top label 566
2023-08-01 10:03:59,686 [DEBUG] idom 554 from label 566
2023-08-01 10:03:59,686 [DEBUG] find_def_from_bottom label 554
2023-08-01 10:03:59,686 [DEBUG] incoming_def i.3 = phi(incoming_values=[Var(i, quicksort.py:112), Var(i.2, quicksort.py:122)], incoming_blocks=[456, 860])
2023-08-01 10:03:59,686 [DEBUG] replaced with: $850compare_op.2 = i.5 >= j
2023-08-01 10:03:59,686 [DEBUG] on stmt: bool856 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,686 [DEBUG] on stmt: $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,686 [DEBUG] on stmt: branch $856pred, 858, 860
2023-08-01 10:03:59,686 [DEBUG] ==== SSA block rewrite pass on 858
2023-08-01 10:03:59,686 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,686 [DEBUG] on stmt: jump 928
2023-08-01 10:03:59,686 [DEBUG] ==== SSA block rewrite pass on 860
2023-08-01 10:03:59,686 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,686 [DEBUG] on stmt: $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,686 [DEBUG] on stmt: $878binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,686 [DEBUG] find_def var='i' stmt=$878binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 860
2023-08-01 10:03:59,687 [DEBUG] idom 846 from label 860
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 846
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 846
2023-08-01 10:03:59,687 [DEBUG] idom 700 from label 846
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,687 [DEBUG] replaced with: $878binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,687 [DEBUG] on stmt: R[i] = $864binary_subscr.2
2023-08-01 10:03:59,687 [DEBUG] find_def var='i' stmt=R[i] = $864binary_subscr.2
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 860
2023-08-01 10:03:59,687 [DEBUG] idom 846 from label 860
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 846
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 846
2023-08-01 10:03:59,687 [DEBUG] idom 700 from label 846
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,687 [DEBUG] replaced with: R[i.5] = $864binary_subscr.2
2023-08-01 10:03:59,687 [DEBUG] on stmt: R[j] = $878binary_subscr.5
2023-08-01 10:03:59,687 [DEBUG] on stmt: $const908.11 = const(int, 1)
2023-08-01 10:03:59,687 [DEBUG] on stmt: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,687 [DEBUG] find_def var='i' stmt=$binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 860
2023-08-01 10:03:59,687 [DEBUG] idom 846 from label 860
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 846
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 846
2023-08-01 10:03:59,687 [DEBUG] idom 700 from label 846
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,687 [DEBUG] replaced with: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.5, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,687 [DEBUG] on stmt: i.2 = $binop_iadd910.12
2023-08-01 10:03:59,687 [DEBUG] on stmt: $const918.14 = const(int, 1)
2023-08-01 10:03:59,687 [DEBUG] on stmt: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,687 [DEBUG] on stmt: j = $binop_isub920.15
2023-08-01 10:03:59,687 [DEBUG] on stmt: jump 554
2023-08-01 10:03:59,687 [DEBUG] ==== SSA block rewrite pass on 928
2023-08-01 10:03:59,687 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x292665490>
2023-08-01 10:03:59,687 [DEBUG] on stmt: $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,687 [DEBUG] on stmt: $946binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,687 [DEBUG] find_def var='i' stmt=$946binary_subscr.5 = getitem(value=R, index=i, fn=<built-in function getitem>)
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 928
2023-08-01 10:03:59,687 [DEBUG] idom 858 from label 928
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 858
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 858
2023-08-01 10:03:59,687 [DEBUG] idom 846 from label 858
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 846
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 846
2023-08-01 10:03:59,687 [DEBUG] idom 700 from label 846
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,687 [DEBUG] replaced with: $946binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,687 [DEBUG] on stmt: R[i] = $932binary_subscr.2
2023-08-01 10:03:59,687 [DEBUG] find_def var='i' stmt=R[i] = $932binary_subscr.2
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 928
2023-08-01 10:03:59,687 [DEBUG] idom 858 from label 928
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 858
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 858
2023-08-01 10:03:59,687 [DEBUG] idom 846 from label 858
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 846
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 846
2023-08-01 10:03:59,687 [DEBUG] idom 700 from label 846
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,687 [DEBUG] replaced with: R[i.5] = $932binary_subscr.2
2023-08-01 10:03:59,687 [DEBUG] on stmt: R[high] = $946binary_subscr.5
2023-08-01 10:03:59,687 [DEBUG] on stmt: $976return_value.11 = cast(value=i)
2023-08-01 10:03:59,687 [DEBUG] find_def var='i' stmt=$976return_value.11 = cast(value=i)
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 928
2023-08-01 10:03:59,687 [DEBUG] idom 858 from label 928
2023-08-01 10:03:59,687 [DEBUG] find_def_from_bottom label 858
2023-08-01 10:03:59,687 [DEBUG] find_def_from_top label 858
2023-08-01 10:03:59,688 [DEBUG] idom 846 from label 858
2023-08-01 10:03:59,688 [DEBUG] find_def_from_bottom label 846
2023-08-01 10:03:59,688 [DEBUG] find_def_from_top label 846
2023-08-01 10:03:59,688 [DEBUG] idom 700 from label 846
2023-08-01 10:03:59,688 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,688 [DEBUG] replaced with: $976return_value.11 = cast(value=i.5)
2023-08-01 10:03:59,688 [DEBUG] on stmt: return $976return_value.11
2023-08-01 10:03:59,688 [DEBUG] Fix SSA violator on var j
2023-08-01 10:03:59,688 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,688 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,688 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,688 [DEBUG] on stmt: R = arg(1, name=R)
2023-08-01 10:03:59,688 [DEBUG] on stmt: low = arg(2, name=low)
2023-08-01 10:03:59,688 [DEBUG] on stmt: high = arg(3, name=high)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-08-01 10:03:59,688 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,688 [DEBUG] on stmt: branch $16pred, 22, 18
2023-08-01 10:03:59,688 [DEBUG] ==== SSA block rewrite pass on 18
2023-08-01 10:03:59,688 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,688 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,688 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,688 [DEBUG] ==== SSA block rewrite pass on 22
2023-08-01 10:03:59,688 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,688 [DEBUG] on stmt: $26compare_op.2 = high > low
2023-08-01 10:03:59,688 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,688 [DEBUG] on stmt: branch $32pred, 38, 34
2023-08-01 10:03:59,688 [DEBUG] ==== SSA block rewrite pass on 34
2023-08-01 10:03:59,688 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,688 [DEBUG] on stmt: $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,688 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,688 [DEBUG] ==== SSA block rewrite pass on 38
2023-08-01 10:03:59,688 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,688 [DEBUG] on stmt: $binop_add42.2 = low + high
2023-08-01 10:03:59,688 [DEBUG] on stmt: $const46.3 = const(int, 1)
2023-08-01 10:03:59,688 [DEBUG] on stmt: mid = $binop_add42.2 >> $const46.3
2023-08-01 10:03:59,688 [DEBUG] on stmt: $56load_deref.6 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,688 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,688 [DEBUG] on stmt: $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,689 [DEBUG] on stmt: branch $140pred, 142, 188
2023-08-01 10:03:59,689 [DEBUG] ==== SSA block rewrite pass on 142
2023-08-01 10:03:59,689 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,689 [DEBUG] on stmt: $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: R[low] = $146binary_subscr.2
2023-08-01 10:03:59,689 [DEBUG] on stmt: R[mid] = $160binary_subscr.5
2023-08-01 10:03:59,689 [DEBUG] on stmt: jump 188
2023-08-01 10:03:59,689 [DEBUG] ==== SSA block rewrite pass on 188
2023-08-01 10:03:59,689 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,689 [DEBUG] on stmt: $190load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,689 [DEBUG] on stmt: bool274 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,689 [DEBUG] on stmt: branch $274pred, 276, 322
2023-08-01 10:03:59,689 [DEBUG] ==== SSA block rewrite pass on 276
2023-08-01 10:03:59,689 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,689 [DEBUG] on stmt: $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: R[high] = $280binary_subscr.2
2023-08-01 10:03:59,689 [DEBUG] on stmt: R[mid] = $294binary_subscr.5
2023-08-01 10:03:59,689 [DEBUG] on stmt: jump 322
2023-08-01 10:03:59,689 [DEBUG] ==== SSA block rewrite pass on 322
2023-08-01 10:03:59,689 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,689 [DEBUG] on stmt: $324load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,689 [DEBUG] on stmt: bool408 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,689 [DEBUG] on stmt: $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,689 [DEBUG] on stmt: branch $408pred, 410, 456
2023-08-01 10:03:59,689 [DEBUG] ==== SSA block rewrite pass on 410
2023-08-01 10:03:59,689 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,690 [DEBUG] on stmt: $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: R[low] = $414binary_subscr.2
2023-08-01 10:03:59,690 [DEBUG] on stmt: R[mid] = $428binary_subscr.5
2023-08-01 10:03:59,690 [DEBUG] on stmt: jump 456
2023-08-01 10:03:59,690 [DEBUG] ==== SSA block rewrite pass on 456
2023-08-01 10:03:59,690 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,690 [DEBUG] on stmt: $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: R[high] = $496binary_subscr.9
2023-08-01 10:03:59,690 [DEBUG] on stmt: R[mid] = $510binary_subscr.12
2023-08-01 10:03:59,690 [DEBUG] on stmt: i = low
2023-08-01 10:03:59,690 [DEBUG] on stmt: $const544.19 = const(int, 1)
2023-08-01 10:03:59,690 [DEBUG] on stmt: j = high - $const544.19
2023-08-01 10:03:59,690 [DEBUG] first assign: j
2023-08-01 10:03:59,690 [DEBUG] replaced with: j = high - $const544.19
2023-08-01 10:03:59,690 [DEBUG] on stmt: jump 554
2023-08-01 10:03:59,690 [DEBUG] ==== SSA block rewrite pass on 554
2023-08-01 10:03:59,690 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,690 [DEBUG] on stmt: i.3 = phi(incoming_values=[Var(i, quicksort.py:112), Var(i.2, quicksort.py:122)], incoming_blocks=[456, 860])
2023-08-01 10:03:59,690 [DEBUG] on stmt: $558compare_op.2 = i.3 < high
2023-08-01 10:03:59,690 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,690 [DEBUG] on stmt: branch $564pred, 566, 700
2023-08-01 10:03:59,690 [DEBUG] ==== SSA block rewrite pass on 566
2023-08-01 10:03:59,690 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,690 [DEBUG] on stmt: $568load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $580binary_subscr.7 = getitem(value=R, index=i.3, fn=<built-in function getitem>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,690 [DEBUG] on stmt: bool620 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,690 [DEBUG] on stmt: branch $620pred, 622, 700
2023-08-01 10:03:59,690 [DEBUG] ==== SSA block rewrite pass on 622
2023-08-01 10:03:59,690 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,690 [DEBUG] on stmt: i.4 = phi(incoming_values=[Var(i.1, quicksort.py:116), Var(i.3, quicksort.py:115)], incoming_blocks=[644, 566])
2023-08-01 10:03:59,690 [DEBUG] on stmt: $const624.1 = const(int, 1)
2023-08-01 10:03:59,690 [DEBUG] on stmt: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.4, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,690 [DEBUG] on stmt: i.1 = $binop_iadd626.2
2023-08-01 10:03:59,691 [DEBUG] on stmt: $636compare_op.5 = i.1 < high
2023-08-01 10:03:59,691 [DEBUG] on stmt: bool642 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,691 [DEBUG] on stmt: branch $642pred, 644, 700
2023-08-01 10:03:59,691 [DEBUG] ==== SSA block rewrite pass on 644
2023-08-01 10:03:59,691 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,691 [DEBUG] on stmt: $646load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $658binary_subscr.7 = getitem(value=R, index=i.1, fn=<built-in function getitem>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,691 [DEBUG] on stmt: bool698 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,691 [DEBUG] on stmt: branch $698pred, 622, 700
2023-08-01 10:03:59,691 [DEBUG] ==== SSA block rewrite pass on 700
2023-08-01 10:03:59,691 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,691 [DEBUG] on stmt: i.5 = phi(incoming_values=[Var(i.3, quicksort.py:115), Var(i.1, quicksort.py:116), Var(i.1, quicksort.py:116), Var(i.3, quicksort.py:115)], incoming_blocks=[554, 622, 644, 566])
2023-08-01 10:03:59,691 [DEBUG] on stmt: $704compare_op.2 = j >= low
2023-08-01 10:03:59,691 [DEBUG] on stmt: bool710 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,691 [DEBUG] on stmt: branch $710pred, 712, 846
2023-08-01 10:03:59,691 [DEBUG] ==== SSA block rewrite pass on 712
2023-08-01 10:03:59,691 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,691 [DEBUG] on stmt: $714load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,691 [DEBUG] on stmt: bool766 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,691 [DEBUG] on stmt: branch $766pred, 768, 846
2023-08-01 10:03:59,691 [DEBUG] ==== SSA block rewrite pass on 768
2023-08-01 10:03:59,691 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,691 [DEBUG] on stmt: $const770.1 = const(int, 1)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,691 [DEBUG] on stmt: j = $binop_isub772.2
2023-08-01 10:03:59,691 [DEBUG] replaced with: j.1 = $binop_isub772.2
2023-08-01 10:03:59,691 [DEBUG] on stmt: $782compare_op.5 = j >= low
2023-08-01 10:03:59,691 [DEBUG] on stmt: bool788 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,691 [DEBUG] on stmt: $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,691 [DEBUG] on stmt: branch $788pred, 790, 846
2023-08-01 10:03:59,691 [DEBUG] ==== SSA block rewrite pass on 790
2023-08-01 10:03:59,691 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,692 [DEBUG] on stmt: $792load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,692 [DEBUG] on stmt: $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,692 [DEBUG] on stmt: $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,692 [DEBUG] on stmt: $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,692 [DEBUG] on stmt: $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,692 [DEBUG] on stmt: bool844 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,692 [DEBUG] on stmt: $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,692 [DEBUG] on stmt: branch $844pred, 768, 846
2023-08-01 10:03:59,692 [DEBUG] ==== SSA block rewrite pass on 846
2023-08-01 10:03:59,692 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,692 [DEBUG] on stmt: $850compare_op.2 = i.5 >= j
2023-08-01 10:03:59,692 [DEBUG] on stmt: bool856 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,692 [DEBUG] on stmt: $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,692 [DEBUG] on stmt: branch $856pred, 858, 860
2023-08-01 10:03:59,692 [DEBUG] ==== SSA block rewrite pass on 858
2023-08-01 10:03:59,692 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,692 [DEBUG] on stmt: jump 928
2023-08-01 10:03:59,692 [DEBUG] ==== SSA block rewrite pass on 860
2023-08-01 10:03:59,692 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,692 [DEBUG] on stmt: $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,692 [DEBUG] on stmt: $878binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,692 [DEBUG] on stmt: R[i.5] = $864binary_subscr.2
2023-08-01 10:03:59,692 [DEBUG] on stmt: R[j] = $878binary_subscr.5
2023-08-01 10:03:59,692 [DEBUG] on stmt: $const908.11 = const(int, 1)
2023-08-01 10:03:59,692 [DEBUG] on stmt: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.5, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,692 [DEBUG] on stmt: i.2 = $binop_iadd910.12
2023-08-01 10:03:59,692 [DEBUG] on stmt: $const918.14 = const(int, 1)
2023-08-01 10:03:59,692 [DEBUG] on stmt: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,692 [DEBUG] on stmt: j = $binop_isub920.15
2023-08-01 10:03:59,692 [DEBUG] replaced with: j.2 = $binop_isub920.15
2023-08-01 10:03:59,692 [DEBUG] on stmt: jump 554
2023-08-01 10:03:59,692 [DEBUG] ==== SSA block rewrite pass on 928
2023-08-01 10:03:59,692 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292667250>
2023-08-01 10:03:59,692 [DEBUG] on stmt: $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,692 [DEBUG] on stmt: $946binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,692 [DEBUG] on stmt: R[i.5] = $932binary_subscr.2
2023-08-01 10:03:59,692 [DEBUG] on stmt: R[high] = $946binary_subscr.5
2023-08-01 10:03:59,692 [DEBUG] on stmt: $976return_value.11 = cast(value=i.5)
2023-08-01 10:03:59,692 [DEBUG] on stmt: return $976return_value.11
2023-08-01 10:03:59,692 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {456: [<numba.core.ir.Assign object at 0x292666950>],
             768: [<numba.core.ir.Assign object at 0x292665550>],
             860: [<numba.core.ir.Assign object at 0x29265d050>]})
2023-08-01 10:03:59,692 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,692 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,692 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,693 [DEBUG] on stmt: R = arg(1, name=R)
2023-08-01 10:03:59,693 [DEBUG] on stmt: low = arg(2, name=low)
2023-08-01 10:03:59,693 [DEBUG] on stmt: high = arg(3, name=high)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $const8.1 = const(int, 0)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $10compare_op.2 = low >= $const8.1
2023-08-01 10:03:59,693 [DEBUG] on stmt: bool16 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $16pred = call bool16($10compare_op.2, func=bool16, args=(Var($10compare_op.2, quicksort.py:92),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,693 [DEBUG] on stmt: branch $16pred, 22, 18
2023-08-01 10:03:59,693 [DEBUG] ==== SSA block rewrite pass on 18
2023-08-01 10:03:59,693 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,693 [DEBUG] on stmt: $assertion_error18.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,693 [DEBUG] ==== SSA block rewrite pass on 22
2023-08-01 10:03:59,693 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,693 [DEBUG] on stmt: $26compare_op.2 = high > low
2023-08-01 10:03:59,693 [DEBUG] on stmt: bool32 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $32pred = call bool32($26compare_op.2, func=bool32, args=(Var($26compare_op.2, quicksort.py:93),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,693 [DEBUG] on stmt: branch $32pred, 38, 34
2023-08-01 10:03:59,693 [DEBUG] ==== SSA block rewrite pass on 34
2023-08-01 10:03:59,693 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,693 [DEBUG] on stmt: $assertion_error34.0 = global(AssertionError: <class 'AssertionError'>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: <static> raise <class 'AssertionError'>
2023-08-01 10:03:59,693 [DEBUG] ==== SSA block rewrite pass on 38
2023-08-01 10:03:59,693 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,693 [DEBUG] on stmt: $binop_add42.2 = low + high
2023-08-01 10:03:59,693 [DEBUG] on stmt: $const46.3 = const(int, 1)
2023-08-01 10:03:59,693 [DEBUG] on stmt: mid = $binop_add42.2 >> $const46.3
2023-08-01 10:03:59,693 [DEBUG] on stmt: $56load_deref.6 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $60load_deref.8 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $68binary_subscr.12 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $82call.13 = call $60load_deref.8(A, $68binary_subscr.12, func=$60load_deref.8, args=[Var(A, quicksort.py:86), Var($68binary_subscr.12, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $94load_deref.15 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $102binary_subscr.19 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $116call.20 = call $94load_deref.15(A, $102binary_subscr.19, func=$94load_deref.15, args=[Var(A, quicksort.py:86), Var($102binary_subscr.19, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $130call.21 = call $56load_deref.6($82call.13, $116call.20, func=$56load_deref.6, args=[Var($82call.13, quicksort.py:102), Var($116call.20, quicksort.py:102)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,693 [DEBUG] on stmt: bool140 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $140pred = call bool140($130call.21, func=bool140, args=(Var($130call.21, quicksort.py:102),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,693 [DEBUG] on stmt: branch $140pred, 142, 188
2023-08-01 10:03:59,693 [DEBUG] ==== SSA block rewrite pass on 142
2023-08-01 10:03:59,693 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,693 [DEBUG] on stmt: $146binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: $160binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,693 [DEBUG] on stmt: R[low] = $146binary_subscr.2
2023-08-01 10:03:59,694 [DEBUG] on stmt: R[mid] = $160binary_subscr.5
2023-08-01 10:03:59,694 [DEBUG] on stmt: jump 188
2023-08-01 10:03:59,694 [DEBUG] ==== SSA block rewrite pass on 188
2023-08-01 10:03:59,694 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,694 [DEBUG] on stmt: $190load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $194load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $202binary_subscr.7 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $216call.8 = call $194load_deref.3(A, $202binary_subscr.7, func=$194load_deref.3, args=[Var(A, quicksort.py:86), Var($202binary_subscr.7, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $228load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $236binary_subscr.14 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $250call.15 = call $228load_deref.10(A, $236binary_subscr.14, func=$228load_deref.10, args=[Var(A, quicksort.py:86), Var($236binary_subscr.14, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $264call.16 = call $190load_deref.1($216call.8, $250call.15, func=$190load_deref.1, args=[Var($216call.8, quicksort.py:104), Var($250call.15, quicksort.py:104)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,694 [DEBUG] on stmt: bool274 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $274pred = call bool274($264call.16, func=bool274, args=(Var($264call.16, quicksort.py:104),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,694 [DEBUG] on stmt: branch $274pred, 276, 322
2023-08-01 10:03:59,694 [DEBUG] ==== SSA block rewrite pass on 276
2023-08-01 10:03:59,694 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,694 [DEBUG] on stmt: $280binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $294binary_subscr.5 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: R[high] = $280binary_subscr.2
2023-08-01 10:03:59,694 [DEBUG] on stmt: R[mid] = $294binary_subscr.5
2023-08-01 10:03:59,694 [DEBUG] on stmt: jump 322
2023-08-01 10:03:59,694 [DEBUG] ==== SSA block rewrite pass on 322
2023-08-01 10:03:59,694 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,694 [DEBUG] on stmt: $324load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $328load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $336binary_subscr.7 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $350call.8 = call $328load_deref.3(A, $336binary_subscr.7, func=$328load_deref.3, args=[Var(A, quicksort.py:86), Var($336binary_subscr.7, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $362load_deref.10 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $370binary_subscr.14 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $384call.15 = call $362load_deref.10(A, $370binary_subscr.14, func=$362load_deref.10, args=[Var(A, quicksort.py:86), Var($370binary_subscr.14, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $398call.16 = call $324load_deref.1($350call.8, $384call.15, func=$324load_deref.1, args=[Var($350call.8, quicksort.py:106), Var($384call.15, quicksort.py:106)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,694 [DEBUG] on stmt: bool408 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $408pred = call bool408($398call.16, func=bool408, args=(Var($398call.16, quicksort.py:106),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,694 [DEBUG] on stmt: branch $408pred, 410, 456
2023-08-01 10:03:59,694 [DEBUG] ==== SSA block rewrite pass on 410
2023-08-01 10:03:59,694 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,694 [DEBUG] on stmt: $414binary_subscr.2 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: $428binary_subscr.5 = getitem(value=R, index=low, fn=<built-in function getitem>)
2023-08-01 10:03:59,694 [DEBUG] on stmt: R[low] = $414binary_subscr.2
2023-08-01 10:03:59,694 [DEBUG] on stmt: R[mid] = $428binary_subscr.5
2023-08-01 10:03:59,694 [DEBUG] on stmt: jump 456
2023-08-01 10:03:59,694 [DEBUG] ==== SSA block rewrite pass on 456
2023-08-01 10:03:59,694 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,695 [DEBUG] on stmt: $458load_deref.1 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $466binary_subscr.5 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: pivot = call $458load_deref.1(A, $466binary_subscr.5, func=$458load_deref.1, args=[Var(A, quicksort.py:86), Var($466binary_subscr.5, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $496binary_subscr.9 = getitem(value=R, index=mid, fn=<built-in function getitem>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $510binary_subscr.12 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: R[high] = $496binary_subscr.9
2023-08-01 10:03:59,695 [DEBUG] on stmt: R[mid] = $510binary_subscr.12
2023-08-01 10:03:59,695 [DEBUG] on stmt: i = low
2023-08-01 10:03:59,695 [DEBUG] on stmt: $const544.19 = const(int, 1)
2023-08-01 10:03:59,695 [DEBUG] on stmt: j = high - $const544.19
2023-08-01 10:03:59,695 [DEBUG] on stmt: jump 554
2023-08-01 10:03:59,695 [DEBUG] ==== SSA block rewrite pass on 554
2023-08-01 10:03:59,695 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,695 [DEBUG] on stmt: i.3 = phi(incoming_values=[Var(i, quicksort.py:112), Var(i.2, quicksort.py:122)], incoming_blocks=[456, 860])
2023-08-01 10:03:59,695 [DEBUG] on stmt: $558compare_op.2 = i.3 < high
2023-08-01 10:03:59,695 [DEBUG] on stmt: bool564 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $564pred = call bool564($558compare_op.2, func=bool564, args=(Var($558compare_op.2, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,695 [DEBUG] on stmt: branch $564pred, 566, 700
2023-08-01 10:03:59,695 [DEBUG] ==== SSA block rewrite pass on 566
2023-08-01 10:03:59,695 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,695 [DEBUG] on stmt: $568load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $572load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $580binary_subscr.7 = getitem(value=R, index=i.3, fn=<built-in function getitem>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $594call.8 = call $572load_deref.3(A, $580binary_subscr.7, func=$572load_deref.3, args=[Var(A, quicksort.py:86), Var($580binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $610call.10 = call $568load_deref.1($594call.8, pivot, func=$568load_deref.1, args=[Var($594call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,695 [DEBUG] on stmt: bool620 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $620pred = call bool620($610call.10, func=bool620, args=(Var($610call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,695 [DEBUG] on stmt: branch $620pred, 622, 700
2023-08-01 10:03:59,695 [DEBUG] ==== SSA block rewrite pass on 622
2023-08-01 10:03:59,695 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,695 [DEBUG] on stmt: i.4 = phi(incoming_values=[Var(i.1, quicksort.py:116), Var(i.3, quicksort.py:115)], incoming_blocks=[644, 566])
2023-08-01 10:03:59,695 [DEBUG] on stmt: $const624.1 = const(int, 1)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $binop_iadd626.2 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.4, rhs=$const624.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,695 [DEBUG] on stmt: i.1 = $binop_iadd626.2
2023-08-01 10:03:59,695 [DEBUG] on stmt: $636compare_op.5 = i.1 < high
2023-08-01 10:03:59,695 [DEBUG] on stmt: bool642 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $642pred = call bool642($636compare_op.5, func=bool642, args=(Var($636compare_op.5, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,695 [DEBUG] on stmt: branch $642pred, 644, 700
2023-08-01 10:03:59,695 [DEBUG] ==== SSA block rewrite pass on 644
2023-08-01 10:03:59,695 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,695 [DEBUG] on stmt: $646load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $650load_deref.3 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,695 [DEBUG] on stmt: $658binary_subscr.7 = getitem(value=R, index=i.1, fn=<built-in function getitem>)
2023-08-01 10:03:59,696 [DEBUG] on stmt: $672call.8 = call $650load_deref.3(A, $658binary_subscr.7, func=$650load_deref.3, args=[Var(A, quicksort.py:86), Var($658binary_subscr.7, quicksort.py:115)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,696 [DEBUG] on stmt: $688call.10 = call $646load_deref.1($672call.8, pivot, func=$646load_deref.1, args=[Var($672call.8, quicksort.py:115), Var(pivot, quicksort.py:108)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,696 [DEBUG] on stmt: bool698 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,696 [DEBUG] on stmt: $698pred = call bool698($688call.10, func=bool698, args=(Var($688call.10, quicksort.py:115),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,696 [DEBUG] on stmt: branch $698pred, 622, 700
2023-08-01 10:03:59,696 [DEBUG] ==== SSA block rewrite pass on 700
2023-08-01 10:03:59,696 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,696 [DEBUG] on stmt: i.5 = phi(incoming_values=[Var(i.3, quicksort.py:115), Var(i.1, quicksort.py:116), Var(i.1, quicksort.py:116), Var(i.3, quicksort.py:115)], incoming_blocks=[554, 622, 644, 566])
2023-08-01 10:03:59,696 [DEBUG] on stmt: $704compare_op.2 = j >= low
2023-08-01 10:03:59,696 [DEBUG] find_def var='j' stmt=$704compare_op.2 = j >= low
2023-08-01 10:03:59,696 [DEBUG] find_def_from_top label 700
2023-08-01 10:03:59,696 [DEBUG] idom 554 from label 700
2023-08-01 10:03:59,696 [DEBUG] find_def_from_bottom label 554
2023-08-01 10:03:59,696 [DEBUG] find_def_from_top label 554
2023-08-01 10:03:59,696 [DEBUG] insert phi node j.3 = phi(incoming_values=[], incoming_blocks=[]) at 554
2023-08-01 10:03:59,696 [DEBUG] find_def_from_bottom label 456
2023-08-01 10:03:59,696 [DEBUG] incoming_def j = high - $const544.19
2023-08-01 10:03:59,696 [DEBUG] find_def_from_bottom label 860
2023-08-01 10:03:59,696 [DEBUG] incoming_def j.2 = $binop_isub920.15
2023-08-01 10:03:59,696 [DEBUG] replaced with: $704compare_op.2 = j.3 >= low
2023-08-01 10:03:59,696 [DEBUG] on stmt: bool710 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,696 [DEBUG] on stmt: $710pred = call bool710($704compare_op.2, func=bool710, args=(Var($704compare_op.2, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,696 [DEBUG] on stmt: branch $710pred, 712, 846
2023-08-01 10:03:59,696 [DEBUG] ==== SSA block rewrite pass on 712
2023-08-01 10:03:59,696 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,696 [DEBUG] on stmt: $714load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,696 [DEBUG] on stmt: $720load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,696 [DEBUG] on stmt: $728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,696 [DEBUG] find_def var='j' stmt=$728binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,696 [DEBUG] find_def_from_top label 712
2023-08-01 10:03:59,696 [DEBUG] idom 700 from label 712
2023-08-01 10:03:59,696 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,696 [DEBUG] find_def_from_top label 700
2023-08-01 10:03:59,696 [DEBUG] idom 554 from label 700
2023-08-01 10:03:59,696 [DEBUG] find_def_from_bottom label 554
2023-08-01 10:03:59,696 [DEBUG] replaced with: $728binary_subscr.8 = getitem(value=R, index=j.3, fn=<built-in function getitem>)
2023-08-01 10:03:59,696 [DEBUG] on stmt: $742call.9 = call $720load_deref.4(A, $728binary_subscr.8, func=$720load_deref.4, args=[Var(A, quicksort.py:86), Var($728binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,696 [DEBUG] on stmt: $756call.10 = call $714load_deref.1(pivot, $742call.9, func=$714load_deref.1, args=[Var(pivot, quicksort.py:108), Var($742call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,696 [DEBUG] on stmt: bool766 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,696 [DEBUG] on stmt: $766pred = call bool766($756call.10, func=bool766, args=(Var($756call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,696 [DEBUG] on stmt: branch $766pred, 768, 846
2023-08-01 10:03:59,696 [DEBUG] ==== SSA block rewrite pass on 768
2023-08-01 10:03:59,696 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,696 [DEBUG] on stmt: $const770.1 = const(int, 1)
2023-08-01 10:03:59,696 [DEBUG] on stmt: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,696 [DEBUG] find_def var='j' stmt=$binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,696 [DEBUG] find_def_from_top label 768
2023-08-01 10:03:59,696 [DEBUG] insert phi node j.4 = phi(incoming_values=[], incoming_blocks=[]) at 768
2023-08-01 10:03:59,696 [DEBUG] find_def_from_bottom label 712
2023-08-01 10:03:59,696 [DEBUG] find_def_from_top label 712
2023-08-01 10:03:59,696 [DEBUG] idom 700 from label 712
2023-08-01 10:03:59,696 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,696 [DEBUG] find_def_from_top label 700
2023-08-01 10:03:59,696 [DEBUG] idom 554 from label 700
2023-08-01 10:03:59,696 [DEBUG] find_def_from_bottom label 554
2023-08-01 10:03:59,696 [DEBUG] incoming_def j.3 = phi(incoming_values=[Var(j, quicksort.py:113), Var(j.2, quicksort.py:123)], incoming_blocks=[456, 860])
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 790
2023-08-01 10:03:59,697 [DEBUG] find_def_from_top label 790
2023-08-01 10:03:59,697 [DEBUG] idom 768 from label 790
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 768
2023-08-01 10:03:59,697 [DEBUG] incoming_def j.1 = $binop_isub772.2
2023-08-01 10:03:59,697 [DEBUG] replaced with: $binop_isub772.2 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.4, rhs=$const770.1, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,697 [DEBUG] on stmt: j.1 = $binop_isub772.2
2023-08-01 10:03:59,697 [DEBUG] on stmt: $782compare_op.5 = j >= low
2023-08-01 10:03:59,697 [DEBUG] find_def var='j' stmt=$782compare_op.5 = j >= low
2023-08-01 10:03:59,697 [DEBUG] replaced with: $782compare_op.5 = j.1 >= low
2023-08-01 10:03:59,697 [DEBUG] on stmt: bool788 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,697 [DEBUG] on stmt: $788pred = call bool788($782compare_op.5, func=bool788, args=(Var($782compare_op.5, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,697 [DEBUG] on stmt: branch $788pred, 790, 846
2023-08-01 10:03:59,697 [DEBUG] ==== SSA block rewrite pass on 790
2023-08-01 10:03:59,697 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,697 [DEBUG] on stmt: $792load_deref.1 = freevar(LT: <function lt_floats at 0x170121080>)
2023-08-01 10:03:59,697 [DEBUG] on stmt: $798load_deref.4 = freevar(GET: <function make_quicksort_impl.<locals>.GET at 0x2924922a0>)
2023-08-01 10:03:59,697 [DEBUG] on stmt: $806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,697 [DEBUG] find_def var='j' stmt=$806binary_subscr.8 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,697 [DEBUG] find_def_from_top label 790
2023-08-01 10:03:59,697 [DEBUG] idom 768 from label 790
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 768
2023-08-01 10:03:59,697 [DEBUG] replaced with: $806binary_subscr.8 = getitem(value=R, index=j.1, fn=<built-in function getitem>)
2023-08-01 10:03:59,697 [DEBUG] on stmt: $820call.9 = call $798load_deref.4(A, $806binary_subscr.8, func=$798load_deref.4, args=[Var(A, quicksort.py:86), Var($806binary_subscr.8, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,697 [DEBUG] on stmt: $834call.10 = call $792load_deref.1(pivot, $820call.9, func=$792load_deref.1, args=[Var(pivot, quicksort.py:108), Var($820call.9, quicksort.py:117)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,697 [DEBUG] on stmt: bool844 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,697 [DEBUG] on stmt: $844pred = call bool844($834call.10, func=bool844, args=(Var($834call.10, quicksort.py:117),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,697 [DEBUG] on stmt: branch $844pred, 768, 846
2023-08-01 10:03:59,697 [DEBUG] ==== SSA block rewrite pass on 846
2023-08-01 10:03:59,697 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,697 [DEBUG] on stmt: $850compare_op.2 = i.5 >= j
2023-08-01 10:03:59,697 [DEBUG] find_def var='j' stmt=$850compare_op.2 = i.5 >= j
2023-08-01 10:03:59,697 [DEBUG] find_def_from_top label 846
2023-08-01 10:03:59,697 [DEBUG] insert phi node j.5 = phi(incoming_values=[], incoming_blocks=[]) at 846
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 712
2023-08-01 10:03:59,697 [DEBUG] find_def_from_top label 712
2023-08-01 10:03:59,697 [DEBUG] idom 700 from label 712
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,697 [DEBUG] find_def_from_top label 700
2023-08-01 10:03:59,697 [DEBUG] idom 554 from label 700
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 554
2023-08-01 10:03:59,697 [DEBUG] incoming_def j.3 = phi(incoming_values=[Var(j, quicksort.py:113), Var(j.2, quicksort.py:123)], incoming_blocks=[456, 860])
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 768
2023-08-01 10:03:59,697 [DEBUG] incoming_def j.1 = $binop_isub772.2
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 700
2023-08-01 10:03:59,697 [DEBUG] find_def_from_top label 700
2023-08-01 10:03:59,697 [DEBUG] idom 554 from label 700
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 554
2023-08-01 10:03:59,697 [DEBUG] incoming_def j.3 = phi(incoming_values=[Var(j, quicksort.py:113), Var(j.2, quicksort.py:123)], incoming_blocks=[456, 860])
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 790
2023-08-01 10:03:59,697 [DEBUG] find_def_from_top label 790
2023-08-01 10:03:59,697 [DEBUG] idom 768 from label 790
2023-08-01 10:03:59,697 [DEBUG] find_def_from_bottom label 768
2023-08-01 10:03:59,697 [DEBUG] incoming_def j.1 = $binop_isub772.2
2023-08-01 10:03:59,697 [DEBUG] replaced with: $850compare_op.2 = i.5 >= j.5
2023-08-01 10:03:59,697 [DEBUG] on stmt: bool856 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,697 [DEBUG] on stmt: $856pred = call bool856($850compare_op.2, func=bool856, args=(Var($850compare_op.2, quicksort.py:119),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,697 [DEBUG] on stmt: branch $856pred, 858, 860
2023-08-01 10:03:59,697 [DEBUG] ==== SSA block rewrite pass on 858
2023-08-01 10:03:59,698 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,698 [DEBUG] on stmt: jump 928
2023-08-01 10:03:59,698 [DEBUG] ==== SSA block rewrite pass on 860
2023-08-01 10:03:59,698 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,698 [DEBUG] on stmt: $864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,698 [DEBUG] find_def var='j' stmt=$864binary_subscr.2 = getitem(value=R, index=j, fn=<built-in function getitem>)
2023-08-01 10:03:59,698 [DEBUG] find_def_from_top label 860
2023-08-01 10:03:59,698 [DEBUG] idom 846 from label 860
2023-08-01 10:03:59,698 [DEBUG] find_def_from_bottom label 846
2023-08-01 10:03:59,698 [DEBUG] replaced with: $864binary_subscr.2 = getitem(value=R, index=j.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,698 [DEBUG] on stmt: $878binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,698 [DEBUG] on stmt: R[i.5] = $864binary_subscr.2
2023-08-01 10:03:59,698 [DEBUG] on stmt: R[j] = $878binary_subscr.5
2023-08-01 10:03:59,698 [DEBUG] find_def var='j' stmt=R[j] = $878binary_subscr.5
2023-08-01 10:03:59,698 [DEBUG] find_def_from_top label 860
2023-08-01 10:03:59,698 [DEBUG] idom 846 from label 860
2023-08-01 10:03:59,698 [DEBUG] find_def_from_bottom label 846
2023-08-01 10:03:59,698 [DEBUG] replaced with: R[j.5] = $878binary_subscr.5
2023-08-01 10:03:59,698 [DEBUG] on stmt: $const908.11 = const(int, 1)
2023-08-01 10:03:59,698 [DEBUG] on stmt: $binop_iadd910.12 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=i.5, rhs=$const908.11, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,698 [DEBUG] on stmt: i.2 = $binop_iadd910.12
2023-08-01 10:03:59,698 [DEBUG] on stmt: $const918.14 = const(int, 1)
2023-08-01 10:03:59,698 [DEBUG] on stmt: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,698 [DEBUG] find_def var='j' stmt=$binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,698 [DEBUG] find_def_from_top label 860
2023-08-01 10:03:59,698 [DEBUG] idom 846 from label 860
2023-08-01 10:03:59,698 [DEBUG] find_def_from_bottom label 846
2023-08-01 10:03:59,698 [DEBUG] replaced with: $binop_isub920.15 = inplace_binop(fn=<built-in function isub>, immutable_fn=<built-in function sub>, lhs=j.5, rhs=$const918.14, static_lhs=Undefined, static_rhs=Undefined)
2023-08-01 10:03:59,698 [DEBUG] on stmt: j.2 = $binop_isub920.15
2023-08-01 10:03:59,698 [DEBUG] on stmt: jump 554
2023-08-01 10:03:59,698 [DEBUG] ==== SSA block rewrite pass on 928
2023-08-01 10:03:59,698 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x29266acd0>
2023-08-01 10:03:59,698 [DEBUG] on stmt: $932binary_subscr.2 = getitem(value=R, index=high, fn=<built-in function getitem>)
2023-08-01 10:03:59,698 [DEBUG] on stmt: $946binary_subscr.5 = getitem(value=R, index=i.5, fn=<built-in function getitem>)
2023-08-01 10:03:59,698 [DEBUG] on stmt: R[i.5] = $932binary_subscr.2
2023-08-01 10:03:59,698 [DEBUG] on stmt: R[high] = $946binary_subscr.5
2023-08-01 10:03:59,698 [DEBUG] on stmt: $976return_value.11 = cast(value=i.5)
2023-08-01 10:03:59,698 [DEBUG] on stmt: return $976return_value.11
2023-08-01 10:03:59,704 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=45)
           2	RESUME(arg=0, lineno=45)
           4	LOAD_FAST(arg=0, lineno=47)
           6	LOAD_FAST(arg=1, lineno=47)
           8	BINARY_SUBSCR(arg=None, lineno=47)
          18	RETURN_VALUE(arg=None, lineno=47)
2023-08-01 10:03:59,704 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,704 [DEBUG] stack: []
2023-08-01 10:03:59,704 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,704 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=45)
2023-08-01 10:03:59,704 [DEBUG] stack []
2023-08-01 10:03:59,704 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=45)
2023-08-01 10:03:59,704 [DEBUG] stack []
2023-08-01 10:03:59,704 [DEBUG] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=47)
2023-08-01 10:03:59,704 [DEBUG] stack []
2023-08-01 10:03:59,704 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=47)
2023-08-01 10:03:59,704 [DEBUG] stack ['$A4.0']
2023-08-01 10:03:59,704 [DEBUG] dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=47)
2023-08-01 10:03:59,704 [DEBUG] stack ['$A4.0', '$idx_or_val6.1']
2023-08-01 10:03:59,704 [DEBUG] dispatch pc=18, inst=RETURN_VALUE(arg=None, lineno=47)
2023-08-01 10:03:59,704 [DEBUG] stack ['$8binary_subscr.2']
2023-08-01 10:03:59,704 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,704 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,704 [DEBUG] Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
2023-08-01 10:03:59,704 [DEBUG] defmap: {}
2023-08-01 10:03:59,704 [DEBUG] phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,704 [DEBUG] changing phismap: defaultdict(<class 'set'>, {})
2023-08-01 10:03:59,704 [DEBUG] keep phismap: {}
2023-08-01 10:03:59,704 [DEBUG] new_out: defaultdict(<class 'dict'>, {})
2023-08-01 10:03:59,704 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,704 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$A4.0'}), (6, {'res': '$idx_or_val6.1'}), (8, {'index': '$idx_or_val6.1', 'target': '$A4.0', 'res': '$8binary_subscr.2'}), (10, {}), (12, {}), (14, {}), (16, {}), (18, {'retval': '$8binary_subscr.2', 'castval': '$18return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,704 [DEBUG] label 0:
    A = arg(0, name=A)                       ['A']
    idx_or_val = arg(1, name=idx_or_val)     ['idx_or_val']
    $8binary_subscr.2 = getitem(value=A, index=idx_or_val, fn=<built-in function getitem>) ['$8binary_subscr.2', 'A', 'idx_or_val']
    $18return_value.3 = cast(value=$8binary_subscr.2) ['$18return_value.3', '$8binary_subscr.2']
    return $18return_value.3                 ['$18return_value.3']

2023-08-01 10:03:59,706 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,706 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x29259fd50>
2023-08-01 10:03:59,706 [DEBUG] on stmt: A = arg(0, name=A)
2023-08-01 10:03:59,706 [DEBUG] on stmt: idx_or_val = arg(1, name=idx_or_val)
2023-08-01 10:03:59,706 [DEBUG] on stmt: $8binary_subscr.2 = getitem(value=A, index=idx_or_val, fn=<built-in function getitem>)
2023-08-01 10:03:59,706 [DEBUG] on stmt: $18return_value.3 = cast(value=$8binary_subscr.2)
2023-08-01 10:03:59,706 [DEBUG] on stmt: return $18return_value.3
2023-08-01 10:03:59,706 [DEBUG] defs defaultdict(<class 'list'>,
            {'$18return_value.3': [<numba.core.ir.Assign object at 0x29264b590>],
             '$8binary_subscr.2': [<numba.core.ir.Assign object at 0x29264add0>],
             'A': [<numba.core.ir.Assign object at 0x292676f90>],
             'idx_or_val': [<numba.core.ir.Assign object at 0x292676150>]})
2023-08-01 10:03:59,706 [DEBUG] SSA violators set()
2023-08-01 10:03:59,715 [DEBUG] bytecode dump:
>          0	NOP(arg=None, lineno=6111)
           2	RESUME(arg=0, lineno=6111)
           4	LOAD_FAST(arg=0, lineno=6116)
           6	LOAD_FAST(arg=1, lineno=6116)
           8	COMPARE_OP(arg=0, lineno=6116)
          14	JUMP_IF_TRUE_OR_POP(arg=40, lineno=6116)
          16	LOAD_GLOBAL(arg=1, lineno=6116)
          28	LOAD_ATTR(arg=1, lineno=6116)
          38	LOAD_FAST(arg=1, lineno=6116)
          40	PRECALL(arg=1, lineno=6116)
          44	CALL(arg=1, lineno=6116)
          54	JUMP_IF_FALSE_OR_POP(arg=20, lineno=6116)
          56	LOAD_GLOBAL(arg=1, lineno=6116)
          68	LOAD_ATTR(arg=1, lineno=6116)
          78	LOAD_FAST(arg=0, lineno=6116)
          80	PRECALL(arg=1, lineno=6116)
          84	CALL(arg=1, lineno=6116)
          94	UNARY_NOT(arg=None, lineno=6116)
>         96	RETURN_VALUE(arg=None, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] pending: deque([State(pc_initial=0 nstack_initial=0)])
2023-08-01 10:03:59,716 [DEBUG] stack: []
2023-08-01 10:03:59,716 [DEBUG] state.pc_initial: State(pc_initial=0 nstack_initial=0)
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=0, inst=NOP(arg=None, lineno=6111)
2023-08-01 10:03:59,716 [DEBUG] stack []
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=2, inst=RESUME(arg=0, lineno=6111)
2023-08-01 10:03:59,716 [DEBUG] stack []
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack []
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$a4.0']
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=8, inst=COMPARE_OP(arg=0, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$a4.0', '$b6.1']
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=14, inst=JUMP_IF_TRUE_OR_POP(arg=40, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$8compare_op.2']
2023-08-01 10:03:59,716 [DEBUG] end state. edges=[Edge(pc=16, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=('$8compare_op.2',), blockstack=(), npush=0)]
2023-08-01 10:03:59,716 [DEBUG] pending: deque([State(pc_initial=16 nstack_initial=0), State(pc_initial=96 nstack_initial=1)])
2023-08-01 10:03:59,716 [DEBUG] stack: []
2023-08-01 10:03:59,716 [DEBUG] state.pc_initial: State(pc_initial=16 nstack_initial=0)
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=16, inst=LOAD_GLOBAL(arg=1, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack []
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=28, inst=LOAD_ATTR(arg=1, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$null$16.1', '$16load_global.0']
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=38, inst=LOAD_FAST(arg=1, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$null$16.1', '$28load_attr.2']
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=40, inst=PRECALL(arg=1, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$null$16.1', '$28load_attr.2', '$b38.3']
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=44, inst=CALL(arg=1, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$null$16.1', '$28load_attr.2', '$b38.3']
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=54, inst=JUMP_IF_FALSE_OR_POP(arg=20, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$44call.4']
2023-08-01 10:03:59,716 [DEBUG] end state. edges=[Edge(pc=56, stack=(), blockstack=(), npush=0), Edge(pc=96, stack=('$44call.4',), blockstack=(), npush=0)]
2023-08-01 10:03:59,716 [DEBUG] pending: deque([State(pc_initial=96 nstack_initial=1), State(pc_initial=56 nstack_initial=0), State(pc_initial=96 nstack_initial=1)])
2023-08-01 10:03:59,716 [DEBUG] stack: ['$phi96.0']
2023-08-01 10:03:59,716 [DEBUG] state.pc_initial: State(pc_initial=96 nstack_initial=1)
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=96, inst=RETURN_VALUE(arg=None, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$phi96.0']
2023-08-01 10:03:59,716 [DEBUG] end state. edges=[]
2023-08-01 10:03:59,716 [DEBUG] pending: deque([State(pc_initial=56 nstack_initial=0), State(pc_initial=96 nstack_initial=1)])
2023-08-01 10:03:59,716 [DEBUG] stack: []
2023-08-01 10:03:59,716 [DEBUG] state.pc_initial: State(pc_initial=56 nstack_initial=0)
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=56, inst=LOAD_GLOBAL(arg=1, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack []
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=68, inst=LOAD_ATTR(arg=1, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$null$56.1', '$56load_global.0']
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=78, inst=LOAD_FAST(arg=0, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$null$56.1', '$68load_attr.2']
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=80, inst=PRECALL(arg=1, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$null$56.1', '$68load_attr.2', '$a78.3']
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=84, inst=CALL(arg=1, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$null$56.1', '$68load_attr.2', '$a78.3']
2023-08-01 10:03:59,716 [DEBUG] dispatch pc=94, inst=UNARY_NOT(arg=None, lineno=6116)
2023-08-01 10:03:59,716 [DEBUG] stack ['$84call.4']
2023-08-01 10:03:59,716 [DEBUG] end state. edges=[Edge(pc=96, stack=('$94unary_not.5',), blockstack=(), npush=0)]
2023-08-01 10:03:59,716 [DEBUG] pending: deque([State(pc_initial=96 nstack_initial=1), State(pc_initial=96 nstack_initial=1)])
2023-08-01 10:03:59,716 [DEBUG] pending: deque([State(pc_initial=96 nstack_initial=1)])
2023-08-01 10:03:59,716 [DEBUG] -------------------------Prune PHIs-------------------------
2023-08-01 10:03:59,716 [DEBUG] Used_phis: defaultdict(<class 'set'>,
            {State(pc_initial=0 nstack_initial=0): set(),
             State(pc_initial=16 nstack_initial=0): set(),
             State(pc_initial=56 nstack_initial=0): set(),
             State(pc_initial=96 nstack_initial=1): {'$phi96.0'}})
2023-08-01 10:03:59,716 [DEBUG] defmap: {'$phi96.0': State(pc_initial=0 nstack_initial=0)}
2023-08-01 10:03:59,716 [DEBUG] phismap: defaultdict(<class 'set'>,
            {'$phi96.0': {('$44call.4', State(pc_initial=16 nstack_initial=0)),
                          ('$8compare_op.2',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$94unary_not.5',
                           State(pc_initial=56 nstack_initial=0))}})
2023-08-01 10:03:59,716 [DEBUG] changing phismap: defaultdict(<class 'set'>,
            {'$phi96.0': {('$44call.4', State(pc_initial=16 nstack_initial=0)),
                          ('$8compare_op.2',
                           State(pc_initial=0 nstack_initial=0)),
                          ('$94unary_not.5',
                           State(pc_initial=56 nstack_initial=0))}})
2023-08-01 10:03:59,716 [DEBUG] keep phismap: {'$phi96.0': {('$44call.4', State(pc_initial=16 nstack_initial=0)),
              ('$8compare_op.2', State(pc_initial=0 nstack_initial=0)),
              ('$94unary_not.5', State(pc_initial=56 nstack_initial=0))}}
2023-08-01 10:03:59,716 [DEBUG] new_out: defaultdict(<class 'dict'>,
            {State(pc_initial=0 nstack_initial=0): {'$phi96.0': '$8compare_op.2'},
             State(pc_initial=16 nstack_initial=0): {'$phi96.0': '$44call.4'},
             State(pc_initial=56 nstack_initial=0): {'$phi96.0': '$94unary_not.5'}})
2023-08-01 10:03:59,716 [DEBUG] ----------------------DONE Prune PHIs-----------------------
2023-08-01 10:03:59,717 [DEBUG] block_infos State(pc_initial=0 nstack_initial=0):
AdaptBlockInfo(insts=((0, {}), (2, {}), (4, {'res': '$a4.0'}), (6, {'res': '$b6.1'}), (8, {'lhs': '$a4.0', 'rhs': '$b6.1', 'res': '$8compare_op.2'}), (10, {}), (12, {}), (14, {'pred': '$8compare_op.2'})), outgoing_phis={'$phi96.0': '$8compare_op.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={16: (), 96: ('$8compare_op.2',)})
2023-08-01 10:03:59,717 [DEBUG] block_infos State(pc_initial=16 nstack_initial=0):
AdaptBlockInfo(insts=((16, {'idx': 0, 'res': '$16load_global.0'}), (18, {}), (20, {}), (22, {}), (24, {}), (26, {}), (28, {'item': '$16load_global.0', 'res': '$28load_attr.2'}), (30, {}), (32, {}), (34, {}), (36, {}), (38, {'res': '$b38.3'}), (40, {}), (42, {}), (44, {'func': '$28load_attr.2', 'args': ['$b38.3'], 'kw_names': None, 'res': '$44call.4'}), (46, {}), (48, {}), (50, {}), (52, {}), (54, {'pred': '$44call.4'})), outgoing_phis={'$phi96.0': '$44call.4'}, blockstack=(), active_try_block=None, outgoing_edgepushed={56: (), 96: ('$44call.4',)})
2023-08-01 10:03:59,717 [DEBUG] block_infos State(pc_initial=56 nstack_initial=0):
AdaptBlockInfo(insts=((56, {'idx': 0, 'res': '$56load_global.0'}), (58, {}), (60, {}), (62, {}), (64, {}), (66, {}), (68, {'item': '$56load_global.0', 'res': '$68load_attr.2'}), (70, {}), (72, {}), (74, {}), (76, {}), (78, {'res': '$a78.3'}), (80, {}), (82, {}), (84, {'func': '$68load_attr.2', 'args': ['$a78.3'], 'kw_names': None, 'res': '$84call.4'}), (86, {}), (88, {}), (90, {}), (92, {}), (94, {'value': '$84call.4', 'res': '$94unary_not.5'})), outgoing_phis={'$phi96.0': '$94unary_not.5'}, blockstack=(), active_try_block=None, outgoing_edgepushed={96: ('$94unary_not.5',)})
2023-08-01 10:03:59,717 [DEBUG] block_infos State(pc_initial=96 nstack_initial=1):
AdaptBlockInfo(insts=((96, {'retval': '$phi96.0', 'castval': '$96return_value.1'}),), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
2023-08-01 10:03:59,717 [DEBUG] label 0:
    a = arg(0, name=a)                       ['a']
    b = arg(1, name=b)                       ['b']
    $8compare_op.2 = a < b                   ['$8compare_op.2', 'a', 'b']
    bool14 = global(bool: <class 'bool'>)    ['bool14']
    $14pred = call bool14($8compare_op.2, func=bool14, args=(Var($8compare_op.2, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None) ['$14pred', '$8compare_op.2', 'bool14']
    $phi96.0 = $8compare_op.2                ['$8compare_op.2', '$phi96.0']
    branch $14pred, 96, 16                   ['$14pred']
label 16:
    $16load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$16load_global.0']
    $28load_attr.2 = getattr(value=$16load_global.0, attr=isnan) ['$16load_global.0', '$28load_attr.2']
    $44call.4 = call $28load_attr.2(b, func=$28load_attr.2, args=[Var(b, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None) ['$28load_attr.2', '$44call.4', 'b']
    bool54 = global(bool: <class 'bool'>)    ['bool54']
    $54pred = call bool54($44call.4, func=bool54, args=(Var($44call.4, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None) ['$44call.4', '$54pred', 'bool54']
    $phi96.0 = $44call.4                     ['$44call.4', '$phi96.0']
    branch $54pred, 56, 96                   ['$54pred']
label 56:
    $56load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>) ['$56load_global.0']
    $68load_attr.2 = getattr(value=$56load_global.0, attr=isnan) ['$56load_global.0', '$68load_attr.2']
    $84call.4 = call $68load_attr.2(a, func=$68load_attr.2, args=[Var(a, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_attr.2', '$84call.4', 'a']
    $94unary_not.5 = unary(fn=<built-in function not_>, value=$84call.4) ['$84call.4', '$94unary_not.5']
    $phi96.0 = $94unary_not.5                ['$94unary_not.5', '$phi96.0']
    jump 96                                  []
label 96:
    $96return_value.1 = cast(value=$phi96.0) ['$96return_value.1', '$phi96.0']
    return $96return_value.1                 ['$96return_value.1']

2023-08-01 10:03:59,719 [DEBUG] ==== SSA block analysis pass on 0
2023-08-01 10:03:59,719 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2925982d0>
2023-08-01 10:03:59,719 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,719 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $8compare_op.2 = a < b
2023-08-01 10:03:59,720 [DEBUG] on stmt: bool14 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $14pred = call bool14($8compare_op.2, func=bool14, args=(Var($8compare_op.2, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $phi96.0 = $8compare_op.2
2023-08-01 10:03:59,720 [DEBUG] on stmt: branch $14pred, 96, 16
2023-08-01 10:03:59,720 [DEBUG] ==== SSA block analysis pass on 16
2023-08-01 10:03:59,720 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2925982d0>
2023-08-01 10:03:59,720 [DEBUG] on stmt: $16load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $28load_attr.2 = getattr(value=$16load_global.0, attr=isnan)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $44call.4 = call $28load_attr.2(b, func=$28load_attr.2, args=[Var(b, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: bool54 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $54pred = call bool54($44call.4, func=bool54, args=(Var($44call.4, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $phi96.0 = $44call.4
2023-08-01 10:03:59,720 [DEBUG] on stmt: branch $54pred, 56, 96
2023-08-01 10:03:59,720 [DEBUG] ==== SSA block analysis pass on 56
2023-08-01 10:03:59,720 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2925982d0>
2023-08-01 10:03:59,720 [DEBUG] on stmt: $56load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $68load_attr.2 = getattr(value=$56load_global.0, attr=isnan)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $84call.4 = call $68load_attr.2(a, func=$68load_attr.2, args=[Var(a, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $94unary_not.5 = unary(fn=<built-in function not_>, value=$84call.4)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $phi96.0 = $94unary_not.5
2023-08-01 10:03:59,720 [DEBUG] on stmt: jump 96
2023-08-01 10:03:59,720 [DEBUG] ==== SSA block analysis pass on 96
2023-08-01 10:03:59,720 [DEBUG] Running <numba.core.ssa._GatherDefsHandler object at 0x2925982d0>
2023-08-01 10:03:59,720 [DEBUG] on stmt: $96return_value.1 = cast(value=$phi96.0)
2023-08-01 10:03:59,720 [DEBUG] on stmt: return $96return_value.1
2023-08-01 10:03:59,720 [DEBUG] defs defaultdict(<class 'list'>,
            {'$14pred': [<numba.core.ir.Assign object at 0x292632010>],
             '$16load_global.0': [<numba.core.ir.Assign object at 0x292631e10>],
             '$28load_attr.2': [<numba.core.ir.Assign object at 0x292631a50>],
             '$44call.4': [<numba.core.ir.Assign object at 0x292631290>],
             '$54pred': [<numba.core.ir.Assign object at 0x292631690>],
             '$56load_global.0': [<numba.core.ir.Assign object at 0x292631d50>],
             '$68load_attr.2': [<numba.core.ir.Assign object at 0x29258eb90>],
             '$84call.4': [<numba.core.ir.Assign object at 0x29258e490>],
             '$8compare_op.2': [<numba.core.ir.Assign object at 0x292633f90>],
             '$94unary_not.5': [<numba.core.ir.Assign object at 0x29257fc90>],
             '$96return_value.1': [<numba.core.ir.Assign object at 0x29257e610>],
             '$phi96.0': [<numba.core.ir.Assign object at 0x292633d10>,
                          <numba.core.ir.Assign object at 0x292631510>,
                          <numba.core.ir.Assign object at 0x29258fd90>],
             'a': [<numba.core.ir.Assign object at 0x292633ad0>],
             'b': [<numba.core.ir.Assign object at 0x292633a50>],
             'bool14': [<numba.core.ir.Assign object at 0x292632350>],
             'bool54': [<numba.core.ir.Assign object at 0x292631850>]})
2023-08-01 10:03:59,720 [DEBUG] SSA violators {'$phi96.0'}
2023-08-01 10:03:59,720 [DEBUG] Fix SSA violator on var $phi96.0
2023-08-01 10:03:59,720 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,720 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292691cd0>
2023-08-01 10:03:59,720 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,720 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $8compare_op.2 = a < b
2023-08-01 10:03:59,720 [DEBUG] on stmt: bool14 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $14pred = call bool14($8compare_op.2, func=bool14, args=(Var($8compare_op.2, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $phi96.0 = $8compare_op.2
2023-08-01 10:03:59,720 [DEBUG] first assign: $phi96.0
2023-08-01 10:03:59,720 [DEBUG] replaced with: $phi96.0 = $8compare_op.2
2023-08-01 10:03:59,720 [DEBUG] on stmt: branch $14pred, 96, 16
2023-08-01 10:03:59,720 [DEBUG] ==== SSA block rewrite pass on 16
2023-08-01 10:03:59,720 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292691cd0>
2023-08-01 10:03:59,720 [DEBUG] on stmt: $16load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $28load_attr.2 = getattr(value=$16load_global.0, attr=isnan)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $44call.4 = call $28load_attr.2(b, func=$28load_attr.2, args=[Var(b, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: bool54 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $54pred = call bool54($44call.4, func=bool54, args=(Var($44call.4, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $phi96.0 = $44call.4
2023-08-01 10:03:59,720 [DEBUG] replaced with: $phi96.0.1 = $44call.4
2023-08-01 10:03:59,720 [DEBUG] on stmt: branch $54pred, 56, 96
2023-08-01 10:03:59,720 [DEBUG] ==== SSA block rewrite pass on 56
2023-08-01 10:03:59,720 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292691cd0>
2023-08-01 10:03:59,720 [DEBUG] on stmt: $56load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $68load_attr.2 = getattr(value=$56load_global.0, attr=isnan)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $84call.4 = call $68load_attr.2(a, func=$68load_attr.2, args=[Var(a, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $94unary_not.5 = unary(fn=<built-in function not_>, value=$84call.4)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $phi96.0 = $94unary_not.5
2023-08-01 10:03:59,720 [DEBUG] replaced with: $phi96.0.2 = $94unary_not.5
2023-08-01 10:03:59,720 [DEBUG] on stmt: jump 96
2023-08-01 10:03:59,720 [DEBUG] ==== SSA block rewrite pass on 96
2023-08-01 10:03:59,720 [DEBUG] Running <numba.core.ssa._FreshVarHandler object at 0x292691cd0>
2023-08-01 10:03:59,720 [DEBUG] on stmt: $96return_value.1 = cast(value=$phi96.0)
2023-08-01 10:03:59,720 [DEBUG] on stmt: return $96return_value.1
2023-08-01 10:03:59,720 [DEBUG] Replaced assignments: defaultdict(<class 'list'>,
            {0: [<numba.core.ir.Assign object at 0x292692310>],
             16: [<numba.core.ir.Assign object at 0x2926925d0>],
             56: [<numba.core.ir.Assign object at 0x292692690>]})
2023-08-01 10:03:59,720 [DEBUG] ==== SSA block rewrite pass on 0
2023-08-01 10:03:59,720 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2926927d0>
2023-08-01 10:03:59,720 [DEBUG] on stmt: a = arg(0, name=a)
2023-08-01 10:03:59,720 [DEBUG] on stmt: b = arg(1, name=b)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $8compare_op.2 = a < b
2023-08-01 10:03:59,720 [DEBUG] on stmt: bool14 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $14pred = call bool14($8compare_op.2, func=bool14, args=(Var($8compare_op.2, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $phi96.0 = $8compare_op.2
2023-08-01 10:03:59,720 [DEBUG] on stmt: branch $14pred, 96, 16
2023-08-01 10:03:59,720 [DEBUG] ==== SSA block rewrite pass on 16
2023-08-01 10:03:59,720 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2926927d0>
2023-08-01 10:03:59,720 [DEBUG] on stmt: $16load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $28load_attr.2 = getattr(value=$16load_global.0, attr=isnan)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $44call.4 = call $28load_attr.2(b, func=$28load_attr.2, args=[Var(b, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: bool54 = global(bool: <class 'bool'>)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $54pred = call bool54($44call.4, func=bool54, args=(Var($44call.4, arrayobj.py:6116),), kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,720 [DEBUG] on stmt: $phi96.0.1 = $44call.4
2023-08-01 10:03:59,720 [DEBUG] on stmt: branch $54pred, 56, 96
2023-08-01 10:03:59,721 [DEBUG] ==== SSA block rewrite pass on 56
2023-08-01 10:03:59,721 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2926927d0>
2023-08-01 10:03:59,721 [DEBUG] on stmt: $56load_global.0 = global(np: <module 'numpy' from '/Users/aleksanderhaack/miniconda3/envs/clipper/lib/python3.11/site-packages/numpy/__init__.py'>)
2023-08-01 10:03:59,721 [DEBUG] on stmt: $68load_attr.2 = getattr(value=$56load_global.0, attr=isnan)
2023-08-01 10:03:59,721 [DEBUG] on stmt: $84call.4 = call $68load_attr.2(a, func=$68load_attr.2, args=[Var(a, arrayobj.py:6111)], kws=(), vararg=None, varkwarg=None, target=None)
2023-08-01 10:03:59,721 [DEBUG] on stmt: $94unary_not.5 = unary(fn=<built-in function not_>, value=$84call.4)
2023-08-01 10:03:59,721 [DEBUG] on stmt: $phi96.0.2 = $94unary_not.5
2023-08-01 10:03:59,721 [DEBUG] on stmt: jump 96
2023-08-01 10:03:59,721 [DEBUG] ==== SSA block rewrite pass on 96
2023-08-01 10:03:59,721 [DEBUG] Running <numba.core.ssa._FixSSAVars object at 0x2926927d0>
2023-08-01 10:03:59,721 [DEBUG] on stmt: $96return_value.1 = cast(value=$phi96.0)
2023-08-01 10:03:59,721 [DEBUG] find_def var='$phi96.0' stmt=$96return_value.1 = cast(value=$phi96.0)
2023-08-01 10:03:59,721 [DEBUG] find_def_from_top label 96
2023-08-01 10:03:59,721 [DEBUG] insert phi node $phi96.0.3 = phi(incoming_values=[], incoming_blocks=[]) at 96
2023-08-01 10:03:59,721 [DEBUG] find_def_from_bottom label 0
2023-08-01 10:03:59,721 [DEBUG] incoming_def $phi96.0 = $8compare_op.2
2023-08-01 10:03:59,721 [DEBUG] find_def_from_bottom label 16
2023-08-01 10:03:59,721 [DEBUG] incoming_def $phi96.0.1 = $44call.4
2023-08-01 10:03:59,721 [DEBUG] find_def_from_bottom label 56
2023-08-01 10:03:59,721 [DEBUG] incoming_def $phi96.0.2 = $94unary_not.5
2023-08-01 10:03:59,721 [DEBUG] replaced with: $96return_value.1 = cast(value=$phi96.0.3)
2023-08-01 10:03:59,721 [DEBUG] on stmt: return $96return_value.1
